/*
Package relayagent is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-common.yang
  - public/release/models/aft/openconfig-aft-ethernet.yang
  - public/release/models/aft/openconfig-aft-ipv4.yang
  - public/release/models/aft/openconfig-aft-ipv6.yang
  - public/release/models/aft/openconfig-aft-mpls.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-pf.yang
  - public/release/models/aft/openconfig-aft-state-synced.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft-types.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-rates.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/local-routing/openconfig-local-routing-network-instance.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/network-instance/openconfig-network-instance-l2.yang
  - public/release/models/network-instance/openconfig-network-instance-static.yang
  - public/release/models/oam/openconfig-cfm-types.yang
  - public/release/models/oam/openconfig-oam.yang
  - public/release/models/oam/openconfig-oam-cfm.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-area.yang
  - public/release/models/ospf/openconfig-ospf-common.yang
  - public/release/models/ospf/openconfig-ospf-global.yang
  - public/release/models/ospf/openconfig-ospf-types.yang
  - public/release/models/ospf/openconfig-ospf.yang
  - public/release/models/ospf/openconfig-ospfv3-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
  - public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
  - public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package relayagent

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// RelayAgentPath represents the /openconfig-relay-agent/relay-agent YANG schema element.
type RelayAgentPath struct {
	*ygnmi.NodePath
}

// RelayAgentPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent YANG schema element.
type RelayAgentPathAny struct {
	*ygnmi.NodePath
}

// Dhcp (container): Top-level container for global relay agent data
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp"
//	Path from root:       "/relay-agent/dhcp"
func (n *RelayAgentPath) Dhcp() *RelayAgent_DhcpPath {
	ps := &RelayAgent_DhcpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Dhcp (container): Top-level container for global relay agent data
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp"
//	Path from root:       "/relay-agent/dhcp"
func (n *RelayAgentPathAny) Dhcp() *RelayAgent_DhcpPathAny {
	ps := &RelayAgent_DhcpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Dhcpv6 (container): Top-level container for global relay agent data
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6"
//	Path from root:       "/relay-agent/dhcpv6"
func (n *RelayAgentPath) Dhcpv6() *RelayAgent_Dhcpv6Path {
	ps := &RelayAgent_Dhcpv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Dhcpv6 (container): Top-level container for global relay agent data
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6"
//	Path from root:       "/relay-agent/dhcpv6"
func (n *RelayAgentPathAny) Dhcpv6() *RelayAgent_Dhcpv6PathAny {
	ps := &RelayAgent_Dhcpv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgentPath) State() ygnmi.SingletonQuery[*oc.RelayAgent] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent](
		"RelayAgent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgentPathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent](
		"RelayAgent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgentPath) Config() ygnmi.ConfigQuery[*oc.RelayAgent] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent](
		"RelayAgent",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgentPathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent](
		"RelayAgent",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_EnableRelayAgentPath represents the /openconfig-relay-agent/relay-agent/dhcp/state/enable-relay-agent YANG schema element.
type RelayAgent_Dhcp_EnableRelayAgentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_EnableRelayAgentPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/state/enable-relay-agent YANG schema element.
type RelayAgent_Dhcp_EnableRelayAgentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcp/state/enable-relay-agent"
func (n *RelayAgent_Dhcp_EnableRelayAgentPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RelayAgent_Dhcp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-relay-agent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp).EnableRelayAgent
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcp/state/enable-relay-agent"
func (n *RelayAgent_Dhcp_EnableRelayAgentPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-relay-agent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp).EnableRelayAgent
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcp/config/enable-relay-agent"
func (n *RelayAgent_Dhcp_EnableRelayAgentPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RelayAgent_Dhcp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-relay-agent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp).EnableRelayAgent
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcp/config/enable-relay-agent"
func (n *RelayAgent_Dhcp_EnableRelayAgentPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-relay-agent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp).EnableRelayAgent
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_DhcpPath represents the /openconfig-relay-agent/relay-agent/dhcp YANG schema element.
type RelayAgent_DhcpPath struct {
	*ygnmi.NodePath
}

// RelayAgent_DhcpPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp YANG schema element.
type RelayAgent_DhcpPathAny struct {
	*ygnmi.NodePath
}

// AgentInformationOption (container): Top-level container for relay agent information option
// data
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "agent-information-option"
//	Path from root:       "/relay-agent/dhcp/agent-information-option"
func (n *RelayAgent_DhcpPath) AgentInformationOption() *RelayAgent_Dhcp_AgentInformationOptionPath {
	ps := &RelayAgent_Dhcp_AgentInformationOptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"agent-information-option"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AgentInformationOption (container): Top-level container for relay agent information option
// data
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "agent-information-option"
//	Path from root:       "/relay-agent/dhcp/agent-information-option"
func (n *RelayAgent_DhcpPathAny) AgentInformationOption() *RelayAgent_Dhcp_AgentInformationOptionPathAny {
	ps := &RelayAgent_Dhcp_AgentInformationOptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"agent-information-option"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EnableRelayAgent (leaf): Enables DHCP/BOOTP relay agent on all interfaces
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcp/*/enable-relay-agent"
func (n *RelayAgent_DhcpPath) EnableRelayAgent() *RelayAgent_Dhcp_EnableRelayAgentPath {
	ps := &RelayAgent_Dhcp_EnableRelayAgentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-relay-agent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableRelayAgent (leaf): Enables DHCP/BOOTP relay agent on all interfaces
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcp/*/enable-relay-agent"
func (n *RelayAgent_DhcpPathAny) EnableRelayAgent() *RelayAgent_Dhcp_EnableRelayAgentPathAny {
	ps := &RelayAgent_Dhcp_EnableRelayAgentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-relay-agent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceAny (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface"
func (n *RelayAgent_DhcpPath) InterfaceAny() *RelayAgent_Dhcp_InterfacePathAny {
	ps := &RelayAgent_Dhcp_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface"
func (n *RelayAgent_DhcpPathAny) InterfaceAny() *RelayAgent_Dhcp_InterfacePathAny {
	ps := &RelayAgent_Dhcp_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface"
//
//	Id: string
func (n *RelayAgent_DhcpPath) Interface(Id string) *RelayAgent_Dhcp_InterfacePath {
	ps := &RelayAgent_Dhcp_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface"
//
//	Id: string
func (n *RelayAgent_DhcpPathAny) Interface(Id string) *RelayAgent_Dhcp_InterfacePathAny {
	ps := &RelayAgent_Dhcp_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface"
func (n *RelayAgent_DhcpPath) InterfaceMap() *RelayAgent_Dhcp_InterfacePathMap {
	ps := &RelayAgent_Dhcp_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface"
func (n *RelayAgent_DhcpPathAny) InterfaceMap() *RelayAgent_Dhcp_InterfacePathMapAny {
	ps := &RelayAgent_Dhcp_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_DhcpPath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcp] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcp](
		"RelayAgent_Dhcp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_DhcpPathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp](
		"RelayAgent_Dhcp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_DhcpPath) Config() ygnmi.ConfigQuery[*oc.RelayAgent_Dhcp] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent_Dhcp](
		"RelayAgent_Dhcp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_DhcpPathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp](
		"RelayAgent_Dhcp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_AgentInformationOption_EnablePath represents the /openconfig-relay-agent/relay-agent/dhcp/agent-information-option/state/enable YANG schema element.
type RelayAgent_Dhcp_AgentInformationOption_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_AgentInformationOption_EnablePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/agent-information-option/state/enable YANG schema element.
type RelayAgent_Dhcp_AgentInformationOption_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable"
//	Path from root:       "/relay-agent/dhcp/agent-information-option/state/enable"
func (n *RelayAgent_Dhcp_AgentInformationOption_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RelayAgent_Dhcp_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_AgentInformationOption).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable"
//	Path from root:       "/relay-agent/dhcp/agent-information-option/state/enable"
func (n *RelayAgent_Dhcp_AgentInformationOption_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcp_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_AgentInformationOption).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable"
//	Path from root:       "/relay-agent/dhcp/agent-information-option/config/enable"
func (n *RelayAgent_Dhcp_AgentInformationOption_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RelayAgent_Dhcp_AgentInformationOption",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_AgentInformationOption).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable"
//	Path from root:       "/relay-agent/dhcp/agent-information-option/config/enable"
func (n *RelayAgent_Dhcp_AgentInformationOption_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcp_AgentInformationOption",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_AgentInformationOption).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_AgentInformationOptionPath represents the /openconfig-relay-agent/relay-agent/dhcp/agent-information-option YANG schema element.
type RelayAgent_Dhcp_AgentInformationOptionPath struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcp_AgentInformationOptionPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/agent-information-option YANG schema element.
type RelayAgent_Dhcp_AgentInformationOptionPathAny struct {
	*ygnmi.NodePath
}

// Enable (leaf): Enable sending the DHCP option for Relay Agent information
// -- option 82.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable"
//	Path from root:       "/relay-agent/dhcp/agent-information-option/*/enable"
func (n *RelayAgent_Dhcp_AgentInformationOptionPath) Enable() *RelayAgent_Dhcp_AgentInformationOption_EnablePath {
	ps := &RelayAgent_Dhcp_AgentInformationOption_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enable sending the DHCP option for Relay Agent information
// -- option 82.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable"
//	Path from root:       "/relay-agent/dhcp/agent-information-option/*/enable"
func (n *RelayAgent_Dhcp_AgentInformationOptionPathAny) Enable() *RelayAgent_Dhcp_AgentInformationOption_EnablePathAny {
	ps := &RelayAgent_Dhcp_AgentInformationOption_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_AgentInformationOptionPath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcp_AgentInformationOption] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcp_AgentInformationOption](
		"RelayAgent_Dhcp_AgentInformationOption",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_AgentInformationOptionPathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp_AgentInformationOption] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp_AgentInformationOption](
		"RelayAgent_Dhcp_AgentInformationOption",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_AgentInformationOptionPath) Config() ygnmi.ConfigQuery[*oc.RelayAgent_Dhcp_AgentInformationOption] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent_Dhcp_AgentInformationOption](
		"RelayAgent_Dhcp_AgentInformationOption",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_AgentInformationOptionPathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp_AgentInformationOption] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp_AgentInformationOption](
		"RelayAgent_Dhcp_AgentInformationOption",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_EnablePath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/enable YANG schema element.
type RelayAgent_Dhcp_Interface_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_EnablePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/enable YANG schema element.
type RelayAgent_Dhcp_Interface_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/enable"
func (n *RelayAgent_Dhcp_Interface_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RelayAgent_Dhcp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/enable"
func (n *RelayAgent_Dhcp_Interface_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/config/enable"
func (n *RelayAgent_Dhcp_Interface_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RelayAgent_Dhcp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/config/enable"
func (n *RelayAgent_Dhcp_Interface_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_HelperAddressPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/helper-address YANG schema element.
type RelayAgent_Dhcp_Interface_HelperAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_HelperAddressPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/helper-address YANG schema element.
type RelayAgent_Dhcp_Interface_HelperAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/helper-address"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/helper-address"
func (n *RelayAgent_Dhcp_Interface_HelperAddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"RelayAgent_Dhcp_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "helper-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).HelperAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/helper-address"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/helper-address"
func (n *RelayAgent_Dhcp_Interface_HelperAddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RelayAgent_Dhcp_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "helper-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).HelperAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/helper-address"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/config/helper-address"
func (n *RelayAgent_Dhcp_Interface_HelperAddressPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"RelayAgent_Dhcp_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "helper-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).HelperAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/helper-address"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/config/helper-address"
func (n *RelayAgent_Dhcp_Interface_HelperAddressPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RelayAgent_Dhcp_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "helper-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).HelperAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_IdPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/id YANG schema element.
type RelayAgent_Dhcp_Interface_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_IdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/id YANG schema element.
type RelayAgent_Dhcp_Interface_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/id"
func (n *RelayAgent_Dhcp_Interface_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/id"
func (n *RelayAgent_Dhcp_Interface_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/config/id"
func (n *RelayAgent_Dhcp_Interface_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RelayAgent_Dhcp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/config/id"
func (n *RelayAgent_Dhcp_Interface_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_InterfacePath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface YANG schema element.
type RelayAgent_Dhcp_InterfacePath struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcp_InterfacePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface YANG schema element.
type RelayAgent_Dhcp_InterfacePathAny struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcp_InterfacePathMap represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface YANG schema element.
type RelayAgent_Dhcp_InterfacePathMap struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcp_InterfacePathMapAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface YANG schema element.
type RelayAgent_Dhcp_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// AgentInformationOption (container): Top-level container for relay agent information option
// data
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "agent-information-option"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option"
func (n *RelayAgent_Dhcp_InterfacePath) AgentInformationOption() *RelayAgent_Dhcp_Interface_AgentInformationOptionPath {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"agent-information-option"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AgentInformationOption (container): Top-level container for relay agent information option
// data
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "agent-information-option"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option"
func (n *RelayAgent_Dhcp_InterfacePathAny) AgentInformationOption() *RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"agent-information-option"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters and statistics for relay agent operation.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/counters"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters"
func (n *RelayAgent_Dhcp_InterfacePath) Counters() *RelayAgent_Dhcp_Interface_CountersPath {
	ps := &RelayAgent_Dhcp_Interface_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters and statistics for relay agent operation.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/counters"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters"
func (n *RelayAgent_Dhcp_InterfacePathAny) Counters() *RelayAgent_Dhcp_Interface_CountersPathAny {
	ps := &RelayAgent_Dhcp_Interface_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enable (leaf): Enables the relay agent on the referenced interface.
// At least one helper address should also be configured
// for forwarding requested.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/*/enable"
func (n *RelayAgent_Dhcp_InterfacePath) Enable() *RelayAgent_Dhcp_Interface_EnablePath {
	ps := &RelayAgent_Dhcp_Interface_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enables the relay agent on the referenced interface.
// At least one helper address should also be configured
// for forwarding requested.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/*/enable"
func (n *RelayAgent_Dhcp_InterfacePathAny) Enable() *RelayAgent_Dhcp_Interface_EnablePathAny {
	ps := &RelayAgent_Dhcp_Interface_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelperAddress (leaf-list): List of IPv4 or IPv6 addresses of DHCP servers to which the
// relay agent should forward DHCPv4 requests.  The relay agent is
// expected to forward DHCPv4/BOOTP requests to all listed
// server addresses when DHCPv4 relaying is enabled globally, or
// on the interface.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/helper-address"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/*/helper-address"
func (n *RelayAgent_Dhcp_InterfacePath) HelperAddress() *RelayAgent_Dhcp_Interface_HelperAddressPath {
	ps := &RelayAgent_Dhcp_Interface_HelperAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "helper-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelperAddress (leaf-list): List of IPv4 or IPv6 addresses of DHCP servers to which the
// relay agent should forward DHCPv4 requests.  The relay agent is
// expected to forward DHCPv4/BOOTP requests to all listed
// server addresses when DHCPv4 relaying is enabled globally, or
// on the interface.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/helper-address"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/*/helper-address"
func (n *RelayAgent_Dhcp_InterfacePathAny) HelperAddress() *RelayAgent_Dhcp_Interface_HelperAddressPathAny {
	ps := &RelayAgent_Dhcp_Interface_HelperAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "helper-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Name of the interface on which relay agent is active
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/*/id"
func (n *RelayAgent_Dhcp_InterfacePath) Id() *RelayAgent_Dhcp_Interface_IdPath {
	ps := &RelayAgent_Dhcp_Interface_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Name of the interface on which relay agent is active
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/*/id"
func (n *RelayAgent_Dhcp_InterfacePathAny) Id() *RelayAgent_Dhcp_Interface_IdPathAny {
	ps := &RelayAgent_Dhcp_Interface_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interface-ref"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref"
func (n *RelayAgent_Dhcp_InterfacePath) InterfaceRef() *RelayAgent_Dhcp_Interface_InterfaceRefPath {
	ps := &RelayAgent_Dhcp_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interface-ref"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref"
func (n *RelayAgent_Dhcp_InterfacePathAny) InterfaceRef() *RelayAgent_Dhcp_Interface_InterfaceRefPathAny {
	ps := &RelayAgent_Dhcp_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_InterfacePath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcp_Interface] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcp_Interface](
		"RelayAgent_Dhcp_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp_Interface] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp_Interface](
		"RelayAgent_Dhcp_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_InterfacePath) Config() ygnmi.ConfigQuery[*oc.RelayAgent_Dhcp_Interface] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent_Dhcp_Interface](
		"RelayAgent_Dhcp_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp_Interface] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp_Interface](
		"RelayAgent_Dhcp_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.RelayAgent_Dhcp_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.RelayAgent_Dhcp_Interface](
		"RelayAgent_Dhcp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RelayAgent_Dhcp_Interface, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-relay-agent:interfaces"},
			PostRelPath: []string{"openconfig-relay-agent:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.RelayAgent_Dhcp_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RelayAgent_Dhcp_Interface](
		"RelayAgent_Dhcp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RelayAgent_Dhcp_Interface, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-relay-agent:interfaces"},
			PostRelPath: []string{"openconfig-relay-agent:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.RelayAgent_Dhcp_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.RelayAgent_Dhcp_Interface](
		"RelayAgent_Dhcp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RelayAgent_Dhcp_Interface, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-relay-agent:interfaces"},
			PostRelPath: []string{"openconfig-relay-agent:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.RelayAgent_Dhcp_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RelayAgent_Dhcp_Interface](
		"RelayAgent_Dhcp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RelayAgent_Dhcp_Interface, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-relay-agent:interfaces"},
			PostRelPath: []string{"openconfig-relay-agent:interface"},
		},
	)
}

// RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option/state/circuit-id YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option/state/circuit-id YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/circuit-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/circuit-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "circuit-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).CircuitId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/circuit-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/circuit-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "circuit-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).CircuitId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/circuit-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/config/circuit-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "circuit-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).CircuitId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/circuit-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/config/circuit-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "circuit-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).CircuitId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option/state/enable YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option/state/enable YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/enable"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/enable"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/config/enable"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/config/enable"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option/state/remote-id YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option/state/remote-id YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/remote-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/remote-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).RemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/remote-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/remote-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).RemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/remote-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/config/remote-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).RemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/remote-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/config/remote-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).RemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_AgentInformationOption_SentCircuitIdPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-circuit-id YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption_SentCircuitIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_AgentInformationOption_SentCircuitIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-circuit-id YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption_SentCircuitIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-circuit-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-circuit-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_SentCircuitIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent-circuit-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).SentCircuitId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-circuit-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-circuit-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_SentCircuitIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent-circuit-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).SentCircuitId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_AgentInformationOption_SentRemoteIdPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-remote-id YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption_SentRemoteIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_AgentInformationOption_SentRemoteIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-remote-id YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption_SentRemoteIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-remote-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-remote-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_SentRemoteIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).SentRemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-remote-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-remote-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_SentRemoteIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).SentRemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_AgentInformationOptionPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOptionPath struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny struct {
	*ygnmi.NodePath
}

// CircuitId (leaf): Encodes an agent-local identifier of the circuit from which
// a DHCP client-to-server packet was received.  It is intended
// for use by agents in relaying DHCP responses back to the
// proper circuit.  The circuit id is an opaque value
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/circuit-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/*/circuit-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPath) CircuitId() *RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPath {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "circuit-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CircuitId (leaf): Encodes an agent-local identifier of the circuit from which
// a DHCP client-to-server packet was received.  It is intended
// for use by agents in relaying DHCP responses back to the
// proper circuit.  The circuit id is an opaque value
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/circuit-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/*/circuit-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny) CircuitId() *RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPathAny {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "circuit-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enable sending the DHCP option for Relay Agent information
// -- option 82.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/*/enable"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPath) Enable() *RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePath {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enable sending the DHCP option for Relay Agent information
// -- option 82.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/*/enable"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny) Enable() *RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePathAny {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteId (leaf): Provides a mechanism to identify the remote host end of
// the circuit.  The remote-id should be thought of as an
// opaque value, but must be globally unique.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/remote-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/*/remote-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPath) RemoteId() *RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPath {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteId (leaf): Provides a mechanism to identify the remote host end of
// the circuit.  The remote-id should be thought of as an
// opaque value, but must be globally unique.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/remote-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/*/remote-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny) RemoteId() *RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPathAny {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SentCircuitId (leaf): Reports the circuit-id sent by the system to the DHCP
// server.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-circuit-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-circuit-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPath) SentCircuitId() *RelayAgent_Dhcp_Interface_AgentInformationOption_SentCircuitIdPath {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOption_SentCircuitIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent-circuit-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SentCircuitId (leaf): Reports the circuit-id sent by the system to the DHCP
// server.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-circuit-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-circuit-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny) SentCircuitId() *RelayAgent_Dhcp_Interface_AgentInformationOption_SentCircuitIdPathAny {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOption_SentCircuitIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent-circuit-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SentRemoteId (leaf): Reports the remote-id value sent by the system to the DHCP
// server
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-remote-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-remote-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPath) SentRemoteId() *RelayAgent_Dhcp_Interface_AgentInformationOption_SentRemoteIdPath {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOption_SentRemoteIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent-remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SentRemoteId (leaf): Reports the remote-id value sent by the system to the DHCP
// server
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-remote-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-remote-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny) SentRemoteId() *RelayAgent_Dhcp_Interface_AgentInformationOption_SentRemoteIdPathAny {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOption_SentRemoteIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent-remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcp_Interface_AgentInformationOption] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcp_Interface_AgentInformationOption](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp_Interface_AgentInformationOption] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp_Interface_AgentInformationOption](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPath) Config() ygnmi.ConfigQuery[*oc.RelayAgent_Dhcp_Interface_AgentInformationOption] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent_Dhcp_Interface_AgentInformationOption](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp_Interface_AgentInformationOption] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp_Interface_AgentInformationOption](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_Counters_BootreplySentPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/bootreply-sent YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_BootreplySentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_Counters_BootreplySentPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/bootreply-sent YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_BootreplySentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootreply-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootreply-sent"
func (n *RelayAgent_Dhcp_Interface_Counters_BootreplySentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bootreply-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).BootreplySent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootreply-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootreply-sent"
func (n *RelayAgent_Dhcp_Interface_Counters_BootreplySentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bootreply-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).BootreplySent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_Counters_BootrequestReceivedPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-received YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_BootrequestReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_Counters_BootrequestReceivedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-received YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_BootrequestReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootrequest-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-received"
func (n *RelayAgent_Dhcp_Interface_Counters_BootrequestReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bootrequest-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).BootrequestReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootrequest-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-received"
func (n *RelayAgent_Dhcp_Interface_Counters_BootrequestReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bootrequest-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).BootrequestReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_Counters_BootrequestSentPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-sent YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_BootrequestSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_Counters_BootrequestSentPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-sent YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_BootrequestSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootrequest-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-sent"
func (n *RelayAgent_Dhcp_Interface_Counters_BootrequestSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bootrequest-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).BootrequestSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootrequest-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-sent"
func (n *RelayAgent_Dhcp_Interface_Counters_BootrequestSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bootrequest-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).BootrequestSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_Counters_DhcpAckSentPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-ack-sent YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_DhcpAckSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_Counters_DhcpAckSentPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-ack-sent YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_DhcpAckSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-ack-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-ack-sent"
func (n *RelayAgent_Dhcp_Interface_Counters_DhcpAckSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcp-ack-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).DhcpAckSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-ack-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-ack-sent"
func (n *RelayAgent_Dhcp_Interface_Counters_DhcpAckSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcp-ack-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).DhcpAckSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_Counters_DhcpDeclineReceivedPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-decline-received YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_DhcpDeclineReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_Counters_DhcpDeclineReceivedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-decline-received YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_DhcpDeclineReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-decline-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-decline-received"
func (n *RelayAgent_Dhcp_Interface_Counters_DhcpDeclineReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcp-decline-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).DhcpDeclineReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-decline-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-decline-received"
func (n *RelayAgent_Dhcp_Interface_Counters_DhcpDeclineReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcp-decline-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).DhcpDeclineReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_Counters_DhcpDiscoverReceivedPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-discover-received YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_DhcpDiscoverReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_Counters_DhcpDiscoverReceivedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-discover-received YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_DhcpDiscoverReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-discover-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-discover-received"
func (n *RelayAgent_Dhcp_Interface_Counters_DhcpDiscoverReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcp-discover-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).DhcpDiscoverReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-discover-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-discover-received"
func (n *RelayAgent_Dhcp_Interface_Counters_DhcpDiscoverReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcp-discover-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).DhcpDiscoverReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_Counters_DhcpInformReceivedPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-inform-received YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_DhcpInformReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_Counters_DhcpInformReceivedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-inform-received YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_DhcpInformReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-inform-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-inform-received"
func (n *RelayAgent_Dhcp_Interface_Counters_DhcpInformReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcp-inform-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).DhcpInformReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-inform-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-inform-received"
func (n *RelayAgent_Dhcp_Interface_Counters_DhcpInformReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcp-inform-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).DhcpInformReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_Counters_DhcpNackSentPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-nack-sent YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_DhcpNackSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_Counters_DhcpNackSentPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-nack-sent YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_DhcpNackSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-nack-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-nack-sent"
func (n *RelayAgent_Dhcp_Interface_Counters_DhcpNackSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcp-nack-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).DhcpNackSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-nack-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-nack-sent"
func (n *RelayAgent_Dhcp_Interface_Counters_DhcpNackSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcp-nack-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).DhcpNackSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_Counters_DhcpOfferSentPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-offer-sent YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_DhcpOfferSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_Counters_DhcpOfferSentPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-offer-sent YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_DhcpOfferSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-offer-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-offer-sent"
func (n *RelayAgent_Dhcp_Interface_Counters_DhcpOfferSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcp-offer-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).DhcpOfferSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-offer-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-offer-sent"
func (n *RelayAgent_Dhcp_Interface_Counters_DhcpOfferSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcp-offer-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).DhcpOfferSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_Counters_DhcpReleaseReceivedPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-release-received YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_DhcpReleaseReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_Counters_DhcpReleaseReceivedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-release-received YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_DhcpReleaseReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-release-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-release-received"
func (n *RelayAgent_Dhcp_Interface_Counters_DhcpReleaseReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcp-release-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).DhcpReleaseReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-release-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-release-received"
func (n *RelayAgent_Dhcp_Interface_Counters_DhcpReleaseReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcp-release-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).DhcpReleaseReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_Counters_DhcpRequestReceivedPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-request-received YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_DhcpRequestReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_Counters_DhcpRequestReceivedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-request-received YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_DhcpRequestReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-request-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-request-received"
func (n *RelayAgent_Dhcp_Interface_Counters_DhcpRequestReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcp-request-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).DhcpRequestReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-request-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-request-received"
func (n *RelayAgent_Dhcp_Interface_Counters_DhcpRequestReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcp-request-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).DhcpRequestReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_Counters_InvalidOpcodePath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/invalid-opcode YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_InvalidOpcodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_Counters_InvalidOpcodePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/invalid-opcode YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_InvalidOpcodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-opcode"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/invalid-opcode"
func (n *RelayAgent_Dhcp_Interface_Counters_InvalidOpcodePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"invalid-opcode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).InvalidOpcode
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-opcode"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/invalid-opcode"
func (n *RelayAgent_Dhcp_Interface_Counters_InvalidOpcodePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"invalid-opcode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).InvalidOpcode
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_Counters_InvalidOptionsPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/invalid-options YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_InvalidOptionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_Counters_InvalidOptionsPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/invalid-options YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_InvalidOptionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-options"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/invalid-options"
func (n *RelayAgent_Dhcp_Interface_Counters_InvalidOptionsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"invalid-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).InvalidOptions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-options"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/invalid-options"
func (n *RelayAgent_Dhcp_Interface_Counters_InvalidOptionsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"invalid-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).InvalidOptions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_Counters_TotalDroppedPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/total-dropped YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_TotalDroppedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_Counters_TotalDroppedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/total-dropped YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_TotalDroppedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "total-dropped"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/total-dropped"
func (n *RelayAgent_Dhcp_Interface_Counters_TotalDroppedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).TotalDropped
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "total-dropped"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/total-dropped"
func (n *RelayAgent_Dhcp_Interface_Counters_TotalDroppedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).TotalDropped
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_CountersPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters YANG schema element.
type RelayAgent_Dhcp_Interface_CountersPath struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcp_Interface_CountersPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters YANG schema element.
type RelayAgent_Dhcp_Interface_CountersPathAny struct {
	*ygnmi.NodePath
}

// BootreplySent (leaf): BOOTREPLY messages forwarded by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootreply-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootreply-sent"
func (n *RelayAgent_Dhcp_Interface_CountersPath) BootreplySent() *RelayAgent_Dhcp_Interface_Counters_BootreplySentPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_BootreplySentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bootreply-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BootreplySent (leaf): BOOTREPLY messages forwarded by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootreply-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootreply-sent"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) BootreplySent() *RelayAgent_Dhcp_Interface_Counters_BootreplySentPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_BootreplySentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bootreply-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BootrequestReceived (leaf): BOOTREQUEST messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootrequest-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-received"
func (n *RelayAgent_Dhcp_Interface_CountersPath) BootrequestReceived() *RelayAgent_Dhcp_Interface_Counters_BootrequestReceivedPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_BootrequestReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bootrequest-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BootrequestReceived (leaf): BOOTREQUEST messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootrequest-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-received"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) BootrequestReceived() *RelayAgent_Dhcp_Interface_Counters_BootrequestReceivedPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_BootrequestReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bootrequest-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BootrequestSent (leaf): BOOTREQUEST messages forwarded by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootrequest-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-sent"
func (n *RelayAgent_Dhcp_Interface_CountersPath) BootrequestSent() *RelayAgent_Dhcp_Interface_Counters_BootrequestSentPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_BootrequestSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bootrequest-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BootrequestSent (leaf): BOOTREQUEST messages forwarded by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootrequest-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-sent"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) BootrequestSent() *RelayAgent_Dhcp_Interface_Counters_BootrequestSentPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_BootrequestSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bootrequest-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpAckSent (leaf): DHCP ACK messages sent by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-ack-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-ack-sent"
func (n *RelayAgent_Dhcp_Interface_CountersPath) DhcpAckSent() *RelayAgent_Dhcp_Interface_Counters_DhcpAckSentPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpAckSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-ack-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpAckSent (leaf): DHCP ACK messages sent by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-ack-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-ack-sent"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) DhcpAckSent() *RelayAgent_Dhcp_Interface_Counters_DhcpAckSentPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpAckSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-ack-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpDeclineReceived (leaf): DHCP DECLINE messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-decline-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-decline-received"
func (n *RelayAgent_Dhcp_Interface_CountersPath) DhcpDeclineReceived() *RelayAgent_Dhcp_Interface_Counters_DhcpDeclineReceivedPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpDeclineReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-decline-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpDeclineReceived (leaf): DHCP DECLINE messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-decline-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-decline-received"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) DhcpDeclineReceived() *RelayAgent_Dhcp_Interface_Counters_DhcpDeclineReceivedPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpDeclineReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-decline-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpDiscoverReceived (leaf): DHCP DISCOVER messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-discover-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-discover-received"
func (n *RelayAgent_Dhcp_Interface_CountersPath) DhcpDiscoverReceived() *RelayAgent_Dhcp_Interface_Counters_DhcpDiscoverReceivedPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpDiscoverReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-discover-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpDiscoverReceived (leaf): DHCP DISCOVER messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-discover-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-discover-received"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) DhcpDiscoverReceived() *RelayAgent_Dhcp_Interface_Counters_DhcpDiscoverReceivedPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpDiscoverReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-discover-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpInformReceived (leaf): DHCP INFORM messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-inform-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-inform-received"
func (n *RelayAgent_Dhcp_Interface_CountersPath) DhcpInformReceived() *RelayAgent_Dhcp_Interface_Counters_DhcpInformReceivedPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpInformReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-inform-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpInformReceived (leaf): DHCP INFORM messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-inform-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-inform-received"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) DhcpInformReceived() *RelayAgent_Dhcp_Interface_Counters_DhcpInformReceivedPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpInformReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-inform-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpNackSent (leaf): DHCP NACK messages sent by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-nack-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-nack-sent"
func (n *RelayAgent_Dhcp_Interface_CountersPath) DhcpNackSent() *RelayAgent_Dhcp_Interface_Counters_DhcpNackSentPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpNackSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-nack-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpNackSent (leaf): DHCP NACK messages sent by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-nack-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-nack-sent"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) DhcpNackSent() *RelayAgent_Dhcp_Interface_Counters_DhcpNackSentPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpNackSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-nack-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpOfferSent (leaf): DHCP OFFER messages sent by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-offer-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-offer-sent"
func (n *RelayAgent_Dhcp_Interface_CountersPath) DhcpOfferSent() *RelayAgent_Dhcp_Interface_Counters_DhcpOfferSentPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpOfferSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-offer-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpOfferSent (leaf): DHCP OFFER messages sent by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-offer-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-offer-sent"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) DhcpOfferSent() *RelayAgent_Dhcp_Interface_Counters_DhcpOfferSentPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpOfferSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-offer-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpReleaseReceived (leaf): DHCP RELEASE messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-release-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-release-received"
func (n *RelayAgent_Dhcp_Interface_CountersPath) DhcpReleaseReceived() *RelayAgent_Dhcp_Interface_Counters_DhcpReleaseReceivedPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpReleaseReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-release-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpReleaseReceived (leaf): DHCP RELEASE messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-release-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-release-received"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) DhcpReleaseReceived() *RelayAgent_Dhcp_Interface_Counters_DhcpReleaseReceivedPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpReleaseReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-release-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpRequestReceived (leaf): DHCP REQUEST messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-request-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-request-received"
func (n *RelayAgent_Dhcp_Interface_CountersPath) DhcpRequestReceived() *RelayAgent_Dhcp_Interface_Counters_DhcpRequestReceivedPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpRequestReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-request-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpRequestReceived (leaf): DHCP REQUEST messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-request-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-request-received"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) DhcpRequestReceived() *RelayAgent_Dhcp_Interface_Counters_DhcpRequestReceivedPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpRequestReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-request-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidOpcode (leaf): Number of DHCP packets dropped due to an invalid opcode
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-opcode"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/invalid-opcode"
func (n *RelayAgent_Dhcp_Interface_CountersPath) InvalidOpcode() *RelayAgent_Dhcp_Interface_Counters_InvalidOpcodePath {
	ps := &RelayAgent_Dhcp_Interface_Counters_InvalidOpcodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"invalid-opcode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidOpcode (leaf): Number of DHCP packets dropped due to an invalid opcode
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-opcode"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/invalid-opcode"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) InvalidOpcode() *RelayAgent_Dhcp_Interface_Counters_InvalidOpcodePathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_InvalidOpcodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"invalid-opcode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidOptions (leaf): Number of DHCP packets dropped due to an invalid option
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-options"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/invalid-options"
func (n *RelayAgent_Dhcp_Interface_CountersPath) InvalidOptions() *RelayAgent_Dhcp_Interface_Counters_InvalidOptionsPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_InvalidOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"invalid-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidOptions (leaf): Number of DHCP packets dropped due to an invalid option
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-options"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/invalid-options"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) InvalidOptions() *RelayAgent_Dhcp_Interface_Counters_InvalidOptionsPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_InvalidOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"invalid-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalDropped (leaf): Total number of DHCP packets dropped by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "total-dropped"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/total-dropped"
func (n *RelayAgent_Dhcp_Interface_CountersPath) TotalDropped() *RelayAgent_Dhcp_Interface_Counters_TotalDroppedPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_TotalDroppedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalDropped (leaf): Total number of DHCP packets dropped by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "total-dropped"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/total-dropped"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) TotalDropped() *RelayAgent_Dhcp_Interface_Counters_TotalDroppedPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_TotalDroppedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_Interface_CountersPath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcp_Interface_Counters] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcp_Interface_Counters](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp_Interface_Counters] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp_Interface_Counters](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/interface-ref/state/interface YANG schema element.
type RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/interface-ref/state/interface YANG schema element.
type RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/state/interface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/state/interface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/config/interface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/config/interface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/state/subinterface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/state/subinterface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/config/subinterface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/config/subinterface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_InterfaceRefPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/interface-ref YANG schema element.
type RelayAgent_Dhcp_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcp_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/interface-ref YANG schema element.
type RelayAgent_Dhcp_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/*/interface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRefPath) Interface() *RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePath {
	ps := &RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/*/interface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRefPathAny) Interface() *RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePathAny {
	ps := &RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is required, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/*/subinterface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRefPath) Subinterface() *RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePath {
	ps := &RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is required, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/*/subinterface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRefPathAny) Subinterface() *RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcp_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcp_Interface_InterfaceRef](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp_Interface_InterfaceRef](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.RelayAgent_Dhcp_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent_Dhcp_Interface_InterfaceRef](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp_Interface_InterfaceRef](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_EnableRelayAgentPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/state/enable-relay-agent YANG schema element.
type RelayAgent_Dhcpv6_EnableRelayAgentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_EnableRelayAgentPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/state/enable-relay-agent YANG schema element.
type RelayAgent_Dhcpv6_EnableRelayAgentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcpv6/state/enable-relay-agent"
func (n *RelayAgent_Dhcpv6_EnableRelayAgentPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RelayAgent_Dhcpv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-relay-agent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6).EnableRelayAgent
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcpv6/state/enable-relay-agent"
func (n *RelayAgent_Dhcpv6_EnableRelayAgentPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-relay-agent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6).EnableRelayAgent
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcpv6/config/enable-relay-agent"
func (n *RelayAgent_Dhcpv6_EnableRelayAgentPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RelayAgent_Dhcpv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-relay-agent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6).EnableRelayAgent
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcpv6/config/enable-relay-agent"
func (n *RelayAgent_Dhcpv6_EnableRelayAgentPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-relay-agent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6).EnableRelayAgent
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6Path represents the /openconfig-relay-agent/relay-agent/dhcpv6 YANG schema element.
type RelayAgent_Dhcpv6Path struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcpv6PathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6 YANG schema element.
type RelayAgent_Dhcpv6PathAny struct {
	*ygnmi.NodePath
}

// EnableRelayAgent (leaf): Enables DHCP/BOOTP relay agent on all interfaces
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcpv6/*/enable-relay-agent"
func (n *RelayAgent_Dhcpv6Path) EnableRelayAgent() *RelayAgent_Dhcpv6_EnableRelayAgentPath {
	ps := &RelayAgent_Dhcpv6_EnableRelayAgentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-relay-agent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableRelayAgent (leaf): Enables DHCP/BOOTP relay agent on all interfaces
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcpv6/*/enable-relay-agent"
func (n *RelayAgent_Dhcpv6PathAny) EnableRelayAgent() *RelayAgent_Dhcpv6_EnableRelayAgentPathAny {
	ps := &RelayAgent_Dhcpv6_EnableRelayAgentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-relay-agent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceAny (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface"
func (n *RelayAgent_Dhcpv6Path) InterfaceAny() *RelayAgent_Dhcpv6_InterfacePathAny {
	ps := &RelayAgent_Dhcpv6_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface"
func (n *RelayAgent_Dhcpv6PathAny) InterfaceAny() *RelayAgent_Dhcpv6_InterfacePathAny {
	ps := &RelayAgent_Dhcpv6_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface"
//
//	Id: string
func (n *RelayAgent_Dhcpv6Path) Interface(Id string) *RelayAgent_Dhcpv6_InterfacePath {
	ps := &RelayAgent_Dhcpv6_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface"
//
//	Id: string
func (n *RelayAgent_Dhcpv6PathAny) Interface(Id string) *RelayAgent_Dhcpv6_InterfacePathAny {
	ps := &RelayAgent_Dhcpv6_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface"
func (n *RelayAgent_Dhcpv6Path) InterfaceMap() *RelayAgent_Dhcpv6_InterfacePathMap {
	ps := &RelayAgent_Dhcpv6_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface"
func (n *RelayAgent_Dhcpv6PathAny) InterfaceMap() *RelayAgent_Dhcpv6_InterfacePathMapAny {
	ps := &RelayAgent_Dhcpv6_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Options (container): Top-level container for DHCPv6 agent options on interfaces
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "options"
//	Path from root:       "/relay-agent/dhcpv6/options"
func (n *RelayAgent_Dhcpv6Path) Options() *RelayAgent_Dhcpv6_OptionsPath {
	ps := &RelayAgent_Dhcpv6_OptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"options"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Options (container): Top-level container for DHCPv6 agent options on interfaces
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "options"
//	Path from root:       "/relay-agent/dhcpv6/options"
func (n *RelayAgent_Dhcpv6PathAny) Options() *RelayAgent_Dhcpv6_OptionsPathAny {
	ps := &RelayAgent_Dhcpv6_OptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"options"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6Path) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcpv6] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcpv6](
		"RelayAgent_Dhcpv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6PathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6](
		"RelayAgent_Dhcpv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6Path) Config() ygnmi.ConfigQuery[*oc.RelayAgent_Dhcpv6] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent_Dhcpv6](
		"RelayAgent_Dhcpv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6PathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6](
		"RelayAgent_Dhcpv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_EnablePath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/enable YANG schema element.
type RelayAgent_Dhcpv6_Interface_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_EnablePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/enable YANG schema element.
type RelayAgent_Dhcpv6_Interface_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/enable"
func (n *RelayAgent_Dhcpv6_Interface_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RelayAgent_Dhcpv6_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/enable"
func (n *RelayAgent_Dhcpv6_Interface_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/config/enable"
func (n *RelayAgent_Dhcpv6_Interface_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RelayAgent_Dhcpv6_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/config/enable"
func (n *RelayAgent_Dhcpv6_Interface_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_HelperAddressPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/helper-address YANG schema element.
type RelayAgent_Dhcpv6_Interface_HelperAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_HelperAddressPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/helper-address YANG schema element.
type RelayAgent_Dhcpv6_Interface_HelperAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/helper-address"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/helper-address"
func (n *RelayAgent_Dhcpv6_Interface_HelperAddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"RelayAgent_Dhcpv6_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "helper-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).HelperAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/helper-address"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/helper-address"
func (n *RelayAgent_Dhcpv6_Interface_HelperAddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RelayAgent_Dhcpv6_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "helper-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).HelperAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/helper-address"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/config/helper-address"
func (n *RelayAgent_Dhcpv6_Interface_HelperAddressPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"RelayAgent_Dhcpv6_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "helper-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).HelperAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/helper-address"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/config/helper-address"
func (n *RelayAgent_Dhcpv6_Interface_HelperAddressPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RelayAgent_Dhcpv6_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "helper-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).HelperAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_IdPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/id YANG schema element.
type RelayAgent_Dhcpv6_Interface_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_IdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/id YANG schema element.
type RelayAgent_Dhcpv6_Interface_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/id"
func (n *RelayAgent_Dhcpv6_Interface_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcpv6_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/id"
func (n *RelayAgent_Dhcpv6_Interface_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcpv6_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/config/id"
func (n *RelayAgent_Dhcpv6_Interface_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RelayAgent_Dhcpv6_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/config/id"
func (n *RelayAgent_Dhcpv6_Interface_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcpv6_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_InterfacePath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface YANG schema element.
type RelayAgent_Dhcpv6_InterfacePath struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcpv6_InterfacePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface YANG schema element.
type RelayAgent_Dhcpv6_InterfacePathAny struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcpv6_InterfacePathMap represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface YANG schema element.
type RelayAgent_Dhcpv6_InterfacePathMap struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcpv6_InterfacePathMapAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface YANG schema element.
type RelayAgent_Dhcpv6_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): Counters and statistics for relay agent operation.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/counters"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters"
func (n *RelayAgent_Dhcpv6_InterfacePath) Counters() *RelayAgent_Dhcpv6_Interface_CountersPath {
	ps := &RelayAgent_Dhcpv6_Interface_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters and statistics for relay agent operation.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/counters"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters"
func (n *RelayAgent_Dhcpv6_InterfacePathAny) Counters() *RelayAgent_Dhcpv6_Interface_CountersPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enable (leaf): Enables the relay agent on the referenced interface.
// At least one helper address should also be configured
// for forwarding requested.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/*/enable"
func (n *RelayAgent_Dhcpv6_InterfacePath) Enable() *RelayAgent_Dhcpv6_Interface_EnablePath {
	ps := &RelayAgent_Dhcpv6_Interface_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enables the relay agent on the referenced interface.
// At least one helper address should also be configured
// for forwarding requested.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/*/enable"
func (n *RelayAgent_Dhcpv6_InterfacePathAny) Enable() *RelayAgent_Dhcpv6_Interface_EnablePathAny {
	ps := &RelayAgent_Dhcpv6_Interface_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelperAddress (leaf-list): List of IPv6 addresses of DHCP servers to which the
// relay agent should forward DHCPv6 requests.  The relay agent
// is expected to forward DHCPv4/BOOTP requests to all listed
// server addresses when DHCPv6 relaying is enabled globally, or
// on the interface.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/helper-address"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/*/helper-address"
func (n *RelayAgent_Dhcpv6_InterfacePath) HelperAddress() *RelayAgent_Dhcpv6_Interface_HelperAddressPath {
	ps := &RelayAgent_Dhcpv6_Interface_HelperAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "helper-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelperAddress (leaf-list): List of IPv6 addresses of DHCP servers to which the
// relay agent should forward DHCPv6 requests.  The relay agent
// is expected to forward DHCPv4/BOOTP requests to all listed
// server addresses when DHCPv6 relaying is enabled globally, or
// on the interface.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/helper-address"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/*/helper-address"
func (n *RelayAgent_Dhcpv6_InterfacePathAny) HelperAddress() *RelayAgent_Dhcpv6_Interface_HelperAddressPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_HelperAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "helper-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Name of the interface on which relay agent is active
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/*/id"
func (n *RelayAgent_Dhcpv6_InterfacePath) Id() *RelayAgent_Dhcpv6_Interface_IdPath {
	ps := &RelayAgent_Dhcpv6_Interface_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Name of the interface on which relay agent is active
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/*/id"
func (n *RelayAgent_Dhcpv6_InterfacePathAny) Id() *RelayAgent_Dhcpv6_Interface_IdPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interface-ref"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref"
func (n *RelayAgent_Dhcpv6_InterfacePath) InterfaceRef() *RelayAgent_Dhcpv6_Interface_InterfaceRefPath {
	ps := &RelayAgent_Dhcpv6_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interface-ref"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref"
func (n *RelayAgent_Dhcpv6_InterfacePathAny) InterfaceRef() *RelayAgent_Dhcpv6_Interface_InterfaceRefPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Options (container): Top-level container for DHCPv6 agent options on interfaces
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "options"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options"
func (n *RelayAgent_Dhcpv6_InterfacePath) Options() *RelayAgent_Dhcpv6_Interface_OptionsPath {
	ps := &RelayAgent_Dhcpv6_Interface_OptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"options"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Options (container): Top-level container for DHCPv6 agent options on interfaces
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "options"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options"
func (n *RelayAgent_Dhcpv6_InterfacePathAny) Options() *RelayAgent_Dhcpv6_Interface_OptionsPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_OptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"options"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_InterfacePath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcpv6_Interface] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcpv6_Interface](
		"RelayAgent_Dhcpv6_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6_Interface] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6_Interface](
		"RelayAgent_Dhcpv6_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_InterfacePath) Config() ygnmi.ConfigQuery[*oc.RelayAgent_Dhcpv6_Interface] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent_Dhcpv6_Interface](
		"RelayAgent_Dhcpv6_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6_Interface] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6_Interface](
		"RelayAgent_Dhcpv6_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.RelayAgent_Dhcpv6_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.RelayAgent_Dhcpv6_Interface](
		"RelayAgent_Dhcpv6",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RelayAgent_Dhcpv6_Interface, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-relay-agent:interfaces"},
			PostRelPath: []string{"openconfig-relay-agent:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.RelayAgent_Dhcpv6_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RelayAgent_Dhcpv6_Interface](
		"RelayAgent_Dhcpv6",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RelayAgent_Dhcpv6_Interface, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-relay-agent:interfaces"},
			PostRelPath: []string{"openconfig-relay-agent:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.RelayAgent_Dhcpv6_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.RelayAgent_Dhcpv6_Interface](
		"RelayAgent_Dhcpv6",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RelayAgent_Dhcpv6_Interface, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-relay-agent:interfaces"},
			PostRelPath: []string{"openconfig-relay-agent:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.RelayAgent_Dhcpv6_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RelayAgent_Dhcpv6_Interface](
		"RelayAgent_Dhcpv6",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RelayAgent_Dhcpv6_Interface, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-relay-agent:interfaces"},
			PostRelPath: []string{"openconfig-relay-agent:interface"},
		},
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6AdverstiseSentPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-adverstise-sent YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6AdverstiseSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6AdverstiseSentPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-adverstise-sent YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6AdverstiseSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-adverstise-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-adverstise-sent"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6AdverstiseSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-adverstise-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6AdverstiseSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-adverstise-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-adverstise-sent"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6AdverstiseSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-adverstise-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6AdverstiseSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ConfirmReceivedPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-confirm-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ConfirmReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ConfirmReceivedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-confirm-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ConfirmReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-confirm-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-confirm-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ConfirmReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-confirm-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6ConfirmReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-confirm-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-confirm-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ConfirmReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-confirm-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6ConfirmReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6DeclineReceivedPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-decline-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6DeclineReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6DeclineReceivedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-decline-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6DeclineReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-decline-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-decline-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6DeclineReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-decline-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6DeclineReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-decline-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-decline-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6DeclineReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-decline-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6DeclineReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6InfoRequestReceivedPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-info-request-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6InfoRequestReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6InfoRequestReceivedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-info-request-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6InfoRequestReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-info-request-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-info-request-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6InfoRequestReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-info-request-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6InfoRequestReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-info-request-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-info-request-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6InfoRequestReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-info-request-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6InfoRequestReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RebindReceivedPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-rebind-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RebindReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RebindReceivedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-rebind-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RebindReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-rebind-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-rebind-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RebindReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-rebind-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6RebindReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-rebind-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-rebind-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RebindReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-rebind-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6RebindReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReconfigureSentPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-reconfigure-sent YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReconfigureSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReconfigureSentPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-reconfigure-sent YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReconfigureSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-reconfigure-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-reconfigure-sent"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReconfigureSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-reconfigure-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6ReconfigureSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-reconfigure-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-reconfigure-sent"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReconfigureSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-reconfigure-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6ReconfigureSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayForwSentPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-relay-forw-sent YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayForwSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayForwSentPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-relay-forw-sent YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayForwSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-relay-forw-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-relay-forw-sent"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayForwSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-relay-forw-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6RelayForwSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-relay-forw-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-relay-forw-sent"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayForwSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-relay-forw-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6RelayForwSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayReplyReceivedPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-relay-reply-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayReplyReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayReplyReceivedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-relay-reply-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayReplyReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-relay-reply-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-relay-reply-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayReplyReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-relay-reply-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6RelayReplyReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-relay-reply-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-relay-reply-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayReplyReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-relay-reply-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6RelayReplyReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReleaseReceivedPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-release-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReleaseReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReleaseReceivedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-release-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReleaseReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-release-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-release-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReleaseReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-release-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6ReleaseReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-release-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-release-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReleaseReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-release-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6ReleaseReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReplySentPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-reply-sent YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReplySentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReplySentPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-reply-sent YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReplySentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-reply-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-reply-sent"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReplySentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-reply-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6ReplySent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-reply-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-reply-sent"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReplySentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-reply-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6ReplySent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RequestReceivedPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-request-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RequestReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RequestReceivedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-request-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RequestReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-request-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-request-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RequestReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-request-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6RequestReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-request-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-request-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RequestReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-request-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6RequestReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6SolicitReceivedPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-solicit-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6SolicitReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6SolicitReceivedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-solicit-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6SolicitReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-solicit-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-solicit-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6SolicitReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-solicit-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6SolicitReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-solicit-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-solicit-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6SolicitReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-solicit-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6SolicitReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_InvalidOpcodePath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/invalid-opcode YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_InvalidOpcodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_InvalidOpcodePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/invalid-opcode YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_InvalidOpcodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-opcode"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/invalid-opcode"
func (n *RelayAgent_Dhcpv6_Interface_Counters_InvalidOpcodePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"invalid-opcode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).InvalidOpcode
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-opcode"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/invalid-opcode"
func (n *RelayAgent_Dhcpv6_Interface_Counters_InvalidOpcodePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"invalid-opcode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).InvalidOpcode
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_InvalidOptionsPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/invalid-options YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_InvalidOptionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_InvalidOptionsPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/invalid-options YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_InvalidOptionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-options"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/invalid-options"
func (n *RelayAgent_Dhcpv6_Interface_Counters_InvalidOptionsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"invalid-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).InvalidOptions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-options"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/invalid-options"
func (n *RelayAgent_Dhcpv6_Interface_Counters_InvalidOptionsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"invalid-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).InvalidOptions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_TotalDroppedPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/total-dropped YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_TotalDroppedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_TotalDroppedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/total-dropped YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_TotalDroppedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "total-dropped"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/total-dropped"
func (n *RelayAgent_Dhcpv6_Interface_Counters_TotalDroppedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).TotalDropped
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "total-dropped"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/total-dropped"
func (n *RelayAgent_Dhcpv6_Interface_Counters_TotalDroppedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).TotalDropped
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_CountersPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters YANG schema element.
type RelayAgent_Dhcpv6_Interface_CountersPath struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcpv6_Interface_CountersPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters YANG schema element.
type RelayAgent_Dhcpv6_Interface_CountersPathAny struct {
	*ygnmi.NodePath
}

// Dhcpv6AdverstiseSent (leaf): Number of DHCPv6 adverstise messages sent to clients by
// the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-adverstise-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-adverstise-sent"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6AdverstiseSent() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6AdverstiseSentPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6AdverstiseSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-adverstise-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6AdverstiseSent (leaf): Number of DHCPv6 adverstise messages sent to clients by
// the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-adverstise-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-adverstise-sent"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6AdverstiseSent() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6AdverstiseSentPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6AdverstiseSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-adverstise-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6ConfirmReceived (leaf): Number of DHCPv6 confirm messages received from clients
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-confirm-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-confirm-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6ConfirmReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ConfirmReceivedPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ConfirmReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-confirm-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6ConfirmReceived (leaf): Number of DHCPv6 confirm messages received from clients
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-confirm-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-confirm-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6ConfirmReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ConfirmReceivedPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ConfirmReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-confirm-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6DeclineReceived (leaf): Number of DHCPv6 DECLINE messages received from
// clients by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-decline-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-decline-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6DeclineReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6DeclineReceivedPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6DeclineReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-decline-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6DeclineReceived (leaf): Number of DHCPv6 DECLINE messages received from
// clients by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-decline-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-decline-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6DeclineReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6DeclineReceivedPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6DeclineReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-decline-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6InfoRequestReceived (leaf): Number of DHCPv6 information requests messages received from
// clients by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-info-request-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-info-request-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6InfoRequestReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6InfoRequestReceivedPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6InfoRequestReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-info-request-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6InfoRequestReceived (leaf): Number of DHCPv6 information requests messages received from
// clients by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-info-request-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-info-request-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6InfoRequestReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6InfoRequestReceivedPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6InfoRequestReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-info-request-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6RebindReceived (leaf): Number of DHCPv6 rebind messages received from clients
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-rebind-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-rebind-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6RebindReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RebindReceivedPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RebindReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-rebind-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6RebindReceived (leaf): Number of DHCPv6 rebind messages received from clients
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-rebind-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-rebind-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6RebindReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RebindReceivedPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RebindReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-rebind-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6ReconfigureSent (leaf): Number of DHCPv6 reconfigure messages sent to clients by
// the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-reconfigure-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-reconfigure-sent"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6ReconfigureSent() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReconfigureSentPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReconfigureSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-reconfigure-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6ReconfigureSent (leaf): Number of DHCPv6 reconfigure messages sent to clients by
// the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-reconfigure-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-reconfigure-sent"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6ReconfigureSent() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReconfigureSentPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReconfigureSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-reconfigure-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6RelayForwSent (leaf): Number of DHCPv6 relay-forward messages sent to servers
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-relay-forw-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-relay-forw-sent"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6RelayForwSent() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayForwSentPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayForwSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-relay-forw-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6RelayForwSent (leaf): Number of DHCPv6 relay-forward messages sent to servers
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-relay-forw-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-relay-forw-sent"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6RelayForwSent() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayForwSentPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayForwSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-relay-forw-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6RelayReplyReceived (leaf): Number of DHCPv6 relay reply messages received from servers
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-relay-reply-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-relay-reply-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6RelayReplyReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayReplyReceivedPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayReplyReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-relay-reply-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6RelayReplyReceived (leaf): Number of DHCPv6 relay reply messages received from servers
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-relay-reply-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-relay-reply-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6RelayReplyReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayReplyReceivedPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayReplyReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-relay-reply-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6ReleaseReceived (leaf): Number of DHCPv6 release messages received from clients
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-release-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-release-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6ReleaseReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReleaseReceivedPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReleaseReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-release-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6ReleaseReceived (leaf): Number of DHCPv6 release messages received from clients
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-release-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-release-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6ReleaseReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReleaseReceivedPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReleaseReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-release-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6ReplySent (leaf): Number of DHCPv6 reply messages sent to clients by
// the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-reply-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-reply-sent"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6ReplySent() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReplySentPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReplySentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-reply-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6ReplySent (leaf): Number of DHCPv6 reply messages sent to clients by
// the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-reply-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-reply-sent"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6ReplySent() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReplySentPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReplySentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-reply-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6RequestReceived (leaf): Number of DHCPv6 request messages received from clients
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-request-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-request-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6RequestReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RequestReceivedPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RequestReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-request-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6RequestReceived (leaf): Number of DHCPv6 request messages received from clients
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-request-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-request-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6RequestReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RequestReceivedPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RequestReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-request-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6SolicitReceived (leaf): Number of DHCPv6 SOLICIT messages received from clients
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-solicit-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-solicit-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6SolicitReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6SolicitReceivedPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6SolicitReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-solicit-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6SolicitReceived (leaf): Number of DHCPv6 SOLICIT messages received from clients
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-solicit-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-solicit-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6SolicitReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6SolicitReceivedPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6SolicitReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-solicit-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidOpcode (leaf): Number of DHCP packets dropped due to an invalid opcode
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-opcode"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/invalid-opcode"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) InvalidOpcode() *RelayAgent_Dhcpv6_Interface_Counters_InvalidOpcodePath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_InvalidOpcodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"invalid-opcode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidOpcode (leaf): Number of DHCP packets dropped due to an invalid opcode
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-opcode"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/invalid-opcode"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) InvalidOpcode() *RelayAgent_Dhcpv6_Interface_Counters_InvalidOpcodePathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_InvalidOpcodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"invalid-opcode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidOptions (leaf): Number of DHCP packets dropped due to an invalid option
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-options"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/invalid-options"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) InvalidOptions() *RelayAgent_Dhcpv6_Interface_Counters_InvalidOptionsPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_InvalidOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"invalid-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidOptions (leaf): Number of DHCP packets dropped due to an invalid option
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-options"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/invalid-options"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) InvalidOptions() *RelayAgent_Dhcpv6_Interface_Counters_InvalidOptionsPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_InvalidOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"invalid-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalDropped (leaf): Total number of DHCP packets dropped by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "total-dropped"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/total-dropped"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) TotalDropped() *RelayAgent_Dhcpv6_Interface_Counters_TotalDroppedPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_TotalDroppedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalDropped (leaf): Total number of DHCP packets dropped by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "total-dropped"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/total-dropped"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) TotalDropped() *RelayAgent_Dhcpv6_Interface_Counters_TotalDroppedPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_TotalDroppedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcpv6_Interface_Counters] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcpv6_Interface_Counters](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6_Interface_Counters] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6_Interface_Counters](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/interface-ref/state/interface YANG schema element.
type RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/interface-ref/state/interface YANG schema element.
type RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/state/interface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/state/interface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/config/interface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/config/interface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/state/subinterface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/state/subinterface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/config/subinterface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/config/subinterface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_InterfaceRefPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/interface-ref YANG schema element.
type RelayAgent_Dhcpv6_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcpv6_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/interface-ref YANG schema element.
type RelayAgent_Dhcpv6_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/*/interface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRefPath) Interface() *RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePath {
	ps := &RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/*/interface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRefPathAny) Interface() *RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePathAny {
	ps := &RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is required, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/*/subinterface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRefPath) Subinterface() *RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePath {
	ps := &RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is required, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/*/subinterface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRefPathAny) Subinterface() *RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/enable-interface-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/enable-interface-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/enable-interface-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).EnableInterfaceId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/enable-interface-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).EnableInterfaceId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/config/enable-interface-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RelayAgent_Dhcpv6_Interface_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).EnableInterfaceId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/config/enable-interface-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6_Interface_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).EnableInterfaceId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/enable-remote-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/enable-remote-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/enable-remote-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).EnableRemoteId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/enable-remote-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).EnableRemoteId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/config/enable-remote-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RelayAgent_Dhcpv6_Interface_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).EnableRemoteId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/config/enable-remote-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6_Interface_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).EnableRemoteId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/interface-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/interface-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/interface-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/interface-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/config/interface-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/config/interface-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Options_RemoteIdPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/remote-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_RemoteIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Options_RemoteIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/remote-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_RemoteIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/remote-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_RemoteIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).RemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/remote-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_RemoteIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).RemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/config/remote-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_RemoteIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).RemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/config/remote-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_RemoteIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).RemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Options_SentInterfaceIdPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/sent-interface-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_SentInterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Options_SentInterfaceIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/sent-interface-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_SentInterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/sent-interface-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_SentInterfaceIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).SentInterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/sent-interface-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_SentInterfaceIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).SentInterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Options_SentRemoteIdPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/sent-remote-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_SentRemoteIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Options_SentRemoteIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/sent-remote-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_SentRemoteIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/sent-remote-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_SentRemoteIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).SentRemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/sent-remote-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_SentRemoteIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).SentRemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_OptionsPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options YANG schema element.
type RelayAgent_Dhcpv6_Interface_OptionsPath struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcpv6_Interface_OptionsPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options YANG schema element.
type RelayAgent_Dhcpv6_Interface_OptionsPathAny struct {
	*ygnmi.NodePath
}

// EnableInterfaceId (leaf): Enables DHCPv6 OPTION_INTERFACE_ID (18) to identify the
// interface on which the client message was received.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/*/enable-interface-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPath) EnableInterfaceId() *RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPath {
	ps := &RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableInterfaceId (leaf): Enables DHCPv6 OPTION_INTERFACE_ID (18) to identify the
// interface on which the client message was received.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/*/enable-interface-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPathAny) EnableInterfaceId() *RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableRemoteId (leaf): Sets DHCPv6 OPTION_REMOTE_ID (37).  This option is the
// DHCPv6 equivalent for the IPv4 (DHCPv4) Relay Agent Option's
// Remote-ID suboption as specified in RFC 3046. The remote-id
// field may be used to encode a user name, remote IP address,
// interface/port identifier, etc.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/*/enable-remote-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPath) EnableRemoteId() *RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPath {
	ps := &RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableRemoteId (leaf): Sets DHCPv6 OPTION_REMOTE_ID (37).  This option is the
// DHCPv6 equivalent for the IPv4 (DHCPv4) Relay Agent Option's
// Remote-ID suboption as specified in RFC 3046. The remote-id
// field may be used to encode a user name, remote IP address,
// interface/port identifier, etc.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/*/enable-remote-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPathAny) EnableRemoteId() *RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): Sets DHCPv6 OPTION_INTERFACE_ID (18) to identify the
// interface on which the client message was received.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/*/interface-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPath) InterfaceId() *RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPath {
	ps := &RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): Sets DHCPv6 OPTION_INTERFACE_ID (18) to identify the
// interface on which the client message was received.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/*/interface-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPathAny) InterfaceId() *RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteId (leaf): Sets DHCPv6 OPTION_REMOTE_ID (37).  This option is the
// DHCPv6 equivalent for the IPv4 (DHCPv4) Relay Agent Option's
// Remote-ID suboption as specified in RFC 3046. The remote-id
// field may be used to encode a user name, remote IP address,
// interface/port identifier, etc.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/*/remote-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPath) RemoteId() *RelayAgent_Dhcpv6_Interface_Options_RemoteIdPath {
	ps := &RelayAgent_Dhcpv6_Interface_Options_RemoteIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteId (leaf): Sets DHCPv6 OPTION_REMOTE_ID (37).  This option is the
// DHCPv6 equivalent for the IPv4 (DHCPv4) Relay Agent Option's
// Remote-ID suboption as specified in RFC 3046. The remote-id
// field may be used to encode a user name, remote IP address,
// interface/port identifier, etc.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/*/remote-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPathAny) RemoteId() *RelayAgent_Dhcpv6_Interface_Options_RemoteIdPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Options_RemoteIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SentInterfaceId (leaf): Reflects the DHCPv6 OPTION_INTERFACE_ID (18) sent to the
// server by the system.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/sent-interface-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPath) SentInterfaceId() *RelayAgent_Dhcpv6_Interface_Options_SentInterfaceIdPath {
	ps := &RelayAgent_Dhcpv6_Interface_Options_SentInterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent-interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SentInterfaceId (leaf): Reflects the DHCPv6 OPTION_INTERFACE_ID (18) sent to the
// server by the system.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/sent-interface-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPathAny) SentInterfaceId() *RelayAgent_Dhcpv6_Interface_Options_SentInterfaceIdPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Options_SentInterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent-interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SentRemoteId (leaf): Reflects the DHCPv6 OPTION_REMOTE_ID (37) sent to the
// server by the system.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/sent-remote-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPath) SentRemoteId() *RelayAgent_Dhcpv6_Interface_Options_SentRemoteIdPath {
	ps := &RelayAgent_Dhcpv6_Interface_Options_SentRemoteIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent-remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SentRemoteId (leaf): Reflects the DHCPv6 OPTION_REMOTE_ID (37) sent to the
// server by the system.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/sent-remote-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPathAny) SentRemoteId() *RelayAgent_Dhcpv6_Interface_Options_SentRemoteIdPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Options_SentRemoteIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent-remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_Interface_OptionsPath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcpv6_Interface_Options] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcpv6_Interface_Options](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_Interface_OptionsPathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6_Interface_Options] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6_Interface_Options](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_Interface_OptionsPath) Config() ygnmi.ConfigQuery[*oc.RelayAgent_Dhcpv6_Interface_Options] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent_Dhcpv6_Interface_Options](
		"RelayAgent_Dhcpv6_Interface_Options",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_Interface_OptionsPathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6_Interface_Options] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6_Interface_Options](
		"RelayAgent_Dhcpv6_Interface_Options",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Options_EnableInterfaceIdPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/options/state/enable-interface-id YANG schema element.
type RelayAgent_Dhcpv6_Options_EnableInterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Options_EnableInterfaceIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/options/state/enable-interface-id YANG schema element.
type RelayAgent_Dhcpv6_Options_EnableInterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/options/state/enable-interface-id"
func (n *RelayAgent_Dhcpv6_Options_EnableInterfaceIdPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RelayAgent_Dhcpv6_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Options).EnableInterfaceId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/options/state/enable-interface-id"
func (n *RelayAgent_Dhcpv6_Options_EnableInterfaceIdPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Options).EnableInterfaceId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/options/config/enable-interface-id"
func (n *RelayAgent_Dhcpv6_Options_EnableInterfaceIdPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RelayAgent_Dhcpv6_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Options).EnableInterfaceId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/options/config/enable-interface-id"
func (n *RelayAgent_Dhcpv6_Options_EnableInterfaceIdPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Options).EnableInterfaceId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Options_EnableRemoteIdPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/options/state/enable-remote-id YANG schema element.
type RelayAgent_Dhcpv6_Options_EnableRemoteIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Options_EnableRemoteIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/options/state/enable-remote-id YANG schema element.
type RelayAgent_Dhcpv6_Options_EnableRemoteIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/options/state/enable-remote-id"
func (n *RelayAgent_Dhcpv6_Options_EnableRemoteIdPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RelayAgent_Dhcpv6_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Options).EnableRemoteId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/options/state/enable-remote-id"
func (n *RelayAgent_Dhcpv6_Options_EnableRemoteIdPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Options).EnableRemoteId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/options/config/enable-remote-id"
func (n *RelayAgent_Dhcpv6_Options_EnableRemoteIdPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RelayAgent_Dhcpv6_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Options).EnableRemoteId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/options/config/enable-remote-id"
func (n *RelayAgent_Dhcpv6_Options_EnableRemoteIdPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Options).EnableRemoteId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_OptionsPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/options YANG schema element.
type RelayAgent_Dhcpv6_OptionsPath struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcpv6_OptionsPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/options YANG schema element.
type RelayAgent_Dhcpv6_OptionsPathAny struct {
	*ygnmi.NodePath
}

// EnableInterfaceId (leaf): Enables DHCPv6 OPTION_INTERFACE_ID (18) to identify the
// interface on which the client message was received.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/options/*/enable-interface-id"
func (n *RelayAgent_Dhcpv6_OptionsPath) EnableInterfaceId() *RelayAgent_Dhcpv6_Options_EnableInterfaceIdPath {
	ps := &RelayAgent_Dhcpv6_Options_EnableInterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableInterfaceId (leaf): Enables DHCPv6 OPTION_INTERFACE_ID (18) to identify the
// interface on which the client message was received.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/options/*/enable-interface-id"
func (n *RelayAgent_Dhcpv6_OptionsPathAny) EnableInterfaceId() *RelayAgent_Dhcpv6_Options_EnableInterfaceIdPathAny {
	ps := &RelayAgent_Dhcpv6_Options_EnableInterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableRemoteId (leaf): Sets DHCPv6 OPTION_REMOTE_ID (37).  This option is the
// DHCPv6 equivalent for the IPv4 (DHCPv4) Relay Agent Option's
// Remote-ID suboption as specified in RFC 3046. The remote-id
// field may be used to encode a user name, remote IP address,
// interface/port identifier, etc.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/options/*/enable-remote-id"
func (n *RelayAgent_Dhcpv6_OptionsPath) EnableRemoteId() *RelayAgent_Dhcpv6_Options_EnableRemoteIdPath {
	ps := &RelayAgent_Dhcpv6_Options_EnableRemoteIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableRemoteId (leaf): Sets DHCPv6 OPTION_REMOTE_ID (37).  This option is the
// DHCPv6 equivalent for the IPv4 (DHCPv4) Relay Agent Option's
// Remote-ID suboption as specified in RFC 3046. The remote-id
// field may be used to encode a user name, remote IP address,
// interface/port identifier, etc.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/options/*/enable-remote-id"
func (n *RelayAgent_Dhcpv6_OptionsPathAny) EnableRemoteId() *RelayAgent_Dhcpv6_Options_EnableRemoteIdPathAny {
	ps := &RelayAgent_Dhcpv6_Options_EnableRemoteIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_OptionsPath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcpv6_Options] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcpv6_Options](
		"RelayAgent_Dhcpv6_Options",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_OptionsPathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6_Options] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6_Options](
		"RelayAgent_Dhcpv6_Options",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_OptionsPath) Config() ygnmi.ConfigQuery[*oc.RelayAgent_Dhcpv6_Options] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent_Dhcpv6_Options](
		"RelayAgent_Dhcpv6_Options",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_OptionsPathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6_Options] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6_Options](
		"RelayAgent_Dhcpv6_Options",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

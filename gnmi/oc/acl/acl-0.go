/*
Package acl is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-common.yang
  - public/release/models/aft/openconfig-aft-ethernet.yang
  - public/release/models/aft/openconfig-aft-ipv4.yang
  - public/release/models/aft/openconfig-aft-ipv6.yang
  - public/release/models/aft/openconfig-aft-mpls.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-pf.yang
  - public/release/models/aft/openconfig-aft-state-synced.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft-types.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-rates.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/local-routing/openconfig-local-routing-network-instance.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/network-instance/openconfig-network-instance-l2.yang
  - public/release/models/network-instance/openconfig-network-instance-static.yang
  - public/release/models/oam/openconfig-cfm-types.yang
  - public/release/models/oam/openconfig-oam.yang
  - public/release/models/oam/openconfig-oam-cfm.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-area.yang
  - public/release/models/ospf/openconfig-ospf-common.yang
  - public/release/models/ospf/openconfig-ospf-global.yang
  - public/release/models/ospf/openconfig-ospf-types.yang
  - public/release/models/ospf/openconfig-ospf.yang
  - public/release/models/ospf/openconfig-ospfv3-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
  - public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
  - public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package acl

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Acl_CounterCapabilityPath represents the /openconfig-acl/acl/state/counter-capability YANG schema element.
type Acl_CounterCapabilityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_CounterCapabilityPathAny represents the wildcard version of the /openconfig-acl/acl/state/counter-capability YANG schema element.
type Acl_CounterCapabilityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/counter-capability"
//	Path from root:       "/acl/state/counter-capability"
func (n *Acl_CounterCapabilityPath) State() ygnmi.SingletonQuery[oc.E_Acl_ACL_COUNTER_CAPABILITY] {
	return ygnmi.NewSingletonQuery[oc.E_Acl_ACL_COUNTER_CAPABILITY](
		"Acl",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "counter-capability"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_COUNTER_CAPABILITY, bool) {
			ret := gs.(*oc.Acl).CounterCapability
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/counter-capability"
//	Path from root:       "/acl/state/counter-capability"
func (n *Acl_CounterCapabilityPathAny) State() ygnmi.WildcardQuery[oc.E_Acl_ACL_COUNTER_CAPABILITY] {
	return ygnmi.NewWildcardQuery[oc.E_Acl_ACL_COUNTER_CAPABILITY](
		"Acl",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "counter-capability"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_COUNTER_CAPABILITY, bool) {
			ret := gs.(*oc.Acl).CounterCapability
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// AclPath represents the /openconfig-acl/acl YANG schema element.
type AclPath struct {
	*ygnmi.NodePath
}

// AclPathAny represents the wildcard version of the /openconfig-acl/acl YANG schema element.
type AclPathAny struct {
	*ygnmi.NodePath
}

// AclSetAny (list): List of ACL sets, each comprising of a list of ACL
// entries
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-sets/acl-set"
//	Path from root:       "/acl/acl-sets/acl-set"
func (n *AclPath) AclSetAny() *Acl_AclSetPathAny {
	ps := &Acl_AclSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-sets", "acl-set"},
			map[string]interface{}{"name": "*", "type": "*"},
			n,
		),
	}
	return ps
}

// AclSetAny (list): List of ACL sets, each comprising of a list of ACL
// entries
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-sets/acl-set"
//	Path from root:       "/acl/acl-sets/acl-set"
func (n *AclPathAny) AclSetAny() *Acl_AclSetPathAny {
	ps := &Acl_AclSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-sets", "acl-set"},
			map[string]interface{}{"name": "*", "type": "*"},
			n,
		),
	}
	return ps
}

// WithName sets Acl_AclSetPathAny's key "name" to the specified value.
// Name: string
func (n *Acl_AclSetPathAny) WithName(Name string) *Acl_AclSetPathAny {
	ygnmi.ModifyKey(n.NodePath, "name", Name)
	return n
}

// WithType sets Acl_AclSetPathAny's key "type" to the specified value.
// Type: oc.E_Acl_ACL_TYPE
func (n *Acl_AclSetPathAny) WithType(Type oc.E_Acl_ACL_TYPE) *Acl_AclSetPathAny {
	ygnmi.ModifyKey(n.NodePath, "type", Type)
	return n
}

// AclSet (list): List of ACL sets, each comprising of a list of ACL
// entries
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-sets/acl-set"
//	Path from root:       "/acl/acl-sets/acl-set"
//
//	Name: string
//	Type: oc.E_Acl_ACL_TYPE
func (n *AclPath) AclSet(Name string, Type oc.E_Acl_ACL_TYPE) *Acl_AclSetPath {
	ps := &Acl_AclSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-sets", "acl-set"},
			map[string]interface{}{"name": Name, "type": Type},
			n,
		),
	}
	return ps
}

// AclSet (list): List of ACL sets, each comprising of a list of ACL
// entries
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-sets/acl-set"
//	Path from root:       "/acl/acl-sets/acl-set"
//
//	Name: string
//	Type: oc.E_Acl_ACL_TYPE
func (n *AclPathAny) AclSet(Name string, Type oc.E_Acl_ACL_TYPE) *Acl_AclSetPathAny {
	ps := &Acl_AclSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-sets", "acl-set"},
			map[string]interface{}{"name": Name, "type": Type},
			n,
		),
	}
	return ps
}

// AclSetMap (list): List of ACL sets, each comprising of a list of ACL
// entries
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-sets/acl-set"
//	Path from root:       "/acl/acl-sets/acl-set"
func (n *AclPath) AclSetMap() *Acl_AclSetPathMap {
	ps := &Acl_AclSetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AclSetMap (list): List of ACL sets, each comprising of a list of ACL
// entries
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-sets/acl-set"
//	Path from root:       "/acl/acl-sets/acl-set"
func (n *AclPathAny) AclSetMap() *Acl_AclSetPathMapAny {
	ps := &Acl_AclSetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CounterCapability (leaf): System reported indication of how ACL counters are reported
// by the target
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/counter-capability"
//	Path from root:       "/acl/state/counter-capability"
func (n *AclPath) CounterCapability() *Acl_CounterCapabilityPath {
	ps := &Acl_CounterCapabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counter-capability"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CounterCapability (leaf): System reported indication of how ACL counters are reported
// by the target
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/counter-capability"
//	Path from root:       "/acl/state/counter-capability"
func (n *AclPathAny) CounterCapability() *Acl_CounterCapabilityPathAny {
	ps := &Acl_CounterCapabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counter-capability"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceAny (list): List of interfaces on which ACLs are set. The interface is resolved
// based on the interface and subinterface leaves of the interface-ref
// container, which are references to entries in the /interfaces
// list. The key of the list is an arbitrary value that the
// implementation should not use to resolve an interface name.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/acl/interfaces/interface"
func (n *AclPath) InterfaceAny() *Acl_InterfacePathAny {
	ps := &Acl_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of interfaces on which ACLs are set. The interface is resolved
// based on the interface and subinterface leaves of the interface-ref
// container, which are references to entries in the /interfaces
// list. The key of the list is an arbitrary value that the
// implementation should not use to resolve an interface name.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/acl/interfaces/interface"
func (n *AclPathAny) InterfaceAny() *Acl_InterfacePathAny {
	ps := &Acl_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces on which ACLs are set. The interface is resolved
// based on the interface and subinterface leaves of the interface-ref
// container, which are references to entries in the /interfaces
// list. The key of the list is an arbitrary value that the
// implementation should not use to resolve an interface name.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/acl/interfaces/interface"
//
//	Id: string
func (n *AclPath) Interface(Id string) *Acl_InterfacePath {
	ps := &Acl_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces on which ACLs are set. The interface is resolved
// based on the interface and subinterface leaves of the interface-ref
// container, which are references to entries in the /interfaces
// list. The key of the list is an arbitrary value that the
// implementation should not use to resolve an interface name.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/acl/interfaces/interface"
//
//	Id: string
func (n *AclPathAny) Interface(Id string) *Acl_InterfacePathAny {
	ps := &Acl_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces on which ACLs are set. The interface is resolved
// based on the interface and subinterface leaves of the interface-ref
// container, which are references to entries in the /interfaces
// list. The key of the list is an arbitrary value that the
// implementation should not use to resolve an interface name.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/acl/interfaces/interface"
func (n *AclPath) InterfaceMap() *Acl_InterfacePathMap {
	ps := &Acl_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces on which ACLs are set. The interface is resolved
// based on the interface and subinterface leaves of the interface-ref
// container, which are references to entries in the /interfaces
// list. The key of the list is an arbitrary value that the
// implementation should not use to resolve an interface name.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/acl/interfaces/interface"
func (n *AclPathAny) InterfaceMap() *Acl_InterfacePathMapAny {
	ps := &Acl_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *AclPath) State() ygnmi.SingletonQuery[*oc.Acl] {
	return ygnmi.NewSingletonQuery[*oc.Acl](
		"Acl",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *AclPathAny) State() ygnmi.WildcardQuery[*oc.Acl] {
	return ygnmi.NewWildcardQuery[*oc.Acl](
		"Acl",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *AclPath) Config() ygnmi.ConfigQuery[*oc.Acl] {
	return ygnmi.NewConfigQuery[*oc.Acl](
		"Acl",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *AclPathAny) Config() ygnmi.WildcardQuery[*oc.Acl] {
	return ygnmi.NewWildcardQuery[*oc.Acl](
		"Acl",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_DescriptionPath represents the /openconfig-acl/acl/acl-sets/acl-set/state/description YANG schema element.
type Acl_AclSet_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_DescriptionPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/state/description YANG schema element.
type Acl_AclSet_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/description"
//	Path from root:       "/acl/acl-sets/acl-set/state/description"
func (n *Acl_AclSet_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/description"
//	Path from root:       "/acl/acl-sets/acl-set/state/description"
func (n *Acl_AclSet_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/description"
//	Path from root:       "/acl/acl-sets/acl-set/config/description"
func (n *Acl_AclSet_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/description"
//	Path from root:       "/acl/acl-sets/acl-set/config/description"
func (n *Acl_AclSet_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_NamePath represents the /openconfig-acl/acl/acl-sets/acl-set/state/name YANG schema element.
type Acl_AclSet_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_NamePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/state/name YANG schema element.
type Acl_AclSet_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/name"
//	Path from root:       "/acl/acl-sets/acl-set/state/name"
func (n *Acl_AclSet_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/name"
//	Path from root:       "/acl/acl-sets/acl-set/state/name"
func (n *Acl_AclSet_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/name"
//	Path from root:       "/acl/acl-sets/acl-set/config/name"
func (n *Acl_AclSet_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/name"
//	Path from root:       "/acl/acl-sets/acl-set/config/name"
func (n *Acl_AclSet_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_TypePath represents the /openconfig-acl/acl/acl-sets/acl-set/state/type YANG schema element.
type Acl_AclSet_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_TypePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/state/type YANG schema element.
type Acl_AclSet_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/type"
//	Path from root:       "/acl/acl-sets/acl-set/state/type"
func (n *Acl_AclSet_TypePath) State() ygnmi.SingletonQuery[oc.E_Acl_ACL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_Acl_ACL_TYPE](
		"Acl_AclSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_TYPE, bool) {
			ret := gs.(*oc.Acl_AclSet).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/type"
//	Path from root:       "/acl/acl-sets/acl-set/state/type"
func (n *Acl_AclSet_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Acl_ACL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Acl_ACL_TYPE](
		"Acl_AclSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_TYPE, bool) {
			ret := gs.(*oc.Acl_AclSet).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/type"
//	Path from root:       "/acl/acl-sets/acl-set/config/type"
func (n *Acl_AclSet_TypePath) Config() ygnmi.ConfigQuery[oc.E_Acl_ACL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_Acl_ACL_TYPE](
		"Acl_AclSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_TYPE, bool) {
			ret := gs.(*oc.Acl_AclSet).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/type"
//	Path from root:       "/acl/acl-sets/acl-set/config/type"
func (n *Acl_AclSet_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Acl_ACL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Acl_ACL_TYPE](
		"Acl_AclSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_TYPE, bool) {
			ret := gs.(*oc.Acl_AclSet).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSetPath represents the /openconfig-acl/acl/acl-sets/acl-set YANG schema element.
type Acl_AclSetPath struct {
	*ygnmi.NodePath
}

// Acl_AclSetPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set YANG schema element.
type Acl_AclSetPathAny struct {
	*ygnmi.NodePath
}

// Acl_AclSetPathMap represents the /openconfig-acl/acl/acl-sets/acl-set YANG schema element.
type Acl_AclSetPathMap struct {
	*ygnmi.NodePath
}

// Acl_AclSetPathMapAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set YANG schema element.
type Acl_AclSetPathMapAny struct {
	*ygnmi.NodePath
}

// AclEntryAny (list): List of ACL entries comprising an ACL set
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry"
func (n *Acl_AclSetPath) AclEntryAny() *Acl_AclSet_AclEntryPathAny {
	ps := &Acl_AclSet_AclEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
	return ps
}

// AclEntryAny (list): List of ACL entries comprising an ACL set
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry"
func (n *Acl_AclSetPathAny) AclEntryAny() *Acl_AclSet_AclEntryPathAny {
	ps := &Acl_AclSet_AclEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
	return ps
}

// AclEntry (list): List of ACL entries comprising an ACL set
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry"
//
//	SequenceId: uint32
func (n *Acl_AclSetPath) AclEntry(SequenceId uint32) *Acl_AclSet_AclEntryPath {
	ps := &Acl_AclSet_AclEntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
	return ps
}

// AclEntry (list): List of ACL entries comprising an ACL set
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry"
//
//	SequenceId: uint32
func (n *Acl_AclSetPathAny) AclEntry(SequenceId uint32) *Acl_AclSet_AclEntryPathAny {
	ps := &Acl_AclSet_AclEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
	return ps
}

// AclEntryMap (list): List of ACL entries comprising an ACL set
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry"
func (n *Acl_AclSetPath) AclEntryMap() *Acl_AclSet_AclEntryPathMap {
	ps := &Acl_AclSet_AclEntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AclEntryMap (list): List of ACL entries comprising an ACL set
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry"
func (n *Acl_AclSetPathAny) AclEntryMap() *Acl_AclSet_AclEntryPathMapAny {
	ps := &Acl_AclSet_AclEntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Description (leaf): Description, or comment, for the ACL set
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/description"
//	Path from root:       "/acl/acl-sets/acl-set/*/description"
func (n *Acl_AclSetPath) Description() *Acl_AclSet_DescriptionPath {
	ps := &Acl_AclSet_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): Description, or comment, for the ACL set
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/description"
//	Path from root:       "/acl/acl-sets/acl-set/*/description"
func (n *Acl_AclSetPathAny) Description() *Acl_AclSet_DescriptionPathAny {
	ps := &Acl_AclSet_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The name of the access-list set
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/name"
//	Path from root:       "/acl/acl-sets/acl-set/*/name"
func (n *Acl_AclSetPath) Name() *Acl_AclSet_NamePath {
	ps := &Acl_AclSet_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The name of the access-list set
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/name"
//	Path from root:       "/acl/acl-sets/acl-set/*/name"
func (n *Acl_AclSetPathAny) Name() *Acl_AclSet_NamePathAny {
	ps := &Acl_AclSet_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type determines the fields allowed in the ACL entries
// belonging to the ACL set (e.g., IPv4, IPv6, etc.)
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/type"
//	Path from root:       "/acl/acl-sets/acl-set/*/type"
func (n *Acl_AclSetPath) Type() *Acl_AclSet_TypePath {
	ps := &Acl_AclSet_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type determines the fields allowed in the ACL entries
// belonging to the ACL set (e.g., IPv4, IPv6, etc.)
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/type"
//	Path from root:       "/acl/acl-sets/acl-set/*/type"
func (n *Acl_AclSetPathAny) Type() *Acl_AclSet_TypePathAny {
	ps := &Acl_AclSet_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSetPath) State() ygnmi.SingletonQuery[*oc.Acl_AclSet] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet](
		"Acl_AclSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSetPathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet](
		"Acl_AclSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSetPath) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet](
		"Acl_AclSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSetPathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet](
		"Acl_AclSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSetPathMap) State() ygnmi.SingletonQuery[map[oc.Acl_AclSet_Key]*oc.Acl_AclSet] {
	return ygnmi.NewSingletonQuery[map[oc.Acl_AclSet_Key]*oc.Acl_AclSet](
		"Acl",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Acl_AclSet_Key]*oc.Acl_AclSet, bool) {
			ret := gs.(*oc.Acl).AclSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:acl-sets"},
			PostRelPath: []string{"openconfig-acl:acl-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSetPathMapAny) State() ygnmi.WildcardQuery[map[oc.Acl_AclSet_Key]*oc.Acl_AclSet] {
	return ygnmi.NewWildcardQuery[map[oc.Acl_AclSet_Key]*oc.Acl_AclSet](
		"Acl",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Acl_AclSet_Key]*oc.Acl_AclSet, bool) {
			ret := gs.(*oc.Acl).AclSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:acl-sets"},
			PostRelPath: []string{"openconfig-acl:acl-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSetPathMap) Config() ygnmi.ConfigQuery[map[oc.Acl_AclSet_Key]*oc.Acl_AclSet] {
	return ygnmi.NewConfigQuery[map[oc.Acl_AclSet_Key]*oc.Acl_AclSet](
		"Acl",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Acl_AclSet_Key]*oc.Acl_AclSet, bool) {
			ret := gs.(*oc.Acl).AclSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:acl-sets"},
			PostRelPath: []string{"openconfig-acl:acl-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSetPathMapAny) Config() ygnmi.WildcardQuery[map[oc.Acl_AclSet_Key]*oc.Acl_AclSet] {
	return ygnmi.NewWildcardQuery[map[oc.Acl_AclSet_Key]*oc.Acl_AclSet](
		"Acl",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Acl_AclSet_Key]*oc.Acl_AclSet, bool) {
			ret := gs.(*oc.Acl).AclSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:acl-sets"},
			PostRelPath: []string{"openconfig-acl:acl-set"},
		},
	)
}

// Acl_AclSet_AclEntry_DescriptionPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state/description YANG schema element.
type Acl_AclSet_AclEntry_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_DescriptionPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state/description YANG schema element.
type Acl_AclSet_AclEntry_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/description"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/description"
func (n *Acl_AclSet_AclEntry_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/description"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/description"
func (n *Acl_AclSet_AclEntry_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/description"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/config/description"
func (n *Acl_AclSet_AclEntry_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/description"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/config/description"
func (n *Acl_AclSet_AclEntry_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_MatchedOctetsPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_AclSet_AclEntry_MatchedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_MatchedOctetsPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_AclSet_AclEntry_MatchedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_AclSet_AclEntry_MatchedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Acl_AclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_AclSet_AclEntry_MatchedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Acl_AclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_MatchedPacketsPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_AclSet_AclEntry_MatchedPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_MatchedPacketsPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_AclSet_AclEntry_MatchedPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_AclSet_AclEntry_MatchedPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Acl_AclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry).MatchedPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_AclSet_AclEntry_MatchedPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Acl_AclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry).MatchedPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_SequenceIdPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state/sequence-id YANG schema element.
type Acl_AclSet_AclEntry_SequenceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_SequenceIdPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state/sequence-id YANG schema element.
type Acl_AclSet_AclEntry_SequenceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/sequence-id"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/sequence-id"
func (n *Acl_AclSet_AclEntry_SequenceIdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Acl_AclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/sequence-id"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/sequence-id"
func (n *Acl_AclSet_AclEntry_SequenceIdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_AclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/sequence-id"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/config/sequence-id"
func (n *Acl_AclSet_AclEntry_SequenceIdPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Acl_AclSet_AclEntry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/sequence-id"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/config/sequence-id"
func (n *Acl_AclSet_AclEntry_SequenceIdPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_AclSet_AclEntry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntryPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry YANG schema element.
type Acl_AclSet_AclEntryPath struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntryPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry YANG schema element.
type Acl_AclSet_AclEntryPathAny struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntryPathMap represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry YANG schema element.
type Acl_AclSet_AclEntryPathMap struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntryPathMapAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry YANG schema element.
type Acl_AclSet_AclEntryPathMapAny struct {
	*ygnmi.NodePath
}

// Actions (container): Enclosing container for list of ACL actions associated
// with an entry
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "actions"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions"
func (n *Acl_AclSet_AclEntryPath) Actions() *Acl_AclSet_AclEntry_ActionsPath {
	ps := &Acl_AclSet_AclEntry_ActionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"actions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Actions (container): Enclosing container for list of ACL actions associated
// with an entry
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "actions"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions"
func (n *Acl_AclSet_AclEntryPathAny) Actions() *Acl_AclSet_AclEntry_ActionsPathAny {
	ps := &Acl_AclSet_AclEntry_ActionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"actions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Description (leaf): A user-defined description, or comment, for this Access List
// Entry.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/description"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/*/description"
func (n *Acl_AclSet_AclEntryPath) Description() *Acl_AclSet_AclEntry_DescriptionPath {
	ps := &Acl_AclSet_AclEntry_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): A user-defined description, or comment, for this Access List
// Entry.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/description"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/*/description"
func (n *Acl_AclSet_AclEntryPathAny) Description() *Acl_AclSet_AclEntry_DescriptionPathAny {
	ps := &Acl_AclSet_AclEntry_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputInterface (container): Input interface container. The interface is resolved based
// on the interface and subinterface leaves of the interface-ref
// container, which are references to entries in the /interfaces
// list.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "input-interface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface"
func (n *Acl_AclSet_AclEntryPath) InputInterface() *Acl_AclSet_AclEntry_InputInterfacePath {
	ps := &Acl_AclSet_AclEntry_InputInterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"input-interface"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InputInterface (container): Input interface container. The interface is resolved based
// on the interface and subinterface leaves of the interface-ref
// container, which are references to entries in the /interfaces
// list.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "input-interface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface"
func (n *Acl_AclSet_AclEntryPathAny) InputInterface() *Acl_AclSet_AclEntry_InputInterfacePathAny {
	ps := &Acl_AclSet_AclEntry_InputInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"input-interface"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4 (container): Top level container for IPv4 match field data
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "ipv4"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4"
func (n *Acl_AclSet_AclEntryPath) Ipv4() *Acl_AclSet_AclEntry_Ipv4Path {
	ps := &Acl_AclSet_AclEntry_Ipv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4 (container): Top level container for IPv4 match field data
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "ipv4"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4"
func (n *Acl_AclSet_AclEntryPathAny) Ipv4() *Acl_AclSet_AclEntry_Ipv4PathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6 (container): Top-level container for IPv6 match field data
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "ipv6"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6"
func (n *Acl_AclSet_AclEntryPath) Ipv6() *Acl_AclSet_AclEntry_Ipv6Path {
	ps := &Acl_AclSet_AclEntry_Ipv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6 (container): Top-level container for IPv6 match field data
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "ipv6"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6"
func (n *Acl_AclSet_AclEntryPathAny) Ipv6() *Acl_AclSet_AclEntry_Ipv6PathAny {
	ps := &Acl_AclSet_AclEntry_Ipv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L2 (container): Ethernet header fields
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "l2"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2"
func (n *Acl_AclSet_AclEntryPath) L2() *Acl_AclSet_AclEntry_L2Path {
	ps := &Acl_AclSet_AclEntry_L2Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"l2"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L2 (container): Ethernet header fields
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "l2"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2"
func (n *Acl_AclSet_AclEntryPathAny) L2() *Acl_AclSet_AclEntry_L2PathAny {
	ps := &Acl_AclSet_AclEntry_L2PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"l2"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_AclSet_AclEntryPath) MatchedOctets() *Acl_AclSet_AclEntry_MatchedOctetsPath {
	ps := &Acl_AclSet_AclEntry_MatchedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_AclSet_AclEntryPathAny) MatchedOctets() *Acl_AclSet_AclEntry_MatchedOctetsPathAny {
	ps := &Acl_AclSet_AclEntry_MatchedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_AclSet_AclEntryPath) MatchedPackets() *Acl_AclSet_AclEntry_MatchedPacketsPath {
	ps := &Acl_AclSet_AclEntry_MatchedPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_AclSet_AclEntryPathAny) MatchedPackets() *Acl_AclSet_AclEntry_MatchedPacketsPathAny {
	ps := &Acl_AclSet_AclEntry_MatchedPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mpls (container): MPLS header fields
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "mpls"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls"
func (n *Acl_AclSet_AclEntryPath) Mpls() *Acl_AclSet_AclEntry_MplsPath {
	ps := &Acl_AclSet_AclEntry_MplsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Mpls (container): MPLS header fields
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "mpls"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls"
func (n *Acl_AclSet_AclEntryPathAny) Mpls() *Acl_AclSet_AclEntry_MplsPathAny {
	ps := &Acl_AclSet_AclEntry_MplsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SequenceId (leaf): The sequence id determines the order in which ACL entries
// are applied.  The sequence id must be unique for each entry
// in an ACL set.  Target devices should apply the ACL entry
// rules in ascending order determined by sequence id (low to
// high), rather than the relying only on order in the list.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/sequence-id"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/*/sequence-id"
func (n *Acl_AclSet_AclEntryPath) SequenceId() *Acl_AclSet_AclEntry_SequenceIdPath {
	ps := &Acl_AclSet_AclEntry_SequenceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceId (leaf): The sequence id determines the order in which ACL entries
// are applied.  The sequence id must be unique for each entry
// in an ACL set.  Target devices should apply the ACL entry
// rules in ascending order determined by sequence id (low to
// high), rather than the relying only on order in the list.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/sequence-id"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/*/sequence-id"
func (n *Acl_AclSet_AclEntryPathAny) SequenceId() *Acl_AclSet_AclEntry_SequenceIdPathAny {
	ps := &Acl_AclSet_AclEntry_SequenceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Transport (container): Transport fields container
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "transport"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport"
func (n *Acl_AclSet_AclEntryPath) Transport() *Acl_AclSet_AclEntry_TransportPath {
	ps := &Acl_AclSet_AclEntry_TransportPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Transport (container): Transport fields container
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "transport"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport"
func (n *Acl_AclSet_AclEntryPathAny) Transport() *Acl_AclSet_AclEntry_TransportPathAny {
	ps := &Acl_AclSet_AclEntry_TransportPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntryPath) State() ygnmi.SingletonQuery[*oc.Acl_AclSet_AclEntry] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet_AclEntry](
		"Acl_AclSet_AclEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntryPathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry](
		"Acl_AclSet_AclEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntryPath) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet_AclEntry] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet_AclEntry](
		"Acl_AclSet_AclEntry",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntryPathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry](
		"Acl_AclSet_AclEntry",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntryPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.Acl_AclSet_AclEntry] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.Acl_AclSet_AclEntry](
		"Acl_AclSet",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Acl_AclSet_AclEntry, bool) {
			ret := gs.(*oc.Acl_AclSet).AclEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:acl-entries"},
			PostRelPath: []string{"openconfig-acl:acl-entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntryPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.Acl_AclSet_AclEntry] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.Acl_AclSet_AclEntry](
		"Acl_AclSet",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Acl_AclSet_AclEntry, bool) {
			ret := gs.(*oc.Acl_AclSet).AclEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:acl-entries"},
			PostRelPath: []string{"openconfig-acl:acl-entry"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntryPathMap) Config() ygnmi.ConfigQuery[map[uint32]*oc.Acl_AclSet_AclEntry] {
	return ygnmi.NewConfigQuery[map[uint32]*oc.Acl_AclSet_AclEntry](
		"Acl_AclSet",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Acl_AclSet_AclEntry, bool) {
			ret := gs.(*oc.Acl_AclSet).AclEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:acl-entries"},
			PostRelPath: []string{"openconfig-acl:acl-entry"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntryPathMapAny) Config() ygnmi.WildcardQuery[map[uint32]*oc.Acl_AclSet_AclEntry] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.Acl_AclSet_AclEntry](
		"Acl_AclSet",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Acl_AclSet_AclEntry, bool) {
			ret := gs.(*oc.Acl_AclSet).AclEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:acl-entries"},
			PostRelPath: []string{"openconfig-acl:acl-entry"},
		},
	)
}

// Acl_AclSet_AclEntry_Actions_ForwardingActionPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/forwarding-action YANG schema element.
type Acl_AclSet_AclEntry_Actions_ForwardingActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Actions_ForwardingActionPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/forwarding-action YANG schema element.
type Acl_AclSet_AclEntry_Actions_ForwardingActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/forwarding-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/forwarding-action"
func (n *Acl_AclSet_AclEntry_Actions_ForwardingActionPath) State() ygnmi.SingletonQuery[oc.E_Acl_FORWARDING_ACTION] {
	return ygnmi.NewSingletonQuery[oc.E_Acl_FORWARDING_ACTION](
		"Acl_AclSet_AclEntry_Actions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "forwarding-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_FORWARDING_ACTION, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Actions).ForwardingAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/forwarding-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/forwarding-action"
func (n *Acl_AclSet_AclEntry_Actions_ForwardingActionPathAny) State() ygnmi.WildcardQuery[oc.E_Acl_FORWARDING_ACTION] {
	return ygnmi.NewWildcardQuery[oc.E_Acl_FORWARDING_ACTION](
		"Acl_AclSet_AclEntry_Actions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "forwarding-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_FORWARDING_ACTION, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Actions).ForwardingAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/forwarding-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config/forwarding-action"
func (n *Acl_AclSet_AclEntry_Actions_ForwardingActionPath) Config() ygnmi.ConfigQuery[oc.E_Acl_FORWARDING_ACTION] {
	return ygnmi.NewConfigQuery[oc.E_Acl_FORWARDING_ACTION](
		"Acl_AclSet_AclEntry_Actions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "forwarding-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_FORWARDING_ACTION, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Actions).ForwardingAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/forwarding-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config/forwarding-action"
func (n *Acl_AclSet_AclEntry_Actions_ForwardingActionPathAny) Config() ygnmi.WildcardQuery[oc.E_Acl_FORWARDING_ACTION] {
	return ygnmi.NewWildcardQuery[oc.E_Acl_FORWARDING_ACTION](
		"Acl_AclSet_AclEntry_Actions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "forwarding-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_FORWARDING_ACTION, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Actions).ForwardingAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Actions_LogActionPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/log-action YANG schema element.
type Acl_AclSet_AclEntry_Actions_LogActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Actions_LogActionPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/log-action YANG schema element.
type Acl_AclSet_AclEntry_Actions_LogActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/log-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/log-action"
func (n *Acl_AclSet_AclEntry_Actions_LogActionPath) State() ygnmi.SingletonQuery[oc.E_Acl_LOG_ACTION] {
	return ygnmi.NewSingletonQuery[oc.E_Acl_LOG_ACTION](
		"Acl_AclSet_AclEntry_Actions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "log-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_LOG_ACTION, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Actions).LogAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/log-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/log-action"
func (n *Acl_AclSet_AclEntry_Actions_LogActionPathAny) State() ygnmi.WildcardQuery[oc.E_Acl_LOG_ACTION] {
	return ygnmi.NewWildcardQuery[oc.E_Acl_LOG_ACTION](
		"Acl_AclSet_AclEntry_Actions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "log-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_LOG_ACTION, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Actions).LogAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/log-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config/log-action"
func (n *Acl_AclSet_AclEntry_Actions_LogActionPath) Config() ygnmi.ConfigQuery[oc.E_Acl_LOG_ACTION] {
	return ygnmi.NewConfigQuery[oc.E_Acl_LOG_ACTION](
		"Acl_AclSet_AclEntry_Actions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "log-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_LOG_ACTION, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Actions).LogAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/log-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config/log-action"
func (n *Acl_AclSet_AclEntry_Actions_LogActionPathAny) Config() ygnmi.WildcardQuery[oc.E_Acl_LOG_ACTION] {
	return ygnmi.NewWildcardQuery[oc.E_Acl_LOG_ACTION](
		"Acl_AclSet_AclEntry_Actions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "log-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_LOG_ACTION, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Actions).LogAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_ActionsPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions YANG schema element.
type Acl_AclSet_AclEntry_ActionsPath struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntry_ActionsPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions YANG schema element.
type Acl_AclSet_AclEntry_ActionsPathAny struct {
	*ygnmi.NodePath
}

// ForwardingAction (leaf): Specifies the forwarding action.  One forwarding action
// must be specified for each ACL entry
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/forwarding-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/*/forwarding-action"
func (n *Acl_AclSet_AclEntry_ActionsPath) ForwardingAction() *Acl_AclSet_AclEntry_Actions_ForwardingActionPath {
	ps := &Acl_AclSet_AclEntry_Actions_ForwardingActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "forwarding-action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ForwardingAction (leaf): Specifies the forwarding action.  One forwarding action
// must be specified for each ACL entry
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/forwarding-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/*/forwarding-action"
func (n *Acl_AclSet_AclEntry_ActionsPathAny) ForwardingAction() *Acl_AclSet_AclEntry_Actions_ForwardingActionPathAny {
	ps := &Acl_AclSet_AclEntry_Actions_ForwardingActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "forwarding-action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LogAction (leaf): Specifies the log action and destination for
// matched packets.  The default is not to log the
// packet.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/log-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/*/log-action"
func (n *Acl_AclSet_AclEntry_ActionsPath) LogAction() *Acl_AclSet_AclEntry_Actions_LogActionPath {
	ps := &Acl_AclSet_AclEntry_Actions_LogActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "log-action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LogAction (leaf): Specifies the log action and destination for
// matched packets.  The default is not to log the
// packet.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/log-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/*/log-action"
func (n *Acl_AclSet_AclEntry_ActionsPathAny) LogAction() *Acl_AclSet_AclEntry_Actions_LogActionPathAny {
	ps := &Acl_AclSet_AclEntry_Actions_LogActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "log-action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_ActionsPath) State() ygnmi.SingletonQuery[*oc.Acl_AclSet_AclEntry_Actions] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet_AclEntry_Actions](
		"Acl_AclSet_AclEntry_Actions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_ActionsPathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Actions] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Actions](
		"Acl_AclSet_AclEntry_Actions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_ActionsPath) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet_AclEntry_Actions] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet_AclEntry_Actions](
		"Acl_AclSet_AclEntry_Actions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_ActionsPathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Actions] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Actions](
		"Acl_AclSet_AclEntry_Actions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_InputInterfacePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface YANG schema element.
type Acl_AclSet_AclEntry_InputInterfacePath struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntry_InputInterfacePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface YANG schema element.
type Acl_AclSet_AclEntry_InputInterfacePathAny struct {
	*ygnmi.NodePath
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "interface-ref"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref"
func (n *Acl_AclSet_AclEntry_InputInterfacePath) InterfaceRef() *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath {
	ps := &Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "interface-ref"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref"
func (n *Acl_AclSet_AclEntry_InputInterfacePathAny) InterfaceRef() *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny {
	ps := &Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_InputInterfacePath) State() ygnmi.SingletonQuery[*oc.Acl_AclSet_AclEntry_InputInterface] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet_AclEntry_InputInterface](
		"Acl_AclSet_AclEntry_InputInterface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_InputInterfacePathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_InputInterface] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_InputInterface](
		"Acl_AclSet_AclEntry_InputInterface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_InputInterfacePath) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet_AclEntry_InputInterface] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet_AclEntry_InputInterface](
		"Acl_AclSet_AclEntry_InputInterface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_InputInterfacePathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_InputInterface] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_InputInterface](
		"Acl_AclSet_AclEntry_InputInterface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/state/interface YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/state/interface YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/interface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/state/interface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/interface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/state/interface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/interface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/config/interface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/interface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/config/interface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/state/subinterface YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/state/subinterface YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/state/subinterface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/state/subinterface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/config/subinterface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/config/subinterface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/interface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/*/interface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath) Interface() *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePath {
	ps := &Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/interface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/*/interface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny) Interface() *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePathAny {
	ps := &Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is required, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/*/subinterface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath) Subinterface() *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePath {
	ps := &Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is required, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/*/subinterface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny) Subinterface() *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePathAny {
	ps := &Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_DestinationAddressPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/destination-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DestinationAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_DestinationAddressPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/destination-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DestinationAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/destination-address-prefix-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/destination-address-prefix-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_DscpPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/dscp YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_DscpPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/dscp YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/dscp"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/dscp"
func (n *Acl_AclSet_AclEntry_Ipv4_DscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/dscp"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/dscp"
func (n *Acl_AclSet_AclEntry_Ipv4_DscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/dscp"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/dscp"
func (n *Acl_AclSet_AclEntry_Ipv4_DscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/dscp"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/dscp"
func (n *Acl_AclSet_AclEntry_Ipv4_DscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_DscpSetPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/dscp-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DscpSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_DscpSetPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/dscp-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DscpSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv4_DscpSetPath) State() ygnmi.SingletonQuery[[]uint8] {
	return ygnmi.NewSingletonQuery[[]uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv4_DscpSetPathAny) State() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv4_DscpSetPath) Config() ygnmi.ConfigQuery[[]uint8] {
	return ygnmi.NewConfigQuery[[]uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv4_DscpSetPathAny) Config() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_HopLimitPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/hop-limit YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_HopLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_HopLimitPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/hop-limit YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_HopLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv4_HopLimitPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv4_HopLimitPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv4_HopLimitPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv4_HopLimitPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_LengthPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/length YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_LengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_LengthPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/length YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_LengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/length"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/length"
func (n *Acl_AclSet_AclEntry_Ipv4_LengthPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/length"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/length"
func (n *Acl_AclSet_AclEntry_Ipv4_LengthPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/length"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/length"
func (n *Acl_AclSet_AclEntry_Ipv4_LengthPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/length"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/length"
func (n *Acl_AclSet_AclEntry_Ipv4_LengthPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_ProtocolPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/protocol YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_ProtocolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_ProtocolPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/protocol YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_ProtocolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/protocol"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/protocol"
func (n *Acl_AclSet_AclEntry_Ipv4_ProtocolPath) State() ygnmi.SingletonQuery[oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union] {
	return ygnmi.NewSingletonQuery[oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/protocol"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/protocol"
func (n *Acl_AclSet_AclEntry_Ipv4_ProtocolPathAny) State() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/protocol"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/protocol"
func (n *Acl_AclSet_AclEntry_Ipv4_ProtocolPath) Config() ygnmi.ConfigQuery[oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union] {
	return ygnmi.NewConfigQuery[oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/protocol"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/protocol"
func (n *Acl_AclSet_AclEntry_Ipv4_ProtocolPathAny) Config() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_SourceAddressPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/source-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_SourceAddressPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/source-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/source-address"
func (n *Acl_AclSet_AclEntry_Ipv4_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/source-address"
func (n *Acl_AclSet_AclEntry_Ipv4_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/source-address"
func (n *Acl_AclSet_AclEntry_Ipv4_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/source-address"
func (n *Acl_AclSet_AclEntry_Ipv4_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/source-address-prefix-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/source-address-prefix-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/source-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/source-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/source-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/source-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4Path represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4 YANG schema element.
type Acl_AclSet_AclEntry_Ipv4Path struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntry_Ipv4PathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4 YANG schema element.
type Acl_AclSet_AclEntry_Ipv4PathAny struct {
	*ygnmi.NodePath
}

// DestinationAddress (leaf): Destination IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv4Path) DestinationAddress() *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPath {
	ps := &Acl_AclSet_AclEntry_Ipv4_DestinationAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddress (leaf): Destination IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) DestinationAddress() *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_DestinationAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv4 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4Path) DestinationAddressPrefixSet() *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPath {
	ps := &Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv4 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) DestinationAddressPrefixSet() *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/dscp"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/dscp"
func (n *Acl_AclSet_AclEntry_Ipv4Path) Dscp() *Acl_AclSet_AclEntry_Ipv4_DscpPath {
	ps := &Acl_AclSet_AclEntry_Ipv4_DscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/dscp"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/dscp"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) Dscp() *Acl_AclSet_AclEntry_Ipv4_DscpPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_DscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv4Path) DscpSet() *Acl_AclSet_AclEntry_Ipv4_DscpSetPath {
	ps := &Acl_AclSet_AclEntry_Ipv4_DscpSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) DscpSet() *Acl_AclSet_AclEntry_Ipv4_DscpSetPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_DscpSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv4Path) HopLimit() *Acl_AclSet_AclEntry_Ipv4_HopLimitPath {
	ps := &Acl_AclSet_AclEntry_Ipv4_HopLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) HopLimit() *Acl_AclSet_AclEntry_Ipv4_HopLimitPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_HopLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Icmpv4 (container): Top container for ICMPv4 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "icmpv4"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4"
func (n *Acl_AclSet_AclEntry_Ipv4Path) Icmpv4() *Acl_AclSet_AclEntry_Ipv4_Icmpv4Path {
	ps := &Acl_AclSet_AclEntry_Ipv4_Icmpv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Icmpv4 (container): Top container for ICMPv4 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "icmpv4"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) Icmpv4() *Acl_AclSet_AclEntry_Ipv4_Icmpv4PathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_Icmpv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/length"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/length"
func (n *Acl_AclSet_AclEntry_Ipv4Path) Length() *Acl_AclSet_AclEntry_Ipv4_LengthPath {
	ps := &Acl_AclSet_AclEntry_Ipv4_LengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/length"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/length"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) Length() *Acl_AclSet_AclEntry_Ipv4_LengthPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_LengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/protocol"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/protocol"
func (n *Acl_AclSet_AclEntry_Ipv4Path) Protocol() *Acl_AclSet_AclEntry_Ipv4_ProtocolPath {
	ps := &Acl_AclSet_AclEntry_Ipv4_ProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/protocol"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/protocol"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) Protocol() *Acl_AclSet_AclEntry_Ipv4_ProtocolPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/source-address"
func (n *Acl_AclSet_AclEntry_Ipv4Path) SourceAddress() *Acl_AclSet_AclEntry_Ipv4_SourceAddressPath {
	ps := &Acl_AclSet_AclEntry_Ipv4_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/source-address"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) SourceAddress() *Acl_AclSet_AclEntry_Ipv4_SourceAddressPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv4 address prefix Set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/source-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4Path) SourceAddressPrefixSet() *Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPath {
	ps := &Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv4 address prefix Set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/source-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) SourceAddressPrefixSet() *Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv4Path) State() ygnmi.SingletonQuery[*oc.Acl_AclSet_AclEntry_Ipv4] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet_AclEntry_Ipv4](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv4] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv4](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv4Path) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet_AclEntry_Ipv4] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet_AclEntry_Ipv4](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv4] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv4](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/state/code YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/state/code YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/code"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/state/code"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePath) State() ygnmi.SingletonQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv4Types_CODE](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/code"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/state/code"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_CODE](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/code"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/config/code"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv4Types_CODE](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/code"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/config/code"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_CODE](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/state/type YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/state/type YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/state/type"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePath) State() ygnmi.SingletonQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv4Types_TYPE](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/state/type"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_TYPE](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/config/type"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv4Types_TYPE](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/config/type"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_TYPE](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_Icmpv4Path represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4 YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_Icmpv4Path struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntry_Ipv4_Icmpv4PathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4 YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_Icmpv4PathAny struct {
	*ygnmi.NodePath
}

// Code (leaf): ICMPv4 code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/code"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/*/code"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4Path) Code() *Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePath {
	ps := &Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Code (leaf): ICMPv4 code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/code"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/*/code"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4PathAny) Code() *Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv4 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/*/type"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4Path) Type() *Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePath {
	ps := &Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv4 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/*/type"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4PathAny) Type() *Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4Path) State() ygnmi.SingletonQuery[*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4PathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4Path) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4PathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv6_DestinationAddressPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/destination-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DestinationAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv6_DestinationAddressPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/destination-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DestinationAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv6_DestinationAddressPrefixSetPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/destination-address-prefix-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DestinationAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv6_DestinationAddressPrefixSetPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/destination-address-prefix-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DestinationAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv6_DestinationFlowLabelPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/destination-flow-label YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DestinationFlowLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv6_DestinationFlowLabelPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/destination-flow-label YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DestinationFlowLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-flow-label"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/destination-flow-label"
func (n *Acl_AclSet_AclEntry_Ipv6_DestinationFlowLabelPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DestinationFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-flow-label"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/destination-flow-label"
func (n *Acl_AclSet_AclEntry_Ipv6_DestinationFlowLabelPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DestinationFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-flow-label"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/destination-flow-label"
func (n *Acl_AclSet_AclEntry_Ipv6_DestinationFlowLabelPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DestinationFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-flow-label"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/destination-flow-label"
func (n *Acl_AclSet_AclEntry_Ipv6_DestinationFlowLabelPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DestinationFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv6_DscpPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/dscp YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv6_DscpPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/dscp YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/dscp"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/dscp"
func (n *Acl_AclSet_AclEntry_Ipv6_DscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/dscp"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/dscp"
func (n *Acl_AclSet_AclEntry_Ipv6_DscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/dscp"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/dscp"
func (n *Acl_AclSet_AclEntry_Ipv6_DscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/dscp"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/dscp"
func (n *Acl_AclSet_AclEntry_Ipv6_DscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv6_DscpSetPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/dscp-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DscpSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv6_DscpSetPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/dscp-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DscpSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv6_DscpSetPath) State() ygnmi.SingletonQuery[[]uint8] {
	return ygnmi.NewSingletonQuery[[]uint8](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv6_DscpSetPathAny) State() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv6_DscpSetPath) Config() ygnmi.ConfigQuery[[]uint8] {
	return ygnmi.NewConfigQuery[[]uint8](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv6_DscpSetPathAny) Config() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv6_HopLimitPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/hop-limit YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_HopLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv6_HopLimitPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/hop-limit YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_HopLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv6_HopLimitPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv6_HopLimitPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv6_HopLimitPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv6_HopLimitPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv6_LengthPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/length YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_LengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv6_LengthPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/length YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_LengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/length"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/length"
func (n *Acl_AclSet_AclEntry_Ipv6_LengthPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/length"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/length"
func (n *Acl_AclSet_AclEntry_Ipv6_LengthPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/length"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/length"
func (n *Acl_AclSet_AclEntry_Ipv6_LengthPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/length"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/length"
func (n *Acl_AclSet_AclEntry_Ipv6_LengthPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv6_ProtocolPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/protocol YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_ProtocolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv6_ProtocolPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/protocol YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_ProtocolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/protocol"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/protocol"
func (n *Acl_AclSet_AclEntry_Ipv6_ProtocolPath) State() ygnmi.SingletonQuery[oc.Acl_AclSet_AclEntry_Ipv6_Protocol_Union] {
	return ygnmi.NewSingletonQuery[oc.Acl_AclSet_AclEntry_Ipv6_Protocol_Union](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Ipv6_Protocol_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/protocol"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/protocol"
func (n *Acl_AclSet_AclEntry_Ipv6_ProtocolPathAny) State() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Ipv6_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Ipv6_Protocol_Union](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Ipv6_Protocol_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/protocol"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/protocol"
func (n *Acl_AclSet_AclEntry_Ipv6_ProtocolPath) Config() ygnmi.ConfigQuery[oc.Acl_AclSet_AclEntry_Ipv6_Protocol_Union] {
	return ygnmi.NewConfigQuery[oc.Acl_AclSet_AclEntry_Ipv6_Protocol_Union](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Ipv6_Protocol_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/protocol"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/protocol"
func (n *Acl_AclSet_AclEntry_Ipv6_ProtocolPathAny) Config() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Ipv6_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Ipv6_Protocol_Union](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Ipv6_Protocol_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv6_SourceAddressPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/source-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv6_SourceAddressPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/source-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/source-address"
func (n *Acl_AclSet_AclEntry_Ipv6_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/source-address"
func (n *Acl_AclSet_AclEntry_Ipv6_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/source-address"
func (n *Acl_AclSet_AclEntry_Ipv6_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/source-address"
func (n *Acl_AclSet_AclEntry_Ipv6_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv6_SourceAddressPrefixSetPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/source-address-prefix-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_SourceAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv6_SourceAddressPrefixSetPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/source-address-prefix-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_SourceAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/source-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv6_SourceAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/source-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv6_SourceAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/source-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv6_SourceAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/source-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv6_SourceAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv6_SourceFlowLabelPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/source-flow-label YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_SourceFlowLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv6_SourceFlowLabelPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/source-flow-label YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_SourceFlowLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-flow-label"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/source-flow-label"
func (n *Acl_AclSet_AclEntry_Ipv6_SourceFlowLabelPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).SourceFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-flow-label"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/source-flow-label"
func (n *Acl_AclSet_AclEntry_Ipv6_SourceFlowLabelPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).SourceFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-flow-label"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/source-flow-label"
func (n *Acl_AclSet_AclEntry_Ipv6_SourceFlowLabelPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).SourceFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-flow-label"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/source-flow-label"
func (n *Acl_AclSet_AclEntry_Ipv6_SourceFlowLabelPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).SourceFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv6Path represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6 YANG schema element.
type Acl_AclSet_AclEntry_Ipv6Path struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntry_Ipv6PathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6 YANG schema element.
type Acl_AclSet_AclEntry_Ipv6PathAny struct {
	*ygnmi.NodePath
}

// DestinationAddress (leaf): Destination IPv6 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv6Path) DestinationAddress() *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPath {
	ps := &Acl_AclSet_AclEntry_Ipv6_DestinationAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddress (leaf): Destination IPv6 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) DestinationAddress() *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv6_DestinationAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv6 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv6Path) DestinationAddressPrefixSet() *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPrefixSetPath {
	ps := &Acl_AclSet_AclEntry_Ipv6_DestinationAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv6 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) DestinationAddressPrefixSet() *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPrefixSetPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv6_DestinationAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationFlowLabel (leaf): Destination IPv6 Flow label.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-flow-label"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/destination-flow-label"
func (n *Acl_AclSet_AclEntry_Ipv6Path) DestinationFlowLabel() *Acl_AclSet_AclEntry_Ipv6_DestinationFlowLabelPath {
	ps := &Acl_AclSet_AclEntry_Ipv6_DestinationFlowLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-flow-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationFlowLabel (leaf): Destination IPv6 Flow label.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-flow-label"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/destination-flow-label"
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) DestinationFlowLabel() *Acl_AclSet_AclEntry_Ipv6_DestinationFlowLabelPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv6_DestinationFlowLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-flow-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/dscp"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/dscp"
func (n *Acl_AclSet_AclEntry_Ipv6Path) Dscp() *Acl_AclSet_AclEntry_Ipv6_DscpPath {
	ps := &Acl_AclSet_AclEntry_Ipv6_DscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/dscp"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/dscp"
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) Dscp() *Acl_AclSet_AclEntry_Ipv6_DscpPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv6_DscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv6Path) DscpSet() *Acl_AclSet_AclEntry_Ipv6_DscpSetPath {
	ps := &Acl_AclSet_AclEntry_Ipv6_DscpSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) DscpSet() *Acl_AclSet_AclEntry_Ipv6_DscpSetPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv6_DscpSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv6Path) HopLimit() *Acl_AclSet_AclEntry_Ipv6_HopLimitPath {
	ps := &Acl_AclSet_AclEntry_Ipv6_HopLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) HopLimit() *Acl_AclSet_AclEntry_Ipv6_HopLimitPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv6_HopLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Icmpv6 (container): Top container for ICMPv6 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "icmpv6"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6"
func (n *Acl_AclSet_AclEntry_Ipv6Path) Icmpv6() *Acl_AclSet_AclEntry_Ipv6_Icmpv6Path {
	ps := &Acl_AclSet_AclEntry_Ipv6_Icmpv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Icmpv6 (container): Top container for ICMPv6 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "icmpv6"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6"
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) Icmpv6() *Acl_AclSet_AclEntry_Ipv6_Icmpv6PathAny {
	ps := &Acl_AclSet_AclEntry_Ipv6_Icmpv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/length"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/length"
func (n *Acl_AclSet_AclEntry_Ipv6Path) Length() *Acl_AclSet_AclEntry_Ipv6_LengthPath {
	ps := &Acl_AclSet_AclEntry_Ipv6_LengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/length"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/length"
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) Length() *Acl_AclSet_AclEntry_Ipv6_LengthPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv6_LengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/protocol"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/protocol"
func (n *Acl_AclSet_AclEntry_Ipv6Path) Protocol() *Acl_AclSet_AclEntry_Ipv6_ProtocolPath {
	ps := &Acl_AclSet_AclEntry_Ipv6_ProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/protocol"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/protocol"
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) Protocol() *Acl_AclSet_AclEntry_Ipv6_ProtocolPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv6_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv6 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/source-address"
func (n *Acl_AclSet_AclEntry_Ipv6Path) SourceAddress() *Acl_AclSet_AclEntry_Ipv6_SourceAddressPath {
	ps := &Acl_AclSet_AclEntry_Ipv6_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv6 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/source-address"
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) SourceAddress() *Acl_AclSet_AclEntry_Ipv6_SourceAddressPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv6_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv6 address prefix set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/source-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv6Path) SourceAddressPrefixSet() *Acl_AclSet_AclEntry_Ipv6_SourceAddressPrefixSetPath {
	ps := &Acl_AclSet_AclEntry_Ipv6_SourceAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv6 address prefix set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/source-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) SourceAddressPrefixSet() *Acl_AclSet_AclEntry_Ipv6_SourceAddressPrefixSetPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv6_SourceAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceFlowLabel (leaf): Source IPv6 Flow label.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-flow-label"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/source-flow-label"
func (n *Acl_AclSet_AclEntry_Ipv6Path) SourceFlowLabel() *Acl_AclSet_AclEntry_Ipv6_SourceFlowLabelPath {
	ps := &Acl_AclSet_AclEntry_Ipv6_SourceFlowLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-flow-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceFlowLabel (leaf): Source IPv6 Flow label.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-flow-label"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/*/source-flow-label"
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) SourceFlowLabel() *Acl_AclSet_AclEntry_Ipv6_SourceFlowLabelPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv6_SourceFlowLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-flow-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv6Path) State() ygnmi.SingletonQuery[*oc.Acl_AclSet_AclEntry_Ipv6] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet_AclEntry_Ipv6](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv6] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv6](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv6Path) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet_AclEntry_Ipv6] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet_AclEntry_Ipv6](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv6] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv6](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv6_Icmpv6_CodePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/state/code YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_Icmpv6_CodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv6_Icmpv6_CodePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/state/code YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_Icmpv6_CodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/code"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/state/code"
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6_CodePath) State() ygnmi.SingletonQuery[oc.E_Icmpv6Types_CODE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv6Types_CODE](
		"Acl_AclSet_AclEntry_Ipv6_Icmpv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_CODE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/code"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/state/code"
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6_CodePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv6Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_CODE](
		"Acl_AclSet_AclEntry_Ipv6_Icmpv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_CODE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/code"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/config/code"
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6_CodePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv6Types_CODE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv6Types_CODE](
		"Acl_AclSet_AclEntry_Ipv6_Icmpv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_CODE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/code"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/config/code"
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6_CodePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv6Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_CODE](
		"Acl_AclSet_AclEntry_Ipv6_Icmpv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_CODE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/state/type YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/state/type YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/state/type"
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePath) State() ygnmi.SingletonQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv6Types_TYPE](
		"Acl_AclSet_AclEntry_Ipv6_Icmpv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/state/type"
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_TYPE](
		"Acl_AclSet_AclEntry_Ipv6_Icmpv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/config/type"
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv6Types_TYPE](
		"Acl_AclSet_AclEntry_Ipv6_Icmpv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/config/type"
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_TYPE](
		"Acl_AclSet_AclEntry_Ipv6_Icmpv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv6_Icmpv6Path represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6 YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_Icmpv6Path struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntry_Ipv6_Icmpv6PathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6 YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_Icmpv6PathAny struct {
	*ygnmi.NodePath
}

// Code (leaf): ICMP code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/code"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/*/code"
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6Path) Code() *Acl_AclSet_AclEntry_Ipv6_Icmpv6_CodePath {
	ps := &Acl_AclSet_AclEntry_Ipv6_Icmpv6_CodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Code (leaf): ICMP code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/code"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/*/code"
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6PathAny) Code() *Acl_AclSet_AclEntry_Ipv6_Icmpv6_CodePathAny {
	ps := &Acl_AclSet_AclEntry_Ipv6_Icmpv6_CodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv6 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/*/type"
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6Path) Type() *Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePath {
	ps := &Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv6 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/*/type"
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6PathAny) Type() *Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePathAny {
	ps := &Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6Path) State() ygnmi.SingletonQuery[*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6](
		"Acl_AclSet_AclEntry_Ipv6_Icmpv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6PathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6](
		"Acl_AclSet_AclEntry_Ipv6_Icmpv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6Path) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6](
		"Acl_AclSet_AclEntry_Ipv6_Icmpv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6PathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6](
		"Acl_AclSet_AclEntry_Ipv6_Icmpv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_L2_DestinationMacPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/destination-mac YANG schema element.
type Acl_AclSet_AclEntry_L2_DestinationMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_L2_DestinationMacPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/destination-mac YANG schema element.
type Acl_AclSet_AclEntry_L2_DestinationMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/destination-mac"
func (n *Acl_AclSet_AclEntry_L2_DestinationMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/destination-mac"
func (n *Acl_AclSet_AclEntry_L2_DestinationMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/destination-mac"
func (n *Acl_AclSet_AclEntry_L2_DestinationMacPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/destination-mac"
func (n *Acl_AclSet_AclEntry_L2_DestinationMacPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_L2_DestinationMacMaskPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/destination-mac-mask YANG schema element.
type Acl_AclSet_AclEntry_L2_DestinationMacMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_L2_DestinationMacMaskPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/destination-mac-mask YANG schema element.
type Acl_AclSet_AclEntry_L2_DestinationMacMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/destination-mac-mask"
func (n *Acl_AclSet_AclEntry_L2_DestinationMacMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/destination-mac-mask"
func (n *Acl_AclSet_AclEntry_L2_DestinationMacMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/destination-mac-mask"
func (n *Acl_AclSet_AclEntry_L2_DestinationMacMaskPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/destination-mac-mask"
func (n *Acl_AclSet_AclEntry_L2_DestinationMacMaskPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_L2_EthertypePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/ethertype YANG schema element.
type Acl_AclSet_AclEntry_L2_EthertypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_L2_EthertypePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/ethertype YANG schema element.
type Acl_AclSet_AclEntry_L2_EthertypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/ethertype"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/ethertype"
func (n *Acl_AclSet_AclEntry_L2_EthertypePath) State() ygnmi.SingletonQuery[oc.Acl_AclSet_AclEntry_L2_Ethertype_Union] {
	return ygnmi.NewSingletonQuery[oc.Acl_AclSet_AclEntry_L2_Ethertype_Union](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/ethertype"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/ethertype"
func (n *Acl_AclSet_AclEntry_L2_EthertypePathAny) State() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_L2_Ethertype_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_L2_Ethertype_Union](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/ethertype"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/ethertype"
func (n *Acl_AclSet_AclEntry_L2_EthertypePath) Config() ygnmi.ConfigQuery[oc.Acl_AclSet_AclEntry_L2_Ethertype_Union] {
	return ygnmi.NewConfigQuery[oc.Acl_AclSet_AclEntry_L2_Ethertype_Union](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/ethertype"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/ethertype"
func (n *Acl_AclSet_AclEntry_L2_EthertypePathAny) Config() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_L2_Ethertype_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_L2_Ethertype_Union](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_L2_SourceMacPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/source-mac YANG schema element.
type Acl_AclSet_AclEntry_L2_SourceMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_L2_SourceMacPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/source-mac YANG schema element.
type Acl_AclSet_AclEntry_L2_SourceMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/source-mac"
func (n *Acl_AclSet_AclEntry_L2_SourceMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/source-mac"
func (n *Acl_AclSet_AclEntry_L2_SourceMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/source-mac"
func (n *Acl_AclSet_AclEntry_L2_SourceMacPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/source-mac"
func (n *Acl_AclSet_AclEntry_L2_SourceMacPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_L2_SourceMacMaskPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/source-mac-mask YANG schema element.
type Acl_AclSet_AclEntry_L2_SourceMacMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_L2_SourceMacMaskPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/source-mac-mask YANG schema element.
type Acl_AclSet_AclEntry_L2_SourceMacMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/source-mac-mask"
func (n *Acl_AclSet_AclEntry_L2_SourceMacMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/source-mac-mask"
func (n *Acl_AclSet_AclEntry_L2_SourceMacMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/source-mac-mask"
func (n *Acl_AclSet_AclEntry_L2_SourceMacMaskPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/source-mac-mask"
func (n *Acl_AclSet_AclEntry_L2_SourceMacMaskPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_L2Path represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2 YANG schema element.
type Acl_AclSet_AclEntry_L2Path struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntry_L2PathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2 YANG schema element.
type Acl_AclSet_AclEntry_L2PathAny struct {
	*ygnmi.NodePath
}

// DestinationMac (leaf): Destination IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/*/destination-mac"
func (n *Acl_AclSet_AclEntry_L2Path) DestinationMac() *Acl_AclSet_AclEntry_L2_DestinationMacPath {
	ps := &Acl_AclSet_AclEntry_L2_DestinationMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationMac (leaf): Destination IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/*/destination-mac"
func (n *Acl_AclSet_AclEntry_L2PathAny) DestinationMac() *Acl_AclSet_AclEntry_L2_DestinationMacPathAny {
	ps := &Acl_AclSet_AclEntry_L2_DestinationMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationMacMask (leaf): Destination IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/*/destination-mac-mask"
func (n *Acl_AclSet_AclEntry_L2Path) DestinationMacMask() *Acl_AclSet_AclEntry_L2_DestinationMacMaskPath {
	ps := &Acl_AclSet_AclEntry_L2_DestinationMacMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationMacMask (leaf): Destination IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/*/destination-mac-mask"
func (n *Acl_AclSet_AclEntry_L2PathAny) DestinationMacMask() *Acl_AclSet_AclEntry_L2_DestinationMacMaskPathAny {
	ps := &Acl_AclSet_AclEntry_L2_DestinationMacMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ethertype (leaf): Ethertype field to match in Ethernet packets
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/ethertype"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/*/ethertype"
func (n *Acl_AclSet_AclEntry_L2Path) Ethertype() *Acl_AclSet_AclEntry_L2_EthertypePath {
	ps := &Acl_AclSet_AclEntry_L2_EthertypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ethertype"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ethertype (leaf): Ethertype field to match in Ethernet packets
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/ethertype"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/*/ethertype"
func (n *Acl_AclSet_AclEntry_L2PathAny) Ethertype() *Acl_AclSet_AclEntry_L2_EthertypePathAny {
	ps := &Acl_AclSet_AclEntry_L2_EthertypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ethertype"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMac (leaf): Source IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/*/source-mac"
func (n *Acl_AclSet_AclEntry_L2Path) SourceMac() *Acl_AclSet_AclEntry_L2_SourceMacPath {
	ps := &Acl_AclSet_AclEntry_L2_SourceMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMac (leaf): Source IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/*/source-mac"
func (n *Acl_AclSet_AclEntry_L2PathAny) SourceMac() *Acl_AclSet_AclEntry_L2_SourceMacPathAny {
	ps := &Acl_AclSet_AclEntry_L2_SourceMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMacMask (leaf): Source IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/*/source-mac-mask"
func (n *Acl_AclSet_AclEntry_L2Path) SourceMacMask() *Acl_AclSet_AclEntry_L2_SourceMacMaskPath {
	ps := &Acl_AclSet_AclEntry_L2_SourceMacMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMacMask (leaf): Source IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/*/source-mac-mask"
func (n *Acl_AclSet_AclEntry_L2PathAny) SourceMacMask() *Acl_AclSet_AclEntry_L2_SourceMacMaskPathAny {
	ps := &Acl_AclSet_AclEntry_L2_SourceMacMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_L2Path) State() ygnmi.SingletonQuery[*oc.Acl_AclSet_AclEntry_L2] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet_AclEntry_L2](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_L2PathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_L2] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_L2](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_L2Path) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet_AclEntry_L2] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet_AclEntry_L2](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_L2PathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_L2] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_L2](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Mpls_EndLabelValuePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/end-label-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_EndLabelValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Mpls_EndLabelValuePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/end-label-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_EndLabelValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/end-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/end-label-value"
func (n *Acl_AclSet_AclEntry_Mpls_EndLabelValuePath) State() ygnmi.SingletonQuery[oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union] {
	return ygnmi.NewSingletonQuery[oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union](
		"Acl_AclSet_AclEntry_Mpls",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "end-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).EndLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/end-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/end-label-value"
func (n *Acl_AclSet_AclEntry_Mpls_EndLabelValuePathAny) State() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union](
		"Acl_AclSet_AclEntry_Mpls",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "end-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).EndLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/end-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/end-label-value"
func (n *Acl_AclSet_AclEntry_Mpls_EndLabelValuePath) Config() ygnmi.ConfigQuery[oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union] {
	return ygnmi.NewConfigQuery[oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union](
		"Acl_AclSet_AclEntry_Mpls",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "end-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).EndLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/end-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/end-label-value"
func (n *Acl_AclSet_AclEntry_Mpls_EndLabelValuePathAny) Config() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union](
		"Acl_AclSet_AclEntry_Mpls",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "end-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).EndLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Mpls_StartLabelValuePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/start-label-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_StartLabelValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Mpls_StartLabelValuePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/start-label-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_StartLabelValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/start-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/start-label-value"
func (n *Acl_AclSet_AclEntry_Mpls_StartLabelValuePath) State() ygnmi.SingletonQuery[oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union] {
	return ygnmi.NewSingletonQuery[oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union](
		"Acl_AclSet_AclEntry_Mpls",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "start-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).StartLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/start-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/start-label-value"
func (n *Acl_AclSet_AclEntry_Mpls_StartLabelValuePathAny) State() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union](
		"Acl_AclSet_AclEntry_Mpls",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "start-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).StartLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/start-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/start-label-value"
func (n *Acl_AclSet_AclEntry_Mpls_StartLabelValuePath) Config() ygnmi.ConfigQuery[oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union] {
	return ygnmi.NewConfigQuery[oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union](
		"Acl_AclSet_AclEntry_Mpls",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "start-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).StartLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/start-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/start-label-value"
func (n *Acl_AclSet_AclEntry_Mpls_StartLabelValuePathAny) Config() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union](
		"Acl_AclSet_AclEntry_Mpls",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "start-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).StartLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Mpls_TrafficClassPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/traffic-class YANG schema element.
type Acl_AclSet_AclEntry_Mpls_TrafficClassPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Mpls_TrafficClassPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/traffic-class YANG schema element.
type Acl_AclSet_AclEntry_Mpls_TrafficClassPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/traffic-class"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/traffic-class"
func (n *Acl_AclSet_AclEntry_Mpls_TrafficClassPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Acl_AclSet_AclEntry_Mpls",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "traffic-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).TrafficClass
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/traffic-class"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/traffic-class"
func (n *Acl_AclSet_AclEntry_Mpls_TrafficClassPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Acl_AclSet_AclEntry_Mpls",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "traffic-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).TrafficClass
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/traffic-class"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/traffic-class"
func (n *Acl_AclSet_AclEntry_Mpls_TrafficClassPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Acl_AclSet_AclEntry_Mpls",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "traffic-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).TrafficClass
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/traffic-class"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/traffic-class"
func (n *Acl_AclSet_AclEntry_Mpls_TrafficClassPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Acl_AclSet_AclEntry_Mpls",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "traffic-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).TrafficClass
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Mpls_TtlValuePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/ttl-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_TtlValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Mpls_TtlValuePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/ttl-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_TtlValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/ttl-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/ttl-value"
func (n *Acl_AclSet_AclEntry_Mpls_TtlValuePath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Acl_AclSet_AclEntry_Mpls",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).TtlValue
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/ttl-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/ttl-value"
func (n *Acl_AclSet_AclEntry_Mpls_TtlValuePathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Acl_AclSet_AclEntry_Mpls",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).TtlValue
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/ttl-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/ttl-value"
func (n *Acl_AclSet_AclEntry_Mpls_TtlValuePath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Acl_AclSet_AclEntry_Mpls",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ttl-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).TtlValue
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/ttl-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/ttl-value"
func (n *Acl_AclSet_AclEntry_Mpls_TtlValuePathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Acl_AclSet_AclEntry_Mpls",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ttl-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).TtlValue
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_MplsPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls YANG schema element.
type Acl_AclSet_AclEntry_MplsPath struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntry_MplsPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls YANG schema element.
type Acl_AclSet_AclEntry_MplsPathAny struct {
	*ygnmi.NodePath
}

// EndLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/end-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/*/end-label-value"
func (n *Acl_AclSet_AclEntry_MplsPath) EndLabelValue() *Acl_AclSet_AclEntry_Mpls_EndLabelValuePath {
	ps := &Acl_AclSet_AclEntry_Mpls_EndLabelValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "end-label-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EndLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/end-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/*/end-label-value"
func (n *Acl_AclSet_AclEntry_MplsPathAny) EndLabelValue() *Acl_AclSet_AclEntry_Mpls_EndLabelValuePathAny {
	ps := &Acl_AclSet_AclEntry_Mpls_EndLabelValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "end-label-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StartLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/start-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/*/start-label-value"
func (n *Acl_AclSet_AclEntry_MplsPath) StartLabelValue() *Acl_AclSet_AclEntry_Mpls_StartLabelValuePath {
	ps := &Acl_AclSet_AclEntry_Mpls_StartLabelValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "start-label-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StartLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/start-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/*/start-label-value"
func (n *Acl_AclSet_AclEntry_MplsPathAny) StartLabelValue() *Acl_AclSet_AclEntry_Mpls_StartLabelValuePathAny {
	ps := &Acl_AclSet_AclEntry_Mpls_StartLabelValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "start-label-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrafficClass (leaf): The value of the MPLS traffic class (TC) bits,
// formerly known as the EXP bits.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/traffic-class"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/*/traffic-class"
func (n *Acl_AclSet_AclEntry_MplsPath) TrafficClass() *Acl_AclSet_AclEntry_Mpls_TrafficClassPath {
	ps := &Acl_AclSet_AclEntry_Mpls_TrafficClassPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "traffic-class"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrafficClass (leaf): The value of the MPLS traffic class (TC) bits,
// formerly known as the EXP bits.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/traffic-class"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/*/traffic-class"
func (n *Acl_AclSet_AclEntry_MplsPathAny) TrafficClass() *Acl_AclSet_AclEntry_Mpls_TrafficClassPathAny {
	ps := &Acl_AclSet_AclEntry_Mpls_TrafficClassPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "traffic-class"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TtlValue (leaf): Time-to-live MPLS packet value match.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/ttl-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/*/ttl-value"
func (n *Acl_AclSet_AclEntry_MplsPath) TtlValue() *Acl_AclSet_AclEntry_Mpls_TtlValuePath {
	ps := &Acl_AclSet_AclEntry_Mpls_TtlValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ttl-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TtlValue (leaf): Time-to-live MPLS packet value match.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/ttl-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/*/ttl-value"
func (n *Acl_AclSet_AclEntry_MplsPathAny) TtlValue() *Acl_AclSet_AclEntry_Mpls_TtlValuePathAny {
	ps := &Acl_AclSet_AclEntry_Mpls_TtlValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ttl-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_MplsPath) State() ygnmi.SingletonQuery[*oc.Acl_AclSet_AclEntry_Mpls] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet_AclEntry_Mpls](
		"Acl_AclSet_AclEntry_Mpls",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_MplsPathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Mpls] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Mpls](
		"Acl_AclSet_AclEntry_Mpls",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_MplsPath) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet_AclEntry_Mpls] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet_AclEntry_Mpls](
		"Acl_AclSet_AclEntry_Mpls",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_MplsPathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Mpls] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Mpls](
		"Acl_AclSet_AclEntry_Mpls",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Transport_BuiltinDetailPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/builtin-detail YANG schema element.
type Acl_AclSet_AclEntry_Transport_BuiltinDetailPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Transport_BuiltinDetailPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/builtin-detail YANG schema element.
type Acl_AclSet_AclEntry_Transport_BuiltinDetailPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/builtin-detail"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/builtin-detail"
func (n *Acl_AclSet_AclEntry_Transport_BuiltinDetailPath) State() ygnmi.SingletonQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewSingletonQuery[oc.E_Transport_BuiltinDetail](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/builtin-detail"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/builtin-detail"
func (n *Acl_AclSet_AclEntry_Transport_BuiltinDetailPathAny) State() ygnmi.WildcardQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_BuiltinDetail](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/builtin-detail"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/builtin-detail"
func (n *Acl_AclSet_AclEntry_Transport_BuiltinDetailPath) Config() ygnmi.ConfigQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewConfigQuery[oc.E_Transport_BuiltinDetail](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/builtin-detail"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/builtin-detail"
func (n *Acl_AclSet_AclEntry_Transport_BuiltinDetailPathAny) Config() ygnmi.WildcardQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_BuiltinDetail](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Transport_DestinationPortPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port YANG schema element.
type Acl_AclSet_AclEntry_Transport_DestinationPortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Transport_DestinationPortPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port YANG schema element.
type Acl_AclSet_AclEntry_Transport_DestinationPortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port"
func (n *Acl_AclSet_AclEntry_Transport_DestinationPortPath) State() ygnmi.SingletonQuery[oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union] {
	return ygnmi.NewSingletonQuery[oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port"
func (n *Acl_AclSet_AclEntry_Transport_DestinationPortPathAny) State() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port"
func (n *Acl_AclSet_AclEntry_Transport_DestinationPortPath) Config() ygnmi.ConfigQuery[oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union] {
	return ygnmi.NewConfigQuery[oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port"
func (n *Acl_AclSet_AclEntry_Transport_DestinationPortPathAny) Config() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Transport_DestinationPortSetPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port-set YANG schema element.
type Acl_AclSet_AclEntry_Transport_DestinationPortSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Transport_DestinationPortSetPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port-set YANG schema element.
type Acl_AclSet_AclEntry_Transport_DestinationPortSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port-set"
func (n *Acl_AclSet_AclEntry_Transport_DestinationPortSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port-set"
func (n *Acl_AclSet_AclEntry_Transport_DestinationPortSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port-set"
func (n *Acl_AclSet_AclEntry_Transport_DestinationPortSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port-set"
func (n *Acl_AclSet_AclEntry_Transport_DestinationPortSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Transport_DetailModePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/detail-mode YANG schema element.
type Acl_AclSet_AclEntry_Transport_DetailModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Transport_DetailModePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/detail-mode YANG schema element.
type Acl_AclSet_AclEntry_Transport_DetailModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/detail-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/detail-mode"
func (n *Acl_AclSet_AclEntry_Transport_DetailModePath) State() ygnmi.SingletonQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewSingletonQuery[oc.E_Transport_DetailMode](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/detail-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/detail-mode"
func (n *Acl_AclSet_AclEntry_Transport_DetailModePathAny) State() ygnmi.WildcardQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_DetailMode](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/detail-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/detail-mode"
func (n *Acl_AclSet_AclEntry_Transport_DetailModePath) Config() ygnmi.ConfigQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewConfigQuery[oc.E_Transport_DetailMode](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/detail-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/detail-mode"
func (n *Acl_AclSet_AclEntry_Transport_DetailModePathAny) Config() ygnmi.WildcardQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_DetailMode](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/explicit-detail-match-mode YANG schema element.
type Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/explicit-detail-match-mode YANG schema element.
type Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/explicit-detail-match-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/explicit-detail-match-mode"
func (n *Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePath) State() ygnmi.SingletonQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewSingletonQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/explicit-detail-match-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/explicit-detail-match-mode"
func (n *Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePathAny) State() ygnmi.WildcardQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/explicit-detail-match-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/explicit-detail-match-mode"
func (n *Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePath) Config() ygnmi.ConfigQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewConfigQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/explicit-detail-match-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/explicit-detail-match-mode"
func (n *Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePathAny) Config() ygnmi.WildcardQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/explicit-tcp-flags YANG schema element.
type Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/explicit-tcp-flags YANG schema element.
type Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/explicit-tcp-flags"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/explicit-tcp-flags"
func (n *Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPath) State() ygnmi.SingletonQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewSingletonQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/explicit-tcp-flags"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/explicit-tcp-flags"
func (n *Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewWildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/explicit-tcp-flags"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/explicit-tcp-flags"
func (n *Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPath) Config() ygnmi.ConfigQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewConfigQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/explicit-tcp-flags"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/explicit-tcp-flags"
func (n *Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPathAny) Config() ygnmi.WildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewWildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Transport_SourcePortPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port YANG schema element.
type Acl_AclSet_AclEntry_Transport_SourcePortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Transport_SourcePortPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port YANG schema element.
type Acl_AclSet_AclEntry_Transport_SourcePortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port"
func (n *Acl_AclSet_AclEntry_Transport_SourcePortPath) State() ygnmi.SingletonQuery[oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union] {
	return ygnmi.NewSingletonQuery[oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port"
func (n *Acl_AclSet_AclEntry_Transport_SourcePortPathAny) State() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port"
func (n *Acl_AclSet_AclEntry_Transport_SourcePortPath) Config() ygnmi.ConfigQuery[oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union] {
	return ygnmi.NewConfigQuery[oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port"
func (n *Acl_AclSet_AclEntry_Transport_SourcePortPathAny) Config() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Transport_SourcePortSetPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port-set YANG schema element.
type Acl_AclSet_AclEntry_Transport_SourcePortSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Transport_SourcePortSetPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port-set YANG schema element.
type Acl_AclSet_AclEntry_Transport_SourcePortSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port-set"
func (n *Acl_AclSet_AclEntry_Transport_SourcePortSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port-set"
func (n *Acl_AclSet_AclEntry_Transport_SourcePortSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port-set"
func (n *Acl_AclSet_AclEntry_Transport_SourcePortSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port-set"
func (n *Acl_AclSet_AclEntry_Transport_SourcePortSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_TransportPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport YANG schema element.
type Acl_AclSet_AclEntry_TransportPath struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntry_TransportPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport YANG schema element.
type Acl_AclSet_AclEntry_TransportPathAny struct {
	*ygnmi.NodePath
}

// BuiltinDetail (leaf): Specifies a built-in (alias) for a match condition that matches
// multiple flags, or specifies particular logic as to the flag matches
// to be implemented. This leaf is only valid when the detail-match-mode
// leaf is BUILTIN.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/builtin-detail"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/builtin-detail"
func (n *Acl_AclSet_AclEntry_TransportPath) BuiltinDetail() *Acl_AclSet_AclEntry_Transport_BuiltinDetailPath {
	ps := &Acl_AclSet_AclEntry_Transport_BuiltinDetailPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "builtin-detail"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BuiltinDetail (leaf): Specifies a built-in (alias) for a match condition that matches
// multiple flags, or specifies particular logic as to the flag matches
// to be implemented. This leaf is only valid when the detail-match-mode
// leaf is BUILTIN.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/builtin-detail"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/builtin-detail"
func (n *Acl_AclSet_AclEntry_TransportPathAny) BuiltinDetail() *Acl_AclSet_AclEntry_Transport_BuiltinDetailPathAny {
	ps := &Acl_AclSet_AclEntry_Transport_BuiltinDetailPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "builtin-detail"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPort (leaf): Destination port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/destination-port"
func (n *Acl_AclSet_AclEntry_TransportPath) DestinationPort() *Acl_AclSet_AclEntry_Transport_DestinationPortPath {
	ps := &Acl_AclSet_AclEntry_Transport_DestinationPortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPort (leaf): Destination port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/destination-port"
func (n *Acl_AclSet_AclEntry_TransportPathAny) DestinationPort() *Acl_AclSet_AclEntry_Transport_DestinationPortPathAny {
	ps := &Acl_AclSet_AclEntry_Transport_DestinationPortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPortSet (leaf): Reference to a port set
// to match the destination port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/destination-port-set"
func (n *Acl_AclSet_AclEntry_TransportPath) DestinationPortSet() *Acl_AclSet_AclEntry_Transport_DestinationPortSetPath {
	ps := &Acl_AclSet_AclEntry_Transport_DestinationPortSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPortSet (leaf): Reference to a port set
// to match the destination port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/destination-port-set"
func (n *Acl_AclSet_AclEntry_TransportPathAny) DestinationPortSet() *Acl_AclSet_AclEntry_Transport_DestinationPortSetPathAny {
	ps := &Acl_AclSet_AclEntry_Transport_DestinationPortSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetailMode (leaf): Mode that is used for matching detailed fields at the transport
// layer. When EXPLICIT is specified, the implementation should
// match based on the explicit flags that are specified in the
// corresponding leaf. When BUILTIN is specified, the implementation
// must expand the contents of the corresponding leaf to the flags
// and/or fields that match the pre-defined built-in values.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/detail-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/detail-mode"
func (n *Acl_AclSet_AclEntry_TransportPath) DetailMode() *Acl_AclSet_AclEntry_Transport_DetailModePath {
	ps := &Acl_AclSet_AclEntry_Transport_DetailModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "detail-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetailMode (leaf): Mode that is used for matching detailed fields at the transport
// layer. When EXPLICIT is specified, the implementation should
// match based on the explicit flags that are specified in the
// corresponding leaf. When BUILTIN is specified, the implementation
// must expand the contents of the corresponding leaf to the flags
// and/or fields that match the pre-defined built-in values.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/detail-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/detail-mode"
func (n *Acl_AclSet_AclEntry_TransportPathAny) DetailMode() *Acl_AclSet_AclEntry_Transport_DetailModePathAny {
	ps := &Acl_AclSet_AclEntry_Transport_DetailModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "detail-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitDetailMatchMode (leaf): Specifies how the contents of the explicit-details-flags list
// are to be treated. ANY implies that any of the flags may match,
// where ALL indicates that all the flags must be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/explicit-detail-match-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/explicit-detail-match-mode"
func (n *Acl_AclSet_AclEntry_TransportPath) ExplicitDetailMatchMode() *Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePath {
	ps := &Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-detail-match-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitDetailMatchMode (leaf): Specifies how the contents of the explicit-details-flags list
// are to be treated. ANY implies that any of the flags may match,
// where ALL indicates that all the flags must be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/explicit-detail-match-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/explicit-detail-match-mode"
func (n *Acl_AclSet_AclEntry_TransportPathAny) ExplicitDetailMatchMode() *Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePathAny {
	ps := &Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-detail-match-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitTcpFlags (leaf-list): An explicit list of the TCP flags that are to be matched. The
// mechanism for the match is specified by the explicit-detail-match-mode
// leaf.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/explicit-tcp-flags"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/explicit-tcp-flags"
func (n *Acl_AclSet_AclEntry_TransportPath) ExplicitTcpFlags() *Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPath {
	ps := &Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-tcp-flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitTcpFlags (leaf-list): An explicit list of the TCP flags that are to be matched. The
// mechanism for the match is specified by the explicit-detail-match-mode
// leaf.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/explicit-tcp-flags"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/explicit-tcp-flags"
func (n *Acl_AclSet_AclEntry_TransportPathAny) ExplicitTcpFlags() *Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPathAny {
	ps := &Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-tcp-flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePort (leaf): Source port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/source-port"
func (n *Acl_AclSet_AclEntry_TransportPath) SourcePort() *Acl_AclSet_AclEntry_Transport_SourcePortPath {
	ps := &Acl_AclSet_AclEntry_Transport_SourcePortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePort (leaf): Source port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/source-port"
func (n *Acl_AclSet_AclEntry_TransportPathAny) SourcePort() *Acl_AclSet_AclEntry_Transport_SourcePortPathAny {
	ps := &Acl_AclSet_AclEntry_Transport_SourcePortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePortSet (leaf): Reference to a port set
// to match the source port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/source-port-set"
func (n *Acl_AclSet_AclEntry_TransportPath) SourcePortSet() *Acl_AclSet_AclEntry_Transport_SourcePortSetPath {
	ps := &Acl_AclSet_AclEntry_Transport_SourcePortSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePortSet (leaf): Reference to a port set
// to match the source port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/source-port-set"
func (n *Acl_AclSet_AclEntry_TransportPathAny) SourcePortSet() *Acl_AclSet_AclEntry_Transport_SourcePortSetPathAny {
	ps := &Acl_AclSet_AclEntry_Transport_SourcePortSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_TransportPath) State() ygnmi.SingletonQuery[*oc.Acl_AclSet_AclEntry_Transport] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet_AclEntry_Transport](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_TransportPathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Transport] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Transport](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_TransportPath) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet_AclEntry_Transport] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet_AclEntry_Transport](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_TransportPathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Transport] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Transport](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_IdPath represents the /openconfig-acl/acl/interfaces/interface/state/id YANG schema element.
type Acl_Interface_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_IdPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/state/id YANG schema element.
type Acl_Interface_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/id"
//	Path from root:       "/acl/interfaces/interface/state/id"
func (n *Acl_Interface_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/id"
//	Path from root:       "/acl/interfaces/interface/state/id"
func (n *Acl_Interface_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/id"
//	Path from root:       "/acl/interfaces/interface/config/id"
func (n *Acl_Interface_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/id"
//	Path from root:       "/acl/interfaces/interface/config/id"
func (n *Acl_Interface_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_InterfacePath represents the /openconfig-acl/acl/interfaces/interface YANG schema element.
type Acl_InterfacePath struct {
	*ygnmi.NodePath
}

// Acl_InterfacePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface YANG schema element.
type Acl_InterfacePathAny struct {
	*ygnmi.NodePath
}

// Acl_InterfacePathMap represents the /openconfig-acl/acl/interfaces/interface YANG schema element.
type Acl_InterfacePathMap struct {
	*ygnmi.NodePath
}

// Acl_InterfacePathMapAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface YANG schema element.
type Acl_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// EgressAclSetAny (list): List of egress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "egress-acl-sets/egress-acl-set"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
func (n *Acl_InterfacePath) EgressAclSetAny() *Acl_Interface_EgressAclSetPathAny {
	ps := &Acl_Interface_EgressAclSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": "*"},
			n,
		),
	}
	return ps
}

// EgressAclSetAny (list): List of egress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "egress-acl-sets/egress-acl-set"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
func (n *Acl_InterfacePathAny) EgressAclSetAny() *Acl_Interface_EgressAclSetPathAny {
	ps := &Acl_Interface_EgressAclSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": "*"},
			n,
		),
	}
	return ps
}

// WithSetName sets Acl_Interface_EgressAclSetPathAny's key "set-name" to the specified value.
// SetName: string
func (n *Acl_Interface_EgressAclSetPathAny) WithSetName(SetName string) *Acl_Interface_EgressAclSetPathAny {
	ygnmi.ModifyKey(n.NodePath, "set-name", SetName)
	return n
}

// WithType sets Acl_Interface_EgressAclSetPathAny's key "type" to the specified value.
// Type: oc.E_Acl_ACL_TYPE
func (n *Acl_Interface_EgressAclSetPathAny) WithType(Type oc.E_Acl_ACL_TYPE) *Acl_Interface_EgressAclSetPathAny {
	ygnmi.ModifyKey(n.NodePath, "type", Type)
	return n
}

// EgressAclSet (list): List of egress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "egress-acl-sets/egress-acl-set"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
//
//	SetName: string
//	Type: oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePath) EgressAclSet(SetName string, Type oc.E_Acl_ACL_TYPE) *Acl_Interface_EgressAclSetPath {
	ps := &Acl_Interface_EgressAclSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": Type},
			n,
		),
	}
	return ps
}

// EgressAclSet (list): List of egress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "egress-acl-sets/egress-acl-set"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
//
//	SetName: string
//	Type: oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePathAny) EgressAclSet(SetName string, Type oc.E_Acl_ACL_TYPE) *Acl_Interface_EgressAclSetPathAny {
	ps := &Acl_Interface_EgressAclSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": Type},
			n,
		),
	}
	return ps
}

// EgressAclSetMap (list): List of egress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "egress-acl-sets/egress-acl-set"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
func (n *Acl_InterfacePath) EgressAclSetMap() *Acl_Interface_EgressAclSetPathMap {
	ps := &Acl_Interface_EgressAclSetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-acl-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EgressAclSetMap (list): List of egress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "egress-acl-sets/egress-acl-set"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
func (n *Acl_InterfacePathAny) EgressAclSetMap() *Acl_Interface_EgressAclSetPathMapAny {
	ps := &Acl_Interface_EgressAclSetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-acl-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Id (leaf): User-defined identifier for the interface -- a common
// convention could be '<if name>.<subif index>'
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/id"
//	Path from root:       "/acl/interfaces/interface/*/id"
func (n *Acl_InterfacePath) Id() *Acl_Interface_IdPath {
	ps := &Acl_Interface_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): User-defined identifier for the interface -- a common
// convention could be '<if name>.<subif index>'
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/id"
//	Path from root:       "/acl/interfaces/interface/*/id"
func (n *Acl_InterfacePathAny) Id() *Acl_Interface_IdPathAny {
	ps := &Acl_Interface_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IngressAclSetAny (list): List of ingress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "ingress-acl-sets/ingress-acl-set"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
func (n *Acl_InterfacePath) IngressAclSetAny() *Acl_Interface_IngressAclSetPathAny {
	ps := &Acl_Interface_IngressAclSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": "*"},
			n,
		),
	}
	return ps
}

// IngressAclSetAny (list): List of ingress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "ingress-acl-sets/ingress-acl-set"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
func (n *Acl_InterfacePathAny) IngressAclSetAny() *Acl_Interface_IngressAclSetPathAny {
	ps := &Acl_Interface_IngressAclSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": "*"},
			n,
		),
	}
	return ps
}

// WithSetName sets Acl_Interface_IngressAclSetPathAny's key "set-name" to the specified value.
// SetName: string
func (n *Acl_Interface_IngressAclSetPathAny) WithSetName(SetName string) *Acl_Interface_IngressAclSetPathAny {
	ygnmi.ModifyKey(n.NodePath, "set-name", SetName)
	return n
}

// WithType sets Acl_Interface_IngressAclSetPathAny's key "type" to the specified value.
// Type: oc.E_Acl_ACL_TYPE
func (n *Acl_Interface_IngressAclSetPathAny) WithType(Type oc.E_Acl_ACL_TYPE) *Acl_Interface_IngressAclSetPathAny {
	ygnmi.ModifyKey(n.NodePath, "type", Type)
	return n
}

// IngressAclSet (list): List of ingress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "ingress-acl-sets/ingress-acl-set"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
//
//	SetName: string
//	Type: oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePath) IngressAclSet(SetName string, Type oc.E_Acl_ACL_TYPE) *Acl_Interface_IngressAclSetPath {
	ps := &Acl_Interface_IngressAclSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": Type},
			n,
		),
	}
	return ps
}

// IngressAclSet (list): List of ingress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "ingress-acl-sets/ingress-acl-set"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
//
//	SetName: string
//	Type: oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePathAny) IngressAclSet(SetName string, Type oc.E_Acl_ACL_TYPE) *Acl_Interface_IngressAclSetPathAny {
	ps := &Acl_Interface_IngressAclSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": Type},
			n,
		),
	}
	return ps
}

// IngressAclSetMap (list): List of ingress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "ingress-acl-sets/ingress-acl-set"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
func (n *Acl_InterfacePath) IngressAclSetMap() *Acl_Interface_IngressAclSetPathMap {
	ps := &Acl_Interface_IngressAclSetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-acl-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IngressAclSetMap (list): List of ingress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "ingress-acl-sets/ingress-acl-set"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
func (n *Acl_InterfacePathAny) IngressAclSetMap() *Acl_Interface_IngressAclSetPathMapAny {
	ps := &Acl_Interface_IngressAclSetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-acl-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "interface-ref"
//	Path from root:       "/acl/interfaces/interface/interface-ref"
func (n *Acl_InterfacePath) InterfaceRef() *Acl_Interface_InterfaceRefPath {
	ps := &Acl_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "interface-ref"
//	Path from root:       "/acl/interfaces/interface/interface-ref"
func (n *Acl_InterfacePathAny) InterfaceRef() *Acl_Interface_InterfaceRefPathAny {
	ps := &Acl_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_InterfacePath) State() ygnmi.SingletonQuery[*oc.Acl_Interface] {
	return ygnmi.NewSingletonQuery[*oc.Acl_Interface](
		"Acl_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.Acl_Interface] {
	return ygnmi.NewWildcardQuery[*oc.Acl_Interface](
		"Acl_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_InterfacePath) Config() ygnmi.ConfigQuery[*oc.Acl_Interface] {
	return ygnmi.NewConfigQuery[*oc.Acl_Interface](
		"Acl_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.Acl_Interface] {
	return ygnmi.NewWildcardQuery[*oc.Acl_Interface](
		"Acl_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Acl_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Acl_Interface](
		"Acl",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Acl_Interface, bool) {
			ret := gs.(*oc.Acl).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:interfaces"},
			PostRelPath: []string{"openconfig-acl:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Acl_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Acl_Interface](
		"Acl",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Acl_Interface, bool) {
			ret := gs.(*oc.Acl).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:interfaces"},
			PostRelPath: []string{"openconfig-acl:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Acl_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.Acl_Interface](
		"Acl",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Acl_Interface, bool) {
			ret := gs.(*oc.Acl).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:interfaces"},
			PostRelPath: []string{"openconfig-acl:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Acl_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Acl_Interface](
		"Acl",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Acl_Interface, bool) {
			ret := gs.(*oc.Acl).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:interfaces"},
			PostRelPath: []string{"openconfig-acl:interface"},
		},
	)
}

// Acl_Interface_EgressAclSet_SetNamePath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/set-name YANG schema element.
type Acl_Interface_EgressAclSet_SetNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_EgressAclSet_SetNamePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/set-name YANG schema element.
type Acl_Interface_EgressAclSet_SetNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/set-name"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/set-name"
func (n *Acl_Interface_EgressAclSet_SetNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_Interface_EgressAclSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet).SetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/set-name"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/set-name"
func (n *Acl_Interface_EgressAclSet_SetNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_Interface_EgressAclSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet).SetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/set-name"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/config/set-name"
func (n *Acl_Interface_EgressAclSet_SetNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_Interface_EgressAclSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet).SetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/set-name"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/config/set-name"
func (n *Acl_Interface_EgressAclSet_SetNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_Interface_EgressAclSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet).SetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_EgressAclSet_TypePath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/type YANG schema element.
type Acl_Interface_EgressAclSet_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_EgressAclSet_TypePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/type YANG schema element.
type Acl_Interface_EgressAclSet_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/type"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/type"
func (n *Acl_Interface_EgressAclSet_TypePath) State() ygnmi.SingletonQuery[oc.E_Acl_ACL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_Acl_ACL_TYPE](
		"Acl_Interface_EgressAclSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_TYPE, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/type"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/type"
func (n *Acl_Interface_EgressAclSet_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Acl_ACL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Acl_ACL_TYPE](
		"Acl_Interface_EgressAclSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_TYPE, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/type"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/config/type"
func (n *Acl_Interface_EgressAclSet_TypePath) Config() ygnmi.ConfigQuery[oc.E_Acl_ACL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_Acl_ACL_TYPE](
		"Acl_Interface_EgressAclSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_TYPE, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/type"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/config/type"
func (n *Acl_Interface_EgressAclSet_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Acl_ACL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Acl_ACL_TYPE](
		"Acl_Interface_EgressAclSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_TYPE, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_EgressAclSetPath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set YANG schema element.
type Acl_Interface_EgressAclSetPath struct {
	*ygnmi.NodePath
}

// Acl_Interface_EgressAclSetPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set YANG schema element.
type Acl_Interface_EgressAclSetPathAny struct {
	*ygnmi.NodePath
}

// Acl_Interface_EgressAclSetPathMap represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set YANG schema element.
type Acl_Interface_EgressAclSetPathMap struct {
	*ygnmi.NodePath
}

// Acl_Interface_EgressAclSetPathMapAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set YANG schema element.
type Acl_Interface_EgressAclSetPathMapAny struct {
	*ygnmi.NodePath
}

// AclEntryAny (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry"
func (n *Acl_Interface_EgressAclSetPath) AclEntryAny() *Acl_Interface_EgressAclSet_AclEntryPathAny {
	ps := &Acl_Interface_EgressAclSet_AclEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
	return ps
}

// AclEntryAny (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry"
func (n *Acl_Interface_EgressAclSetPathAny) AclEntryAny() *Acl_Interface_EgressAclSet_AclEntryPathAny {
	ps := &Acl_Interface_EgressAclSet_AclEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
	return ps
}

// AclEntry (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry"
//
//	SequenceId: uint32
func (n *Acl_Interface_EgressAclSetPath) AclEntry(SequenceId uint32) *Acl_Interface_EgressAclSet_AclEntryPath {
	ps := &Acl_Interface_EgressAclSet_AclEntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
	return ps
}

// AclEntry (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry"
//
//	SequenceId: uint32
func (n *Acl_Interface_EgressAclSetPathAny) AclEntry(SequenceId uint32) *Acl_Interface_EgressAclSet_AclEntryPathAny {
	ps := &Acl_Interface_EgressAclSet_AclEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
	return ps
}

// AclEntryMap (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry"
func (n *Acl_Interface_EgressAclSetPath) AclEntryMap() *Acl_Interface_EgressAclSet_AclEntryPathMap {
	ps := &Acl_Interface_EgressAclSet_AclEntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AclEntryMap (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry"
func (n *Acl_Interface_EgressAclSetPathAny) AclEntryMap() *Acl_Interface_EgressAclSet_AclEntryPathMapAny {
	ps := &Acl_Interface_EgressAclSet_AclEntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetName (leaf): Reference to the ACL set name applied on egress
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/set-name"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/*/set-name"
func (n *Acl_Interface_EgressAclSetPath) SetName() *Acl_Interface_EgressAclSet_SetNamePath {
	ps := &Acl_Interface_EgressAclSet_SetNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetName (leaf): Reference to the ACL set name applied on egress
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/set-name"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/*/set-name"
func (n *Acl_Interface_EgressAclSetPathAny) SetName() *Acl_Interface_EgressAclSet_SetNamePathAny {
	ps := &Acl_Interface_EgressAclSet_SetNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Reference to the ACL set type applied on egress.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/type"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/*/type"
func (n *Acl_Interface_EgressAclSetPath) Type() *Acl_Interface_EgressAclSet_TypePath {
	ps := &Acl_Interface_EgressAclSet_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Reference to the ACL set type applied on egress.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/type"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/*/type"
func (n *Acl_Interface_EgressAclSetPathAny) Type() *Acl_Interface_EgressAclSet_TypePathAny {
	ps := &Acl_Interface_EgressAclSet_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSetPath) State() ygnmi.SingletonQuery[*oc.Acl_Interface_EgressAclSet] {
	return ygnmi.NewSingletonQuery[*oc.Acl_Interface_EgressAclSet](
		"Acl_Interface_EgressAclSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSetPathAny) State() ygnmi.WildcardQuery[*oc.Acl_Interface_EgressAclSet] {
	return ygnmi.NewWildcardQuery[*oc.Acl_Interface_EgressAclSet](
		"Acl_Interface_EgressAclSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSetPath) Config() ygnmi.ConfigQuery[*oc.Acl_Interface_EgressAclSet] {
	return ygnmi.NewConfigQuery[*oc.Acl_Interface_EgressAclSet](
		"Acl_Interface_EgressAclSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSetPathAny) Config() ygnmi.WildcardQuery[*oc.Acl_Interface_EgressAclSet] {
	return ygnmi.NewWildcardQuery[*oc.Acl_Interface_EgressAclSet](
		"Acl_Interface_EgressAclSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSetPathMap) State() ygnmi.SingletonQuery[map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet] {
	return ygnmi.NewSingletonQuery[map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet](
		"Acl_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet, bool) {
			ret := gs.(*oc.Acl_Interface).EgressAclSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:egress-acl-sets"},
			PostRelPath: []string{"openconfig-acl:egress-acl-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSetPathMapAny) State() ygnmi.WildcardQuery[map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet] {
	return ygnmi.NewWildcardQuery[map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet](
		"Acl_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet, bool) {
			ret := gs.(*oc.Acl_Interface).EgressAclSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:egress-acl-sets"},
			PostRelPath: []string{"openconfig-acl:egress-acl-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSetPathMap) Config() ygnmi.ConfigQuery[map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet] {
	return ygnmi.NewConfigQuery[map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet](
		"Acl_Interface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet, bool) {
			ret := gs.(*oc.Acl_Interface).EgressAclSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:egress-acl-sets"},
			PostRelPath: []string{"openconfig-acl:egress-acl-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSetPathMapAny) Config() ygnmi.WildcardQuery[map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet] {
	return ygnmi.NewWildcardQuery[map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet](
		"Acl_Interface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet, bool) {
			ret := gs.(*oc.Acl_Interface).EgressAclSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:egress-acl-sets"},
			PostRelPath: []string{"openconfig-acl:egress-acl-set"},
		},
	)
}

// Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Acl_Interface_EgressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet_AclEntry).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Acl_Interface_EgressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet_AclEntry).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Acl_Interface_EgressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet_AclEntry).MatchedPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Acl_Interface_EgressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet_AclEntry).MatchedPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_EgressAclSet_AclEntry_SequenceIdPath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/sequence-id YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_SequenceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_EgressAclSet_AclEntry_SequenceIdPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/sequence-id YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_SequenceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/sequence-id"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/sequence-id"
func (n *Acl_Interface_EgressAclSet_AclEntry_SequenceIdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Acl_Interface_EgressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet_AclEntry).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/sequence-id"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/sequence-id"
func (n *Acl_Interface_EgressAclSet_AclEntry_SequenceIdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_Interface_EgressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet_AclEntry).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "sequence-id"
//	Path from root:       ""
func (n *Acl_Interface_EgressAclSet_AclEntry_SequenceIdPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Acl_Interface_EgressAclSet_AclEntry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet_AclEntry).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "sequence-id"
//	Path from root:       ""
func (n *Acl_Interface_EgressAclSet_AclEntry_SequenceIdPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_Interface_EgressAclSet_AclEntry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet_AclEntry).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_EgressAclSet_AclEntryPath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_EgressAclSet_AclEntryPath struct {
	*ygnmi.NodePath
}

// Acl_Interface_EgressAclSet_AclEntryPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_EgressAclSet_AclEntryPathAny struct {
	*ygnmi.NodePath
}

// Acl_Interface_EgressAclSet_AclEntryPathMap represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_EgressAclSet_AclEntryPathMap struct {
	*ygnmi.NodePath
}

// Acl_Interface_EgressAclSet_AclEntryPathMapAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_EgressAclSet_AclEntryPathMapAny struct {
	*ygnmi.NodePath
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_EgressAclSet_AclEntryPath) MatchedOctets() *Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPath {
	ps := &Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_EgressAclSet_AclEntryPathAny) MatchedOctets() *Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPathAny {
	ps := &Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_EgressAclSet_AclEntryPath) MatchedPackets() *Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPath {
	ps := &Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_EgressAclSet_AclEntryPathAny) MatchedPackets() *Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPathAny {
	ps := &Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceId (leaf): Reference to an entry in the ACL set applied to an
// interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/sequence-id"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/*/sequence-id"
func (n *Acl_Interface_EgressAclSet_AclEntryPath) SequenceId() *Acl_Interface_EgressAclSet_AclEntry_SequenceIdPath {
	ps := &Acl_Interface_EgressAclSet_AclEntry_SequenceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceId (leaf): Reference to an entry in the ACL set applied to an
// interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/sequence-id"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/*/sequence-id"
func (n *Acl_Interface_EgressAclSet_AclEntryPathAny) SequenceId() *Acl_Interface_EgressAclSet_AclEntry_SequenceIdPathAny {
	ps := &Acl_Interface_EgressAclSet_AclEntry_SequenceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSet_AclEntryPath) State() ygnmi.SingletonQuery[*oc.Acl_Interface_EgressAclSet_AclEntry] {
	return ygnmi.NewSingletonQuery[*oc.Acl_Interface_EgressAclSet_AclEntry](
		"Acl_Interface_EgressAclSet_AclEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSet_AclEntryPathAny) State() ygnmi.WildcardQuery[*oc.Acl_Interface_EgressAclSet_AclEntry] {
	return ygnmi.NewWildcardQuery[*oc.Acl_Interface_EgressAclSet_AclEntry](
		"Acl_Interface_EgressAclSet_AclEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSet_AclEntryPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.Acl_Interface_EgressAclSet_AclEntry] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.Acl_Interface_EgressAclSet_AclEntry](
		"Acl_Interface_EgressAclSet",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Acl_Interface_EgressAclSet_AclEntry, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet).AclEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:acl-entries"},
			PostRelPath: []string{"openconfig-acl:acl-entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSet_AclEntryPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.Acl_Interface_EgressAclSet_AclEntry] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.Acl_Interface_EgressAclSet_AclEntry](
		"Acl_Interface_EgressAclSet",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Acl_Interface_EgressAclSet_AclEntry, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet).AclEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:acl-entries"},
			PostRelPath: []string{"openconfig-acl:acl-entry"},
		},
	)
}

// Acl_Interface_IngressAclSet_SetNamePath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/set-name YANG schema element.
type Acl_Interface_IngressAclSet_SetNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_IngressAclSet_SetNamePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/set-name YANG schema element.
type Acl_Interface_IngressAclSet_SetNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/set-name"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/set-name"
func (n *Acl_Interface_IngressAclSet_SetNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_Interface_IngressAclSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet).SetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/set-name"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/set-name"
func (n *Acl_Interface_IngressAclSet_SetNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_Interface_IngressAclSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet).SetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/set-name"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config/set-name"
func (n *Acl_Interface_IngressAclSet_SetNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_Interface_IngressAclSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet).SetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/set-name"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config/set-name"
func (n *Acl_Interface_IngressAclSet_SetNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_Interface_IngressAclSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet).SetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_IngressAclSet_TypePath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/type YANG schema element.
type Acl_Interface_IngressAclSet_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_IngressAclSet_TypePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/type YANG schema element.
type Acl_Interface_IngressAclSet_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/type"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/type"
func (n *Acl_Interface_IngressAclSet_TypePath) State() ygnmi.SingletonQuery[oc.E_Acl_ACL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_Acl_ACL_TYPE](
		"Acl_Interface_IngressAclSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_TYPE, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/type"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/type"
func (n *Acl_Interface_IngressAclSet_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Acl_ACL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Acl_ACL_TYPE](
		"Acl_Interface_IngressAclSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_TYPE, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/type"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config/type"
func (n *Acl_Interface_IngressAclSet_TypePath) Config() ygnmi.ConfigQuery[oc.E_Acl_ACL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_Acl_ACL_TYPE](
		"Acl_Interface_IngressAclSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_TYPE, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/type"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config/type"
func (n *Acl_Interface_IngressAclSet_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Acl_ACL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Acl_ACL_TYPE](
		"Acl_Interface_IngressAclSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_TYPE, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_IngressAclSetPath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set YANG schema element.
type Acl_Interface_IngressAclSetPath struct {
	*ygnmi.NodePath
}

// Acl_Interface_IngressAclSetPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set YANG schema element.
type Acl_Interface_IngressAclSetPathAny struct {
	*ygnmi.NodePath
}

// Acl_Interface_IngressAclSetPathMap represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set YANG schema element.
type Acl_Interface_IngressAclSetPathMap struct {
	*ygnmi.NodePath
}

// Acl_Interface_IngressAclSetPathMapAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set YANG schema element.
type Acl_Interface_IngressAclSetPathMapAny struct {
	*ygnmi.NodePath
}

// AclEntryAny (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry"
func (n *Acl_Interface_IngressAclSetPath) AclEntryAny() *Acl_Interface_IngressAclSet_AclEntryPathAny {
	ps := &Acl_Interface_IngressAclSet_AclEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
	return ps
}

// AclEntryAny (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry"
func (n *Acl_Interface_IngressAclSetPathAny) AclEntryAny() *Acl_Interface_IngressAclSet_AclEntryPathAny {
	ps := &Acl_Interface_IngressAclSet_AclEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
	return ps
}

// AclEntry (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry"
//
//	SequenceId: uint32
func (n *Acl_Interface_IngressAclSetPath) AclEntry(SequenceId uint32) *Acl_Interface_IngressAclSet_AclEntryPath {
	ps := &Acl_Interface_IngressAclSet_AclEntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
	return ps
}

// AclEntry (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry"
//
//	SequenceId: uint32
func (n *Acl_Interface_IngressAclSetPathAny) AclEntry(SequenceId uint32) *Acl_Interface_IngressAclSet_AclEntryPathAny {
	ps := &Acl_Interface_IngressAclSet_AclEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
	return ps
}

// AclEntryMap (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry"
func (n *Acl_Interface_IngressAclSetPath) AclEntryMap() *Acl_Interface_IngressAclSet_AclEntryPathMap {
	ps := &Acl_Interface_IngressAclSet_AclEntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AclEntryMap (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry"
func (n *Acl_Interface_IngressAclSetPathAny) AclEntryMap() *Acl_Interface_IngressAclSet_AclEntryPathMapAny {
	ps := &Acl_Interface_IngressAclSet_AclEntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetName (leaf): Reference to the ACL set name applied on ingress
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/set-name"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/*/set-name"
func (n *Acl_Interface_IngressAclSetPath) SetName() *Acl_Interface_IngressAclSet_SetNamePath {
	ps := &Acl_Interface_IngressAclSet_SetNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetName (leaf): Reference to the ACL set name applied on ingress
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/set-name"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/*/set-name"
func (n *Acl_Interface_IngressAclSetPathAny) SetName() *Acl_Interface_IngressAclSet_SetNamePathAny {
	ps := &Acl_Interface_IngressAclSet_SetNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Reference to the ACL set type applied on ingress
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/type"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/*/type"
func (n *Acl_Interface_IngressAclSetPath) Type() *Acl_Interface_IngressAclSet_TypePath {
	ps := &Acl_Interface_IngressAclSet_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Reference to the ACL set type applied on ingress
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/type"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/*/type"
func (n *Acl_Interface_IngressAclSetPathAny) Type() *Acl_Interface_IngressAclSet_TypePathAny {
	ps := &Acl_Interface_IngressAclSet_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSetPath) State() ygnmi.SingletonQuery[*oc.Acl_Interface_IngressAclSet] {
	return ygnmi.NewSingletonQuery[*oc.Acl_Interface_IngressAclSet](
		"Acl_Interface_IngressAclSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSetPathAny) State() ygnmi.WildcardQuery[*oc.Acl_Interface_IngressAclSet] {
	return ygnmi.NewWildcardQuery[*oc.Acl_Interface_IngressAclSet](
		"Acl_Interface_IngressAclSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSetPath) Config() ygnmi.ConfigQuery[*oc.Acl_Interface_IngressAclSet] {
	return ygnmi.NewConfigQuery[*oc.Acl_Interface_IngressAclSet](
		"Acl_Interface_IngressAclSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSetPathAny) Config() ygnmi.WildcardQuery[*oc.Acl_Interface_IngressAclSet] {
	return ygnmi.NewWildcardQuery[*oc.Acl_Interface_IngressAclSet](
		"Acl_Interface_IngressAclSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSetPathMap) State() ygnmi.SingletonQuery[map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet] {
	return ygnmi.NewSingletonQuery[map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet](
		"Acl_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet, bool) {
			ret := gs.(*oc.Acl_Interface).IngressAclSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:ingress-acl-sets"},
			PostRelPath: []string{"openconfig-acl:ingress-acl-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSetPathMapAny) State() ygnmi.WildcardQuery[map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet] {
	return ygnmi.NewWildcardQuery[map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet](
		"Acl_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet, bool) {
			ret := gs.(*oc.Acl_Interface).IngressAclSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:ingress-acl-sets"},
			PostRelPath: []string{"openconfig-acl:ingress-acl-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSetPathMap) Config() ygnmi.ConfigQuery[map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet] {
	return ygnmi.NewConfigQuery[map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet](
		"Acl_Interface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet, bool) {
			ret := gs.(*oc.Acl_Interface).IngressAclSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:ingress-acl-sets"},
			PostRelPath: []string{"openconfig-acl:ingress-acl-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSetPathMapAny) Config() ygnmi.WildcardQuery[map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet] {
	return ygnmi.NewWildcardQuery[map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet](
		"Acl_Interface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet, bool) {
			ret := gs.(*oc.Acl_Interface).IngressAclSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:ingress-acl-sets"},
			PostRelPath: []string{"openconfig-acl:ingress-acl-set"},
		},
	)
}

// Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Acl_Interface_IngressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet_AclEntry).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Acl_Interface_IngressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet_AclEntry).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Acl_Interface_IngressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet_AclEntry).MatchedPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Acl_Interface_IngressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet_AclEntry).MatchedPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_IngressAclSet_AclEntry_SequenceIdPath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/sequence-id YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_SequenceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_IngressAclSet_AclEntry_SequenceIdPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/sequence-id YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_SequenceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/sequence-id"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/sequence-id"
func (n *Acl_Interface_IngressAclSet_AclEntry_SequenceIdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Acl_Interface_IngressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet_AclEntry).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/sequence-id"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/sequence-id"
func (n *Acl_Interface_IngressAclSet_AclEntry_SequenceIdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_Interface_IngressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet_AclEntry).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "sequence-id"
//	Path from root:       ""
func (n *Acl_Interface_IngressAclSet_AclEntry_SequenceIdPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Acl_Interface_IngressAclSet_AclEntry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet_AclEntry).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "sequence-id"
//	Path from root:       ""
func (n *Acl_Interface_IngressAclSet_AclEntry_SequenceIdPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_Interface_IngressAclSet_AclEntry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet_AclEntry).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_IngressAclSet_AclEntryPath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_IngressAclSet_AclEntryPath struct {
	*ygnmi.NodePath
}

// Acl_Interface_IngressAclSet_AclEntryPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_IngressAclSet_AclEntryPathAny struct {
	*ygnmi.NodePath
}

// Acl_Interface_IngressAclSet_AclEntryPathMap represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_IngressAclSet_AclEntryPathMap struct {
	*ygnmi.NodePath
}

// Acl_Interface_IngressAclSet_AclEntryPathMapAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_IngressAclSet_AclEntryPathMapAny struct {
	*ygnmi.NodePath
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_IngressAclSet_AclEntryPath) MatchedOctets() *Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPath {
	ps := &Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_IngressAclSet_AclEntryPathAny) MatchedOctets() *Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPathAny {
	ps := &Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_IngressAclSet_AclEntryPath) MatchedPackets() *Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPath {
	ps := &Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_IngressAclSet_AclEntryPathAny) MatchedPackets() *Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPathAny {
	ps := &Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceId (leaf): Reference to an entry in the ACL set applied to an
// interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/sequence-id"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/*/sequence-id"
func (n *Acl_Interface_IngressAclSet_AclEntryPath) SequenceId() *Acl_Interface_IngressAclSet_AclEntry_SequenceIdPath {
	ps := &Acl_Interface_IngressAclSet_AclEntry_SequenceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceId (leaf): Reference to an entry in the ACL set applied to an
// interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/sequence-id"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/*/sequence-id"
func (n *Acl_Interface_IngressAclSet_AclEntryPathAny) SequenceId() *Acl_Interface_IngressAclSet_AclEntry_SequenceIdPathAny {
	ps := &Acl_Interface_IngressAclSet_AclEntry_SequenceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSet_AclEntryPath) State() ygnmi.SingletonQuery[*oc.Acl_Interface_IngressAclSet_AclEntry] {
	return ygnmi.NewSingletonQuery[*oc.Acl_Interface_IngressAclSet_AclEntry](
		"Acl_Interface_IngressAclSet_AclEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSet_AclEntryPathAny) State() ygnmi.WildcardQuery[*oc.Acl_Interface_IngressAclSet_AclEntry] {
	return ygnmi.NewWildcardQuery[*oc.Acl_Interface_IngressAclSet_AclEntry](
		"Acl_Interface_IngressAclSet_AclEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSet_AclEntryPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.Acl_Interface_IngressAclSet_AclEntry] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.Acl_Interface_IngressAclSet_AclEntry](
		"Acl_Interface_IngressAclSet",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Acl_Interface_IngressAclSet_AclEntry, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet).AclEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:acl-entries"},
			PostRelPath: []string{"openconfig-acl:acl-entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSet_AclEntryPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.Acl_Interface_IngressAclSet_AclEntry] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.Acl_Interface_IngressAclSet_AclEntry](
		"Acl_Interface_IngressAclSet",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Acl_Interface_IngressAclSet_AclEntry, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet).AclEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:acl-entries"},
			PostRelPath: []string{"openconfig-acl:acl-entry"},
		},
	)
}

// Acl_Interface_InterfaceRef_InterfacePath represents the /openconfig-acl/acl/interfaces/interface/interface-ref/state/interface YANG schema element.
type Acl_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/interface-ref/state/interface YANG schema element.
type Acl_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/interface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/state/interface"
func (n *Acl_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/interface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/state/interface"
func (n *Acl_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/interface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/config/interface"
func (n *Acl_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/interface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/config/interface"
func (n *Acl_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-acl/acl/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type Acl_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type Acl_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/state/subinterface"
func (n *Acl_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Acl_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/state/subinterface"
func (n *Acl_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/config/subinterface"
func (n *Acl_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Acl_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/config/subinterface"
func (n *Acl_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_InterfaceRefPath represents the /openconfig-acl/acl/interfaces/interface/interface-ref YANG schema element.
type Acl_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// Acl_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/interface-ref YANG schema element.
type Acl_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/interface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/*/interface"
func (n *Acl_Interface_InterfaceRefPath) Interface() *Acl_Interface_InterfaceRef_InterfacePath {
	ps := &Acl_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/interface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/*/interface"
func (n *Acl_Interface_InterfaceRefPathAny) Interface() *Acl_Interface_InterfaceRef_InterfacePathAny {
	ps := &Acl_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is required, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/*/subinterface"
func (n *Acl_Interface_InterfaceRefPath) Subinterface() *Acl_Interface_InterfaceRef_SubinterfacePath {
	ps := &Acl_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is required, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/*/subinterface"
func (n *Acl_Interface_InterfaceRefPathAny) Subinterface() *Acl_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &Acl_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.Acl_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.Acl_Interface_InterfaceRef](
		"Acl_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.Acl_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Acl_Interface_InterfaceRef](
		"Acl_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.Acl_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.Acl_Interface_InterfaceRef](
		"Acl_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.Acl_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Acl_Interface_InterfaceRef](
		"Acl_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

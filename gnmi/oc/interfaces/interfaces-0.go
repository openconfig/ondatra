/*
Package interfaces is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-common.yang
  - public/release/models/aft/openconfig-aft-ethernet.yang
  - public/release/models/aft/openconfig-aft-ipv4.yang
  - public/release/models/aft/openconfig-aft-ipv6.yang
  - public/release/models/aft/openconfig-aft-mpls.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-pf.yang
  - public/release/models/aft/openconfig-aft-state-synced.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft-types.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-rates.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/local-routing/openconfig-local-routing-network-instance.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/network-instance/openconfig-network-instance-l2.yang
  - public/release/models/network-instance/openconfig-network-instance-static.yang
  - public/release/models/oam/openconfig-cfm-types.yang
  - public/release/models/oam/openconfig-oam.yang
  - public/release/models/oam/openconfig-oam-cfm.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-area.yang
  - public/release/models/ospf/openconfig-ospf-common.yang
  - public/release/models/ospf/openconfig-ospf-global.yang
  - public/release/models/ospf/openconfig-ospf-types.yang
  - public/release/models/ospf/openconfig-ospf.yang
  - public/release/models/ospf/openconfig-ospfv3-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
  - public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
  - public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package interfaces

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Interface_AdminStatusPath represents the /openconfig-interfaces/interfaces/interface/state/admin-status YANG schema element.
type Interface_AdminStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_AdminStatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/admin-status YANG schema element.
type Interface_AdminStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/admin-status"
//	Path from root:       "/interfaces/interface/state/admin-status"
func (n *Interface_AdminStatusPath) State() ygnmi.SingletonQuery[oc.E_Interface_AdminStatus] {
	return ygnmi.NewSingletonQuery[oc.E_Interface_AdminStatus](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_AdminStatus, bool) {
			ret := gs.(*oc.Interface).AdminStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/admin-status"
//	Path from root:       "/interfaces/interface/state/admin-status"
func (n *Interface_AdminStatusPathAny) State() ygnmi.WildcardQuery[oc.E_Interface_AdminStatus] {
	return ygnmi.NewWildcardQuery[oc.E_Interface_AdminStatus](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_AdminStatus, bool) {
			ret := gs.(*oc.Interface).AdminStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_CpuPath represents the /openconfig-interfaces/interfaces/interface/state/cpu YANG schema element.
type Interface_CpuPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_CpuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/cpu YANG schema element.
type Interface_CpuPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/cpu"
//	Path from root:       "/interfaces/interface/state/cpu"
func (n *Interface_CpuPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cpu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).Cpu
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/cpu"
//	Path from root:       "/interfaces/interface/state/cpu"
func (n *Interface_CpuPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cpu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).Cpu
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_DescriptionPath represents the /openconfig-interfaces/interfaces/interface/state/description YANG schema element.
type Interface_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_DescriptionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/description YANG schema element.
type Interface_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/description"
//	Path from root:       "/interfaces/interface/state/description"
func (n *Interface_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/description"
//	Path from root:       "/interfaces/interface/state/description"
func (n *Interface_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/description"
//	Path from root:       "/interfaces/interface/config/description"
func (n *Interface_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/description"
//	Path from root:       "/interfaces/interface/config/description"
func (n *Interface_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_EnabledPath represents the /openconfig-interfaces/interfaces/interface/state/enabled YANG schema element.
type Interface_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/enabled YANG schema element.
type Interface_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/state/enabled"
func (n *Interface_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/state/enabled"
func (n *Interface_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/config/enabled"
func (n *Interface_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/config/enabled"
func (n *Interface_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_ForwardingViablePath represents the /openconfig-interfaces/interfaces/interface/state/forwarding-viable YANG schema element.
type Interface_ForwardingViablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_ForwardingViablePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/forwarding-viable YANG schema element.
type Interface_ForwardingViablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-sdn-ext"
//	Instantiating module: "openconfig-if-sdn-ext"
//	Path from parent:     "state/forwarding-viable"
//	Path from root:       "/interfaces/interface/state/forwarding-viable"
func (n *Interface_ForwardingViablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "forwarding-viable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).ForwardingViable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-sdn-ext"
//	Instantiating module: "openconfig-if-sdn-ext"
//	Path from parent:     "state/forwarding-viable"
//	Path from root:       "/interfaces/interface/state/forwarding-viable"
func (n *Interface_ForwardingViablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "forwarding-viable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).ForwardingViable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-sdn-ext"
//	Instantiating module: "openconfig-if-sdn-ext"
//	Path from parent:     "config/forwarding-viable"
//	Path from root:       "/interfaces/interface/config/forwarding-viable"
func (n *Interface_ForwardingViablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "forwarding-viable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).ForwardingViable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-sdn-ext"
//	Instantiating module: "openconfig-if-sdn-ext"
//	Path from parent:     "config/forwarding-viable"
//	Path from root:       "/interfaces/interface/config/forwarding-viable"
func (n *Interface_ForwardingViablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "forwarding-viable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).ForwardingViable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_HardwarePortPath represents the /openconfig-interfaces/interfaces/interface/state/hardware-port YANG schema element.
type Interface_HardwarePortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_HardwarePortPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/hardware-port YANG schema element.
type Interface_HardwarePortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "state/hardware-port"
//	Path from root:       "/interfaces/interface/state/hardware-port"
func (n *Interface_HardwarePortPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hardware-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).HardwarePort
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "state/hardware-port"
//	Path from root:       "/interfaces/interface/state/hardware-port"
func (n *Interface_HardwarePortPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hardware-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).HardwarePort
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_IdPath represents the /openconfig-interfaces/interfaces/interface/state/id YANG schema element.
type Interface_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_IdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/id YANG schema element.
type Interface_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-p4rt"
//	Path from parent:     "state/id"
//	Path from root:       "/interfaces/interface/state/id"
func (n *Interface_IdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface).Id
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-p4rt"
//	Path from parent:     "state/id"
//	Path from root:       "/interfaces/interface/state/id"
func (n *Interface_IdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface).Id
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-p4rt"
//	Path from parent:     "config/id"
//	Path from root:       "/interfaces/interface/config/id"
func (n *Interface_IdPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface).Id
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-p4rt"
//	Path from parent:     "config/id"
//	Path from root:       "/interfaces/interface/config/id"
func (n *Interface_IdPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface).Id
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_IfindexPath represents the /openconfig-interfaces/interfaces/interface/state/ifindex YANG schema element.
type Interface_IfindexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_IfindexPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/ifindex YANG schema element.
type Interface_IfindexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/ifindex"
//	Path from root:       "/interfaces/interface/state/ifindex"
func (n *Interface_IfindexPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ifindex"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface).Ifindex
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/ifindex"
//	Path from root:       "/interfaces/interface/state/ifindex"
func (n *Interface_IfindexPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ifindex"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface).Ifindex
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_InRatePath represents the /openconfig-interfaces/interfaces/interface/state/in-rate YANG schema element.
type Interface_InRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_InRatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/in-rate YANG schema element.
type Interface_InRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-intf"
//	Instantiating module: "openconfig-ate-intf"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/interfaces/interface/state/in-rate"
func (n *Interface_InRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Interface).InRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-intf"
//	Instantiating module: "openconfig-ate-intf"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/interfaces/interface/state/in-rate"
func (n *Interface_InRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Interface).InRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_LastChangePath represents the /openconfig-interfaces/interfaces/interface/state/last-change YANG schema element.
type Interface_LastChangePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_LastChangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/last-change YANG schema element.
type Interface_LastChangePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/last-change"
//	Path from root:       "/interfaces/interface/state/last-change"
func (n *Interface_LastChangePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-change"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface).LastChange
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/last-change"
//	Path from root:       "/interfaces/interface/state/last-change"
func (n *Interface_LastChangePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-change"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface).LastChange
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_LogicalPath represents the /openconfig-interfaces/interfaces/interface/state/logical YANG schema element.
type Interface_LogicalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_LogicalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/logical YANG schema element.
type Interface_LogicalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/logical"
//	Path from root:       "/interfaces/interface/state/logical"
func (n *Interface_LogicalPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "logical"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).Logical
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/logical"
//	Path from root:       "/interfaces/interface/state/logical"
func (n *Interface_LogicalPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "logical"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).Logical
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_LoopbackModePath represents the /openconfig-interfaces/interfaces/interface/state/loopback-mode YANG schema element.
type Interface_LoopbackModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_LoopbackModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/loopback-mode YANG schema element.
type Interface_LoopbackModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/loopback-mode"
//	Path from root:       "/interfaces/interface/state/loopback-mode"
func (n *Interface_LoopbackModePath) State() ygnmi.SingletonQuery[oc.E_Interfaces_LoopbackModeType] {
	return ygnmi.NewSingletonQuery[oc.E_Interfaces_LoopbackModeType](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loopback-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interfaces_LoopbackModeType, bool) {
			ret := gs.(*oc.Interface).LoopbackMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/loopback-mode"
//	Path from root:       "/interfaces/interface/state/loopback-mode"
func (n *Interface_LoopbackModePathAny) State() ygnmi.WildcardQuery[oc.E_Interfaces_LoopbackModeType] {
	return ygnmi.NewWildcardQuery[oc.E_Interfaces_LoopbackModeType](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loopback-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interfaces_LoopbackModeType, bool) {
			ret := gs.(*oc.Interface).LoopbackMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/loopback-mode"
//	Path from root:       "/interfaces/interface/config/loopback-mode"
func (n *Interface_LoopbackModePath) Config() ygnmi.ConfigQuery[oc.E_Interfaces_LoopbackModeType] {
	return ygnmi.NewConfigQuery[oc.E_Interfaces_LoopbackModeType](
		"Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "loopback-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interfaces_LoopbackModeType, bool) {
			ret := gs.(*oc.Interface).LoopbackMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/loopback-mode"
//	Path from root:       "/interfaces/interface/config/loopback-mode"
func (n *Interface_LoopbackModePathAny) Config() ygnmi.WildcardQuery[oc.E_Interfaces_LoopbackModeType] {
	return ygnmi.NewWildcardQuery[oc.E_Interfaces_LoopbackModeType](
		"Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "loopback-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interfaces_LoopbackModeType, bool) {
			ret := gs.(*oc.Interface).LoopbackMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_ManagementPath represents the /openconfig-interfaces/interfaces/interface/state/management YANG schema element.
type Interface_ManagementPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_ManagementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/management YANG schema element.
type Interface_ManagementPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/management"
//	Path from root:       "/interfaces/interface/state/management"
func (n *Interface_ManagementPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "management"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).Management
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/management"
//	Path from root:       "/interfaces/interface/state/management"
func (n *Interface_ManagementPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "management"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).Management
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_MtuPath represents the /openconfig-interfaces/interfaces/interface/state/mtu YANG schema element.
type Interface_MtuPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/mtu YANG schema element.
type Interface_MtuPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/mtu"
//	Path from root:       "/interfaces/interface/state/mtu"
func (n *Interface_MtuPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface).Mtu
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/mtu"
//	Path from root:       "/interfaces/interface/state/mtu"
func (n *Interface_MtuPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface).Mtu
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/mtu"
//	Path from root:       "/interfaces/interface/config/mtu"
func (n *Interface_MtuPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface).Mtu
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/mtu"
//	Path from root:       "/interfaces/interface/config/mtu"
func (n *Interface_MtuPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface).Mtu
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_NamePath represents the /openconfig-interfaces/interfaces/interface/state/name YANG schema element.
type Interface_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_NamePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/name YANG schema element.
type Interface_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/name"
//	Path from root:       "/interfaces/interface/state/name"
func (n *Interface_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/name"
//	Path from root:       "/interfaces/interface/state/name"
func (n *Interface_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/name"
//	Path from root:       "/interfaces/interface/config/name"
func (n *Interface_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/name"
//	Path from root:       "/interfaces/interface/config/name"
func (n *Interface_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_OperStatusPath represents the /openconfig-interfaces/interfaces/interface/state/oper-status YANG schema element.
type Interface_OperStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_OperStatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/oper-status YANG schema element.
type Interface_OperStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/interfaces/interface/state/oper-status"
func (n *Interface_OperStatusPath) State() ygnmi.SingletonQuery[oc.E_Interface_OperStatus] {
	return ygnmi.NewSingletonQuery[oc.E_Interface_OperStatus](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_OperStatus, bool) {
			ret := gs.(*oc.Interface).OperStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/interfaces/interface/state/oper-status"
func (n *Interface_OperStatusPathAny) State() ygnmi.WildcardQuery[oc.E_Interface_OperStatus] {
	return ygnmi.NewWildcardQuery[oc.E_Interface_OperStatus](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_OperStatus, bool) {
			ret := gs.(*oc.Interface).OperStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_OutRatePath represents the /openconfig-interfaces/interfaces/interface/state/out-rate YANG schema element.
type Interface_OutRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_OutRatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/out-rate YANG schema element.
type Interface_OutRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-intf"
//	Instantiating module: "openconfig-ate-intf"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/interfaces/interface/state/out-rate"
func (n *Interface_OutRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Interface).OutRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-intf"
//	Instantiating module: "openconfig-ate-intf"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/interfaces/interface/state/out-rate"
func (n *Interface_OutRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Interface).OutRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_PhysicalChannelPath represents the /openconfig-interfaces/interfaces/interface/state/physical-channel YANG schema element.
type Interface_PhysicalChannelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_PhysicalChannelPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/physical-channel YANG schema element.
type Interface_PhysicalChannelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/physical-channel"
//	Path from root:       "/interfaces/interface/state/physical-channel"
func (n *Interface_PhysicalChannelPath) State() ygnmi.SingletonQuery[[]uint16] {
	return ygnmi.NewSingletonQuery[[]uint16](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "physical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface).PhysicalChannel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/physical-channel"
//	Path from root:       "/interfaces/interface/state/physical-channel"
func (n *Interface_PhysicalChannelPathAny) State() ygnmi.WildcardQuery[[]uint16] {
	return ygnmi.NewWildcardQuery[[]uint16](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "physical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface).PhysicalChannel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_TpidPath represents the /openconfig-interfaces/interfaces/interface/state/tpid YANG schema element.
type Interface_TpidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_TpidPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/tpid YANG schema element.
type Interface_TpidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/tpid"
//	Path from root:       "/interfaces/interface/state/tpid"
func (n *Interface_TpidPath) State() ygnmi.SingletonQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewSingletonQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/tpid"
//	Path from root:       "/interfaces/interface/state/tpid"
func (n *Interface_TpidPathAny) State() ygnmi.WildcardQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewWildcardQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/tpid"
//	Path from root:       "/interfaces/interface/config/tpid"
func (n *Interface_TpidPath) Config() ygnmi.ConfigQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewConfigQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/tpid"
//	Path from root:       "/interfaces/interface/config/tpid"
func (n *Interface_TpidPathAny) Config() ygnmi.WildcardQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewWildcardQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_TransceiverPath represents the /openconfig-interfaces/interfaces/interface/state/transceiver YANG schema element.
type Interface_TransceiverPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_TransceiverPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/transceiver YANG schema element.
type Interface_TransceiverPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/transceiver"
//	Path from root:       "/interfaces/interface/state/transceiver"
func (n *Interface_TransceiverPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transceiver"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).Transceiver
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/transceiver"
//	Path from root:       "/interfaces/interface/state/transceiver"
func (n *Interface_TransceiverPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transceiver"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).Transceiver
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_TypePath represents the /openconfig-interfaces/interfaces/interface/state/type YANG schema element.
type Interface_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_TypePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/type YANG schema element.
type Interface_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/type"
//	Path from root:       "/interfaces/interface/state/type"
func (n *Interface_TypePath) State() ygnmi.SingletonQuery[oc.E_IETFInterfaces_InterfaceType] {
	return ygnmi.NewSingletonQuery[oc.E_IETFInterfaces_InterfaceType](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IETFInterfaces_InterfaceType, bool) {
			ret := gs.(*oc.Interface).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/type"
//	Path from root:       "/interfaces/interface/state/type"
func (n *Interface_TypePathAny) State() ygnmi.WildcardQuery[oc.E_IETFInterfaces_InterfaceType] {
	return ygnmi.NewWildcardQuery[oc.E_IETFInterfaces_InterfaceType](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IETFInterfaces_InterfaceType, bool) {
			ret := gs.(*oc.Interface).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/type"
//	Path from root:       "/interfaces/interface/config/type"
func (n *Interface_TypePath) Config() ygnmi.ConfigQuery[oc.E_IETFInterfaces_InterfaceType] {
	return ygnmi.NewConfigQuery[oc.E_IETFInterfaces_InterfaceType](
		"Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IETFInterfaces_InterfaceType, bool) {
			ret := gs.(*oc.Interface).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/type"
//	Path from root:       "/interfaces/interface/config/type"
func (n *Interface_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_IETFInterfaces_InterfaceType] {
	return ygnmi.NewWildcardQuery[oc.E_IETFInterfaces_InterfaceType](
		"Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IETFInterfaces_InterfaceType, bool) {
			ret := gs.(*oc.Interface).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// InterfacePath represents the /openconfig-interfaces/interfaces/interface YANG schema element.
type InterfacePath struct {
	*ygnmi.NodePath
}

// InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface YANG schema element.
type InterfacePathAny struct {
	*ygnmi.NodePath
}

// InterfacePathMap represents the /openconfig-interfaces/interfaces/interface YANG schema element.
type InterfacePathMap struct {
	*ygnmi.NodePath
}

// InterfacePathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface YANG schema element.
type InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// AdminStatus (leaf): The desired state of the interface.  In RFC 7223 this leaf
// has the same read semantics as ifAdminStatus.  Here, it
// reflects the administrative state as set by enabling or
// disabling the interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/admin-status"
//	Path from root:       "/interfaces/interface/state/admin-status"
func (n *InterfacePath) AdminStatus() *Interface_AdminStatusPath {
	ps := &Interface_AdminStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "admin-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminStatus (leaf): The desired state of the interface.  In RFC 7223 this leaf
// has the same read semantics as ifAdminStatus.  Here, it
// reflects the administrative state as set by enabling or
// disabling the interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/admin-status"
//	Path from root:       "/interfaces/interface/state/admin-status"
func (n *InterfacePathAny) AdminStatus() *Interface_AdminStatusPathAny {
	ps := &Interface_AdminStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "admin-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Aggregation (container): Options for logical interfaces representing
// aggregates
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "aggregation"
//	Path from root:       "/interfaces/interface/aggregation"
func (n *InterfacePath) Aggregation() *Interface_AggregationPath {
	ps := &Interface_AggregationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"aggregation"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Aggregation (container): Options for logical interfaces representing
// aggregates
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "aggregation"
//	Path from root:       "/interfaces/interface/aggregation"
func (n *InterfacePathAny) Aggregation() *Interface_AggregationPathAny {
	ps := &Interface_AggregationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"aggregation"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of interface specific statistics entitites which are
// not common to subinterfaces.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/state/counters"
func (n *InterfacePath) Counters() *Interface_CountersPath {
	ps := &Interface_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of interface specific statistics entitites which are
// not common to subinterfaces.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/state/counters"
func (n *InterfacePathAny) Counters() *Interface_CountersPathAny {
	ps := &Interface_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Cpu (leaf): When set to true, the interface is for traffic
// that is handled by the system CPU, sometimes also called the
// control plane interface.  On systems that represent the CPU
// interface as an Ethernet interface, for example, this leaf
// should be used to distinguish the CPU interface from dataplane
// interfaces.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/cpu"
//	Path from root:       "/interfaces/interface/state/cpu"
func (n *InterfacePath) Cpu() *Interface_CpuPath {
	ps := &Interface_CpuPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cpu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Cpu (leaf): When set to true, the interface is for traffic
// that is handled by the system CPU, sometimes also called the
// control plane interface.  On systems that represent the CPU
// interface as an Ethernet interface, for example, this leaf
// should be used to distinguish the CPU interface from dataplane
// interfaces.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/cpu"
//	Path from root:       "/interfaces/interface/state/cpu"
func (n *InterfacePathAny) Cpu() *Interface_CpuPathAny {
	ps := &Interface_CpuPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cpu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): A textual description of the interface.
//
// A server implementation MAY map this leaf to the ifAlias
// MIB object.  Such an implementation needs to use some
// mechanism to handle the differences in size and characters
// allowed between this leaf and ifAlias.  The definition of
// such a mechanism is outside the scope of this document.
//
// Since ifAlias is defined to be stored in non-volatile
// storage, the MIB implementation MUST map ifAlias to the
// value of 'description' in the persistently stored
// datastore.
//
// Specifically, if the device supports ':startup', when
// ifAlias is read the device MUST return the value of
// 'description' in the 'startup' datastore, and when it is
// written, it MUST be written to the 'running' and 'startup'
// datastores.  Note that it is up to the implementation to
//
// decide whether to modify this single leaf in 'startup' or
// perform an implicit copy-config from 'running' to
// 'startup'.
//
// If the device does not support ':startup', ifAlias MUST
// be mapped to the 'description' leaf in the 'running'
// datastore.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/description"
//	Path from root:       "/interfaces/interface/*/description"
func (n *InterfacePath) Description() *Interface_DescriptionPath {
	ps := &Interface_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): A textual description of the interface.
//
// A server implementation MAY map this leaf to the ifAlias
// MIB object.  Such an implementation needs to use some
// mechanism to handle the differences in size and characters
// allowed between this leaf and ifAlias.  The definition of
// such a mechanism is outside the scope of this document.
//
// Since ifAlias is defined to be stored in non-volatile
// storage, the MIB implementation MUST map ifAlias to the
// value of 'description' in the persistently stored
// datastore.
//
// Specifically, if the device supports ':startup', when
// ifAlias is read the device MUST return the value of
// 'description' in the 'startup' datastore, and when it is
// written, it MUST be written to the 'running' and 'startup'
// datastores.  Note that it is up to the implementation to
//
// decide whether to modify this single leaf in 'startup' or
// perform an implicit copy-config from 'running' to
// 'startup'.
//
// If the device does not support ':startup', ifAlias MUST
// be mapped to the 'description' leaf in the 'running'
// datastore.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/description"
//	Path from root:       "/interfaces/interface/*/description"
func (n *InterfacePathAny) Description() *Interface_DescriptionPathAny {
	ps := &Interface_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): This leaf contains the configured, desired state of the
// interface.
//
// Systems that implement the IF-MIB use the value of this
// leaf in the 'running' datastore to set
// IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
// has been initialized, as described in RFC 2863.
//
// Changes in this leaf in the 'running' datastore are
// reflected in ifAdminStatus, but if ifAdminStatus is
// changed over SNMP, this leaf is not affected.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/*/enabled"
func (n *InterfacePath) Enabled() *Interface_EnabledPath {
	ps := &Interface_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): This leaf contains the configured, desired state of the
// interface.
//
// Systems that implement the IF-MIB use the value of this
// leaf in the 'running' datastore to set
// IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
// has been initialized, as described in RFC 2863.
//
// Changes in this leaf in the 'running' datastore are
// reflected in ifAdminStatus, but if ifAdminStatus is
// changed over SNMP, this leaf is not affected.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/*/enabled"
func (n *InterfacePathAny) Enabled() *Interface_EnabledPathAny {
	ps := &Interface_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ethernet (container): Top-level container for ethernet configuration
// and state
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "ethernet"
//	Path from root:       "/interfaces/interface/ethernet"
func (n *InterfacePath) Ethernet() *Interface_EthernetPath {
	ps := &Interface_EthernetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ethernet"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ethernet (container): Top-level container for ethernet configuration
// and state
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "ethernet"
//	Path from root:       "/interfaces/interface/ethernet"
func (n *InterfacePathAny) Ethernet() *Interface_EthernetPathAny {
	ps := &Interface_EthernetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ethernet"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ForwardingViable (leaf): This value indicates whether the interface may be used
// to route traffic or not.  If set to false, the
// interface is not used for forwarding traffic, but as long as
// it is up, the interface still maintains its layer-2
// adjacencies and runs its configured layer-2 functions
// (e.g., LLDP, etc.).
// This is used by an external programming entity to disable an interface
// (usually part of an aggregate) for the purposes of forwarding
// traffic. This allows a logical aggregate to continue to be
// used with partial capacity. Setting `forwarding-viable = false` is not
// equivalent to administratively disabling the interface.
// Some rules to follow when an interface or aggregate interface is set for
// Forwarding-viable=False:
//
//  1. Aggregate interface '/interfaces/interface/aggregation/state/min-links'
//     checks should be evaluated based on
//     `/interfaces/interface/state/oper-status`.  'min-links' should not be
//     affected by the use of forwarding viable.
//
//  2. L2 protocols like LLDP and LACP must be processed normally on
//     transmit and receive on such ports/bundles.  IS-IS PDUs should be
//     handled as per the requirements for L3 packets below.
//
//  3. L3 packets must not be transmitted on the interface.
//
//  4. Received L3 packets must be processed normally.  Received data-plane
//     traffic will continue to forwarded to its destination post FIB lookup.
//     Received control-plane traffic must also be processed normally.
//
//  5. It is possible that the dead-interval or hold-down timer of L3
//     protocols like IS-IS/BGP on the peer router may expire taking down the
//     adjacency or peering on that connection. However, the peer may still
//     continue to transmit packets which are received by the local device.
//     These received packet should continue to be processed normally as
//     per rule #4 above.
//
//     For example, if the peer's forwarding table is programmed using gRIBI
//     by an external controller, the local device will continue to receive
//     packets.
//
//  6. An implementation should follow rule #3 even when the subject
//     interface on the local device is the last resort of communication for a
//     given destination.  For example, the only nexthop for a destination is
//     an aggregate interface which has all member interfaces set to
//     forwarding-viable = false.  In this scenario all L3 packets for that
//     destination will be dropped.
//     Defining module:      "openconfig-if-sdn-ext"
//     Instantiating module: "openconfig-interfaces"
//     Path from parent:     "*/forwarding-viable"
//     Path from root:       "/interfaces/interface/*/forwarding-viable"
func (n *InterfacePath) ForwardingViable() *Interface_ForwardingViablePath {
	ps := &Interface_ForwardingViablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "forwarding-viable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ForwardingViable (leaf): This value indicates whether the interface may be used
// to route traffic or not.  If set to false, the
// interface is not used for forwarding traffic, but as long as
// it is up, the interface still maintains its layer-2
// adjacencies and runs its configured layer-2 functions
// (e.g., LLDP, etc.).
// This is used by an external programming entity to disable an interface
// (usually part of an aggregate) for the purposes of forwarding
// traffic. This allows a logical aggregate to continue to be
// used with partial capacity. Setting `forwarding-viable = false` is not
// equivalent to administratively disabling the interface.
// Some rules to follow when an interface or aggregate interface is set for
// Forwarding-viable=False:
//
//  1. Aggregate interface '/interfaces/interface/aggregation/state/min-links'
//     checks should be evaluated based on
//     `/interfaces/interface/state/oper-status`.  'min-links' should not be
//     affected by the use of forwarding viable.
//
//  2. L2 protocols like LLDP and LACP must be processed normally on
//     transmit and receive on such ports/bundles.  IS-IS PDUs should be
//     handled as per the requirements for L3 packets below.
//
//  3. L3 packets must not be transmitted on the interface.
//
//  4. Received L3 packets must be processed normally.  Received data-plane
//     traffic will continue to forwarded to its destination post FIB lookup.
//     Received control-plane traffic must also be processed normally.
//
//  5. It is possible that the dead-interval or hold-down timer of L3
//     protocols like IS-IS/BGP on the peer router may expire taking down the
//     adjacency or peering on that connection. However, the peer may still
//     continue to transmit packets which are received by the local device.
//     These received packet should continue to be processed normally as
//     per rule #4 above.
//
//     For example, if the peer's forwarding table is programmed using gRIBI
//     by an external controller, the local device will continue to receive
//     packets.
//
//  6. An implementation should follow rule #3 even when the subject
//     interface on the local device is the last resort of communication for a
//     given destination.  For example, the only nexthop for a destination is
//     an aggregate interface which has all member interfaces set to
//     forwarding-viable = false.  In this scenario all L3 packets for that
//     destination will be dropped.
//     Defining module:      "openconfig-if-sdn-ext"
//     Instantiating module: "openconfig-interfaces"
//     Path from parent:     "*/forwarding-viable"
//     Path from root:       "/interfaces/interface/*/forwarding-viable"
func (n *InterfacePathAny) ForwardingViable() *Interface_ForwardingViablePathAny {
	ps := &Interface_ForwardingViablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "forwarding-viable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HardwarePort (leaf): For non-channelized interfaces, references the hardware port
// corresponding to the base interface.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/hardware-port"
//	Path from root:       "/interfaces/interface/state/hardware-port"
func (n *InterfacePath) HardwarePort() *Interface_HardwarePortPath {
	ps := &Interface_HardwarePortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "hardware-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HardwarePort (leaf): For non-channelized interfaces, references the hardware port
// corresponding to the base interface.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/hardware-port"
//	Path from root:       "/interfaces/interface/state/hardware-port"
func (n *InterfacePathAny) HardwarePort() *Interface_HardwarePortPathAny {
	ps := &Interface_HardwarePortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "hardware-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HoldTime (container): Top-level container for hold-time settings to enable
// dampening advertisements of interface transitions.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "hold-time"
//	Path from root:       "/interfaces/interface/hold-time"
func (n *InterfacePath) HoldTime() *Interface_HoldTimePath {
	ps := &Interface_HoldTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"hold-time"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HoldTime (container): Top-level container for hold-time settings to enable
// dampening advertisements of interface transitions.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "hold-time"
//	Path from root:       "/interfaces/interface/hold-time"
func (n *InterfacePathAny) HoldTime() *Interface_HoldTimePathAny {
	ps := &Interface_HoldTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"hold-time"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Id (leaf): The numeric identifier (SDN Port) used by the controller to
// address the interface. This ID is assigned by an
// external-to-the-device entity (e.g., an SDN management system)
// to establish an externally deterministic numeric reference for
// the interface. The programming entity must ensure that the ID is
// unique within the required context.
//
// Note that this identifier is used only when a numeric reference
// to the interface is required, it does not replace the unique
// name assigned to the interface.
//
// Ranges:
//
// 0x00000000: Unspecified/Invalid
// 0x00000001: Minimum Port Value
// 0xFFFFFEFF: Maximum Port Value
//
// Reserved:   0xFFFFFFF0 - 0xFFFFFFFF
// 0xFFFFFFFA: Recirculate
// 0xFFFFFFFD: CPU
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/id"
//	Path from root:       "/interfaces/interface/*/id"
func (n *InterfacePath) Id() *Interface_IdPath {
	ps := &Interface_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): The numeric identifier (SDN Port) used by the controller to
// address the interface. This ID is assigned by an
// external-to-the-device entity (e.g., an SDN management system)
// to establish an externally deterministic numeric reference for
// the interface. The programming entity must ensure that the ID is
// unique within the required context.
//
// Note that this identifier is used only when a numeric reference
// to the interface is required, it does not replace the unique
// name assigned to the interface.
//
// Ranges:
//
// 0x00000000: Unspecified/Invalid
// 0x00000001: Minimum Port Value
// 0xFFFFFEFF: Maximum Port Value
//
// Reserved:   0xFFFFFFF0 - 0xFFFFFFFF
// 0xFFFFFFFA: Recirculate
// 0xFFFFFFFD: CPU
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/id"
//	Path from root:       "/interfaces/interface/*/id"
func (n *InterfacePathAny) Id() *Interface_IdPathAny {
	ps := &Interface_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ifindex (leaf): System assigned number for each interface.  Corresponds to
// ifIndex object in SNMP Interface MIB
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/ifindex"
//	Path from root:       "/interfaces/interface/state/ifindex"
func (n *InterfacePath) Ifindex() *Interface_IfindexPath {
	ps := &Interface_IfindexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ifindex"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ifindex (leaf): System assigned number for each interface.  Corresponds to
// ifIndex object in SNMP Interface MIB
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/ifindex"
//	Path from root:       "/interfaces/interface/state/ifindex"
func (n *InterfacePathAny) Ifindex() *Interface_IfindexPathAny {
	ps := &Interface_IfindexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ifindex"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InRate (leaf): The calculate received rate of the interface, measured in bits
// per second.
//
//	Defining module:      "openconfig-ate-intf"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/interfaces/interface/state/in-rate"
func (n *InterfacePath) InRate() *Interface_InRatePath {
	ps := &Interface_InRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InRate (leaf): The calculate received rate of the interface, measured in bits
// per second.
//
//	Defining module:      "openconfig-ate-intf"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/interfaces/interface/state/in-rate"
func (n *InterfacePathAny) InRate() *Interface_InRatePathAny {
	ps := &Interface_InRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastChange (leaf): This timestamp indicates the absolute time of the last
// state change of the interface (e.g., up-to-down transition).
// This is different than the SNMP ifLastChange object in the
// standard interface MIB in that it is not relative to the
// system boot time (i.e,. sysUpTime).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/last-change"
//	Path from root:       "/interfaces/interface/state/last-change"
func (n *InterfacePath) LastChange() *Interface_LastChangePath {
	ps := &Interface_LastChangePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastChange (leaf): This timestamp indicates the absolute time of the last
// state change of the interface (e.g., up-to-down transition).
// This is different than the SNMP ifLastChange object in the
// standard interface MIB in that it is not relative to the
// system boot time (i.e,. sysUpTime).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/last-change"
//	Path from root:       "/interfaces/interface/state/last-change"
func (n *InterfacePathAny) LastChange() *Interface_LastChangePathAny {
	ps := &Interface_LastChangePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Logical (leaf): When set to true, the interface is a logical interface
// which does not have an associated physical port or
// channel on the system.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/logical"
//	Path from root:       "/interfaces/interface/state/logical"
func (n *InterfacePath) Logical() *Interface_LogicalPath {
	ps := &Interface_LogicalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "logical"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Logical (leaf): When set to true, the interface is a logical interface
// which does not have an associated physical port or
// channel on the system.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/logical"
//	Path from root:       "/interfaces/interface/state/logical"
func (n *InterfacePathAny) Logical() *Interface_LogicalPathAny {
	ps := &Interface_LogicalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "logical"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LoopbackMode (leaf): Sets the loopback type on the interface. Setting the
// mode to something besides NONE activates the loopback in
// the specified mode.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/loopback-mode"
//	Path from root:       "/interfaces/interface/*/loopback-mode"
func (n *InterfacePath) LoopbackMode() *Interface_LoopbackModePath {
	ps := &Interface_LoopbackModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "loopback-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LoopbackMode (leaf): Sets the loopback type on the interface. Setting the
// mode to something besides NONE activates the loopback in
// the specified mode.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/loopback-mode"
//	Path from root:       "/interfaces/interface/*/loopback-mode"
func (n *InterfacePathAny) LoopbackMode() *Interface_LoopbackModePathAny {
	ps := &Interface_LoopbackModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "loopback-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Management (leaf): When set to true, the interface is a dedicated
// management interface that is not connected to dataplane
// interfaces.  It may be used to connect the system to an
// out-of-band management network, for example.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/management"
//	Path from root:       "/interfaces/interface/state/management"
func (n *InterfacePath) Management() *Interface_ManagementPath {
	ps := &Interface_ManagementPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Management (leaf): When set to true, the interface is a dedicated
// management interface that is not connected to dataplane
// interfaces.  It may be used to connect the system to an
// out-of-band management network, for example.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/management"
//	Path from root:       "/interfaces/interface/state/management"
func (n *InterfacePathAny) Management() *Interface_ManagementPathAny {
	ps := &Interface_ManagementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mtu (leaf): Set the max transmission unit size in octets
// for the physical interface.  If this is not set, the mtu is
// set to the operational default -- e.g., 1514 bytes on an
// Ethernet interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mtu"
//	Path from root:       "/interfaces/interface/*/mtu"
func (n *InterfacePath) Mtu() *Interface_MtuPath {
	ps := &Interface_MtuPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mtu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mtu (leaf): Set the max transmission unit size in octets
// for the physical interface.  If this is not set, the mtu is
// set to the operational default -- e.g., 1514 bytes on an
// Ethernet interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mtu"
//	Path from root:       "/interfaces/interface/*/mtu"
func (n *InterfacePathAny) Mtu() *Interface_MtuPathAny {
	ps := &Interface_MtuPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mtu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The name of the interface.
//
// A device MAY restrict the allowed values for this leaf,
// possibly depending on the type of the interface.
// For system-controlled interfaces, this leaf is the
// device-specific name of the interface.  The 'config false'
// list interfaces/interface[name]/state contains the currently
// existing interfaces on the device.
//
// If a client tries to create configuration for a
// system-controlled interface that is not present in the
// corresponding state list, the server MAY reject
// the request if the implementation does not support
// pre-provisioning of interfaces or if the name refers to
// an interface that can never exist in the system.  A
// NETCONF server MUST reply with an rpc-error with the
// error-tag 'invalid-value' in this case.
//
// The IETF model in RFC 7223 provides YANG features for the
// following (i.e., pre-provisioning and arbitrary-names),
// however they are omitted here:
//
//	If the device supports pre-provisioning of interface
//	configuration, the 'pre-provisioning' feature is
//	advertised.
//
//	If the device allows arbitrarily named user-controlled
//	interfaces, the 'arbitrary-names' feature is advertised.
//
// When a configured user-controlled interface is created by
// the system, it is instantiated with the same name in the
// /interfaces/interface[name]/state list.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/name"
//	Path from root:       "/interfaces/interface/*/name"
func (n *InterfacePath) Name() *Interface_NamePath {
	ps := &Interface_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The name of the interface.
//
// A device MAY restrict the allowed values for this leaf,
// possibly depending on the type of the interface.
// For system-controlled interfaces, this leaf is the
// device-specific name of the interface.  The 'config false'
// list interfaces/interface[name]/state contains the currently
// existing interfaces on the device.
//
// If a client tries to create configuration for a
// system-controlled interface that is not present in the
// corresponding state list, the server MAY reject
// the request if the implementation does not support
// pre-provisioning of interfaces or if the name refers to
// an interface that can never exist in the system.  A
// NETCONF server MUST reply with an rpc-error with the
// error-tag 'invalid-value' in this case.
//
// The IETF model in RFC 7223 provides YANG features for the
// following (i.e., pre-provisioning and arbitrary-names),
// however they are omitted here:
//
//	If the device supports pre-provisioning of interface
//	configuration, the 'pre-provisioning' feature is
//	advertised.
//
//	If the device allows arbitrarily named user-controlled
//	interfaces, the 'arbitrary-names' feature is advertised.
//
// When a configured user-controlled interface is created by
// the system, it is instantiated with the same name in the
// /interfaces/interface[name]/state list.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/name"
//	Path from root:       "/interfaces/interface/*/name"
func (n *InterfacePathAny) Name() *Interface_NamePathAny {
	ps := &Interface_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperStatus (leaf): The current operational state of the interface.
//
// This leaf has the same semantics as ifOperStatus.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/interfaces/interface/state/oper-status"
func (n *InterfacePath) OperStatus() *Interface_OperStatusPath {
	ps := &Interface_OperStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperStatus (leaf): The current operational state of the interface.
//
// This leaf has the same semantics as ifOperStatus.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/interfaces/interface/state/oper-status"
func (n *InterfacePathAny) OperStatus() *Interface_OperStatusPathAny {
	ps := &Interface_OperStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutRate (leaf): The calculated transmitted rate of the interface, measured in bits
// per second.
//
//	Defining module:      "openconfig-ate-intf"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/interfaces/interface/state/out-rate"
func (n *InterfacePath) OutRate() *Interface_OutRatePath {
	ps := &Interface_OutRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutRate (leaf): The calculated transmitted rate of the interface, measured in bits
// per second.
//
//	Defining module:      "openconfig-ate-intf"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/interfaces/interface/state/out-rate"
func (n *InterfacePathAny) OutRate() *Interface_OutRatePathAny {
	ps := &Interface_OutRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PenaltyBasedAied (container): Top level container to suppress UP->DOWN link events using a penalty based additive-increase, exponential-decrease algorithm.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "penalty-based-aied"
//	Path from root:       "/interfaces/interface/penalty-based-aied"
func (n *InterfacePath) PenaltyBasedAied() *Interface_PenaltyBasedAiedPath {
	ps := &Interface_PenaltyBasedAiedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"penalty-based-aied"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PenaltyBasedAied (container): Top level container to suppress UP->DOWN link events using a penalty based additive-increase, exponential-decrease algorithm.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "penalty-based-aied"
//	Path from root:       "/interfaces/interface/penalty-based-aied"
func (n *InterfacePathAny) PenaltyBasedAied() *Interface_PenaltyBasedAiedPathAny {
	ps := &Interface_PenaltyBasedAiedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"penalty-based-aied"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PhysicalChannel (leaf-list): For a channelized interface, list of references to the
// physical channels (lanes) corresponding to the interface.
// The physical channels are elements of a transceiver component
// in the platform model.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/physical-channel"
//	Path from root:       "/interfaces/interface/state/physical-channel"
func (n *InterfacePath) PhysicalChannel() *Interface_PhysicalChannelPath {
	ps := &Interface_PhysicalChannelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "physical-channel"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PhysicalChannel (leaf-list): For a channelized interface, list of references to the
// physical channels (lanes) corresponding to the interface.
// The physical channels are elements of a transceiver component
// in the platform model.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/physical-channel"
//	Path from root:       "/interfaces/interface/state/physical-channel"
func (n *InterfacePathAny) PhysicalChannel() *Interface_PhysicalChannelPathAny {
	ps := &Interface_PhysicalChannelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "physical-channel"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Rates (container): Enclosing container for interface rates.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "rates"
//	Path from root:       "/interfaces/interface/rates"
func (n *InterfacePath) Rates() *Interface_RatesPath {
	ps := &Interface_RatesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"rates"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Rates (container): Enclosing container for interface rates.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "rates"
//	Path from root:       "/interfaces/interface/rates"
func (n *InterfacePathAny) Rates() *Interface_RatesPathAny {
	ps := &Interface_RatesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rates"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RoutedVlan (container): Top-level container for routed vlan interfaces.  These
// logical interfaces are also known as SVI (switched virtual
// interface), IRB (integrated routing and bridging), RVI
// (routed VLAN interface)
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "routed-vlan"
//	Path from root:       "/interfaces/interface/routed-vlan"
func (n *InterfacePath) RoutedVlan() *Interface_RoutedVlanPath {
	ps := &Interface_RoutedVlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"routed-vlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RoutedVlan (container): Top-level container for routed vlan interfaces.  These
// logical interfaces are also known as SVI (switched virtual
// interface), IRB (integrated routing and bridging), RVI
// (routed VLAN interface)
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "routed-vlan"
//	Path from root:       "/interfaces/interface/routed-vlan"
func (n *InterfacePathAny) RoutedVlan() *Interface_RoutedVlanPathAny {
	ps := &Interface_RoutedVlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"routed-vlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SubinterfaceAny (list): The list of subinterfaces (logical interfaces) associated
// with a physical interface
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "subinterfaces/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface"
func (n *InterfacePath) SubinterfaceAny() *Interface_SubinterfacePathAny {
	ps := &Interface_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subinterfaces", "subinterface"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// SubinterfaceAny (list): The list of subinterfaces (logical interfaces) associated
// with a physical interface
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "subinterfaces/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface"
func (n *InterfacePathAny) SubinterfaceAny() *Interface_SubinterfacePathAny {
	ps := &Interface_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subinterfaces", "subinterface"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// Subinterface (list): The list of subinterfaces (logical interfaces) associated
// with a physical interface
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "subinterfaces/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface"
//
//	Index: uint32
func (n *InterfacePath) Subinterface(Index uint32) *Interface_SubinterfacePath {
	ps := &Interface_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"subinterfaces", "subinterface"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// Subinterface (list): The list of subinterfaces (logical interfaces) associated
// with a physical interface
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "subinterfaces/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface"
//
//	Index: uint32
func (n *InterfacePathAny) Subinterface(Index uint32) *Interface_SubinterfacePathAny {
	ps := &Interface_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subinterfaces", "subinterface"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// SubinterfaceMap (list): The list of subinterfaces (logical interfaces) associated
// with a physical interface
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "subinterfaces/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface"
func (n *InterfacePath) SubinterfaceMap() *Interface_SubinterfacePathMap {
	ps := &Interface_SubinterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"subinterfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SubinterfaceMap (list): The list of subinterfaces (logical interfaces) associated
// with a physical interface
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "subinterfaces/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface"
func (n *InterfacePathAny) SubinterfaceMap() *Interface_SubinterfacePathMapAny {
	ps := &Interface_SubinterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subinterfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Tpid (leaf): Optionally set the tag protocol identifier field (TPID) that
// is accepted on the VLAN
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/tpid"
//	Path from root:       "/interfaces/interface/*/tpid"
func (n *InterfacePath) Tpid() *Interface_TpidPath {
	ps := &Interface_TpidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tpid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Tpid (leaf): Optionally set the tag protocol identifier field (TPID) that
// is accepted on the VLAN
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/tpid"
//	Path from root:       "/interfaces/interface/*/tpid"
func (n *InterfacePathAny) Tpid() *Interface_TpidPathAny {
	ps := &Interface_TpidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tpid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Transceiver (leaf): Provides a reference to the transceiver subcomponent that
// corresponds to the physical port component for this interface.
// The device must only populate this leaf with a reference to
// a component of type TRANSCEIVER.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/transceiver"
//	Path from root:       "/interfaces/interface/state/transceiver"
func (n *InterfacePath) Transceiver() *Interface_TransceiverPath {
	ps := &Interface_TransceiverPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transceiver"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Transceiver (leaf): Provides a reference to the transceiver subcomponent that
// corresponds to the physical port component for this interface.
// The device must only populate this leaf with a reference to
// a component of type TRANSCEIVER.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/transceiver"
//	Path from root:       "/interfaces/interface/state/transceiver"
func (n *InterfacePathAny) Transceiver() *Interface_TransceiverPathAny {
	ps := &Interface_TransceiverPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transceiver"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of the interface.
//
// When an interface entry is created, a server MAY
// initialize the type leaf with a valid value, e.g., if it
// is possible to derive the type from the name of the
// interface.
//
// If a client tries to set the type of an interface to a
// value that can never be used by the system, e.g., if the
// type is not supported or if the type does not match the
// name of the interface, the server MUST reject the request.
// A NETCONF server MUST reply with an rpc-error with the
// error-tag 'invalid-value' in this case.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/type"
//	Path from root:       "/interfaces/interface/*/type"
func (n *InterfacePath) Type() *Interface_TypePath {
	ps := &Interface_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of the interface.
//
// When an interface entry is created, a server MAY
// initialize the type leaf with a valid value, e.g., if it
// is possible to derive the type from the name of the
// interface.
//
// If a client tries to set the type of an interface to a
// value that can never be used by the system, e.g., if the
// type is not supported or if the type does not match the
// name of the interface, the server MUST reject the request.
// A NETCONF server MUST reply with an rpc-error with the
// error-tag 'invalid-value' in this case.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/type"
//	Path from root:       "/interfaces/interface/*/type"
func (n *InterfacePathAny) Type() *Interface_TypePathAny {
	ps := &Interface_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *InterfacePath) State() ygnmi.SingletonQuery[*oc.Interface] {
	return ygnmi.NewSingletonQuery[*oc.Interface](
		"Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *InterfacePathAny) State() ygnmi.WildcardQuery[*oc.Interface] {
	return ygnmi.NewWildcardQuery[*oc.Interface](
		"Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *InterfacePath) Config() ygnmi.ConfigQuery[*oc.Interface] {
	return ygnmi.NewConfigQuery[*oc.Interface](
		"Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.Interface] {
	return ygnmi.NewWildcardQuery[*oc.Interface](
		"Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Interface](
		"Root",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface, bool) {
			ret := gs.(*oc.Root).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-interfaces:interfaces"},
			PostRelPath: []string{"openconfig-interfaces:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface](
		"Root",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface, bool) {
			ret := gs.(*oc.Root).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-interfaces:interfaces"},
			PostRelPath: []string{"openconfig-interfaces:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.Interface](
		"Root",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface, bool) {
			ret := gs.(*oc.Root).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-interfaces:interfaces"},
			PostRelPath: []string{"openconfig-interfaces:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface](
		"Root",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface, bool) {
			ret := gs.(*oc.Root).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-interfaces:interfaces"},
			PostRelPath: []string{"openconfig-interfaces:interface"},
		},
	)
}

// Interface_Aggregation_LagSpeedPath represents the /openconfig-interfaces/interfaces/interface/aggregation/state/lag-speed YANG schema element.
type Interface_Aggregation_LagSpeedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Aggregation_LagSpeedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/state/lag-speed YANG schema element.
type Interface_Aggregation_LagSpeedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "state/lag-speed"
//	Path from root:       "/interfaces/interface/aggregation/state/lag-speed"
func (n *Interface_Aggregation_LagSpeedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Aggregation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lag-speed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Aggregation).LagSpeed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "state/lag-speed"
//	Path from root:       "/interfaces/interface/aggregation/state/lag-speed"
func (n *Interface_Aggregation_LagSpeedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Aggregation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lag-speed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Aggregation).LagSpeed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Aggregation_LagTypePath represents the /openconfig-interfaces/interfaces/interface/aggregation/state/lag-type YANG schema element.
type Interface_Aggregation_LagTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Aggregation_LagTypePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/state/lag-type YANG schema element.
type Interface_Aggregation_LagTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "state/lag-type"
//	Path from root:       "/interfaces/interface/aggregation/state/lag-type"
func (n *Interface_Aggregation_LagTypePath) State() ygnmi.SingletonQuery[oc.E_IfAggregate_AggregationType] {
	return ygnmi.NewSingletonQuery[oc.E_IfAggregate_AggregationType](
		"Interface_Aggregation",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lag-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfAggregate_AggregationType, bool) {
			ret := gs.(*oc.Interface_Aggregation).LagType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "state/lag-type"
//	Path from root:       "/interfaces/interface/aggregation/state/lag-type"
func (n *Interface_Aggregation_LagTypePathAny) State() ygnmi.WildcardQuery[oc.E_IfAggregate_AggregationType] {
	return ygnmi.NewWildcardQuery[oc.E_IfAggregate_AggregationType](
		"Interface_Aggregation",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lag-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfAggregate_AggregationType, bool) {
			ret := gs.(*oc.Interface_Aggregation).LagType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "config/lag-type"
//	Path from root:       "/interfaces/interface/aggregation/config/lag-type"
func (n *Interface_Aggregation_LagTypePath) Config() ygnmi.ConfigQuery[oc.E_IfAggregate_AggregationType] {
	return ygnmi.NewConfigQuery[oc.E_IfAggregate_AggregationType](
		"Interface_Aggregation",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lag-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfAggregate_AggregationType, bool) {
			ret := gs.(*oc.Interface_Aggregation).LagType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "config/lag-type"
//	Path from root:       "/interfaces/interface/aggregation/config/lag-type"
func (n *Interface_Aggregation_LagTypePathAny) Config() ygnmi.WildcardQuery[oc.E_IfAggregate_AggregationType] {
	return ygnmi.NewWildcardQuery[oc.E_IfAggregate_AggregationType](
		"Interface_Aggregation",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lag-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfAggregate_AggregationType, bool) {
			ret := gs.(*oc.Interface_Aggregation).LagType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Aggregation_MemberPath represents the /openconfig-interfaces/interfaces/interface/aggregation/state/member YANG schema element.
type Interface_Aggregation_MemberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Aggregation_MemberPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/state/member YANG schema element.
type Interface_Aggregation_MemberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "state/member"
//	Path from root:       "/interfaces/interface/aggregation/state/member"
func (n *Interface_Aggregation_MemberPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"Interface_Aggregation",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Aggregation).Member
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "state/member"
//	Path from root:       "/interfaces/interface/aggregation/state/member"
func (n *Interface_Aggregation_MemberPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_Aggregation",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Aggregation).Member
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Aggregation_MinLinksPath represents the /openconfig-interfaces/interfaces/interface/aggregation/state/min-links YANG schema element.
type Interface_Aggregation_MinLinksPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Aggregation_MinLinksPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/state/min-links YANG schema element.
type Interface_Aggregation_MinLinksPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "state/min-links"
//	Path from root:       "/interfaces/interface/aggregation/state/min-links"
func (n *Interface_Aggregation_MinLinksPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Aggregation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-links"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation).MinLinks
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "state/min-links"
//	Path from root:       "/interfaces/interface/aggregation/state/min-links"
func (n *Interface_Aggregation_MinLinksPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Aggregation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-links"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation).MinLinks
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "config/min-links"
//	Path from root:       "/interfaces/interface/aggregation/config/min-links"
func (n *Interface_Aggregation_MinLinksPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Aggregation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-links"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation).MinLinks
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "config/min-links"
//	Path from root:       "/interfaces/interface/aggregation/config/min-links"
func (n *Interface_Aggregation_MinLinksPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Aggregation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-links"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation).MinLinks
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_AggregationPath represents the /openconfig-interfaces/interfaces/interface/aggregation YANG schema element.
type Interface_AggregationPath struct {
	*ygnmi.NodePath
}

// Interface_AggregationPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation YANG schema element.
type Interface_AggregationPathAny struct {
	*ygnmi.NodePath
}

// LagSpeed (leaf): Reports the effective speed of the aggregate interface, calculated
// as the sum of the speeds of member interfaces that are
// active (operationally up), forwarding-viable and selected by the
// aggregation protocol (e.g., LACP) for active traffic distribution
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/lag-speed"
//	Path from root:       "/interfaces/interface/aggregation/state/lag-speed"
func (n *Interface_AggregationPath) LagSpeed() *Interface_Aggregation_LagSpeedPath {
	ps := &Interface_Aggregation_LagSpeedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lag-speed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LagSpeed (leaf): Reports the effective speed of the aggregate interface, calculated
// as the sum of the speeds of member interfaces that are
// active (operationally up), forwarding-viable and selected by the
// aggregation protocol (e.g., LACP) for active traffic distribution
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/lag-speed"
//	Path from root:       "/interfaces/interface/aggregation/state/lag-speed"
func (n *Interface_AggregationPathAny) LagSpeed() *Interface_Aggregation_LagSpeedPathAny {
	ps := &Interface_Aggregation_LagSpeedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lag-speed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LagType (leaf): Sets the type of LAG, i.e., how it is
// configured / maintained
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/lag-type"
//	Path from root:       "/interfaces/interface/aggregation/*/lag-type"
func (n *Interface_AggregationPath) LagType() *Interface_Aggregation_LagTypePath {
	ps := &Interface_Aggregation_LagTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lag-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LagType (leaf): Sets the type of LAG, i.e., how it is
// configured / maintained
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/lag-type"
//	Path from root:       "/interfaces/interface/aggregation/*/lag-type"
func (n *Interface_AggregationPathAny) LagType() *Interface_Aggregation_LagTypePathAny {
	ps := &Interface_Aggregation_LagTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lag-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Member (leaf-list): List of current member interfaces for the aggregate,
// expressed as references to existing interfaces
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/member"
//	Path from root:       "/interfaces/interface/aggregation/state/member"
func (n *Interface_AggregationPath) Member() *Interface_Aggregation_MemberPath {
	ps := &Interface_Aggregation_MemberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "member"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Member (leaf-list): List of current member interfaces for the aggregate,
// expressed as references to existing interfaces
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/member"
//	Path from root:       "/interfaces/interface/aggregation/state/member"
func (n *Interface_AggregationPathAny) Member() *Interface_Aggregation_MemberPathAny {
	ps := &Interface_Aggregation_MemberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "member"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinLinks (leaf): Specifies the mininum number of member
// interfaces that must be active for the aggregate interface
// to be available
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/min-links"
//	Path from root:       "/interfaces/interface/aggregation/*/min-links"
func (n *Interface_AggregationPath) MinLinks() *Interface_Aggregation_MinLinksPath {
	ps := &Interface_Aggregation_MinLinksPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-links"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinLinks (leaf): Specifies the mininum number of member
// interfaces that must be active for the aggregate interface
// to be available
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/min-links"
//	Path from root:       "/interfaces/interface/aggregation/*/min-links"
func (n *Interface_AggregationPathAny) MinLinks() *Interface_Aggregation_MinLinksPathAny {
	ps := &Interface_Aggregation_MinLinksPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-links"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SwitchedVlan (container): Enclosing container for VLAN interface-specific
// data on Ethernet interfaces.  These are for standard
// L2, switched-style VLANs.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "switched-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan"
func (n *Interface_AggregationPath) SwitchedVlan() *Interface_Aggregation_SwitchedVlanPath {
	ps := &Interface_Aggregation_SwitchedVlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"switched-vlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SwitchedVlan (container): Enclosing container for VLAN interface-specific
// data on Ethernet interfaces.  These are for standard
// L2, switched-style VLANs.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "switched-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan"
func (n *Interface_AggregationPathAny) SwitchedVlan() *Interface_Aggregation_SwitchedVlanPathAny {
	ps := &Interface_Aggregation_SwitchedVlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"switched-vlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_AggregationPath) State() ygnmi.SingletonQuery[*oc.Interface_Aggregation] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Aggregation](
		"Interface_Aggregation",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_AggregationPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Aggregation] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Aggregation](
		"Interface_Aggregation",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_AggregationPath) Config() ygnmi.ConfigQuery[*oc.Interface_Aggregation] {
	return ygnmi.NewConfigQuery[*oc.Interface_Aggregation](
		"Interface_Aggregation",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_AggregationPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Aggregation] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Aggregation](
		"Interface_Aggregation",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Aggregation_SwitchedVlan_AccessVlanPath represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/access-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan_AccessVlanPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Aggregation_SwitchedVlan_AccessVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/access-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan_AccessVlanPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/access-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/state/access-vlan"
func (n *Interface_Aggregation_SwitchedVlan_AccessVlanPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Aggregation_SwitchedVlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "access-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).AccessVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/access-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/state/access-vlan"
func (n *Interface_Aggregation_SwitchedVlan_AccessVlanPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Aggregation_SwitchedVlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "access-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).AccessVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/access-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/config/access-vlan"
func (n *Interface_Aggregation_SwitchedVlan_AccessVlanPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Aggregation_SwitchedVlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "access-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).AccessVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/access-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/config/access-vlan"
func (n *Interface_Aggregation_SwitchedVlan_AccessVlanPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Aggregation_SwitchedVlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "access-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).AccessVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Aggregation_SwitchedVlan_InterfaceModePath represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/interface-mode YANG schema element.
type Interface_Aggregation_SwitchedVlan_InterfaceModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Aggregation_SwitchedVlan_InterfaceModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/interface-mode YANG schema element.
type Interface_Aggregation_SwitchedVlan_InterfaceModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/interface-mode"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/state/interface-mode"
func (n *Interface_Aggregation_SwitchedVlan_InterfaceModePath) State() ygnmi.SingletonQuery[oc.E_Vlan_VlanModeType] {
	return ygnmi.NewSingletonQuery[oc.E_Vlan_VlanModeType](
		"Interface_Aggregation_SwitchedVlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Vlan_VlanModeType, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).InterfaceMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/interface-mode"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/state/interface-mode"
func (n *Interface_Aggregation_SwitchedVlan_InterfaceModePathAny) State() ygnmi.WildcardQuery[oc.E_Vlan_VlanModeType] {
	return ygnmi.NewWildcardQuery[oc.E_Vlan_VlanModeType](
		"Interface_Aggregation_SwitchedVlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Vlan_VlanModeType, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).InterfaceMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/interface-mode"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/config/interface-mode"
func (n *Interface_Aggregation_SwitchedVlan_InterfaceModePath) Config() ygnmi.ConfigQuery[oc.E_Vlan_VlanModeType] {
	return ygnmi.NewConfigQuery[oc.E_Vlan_VlanModeType](
		"Interface_Aggregation_SwitchedVlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Vlan_VlanModeType, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).InterfaceMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/interface-mode"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/config/interface-mode"
func (n *Interface_Aggregation_SwitchedVlan_InterfaceModePathAny) Config() ygnmi.WildcardQuery[oc.E_Vlan_VlanModeType] {
	return ygnmi.NewWildcardQuery[oc.E_Vlan_VlanModeType](
		"Interface_Aggregation_SwitchedVlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Vlan_VlanModeType, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).InterfaceMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Aggregation_SwitchedVlan_NativeVlanPath represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/native-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan_NativeVlanPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Aggregation_SwitchedVlan_NativeVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/native-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan_NativeVlanPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/native-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/state/native-vlan"
func (n *Interface_Aggregation_SwitchedVlan_NativeVlanPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Aggregation_SwitchedVlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "native-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).NativeVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/native-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/state/native-vlan"
func (n *Interface_Aggregation_SwitchedVlan_NativeVlanPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Aggregation_SwitchedVlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "native-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).NativeVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/native-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/config/native-vlan"
func (n *Interface_Aggregation_SwitchedVlan_NativeVlanPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Aggregation_SwitchedVlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "native-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).NativeVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/native-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/config/native-vlan"
func (n *Interface_Aggregation_SwitchedVlan_NativeVlanPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Aggregation_SwitchedVlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "native-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).NativeVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Aggregation_SwitchedVlan_TrunkVlansPath represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/trunk-vlans YANG schema element.
type Interface_Aggregation_SwitchedVlan_TrunkVlansPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Aggregation_SwitchedVlan_TrunkVlansPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/trunk-vlans YANG schema element.
type Interface_Aggregation_SwitchedVlan_TrunkVlansPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/trunk-vlans"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/state/trunk-vlans"
func (n *Interface_Aggregation_SwitchedVlan_TrunkVlansPath) State() ygnmi.SingletonQuery[[]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union] {
	return ygnmi.NewSingletonQuery[[]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union](
		"Interface_Aggregation_SwitchedVlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "trunk-vlans"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).TrunkVlans
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/trunk-vlans"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/state/trunk-vlans"
func (n *Interface_Aggregation_SwitchedVlan_TrunkVlansPathAny) State() ygnmi.WildcardQuery[[]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union] {
	return ygnmi.NewWildcardQuery[[]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union](
		"Interface_Aggregation_SwitchedVlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "trunk-vlans"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).TrunkVlans
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/trunk-vlans"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/config/trunk-vlans"
func (n *Interface_Aggregation_SwitchedVlan_TrunkVlansPath) Config() ygnmi.ConfigQuery[[]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union] {
	return ygnmi.NewConfigQuery[[]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union](
		"Interface_Aggregation_SwitchedVlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "trunk-vlans"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).TrunkVlans
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/trunk-vlans"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/config/trunk-vlans"
func (n *Interface_Aggregation_SwitchedVlan_TrunkVlansPathAny) Config() ygnmi.WildcardQuery[[]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union] {
	return ygnmi.NewWildcardQuery[[]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union](
		"Interface_Aggregation_SwitchedVlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "trunk-vlans"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).TrunkVlans
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Aggregation_SwitchedVlanPath represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlanPath struct {
	*ygnmi.NodePath
}

// Interface_Aggregation_SwitchedVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlanPathAny struct {
	*ygnmi.NodePath
}

// AccessVlan (leaf): Assign the access vlan to the access port.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/access-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/*/access-vlan"
func (n *Interface_Aggregation_SwitchedVlanPath) AccessVlan() *Interface_Aggregation_SwitchedVlan_AccessVlanPath {
	ps := &Interface_Aggregation_SwitchedVlan_AccessVlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "access-vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessVlan (leaf): Assign the access vlan to the access port.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/access-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/*/access-vlan"
func (n *Interface_Aggregation_SwitchedVlanPathAny) AccessVlan() *Interface_Aggregation_SwitchedVlan_AccessVlanPathAny {
	ps := &Interface_Aggregation_SwitchedVlan_AccessVlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "access-vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceMode (leaf): Set the interface to access or trunk mode for
// VLANs
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interface-mode"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/*/interface-mode"
func (n *Interface_Aggregation_SwitchedVlanPath) InterfaceMode() *Interface_Aggregation_SwitchedVlan_InterfaceModePath {
	ps := &Interface_Aggregation_SwitchedVlan_InterfaceModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceMode (leaf): Set the interface to access or trunk mode for
// VLANs
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interface-mode"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/*/interface-mode"
func (n *Interface_Aggregation_SwitchedVlanPathAny) InterfaceMode() *Interface_Aggregation_SwitchedVlan_InterfaceModePathAny {
	ps := &Interface_Aggregation_SwitchedVlan_InterfaceModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NativeVlan (leaf): Set the native VLAN id for untagged frames arriving on
// a trunk interface.  Tagged frames sent on an interface
// configured with a native VLAN should have their tags
// stripped prior to transmission. This configuration is only
// valid on a trunk interface.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/native-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/*/native-vlan"
func (n *Interface_Aggregation_SwitchedVlanPath) NativeVlan() *Interface_Aggregation_SwitchedVlan_NativeVlanPath {
	ps := &Interface_Aggregation_SwitchedVlan_NativeVlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "native-vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NativeVlan (leaf): Set the native VLAN id for untagged frames arriving on
// a trunk interface.  Tagged frames sent on an interface
// configured with a native VLAN should have their tags
// stripped prior to transmission. This configuration is only
// valid on a trunk interface.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/native-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/*/native-vlan"
func (n *Interface_Aggregation_SwitchedVlanPathAny) NativeVlan() *Interface_Aggregation_SwitchedVlan_NativeVlanPathAny {
	ps := &Interface_Aggregation_SwitchedVlan_NativeVlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "native-vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrunkVlans (leaf-list): Specify VLANs, or ranges thereof, that the interface may
// carry when in trunk mode.  If not specified, all VLANs are
// allowed on the interface. Ranges are specified in the form
// x..y, where x<y - ranges are assumed to be inclusive (such
// that the VLAN range is x <= range <= y.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/trunk-vlans"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/*/trunk-vlans"
func (n *Interface_Aggregation_SwitchedVlanPath) TrunkVlans() *Interface_Aggregation_SwitchedVlan_TrunkVlansPath {
	ps := &Interface_Aggregation_SwitchedVlan_TrunkVlansPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "trunk-vlans"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrunkVlans (leaf-list): Specify VLANs, or ranges thereof, that the interface may
// carry when in trunk mode.  If not specified, all VLANs are
// allowed on the interface. Ranges are specified in the form
// x..y, where x<y - ranges are assumed to be inclusive (such
// that the VLAN range is x <= range <= y.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/trunk-vlans"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/*/trunk-vlans"
func (n *Interface_Aggregation_SwitchedVlanPathAny) TrunkVlans() *Interface_Aggregation_SwitchedVlan_TrunkVlansPathAny {
	ps := &Interface_Aggregation_SwitchedVlan_TrunkVlansPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "trunk-vlans"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Aggregation_SwitchedVlanPath) State() ygnmi.SingletonQuery[*oc.Interface_Aggregation_SwitchedVlan] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Aggregation_SwitchedVlan](
		"Interface_Aggregation_SwitchedVlan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Aggregation_SwitchedVlanPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Aggregation_SwitchedVlan] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Aggregation_SwitchedVlan](
		"Interface_Aggregation_SwitchedVlan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Aggregation_SwitchedVlanPath) Config() ygnmi.ConfigQuery[*oc.Interface_Aggregation_SwitchedVlan] {
	return ygnmi.NewConfigQuery[*oc.Interface_Aggregation_SwitchedVlan](
		"Interface_Aggregation_SwitchedVlan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Aggregation_SwitchedVlanPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Aggregation_SwitchedVlan] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Aggregation_SwitchedVlan](
		"Interface_Aggregation_SwitchedVlan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_CarrierTransitionsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/carrier-transitions YANG schema element.
type Interface_Counters_CarrierTransitionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_CarrierTransitionsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/carrier-transitions YANG schema element.
type Interface_Counters_CarrierTransitionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "carrier-transitions"
//	Path from root:       "/interfaces/interface/state/counters/carrier-transitions"
func (n *Interface_Counters_CarrierTransitionsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"carrier-transitions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).CarrierTransitions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "carrier-transitions"
//	Path from root:       "/interfaces/interface/state/counters/carrier-transitions"
func (n *Interface_Counters_CarrierTransitionsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"carrier-transitions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).CarrierTransitions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_InBroadcastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-broadcast-pkts YANG schema element.
type Interface_Counters_InBroadcastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_InBroadcastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-broadcast-pkts YANG schema element.
type Interface_Counters_InBroadcastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-broadcast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-broadcast-pkts"
func (n *Interface_Counters_InBroadcastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-broadcast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InBroadcastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-broadcast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-broadcast-pkts"
func (n *Interface_Counters_InBroadcastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-broadcast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InBroadcastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_InDiscardsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-discards YANG schema element.
type Interface_Counters_InDiscardsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_InDiscardsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-discards YANG schema element.
type Interface_Counters_InDiscardsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discards"
//	Path from root:       "/interfaces/interface/state/counters/in-discards"
func (n *Interface_Counters_InDiscardsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-discards"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InDiscards
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discards"
//	Path from root:       "/interfaces/interface/state/counters/in-discards"
func (n *Interface_Counters_InDiscardsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-discards"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InDiscards
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_InErrorsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-errors YANG schema element.
type Interface_Counters_InErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_InErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-errors YANG schema element.
type Interface_Counters_InErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-errors"
//	Path from root:       "/interfaces/interface/state/counters/in-errors"
func (n *Interface_Counters_InErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-errors"
//	Path from root:       "/interfaces/interface/state/counters/in-errors"
func (n *Interface_Counters_InErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_InFcsErrorsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-fcs-errors YANG schema element.
type Interface_Counters_InFcsErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_InFcsErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-fcs-errors YANG schema element.
type Interface_Counters_InFcsErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-fcs-errors"
//	Path from root:       "/interfaces/interface/state/counters/in-fcs-errors"
func (n *Interface_Counters_InFcsErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-fcs-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InFcsErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-fcs-errors"
//	Path from root:       "/interfaces/interface/state/counters/in-fcs-errors"
func (n *Interface_Counters_InFcsErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-fcs-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InFcsErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_InMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-multicast-pkts YANG schema element.
type Interface_Counters_InMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_InMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-multicast-pkts YANG schema element.
type Interface_Counters_InMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-multicast-pkts"
func (n *Interface_Counters_InMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-multicast-pkts"
func (n *Interface_Counters_InMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-octets YANG schema element.
type Interface_Counters_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-octets YANG schema element.
type Interface_Counters_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/state/counters/in-octets"
func (n *Interface_Counters_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/state/counters/in-octets"
func (n *Interface_Counters_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-pkts YANG schema element.
type Interface_Counters_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-pkts YANG schema element.
type Interface_Counters_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-pkts"
func (n *Interface_Counters_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-pkts"
func (n *Interface_Counters_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_InUnicastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-unicast-pkts YANG schema element.
type Interface_Counters_InUnicastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_InUnicastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-unicast-pkts YANG schema element.
type Interface_Counters_InUnicastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-unicast-pkts"
func (n *Interface_Counters_InUnicastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-unicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InUnicastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-unicast-pkts"
func (n *Interface_Counters_InUnicastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-unicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InUnicastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_InUnknownProtosPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-unknown-protos YANG schema element.
type Interface_Counters_InUnknownProtosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_InUnknownProtosPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-unknown-protos YANG schema element.
type Interface_Counters_InUnknownProtosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unknown-protos"
//	Path from root:       "/interfaces/interface/state/counters/in-unknown-protos"
func (n *Interface_Counters_InUnknownProtosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-unknown-protos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InUnknownProtos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unknown-protos"
//	Path from root:       "/interfaces/interface/state/counters/in-unknown-protos"
func (n *Interface_Counters_InUnknownProtosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-unknown-protos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InUnknownProtos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_InterfaceTransitionsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/interface-transitions YANG schema element.
type Interface_Counters_InterfaceTransitionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_InterfaceTransitionsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/interface-transitions YANG schema element.
type Interface_Counters_InterfaceTransitionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-transitions"
//	Path from root:       "/interfaces/interface/state/counters/interface-transitions"
func (n *Interface_Counters_InterfaceTransitionsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interface-transitions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InterfaceTransitions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-transitions"
//	Path from root:       "/interfaces/interface/state/counters/interface-transitions"
func (n *Interface_Counters_InterfaceTransitionsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interface-transitions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InterfaceTransitions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_LastClearPath represents the /openconfig-interfaces/interfaces/interface/state/counters/last-clear YANG schema element.
type Interface_Counters_LastClearPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_LastClearPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/last-clear YANG schema element.
type Interface_Counters_LastClearPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "last-clear"
//	Path from root:       "/interfaces/interface/state/counters/last-clear"
func (n *Interface_Counters_LastClearPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).LastClear
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "last-clear"
//	Path from root:       "/interfaces/interface/state/counters/last-clear"
func (n *Interface_Counters_LastClearPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).LastClear
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_LinkTransitionsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/link-transitions YANG schema element.
type Interface_Counters_LinkTransitionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_LinkTransitionsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/link-transitions YANG schema element.
type Interface_Counters_LinkTransitionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "link-transitions"
//	Path from root:       "/interfaces/interface/state/counters/link-transitions"
func (n *Interface_Counters_LinkTransitionsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"link-transitions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).LinkTransitions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "link-transitions"
//	Path from root:       "/interfaces/interface/state/counters/link-transitions"
func (n *Interface_Counters_LinkTransitionsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"link-transitions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).LinkTransitions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_OutBroadcastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-broadcast-pkts YANG schema element.
type Interface_Counters_OutBroadcastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_OutBroadcastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-broadcast-pkts YANG schema element.
type Interface_Counters_OutBroadcastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-broadcast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-broadcast-pkts"
func (n *Interface_Counters_OutBroadcastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-broadcast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutBroadcastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-broadcast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-broadcast-pkts"
func (n *Interface_Counters_OutBroadcastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-broadcast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutBroadcastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_OutDiscardsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-discards YANG schema element.
type Interface_Counters_OutDiscardsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_OutDiscardsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-discards YANG schema element.
type Interface_Counters_OutDiscardsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discards"
//	Path from root:       "/interfaces/interface/state/counters/out-discards"
func (n *Interface_Counters_OutDiscardsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-discards"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutDiscards
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discards"
//	Path from root:       "/interfaces/interface/state/counters/out-discards"
func (n *Interface_Counters_OutDiscardsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-discards"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutDiscards
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_OutErrorsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-errors YANG schema element.
type Interface_Counters_OutErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_OutErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-errors YANG schema element.
type Interface_Counters_OutErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-errors"
//	Path from root:       "/interfaces/interface/state/counters/out-errors"
func (n *Interface_Counters_OutErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-errors"
//	Path from root:       "/interfaces/interface/state/counters/out-errors"
func (n *Interface_Counters_OutErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_OutMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-multicast-pkts YANG schema element.
type Interface_Counters_OutMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_OutMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-multicast-pkts YANG schema element.
type Interface_Counters_OutMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-multicast-pkts"
func (n *Interface_Counters_OutMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-multicast-pkts"
func (n *Interface_Counters_OutMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-octets YANG schema element.
type Interface_Counters_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-octets YANG schema element.
type Interface_Counters_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/state/counters/out-octets"
func (n *Interface_Counters_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/state/counters/out-octets"
func (n *Interface_Counters_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-pkts YANG schema element.
type Interface_Counters_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-pkts YANG schema element.
type Interface_Counters_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-pkts"
func (n *Interface_Counters_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-pkts"
func (n *Interface_Counters_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_OutUnicastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-unicast-pkts YANG schema element.
type Interface_Counters_OutUnicastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_OutUnicastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-unicast-pkts YANG schema element.
type Interface_Counters_OutUnicastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-unicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-unicast-pkts"
func (n *Interface_Counters_OutUnicastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-unicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutUnicastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-unicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-unicast-pkts"
func (n *Interface_Counters_OutUnicastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-unicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutUnicastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_ResetsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/resets YANG schema element.
type Interface_Counters_ResetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_ResetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/resets YANG schema element.
type Interface_Counters_ResetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "resets"
//	Path from root:       "/interfaces/interface/state/counters/resets"
func (n *Interface_Counters_ResetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"resets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).Resets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "resets"
//	Path from root:       "/interfaces/interface/state/counters/resets"
func (n *Interface_Counters_ResetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"resets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).Resets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_CountersPath represents the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type Interface_CountersPath struct {
	*ygnmi.NodePath
}

// Interface_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type Interface_CountersPathAny struct {
	*ygnmi.NodePath
}

// CarrierTransitions (leaf): Number of times the interface state has transitioned
// between up and down since the time the device restarted
// or the last-clear time, whichever is most recent.
//
// Please use interface-transitions instead, which has
// similar, but more precisely specified, semantics and a
// clearer name.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "carrier-transitions"
//	Path from root:       "/interfaces/interface/state/counters/carrier-transitions"
func (n *Interface_CountersPath) CarrierTransitions() *Interface_Counters_CarrierTransitionsPath {
	ps := &Interface_Counters_CarrierTransitionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"carrier-transitions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CarrierTransitions (leaf): Number of times the interface state has transitioned
// between up and down since the time the device restarted
// or the last-clear time, whichever is most recent.
//
// Please use interface-transitions instead, which has
// similar, but more precisely specified, semantics and a
// clearer name.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "carrier-transitions"
//	Path from root:       "/interfaces/interface/state/counters/carrier-transitions"
func (n *Interface_CountersPathAny) CarrierTransitions() *Interface_Counters_CarrierTransitionsPathAny {
	ps := &Interface_Counters_CarrierTransitionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"carrier-transitions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBroadcastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a broadcast
// address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-broadcast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-broadcast-pkts"
func (n *Interface_CountersPath) InBroadcastPkts() *Interface_Counters_InBroadcastPktsPath {
	ps := &Interface_Counters_InBroadcastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBroadcastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a broadcast
// address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-broadcast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-broadcast-pkts"
func (n *Interface_CountersPathAny) InBroadcastPkts() *Interface_Counters_InBroadcastPktsPathAny {
	ps := &Interface_Counters_InBroadcastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InDiscards (leaf): The number of inbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being deliverable to a higher-layer
// protocol.  One possible reason for discarding such a
// packet could be to free up buffer space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discards"
//	Path from root:       "/interfaces/interface/state/counters/in-discards"
func (n *Interface_CountersPath) InDiscards() *Interface_Counters_InDiscardsPath {
	ps := &Interface_Counters_InDiscardsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-discards"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InDiscards (leaf): The number of inbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being deliverable to a higher-layer
// protocol.  One possible reason for discarding such a
// packet could be to free up buffer space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discards"
//	Path from root:       "/interfaces/interface/state/counters/in-discards"
func (n *Interface_CountersPathAny) InDiscards() *Interface_Counters_InDiscardsPathAny {
	ps := &Interface_Counters_InDiscardsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-discards"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InErrors (leaf): For packet-oriented interfaces, the number of inbound
// packets that contained errors preventing them from being
// deliverable to a higher-layer protocol.  For character-
// oriented or fixed-length interfaces, the number of
// inbound transmission units that contained errors
// preventing them from being deliverable to a higher-layer
// protocol.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-errors"
//	Path from root:       "/interfaces/interface/state/counters/in-errors"
func (n *Interface_CountersPath) InErrors() *Interface_Counters_InErrorsPath {
	ps := &Interface_Counters_InErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InErrors (leaf): For packet-oriented interfaces, the number of inbound
// packets that contained errors preventing them from being
// deliverable to a higher-layer protocol.  For character-
// oriented or fixed-length interfaces, the number of
// inbound transmission units that contained errors
// preventing them from being deliverable to a higher-layer
// protocol.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-errors"
//	Path from root:       "/interfaces/interface/state/counters/in-errors"
func (n *Interface_CountersPathAny) InErrors() *Interface_Counters_InErrorsPathAny {
	ps := &Interface_Counters_InErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFcsErrors (leaf): Number of received packets which had errors in the
// frame check sequence (FCS), i.e., framing errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-fcs-errors"
//	Path from root:       "/interfaces/interface/state/counters/in-fcs-errors"
func (n *Interface_CountersPath) InFcsErrors() *Interface_Counters_InFcsErrorsPath {
	ps := &Interface_Counters_InFcsErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-fcs-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFcsErrors (leaf): Number of received packets which had errors in the
// frame check sequence (FCS), i.e., framing errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-fcs-errors"
//	Path from root:       "/interfaces/interface/state/counters/in-fcs-errors"
func (n *Interface_CountersPathAny) InFcsErrors() *Interface_Counters_InFcsErrorsPathAny {
	ps := &Interface_Counters_InFcsErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-fcs-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a multicast
// address at this sub-layer.  For a MAC-layer protocol,
// this includes both Group and Functional addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-multicast-pkts"
func (n *Interface_CountersPath) InMulticastPkts() *Interface_Counters_InMulticastPktsPath {
	ps := &Interface_Counters_InMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a multicast
// address at this sub-layer.  For a MAC-layer protocol,
// this includes both Group and Functional addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-multicast-pkts"
func (n *Interface_CountersPathAny) InMulticastPkts() *Interface_Counters_InMulticastPktsPathAny {
	ps := &Interface_Counters_InMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of octets received on the interface,
// including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/state/counters/in-octets"
func (n *Interface_CountersPath) InOctets() *Interface_Counters_InOctetsPath {
	ps := &Interface_Counters_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of octets received on the interface,
// including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/state/counters/in-octets"
func (n *Interface_CountersPathAny) InOctets() *Interface_Counters_InOctetsPathAny {
	ps := &Interface_Counters_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of packets received on the interface,
// including all unicast, multicast, broadcast and bad packets
// etc.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-pkts"
func (n *Interface_CountersPath) InPkts() *Interface_Counters_InPktsPath {
	ps := &Interface_Counters_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of packets received on the interface,
// including all unicast, multicast, broadcast and bad packets
// etc.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-pkts"
func (n *Interface_CountersPathAny) InPkts() *Interface_Counters_InPktsPathAny {
	ps := &Interface_Counters_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUnicastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were not addressed to a
// multicast or broadcast address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-unicast-pkts"
func (n *Interface_CountersPath) InUnicastPkts() *Interface_Counters_InUnicastPktsPath {
	ps := &Interface_Counters_InUnicastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUnicastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were not addressed to a
// multicast or broadcast address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-unicast-pkts"
func (n *Interface_CountersPathAny) InUnicastPkts() *Interface_Counters_InUnicastPktsPathAny {
	ps := &Interface_Counters_InUnicastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUnknownProtos (leaf): For packet-oriented interfaces, the number of packets
// received via the interface that were discarded because
// of an unknown or unsupported protocol.  For
// character-oriented or fixed-length interfaces that
// support protocol multiplexing, the number of
// transmission units received via the interface that were
// discarded because of an unknown or unsupported protocol.
// For any interface that does not support protocol
// multiplexing, this counter is not present.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unknown-protos"
//	Path from root:       "/interfaces/interface/state/counters/in-unknown-protos"
func (n *Interface_CountersPath) InUnknownProtos() *Interface_Counters_InUnknownProtosPath {
	ps := &Interface_Counters_InUnknownProtosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-unknown-protos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUnknownProtos (leaf): For packet-oriented interfaces, the number of packets
// received via the interface that were discarded because
// of an unknown or unsupported protocol.  For
// character-oriented or fixed-length interfaces that
// support protocol multiplexing, the number of
// transmission units received via the interface that were
// discarded because of an unknown or unsupported protocol.
// For any interface that does not support protocol
// multiplexing, this counter is not present.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unknown-protos"
//	Path from root:       "/interfaces/interface/state/counters/in-unknown-protos"
func (n *Interface_CountersPathAny) InUnknownProtos() *Interface_Counters_InUnknownProtosPathAny {
	ps := &Interface_Counters_InUnknownProtosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-unknown-protos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceTransitions (leaf): The total number of times the interface state (oper-status)
// has either transitioned to 'UP' state from any other state, or
// from state 'UP' to any other state.  I.e., an interface flap
// from UP to DOWN back to UP increments the counter by 2.
// Transitions between any other interface states other than to
// or from 'UP' state are not included in the counter.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-transitions"
//	Path from root:       "/interfaces/interface/state/counters/interface-transitions"
func (n *Interface_CountersPath) InterfaceTransitions() *Interface_Counters_InterfaceTransitionsPath {
	ps := &Interface_Counters_InterfaceTransitionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-transitions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceTransitions (leaf): The total number of times the interface state (oper-status)
// has either transitioned to 'UP' state from any other state, or
// from state 'UP' to any other state.  I.e., an interface flap
// from UP to DOWN back to UP increments the counter by 2.
// Transitions between any other interface states other than to
// or from 'UP' state are not included in the counter.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-transitions"
//	Path from root:       "/interfaces/interface/state/counters/interface-transitions"
func (n *Interface_CountersPathAny) InterfaceTransitions() *Interface_Counters_InterfaceTransitionsPathAny {
	ps := &Interface_Counters_InterfaceTransitionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-transitions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastClear (leaf): Timestamp of the last time the interface counters were
// cleared.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "last-clear"
//	Path from root:       "/interfaces/interface/state/counters/last-clear"
func (n *Interface_CountersPath) LastClear() *Interface_Counters_LastClearPath {
	ps := &Interface_Counters_LastClearPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastClear (leaf): Timestamp of the last time the interface counters were
// cleared.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "last-clear"
//	Path from root:       "/interfaces/interface/state/counters/last-clear"
func (n *Interface_CountersPathAny) LastClear() *Interface_Counters_LastClearPathAny {
	ps := &Interface_Counters_LastClearPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkTransitions (leaf): This is the number of times that the underlying link state
// (e.g., at the optical receiver) has transitioned to or from
// 'UP' state before any holdtime, dampening, or other processing
// has been applied that could suppress an update to the interface
// 'oper-status' and corresponding interface-transitions counter.
//
// The counter is incremented both when the link transitions
// to 'UP' state from any other link state and also when the link
// transitions from 'UP' state to any other link state, i.e., an
// interface flap from UP to DOWN back to UP increments the
// counter by 2.
//
// Implementations are not required to count all transitions,
// e.g., if they are below the level of granularity monitored by
// the system, and hence may not tally with the equivalent counter
// on the remote end of the link.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "link-transitions"
//	Path from root:       "/interfaces/interface/state/counters/link-transitions"
func (n *Interface_CountersPath) LinkTransitions() *Interface_Counters_LinkTransitionsPath {
	ps := &Interface_Counters_LinkTransitionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-transitions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkTransitions (leaf): This is the number of times that the underlying link state
// (e.g., at the optical receiver) has transitioned to or from
// 'UP' state before any holdtime, dampening, or other processing
// has been applied that could suppress an update to the interface
// 'oper-status' and corresponding interface-transitions counter.
//
// The counter is incremented both when the link transitions
// to 'UP' state from any other link state and also when the link
// transitions from 'UP' state to any other link state, i.e., an
// interface flap from UP to DOWN back to UP increments the
// counter by 2.
//
// Implementations are not required to count all transitions,
// e.g., if they are below the level of granularity monitored by
// the system, and hence may not tally with the equivalent counter
// on the remote end of the link.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "link-transitions"
//	Path from root:       "/interfaces/interface/state/counters/link-transitions"
func (n *Interface_CountersPathAny) LinkTransitions() *Interface_Counters_LinkTransitionsPathAny {
	ps := &Interface_Counters_LinkTransitionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-transitions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBroadcastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// broadcast address at this sub-layer, including those
// that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-broadcast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-broadcast-pkts"
func (n *Interface_CountersPath) OutBroadcastPkts() *Interface_Counters_OutBroadcastPktsPath {
	ps := &Interface_Counters_OutBroadcastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBroadcastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// broadcast address at this sub-layer, including those
// that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-broadcast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-broadcast-pkts"
func (n *Interface_CountersPathAny) OutBroadcastPkts() *Interface_Counters_OutBroadcastPktsPathAny {
	ps := &Interface_Counters_OutBroadcastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDiscards (leaf): The number of outbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being transmitted.  One possible reason
// for discarding such a packet could be to free up buffer
// space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discards"
//	Path from root:       "/interfaces/interface/state/counters/out-discards"
func (n *Interface_CountersPath) OutDiscards() *Interface_Counters_OutDiscardsPath {
	ps := &Interface_Counters_OutDiscardsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-discards"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDiscards (leaf): The number of outbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being transmitted.  One possible reason
// for discarding such a packet could be to free up buffer
// space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discards"
//	Path from root:       "/interfaces/interface/state/counters/out-discards"
func (n *Interface_CountersPathAny) OutDiscards() *Interface_Counters_OutDiscardsPathAny {
	ps := &Interface_Counters_OutDiscardsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-discards"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutErrors (leaf): For packet-oriented interfaces, the number of outbound
// packets that could not be transmitted because of errors.
// For character-oriented or fixed-length interfaces, the
// number of outbound transmission units that could not be
// transmitted because of errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-errors"
//	Path from root:       "/interfaces/interface/state/counters/out-errors"
func (n *Interface_CountersPath) OutErrors() *Interface_Counters_OutErrorsPath {
	ps := &Interface_Counters_OutErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutErrors (leaf): For packet-oriented interfaces, the number of outbound
// packets that could not be transmitted because of errors.
// For character-oriented or fixed-length interfaces, the
// number of outbound transmission units that could not be
// transmitted because of errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-errors"
//	Path from root:       "/interfaces/interface/state/counters/out-errors"
func (n *Interface_CountersPathAny) OutErrors() *Interface_Counters_OutErrorsPathAny {
	ps := &Interface_Counters_OutErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// multicast address at this sub-layer, including those
// that were discarded or not sent.  For a MAC-layer
// protocol, this includes both Group and Functional
// addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-multicast-pkts"
func (n *Interface_CountersPath) OutMulticastPkts() *Interface_Counters_OutMulticastPktsPath {
	ps := &Interface_Counters_OutMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// multicast address at this sub-layer, including those
// that were discarded or not sent.  For a MAC-layer
// protocol, this includes both Group and Functional
// addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-multicast-pkts"
func (n *Interface_CountersPathAny) OutMulticastPkts() *Interface_Counters_OutMulticastPktsPathAny {
	ps := &Interface_Counters_OutMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of octets transmitted out of the
// interface, including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/state/counters/out-octets"
func (n *Interface_CountersPath) OutOctets() *Interface_Counters_OutOctetsPath {
	ps := &Interface_Counters_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of octets transmitted out of the
// interface, including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/state/counters/out-octets"
func (n *Interface_CountersPathAny) OutOctets() *Interface_Counters_OutOctetsPathAny {
	ps := &Interface_Counters_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of packets transmitted out of the
// interface, including all unicast, multicast, broadcast,
// and bad packets etc.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-pkts"
func (n *Interface_CountersPath) OutPkts() *Interface_Counters_OutPktsPath {
	ps := &Interface_Counters_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of packets transmitted out of the
// interface, including all unicast, multicast, broadcast,
// and bad packets etc.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-pkts"
func (n *Interface_CountersPathAny) OutPkts() *Interface_Counters_OutPktsPathAny {
	ps := &Interface_Counters_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutUnicastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were not addressed
// to a multicast or broadcast address at this sub-layer,
// including those that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-unicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-unicast-pkts"
func (n *Interface_CountersPath) OutUnicastPkts() *Interface_Counters_OutUnicastPktsPath {
	ps := &Interface_Counters_OutUnicastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutUnicastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were not addressed
// to a multicast or broadcast address at this sub-layer,
// including those that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-unicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-unicast-pkts"
func (n *Interface_CountersPathAny) OutUnicastPkts() *Interface_Counters_OutUnicastPktsPathAny {
	ps := &Interface_Counters_OutUnicastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Resets (leaf): Number of times the interface hardware has been reset.  The
// triggers and effects of this event are hardware-specifc.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "resets"
//	Path from root:       "/interfaces/interface/state/counters/resets"
func (n *Interface_CountersPath) Resets() *Interface_Counters_ResetsPath {
	ps := &Interface_Counters_ResetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"resets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Resets (leaf): Number of times the interface hardware has been reset.  The
// triggers and effects of this event are hardware-specifc.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "resets"
//	Path from root:       "/interfaces/interface/state/counters/resets"
func (n *Interface_CountersPathAny) Resets() *Interface_Counters_ResetsPathAny {
	ps := &Interface_Counters_ResetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_CountersPath) State() ygnmi.SingletonQuery[*oc.Interface_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Counters](
		"Interface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Counters](
		"Interface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_AggregateIdPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/aggregate-id YANG schema element.
type Interface_Ethernet_AggregateIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_AggregateIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/aggregate-id YANG schema element.
type Interface_Ethernet_AggregateIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "state/aggregate-id"
//	Path from root:       "/interfaces/interface/ethernet/state/aggregate-id"
func (n *Interface_Ethernet_AggregateIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "aggregate-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Ethernet).AggregateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "state/aggregate-id"
//	Path from root:       "/interfaces/interface/ethernet/state/aggregate-id"
func (n *Interface_Ethernet_AggregateIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "aggregate-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Ethernet).AggregateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "config/aggregate-id"
//	Path from root:       "/interfaces/interface/ethernet/config/aggregate-id"
func (n *Interface_Ethernet_AggregateIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Ethernet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "aggregate-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Ethernet).AggregateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "config/aggregate-id"
//	Path from root:       "/interfaces/interface/ethernet/config/aggregate-id"
func (n *Interface_Ethernet_AggregateIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Ethernet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "aggregate-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Ethernet).AggregateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_AutoNegotiatePath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/auto-negotiate YANG schema element.
type Interface_Ethernet_AutoNegotiatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_AutoNegotiatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/auto-negotiate YANG schema element.
type Interface_Ethernet_AutoNegotiatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/auto-negotiate"
//	Path from root:       "/interfaces/interface/ethernet/state/auto-negotiate"
func (n *Interface_Ethernet_AutoNegotiatePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auto-negotiate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Ethernet).AutoNegotiate
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/auto-negotiate"
//	Path from root:       "/interfaces/interface/ethernet/state/auto-negotiate"
func (n *Interface_Ethernet_AutoNegotiatePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auto-negotiate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Ethernet).AutoNegotiate
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "config/auto-negotiate"
//	Path from root:       "/interfaces/interface/ethernet/config/auto-negotiate"
func (n *Interface_Ethernet_AutoNegotiatePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Ethernet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auto-negotiate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Ethernet).AutoNegotiate
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "config/auto-negotiate"
//	Path from root:       "/interfaces/interface/ethernet/config/auto-negotiate"
func (n *Interface_Ethernet_AutoNegotiatePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Ethernet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auto-negotiate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Ethernet).AutoNegotiate
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_DuplexModePath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/duplex-mode YANG schema element.
type Interface_Ethernet_DuplexModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_DuplexModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/duplex-mode YANG schema element.
type Interface_Ethernet_DuplexModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/duplex-mode"
//	Path from root:       "/interfaces/interface/ethernet/state/duplex-mode"
func (n *Interface_Ethernet_DuplexModePath) State() ygnmi.SingletonQuery[oc.E_Ethernet_DuplexMode] {
	return ygnmi.NewSingletonQuery[oc.E_Ethernet_DuplexMode](
		"Interface_Ethernet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "duplex-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ethernet_DuplexMode, bool) {
			ret := gs.(*oc.Interface_Ethernet).DuplexMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/duplex-mode"
//	Path from root:       "/interfaces/interface/ethernet/state/duplex-mode"
func (n *Interface_Ethernet_DuplexModePathAny) State() ygnmi.WildcardQuery[oc.E_Ethernet_DuplexMode] {
	return ygnmi.NewWildcardQuery[oc.E_Ethernet_DuplexMode](
		"Interface_Ethernet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "duplex-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ethernet_DuplexMode, bool) {
			ret := gs.(*oc.Interface_Ethernet).DuplexMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "config/duplex-mode"
//	Path from root:       "/interfaces/interface/ethernet/config/duplex-mode"
func (n *Interface_Ethernet_DuplexModePath) Config() ygnmi.ConfigQuery[oc.E_Ethernet_DuplexMode] {
	return ygnmi.NewConfigQuery[oc.E_Ethernet_DuplexMode](
		"Interface_Ethernet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "duplex-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ethernet_DuplexMode, bool) {
			ret := gs.(*oc.Interface_Ethernet).DuplexMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "config/duplex-mode"
//	Path from root:       "/interfaces/interface/ethernet/config/duplex-mode"
func (n *Interface_Ethernet_DuplexModePathAny) Config() ygnmi.WildcardQuery[oc.E_Ethernet_DuplexMode] {
	return ygnmi.NewWildcardQuery[oc.E_Ethernet_DuplexMode](
		"Interface_Ethernet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "duplex-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ethernet_DuplexMode, bool) {
			ret := gs.(*oc.Interface_Ethernet).DuplexMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_EnableFlowControlPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/enable-flow-control YANG schema element.
type Interface_Ethernet_EnableFlowControlPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_EnableFlowControlPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/enable-flow-control YANG schema element.
type Interface_Ethernet_EnableFlowControlPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/enable-flow-control"
//	Path from root:       "/interfaces/interface/ethernet/state/enable-flow-control"
func (n *Interface_Ethernet_EnableFlowControlPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-flow-control"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Ethernet).EnableFlowControl
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/enable-flow-control"
//	Path from root:       "/interfaces/interface/ethernet/state/enable-flow-control"
func (n *Interface_Ethernet_EnableFlowControlPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-flow-control"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Ethernet).EnableFlowControl
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "config/enable-flow-control"
//	Path from root:       "/interfaces/interface/ethernet/config/enable-flow-control"
func (n *Interface_Ethernet_EnableFlowControlPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Ethernet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-flow-control"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Ethernet).EnableFlowControl
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "config/enable-flow-control"
//	Path from root:       "/interfaces/interface/ethernet/config/enable-flow-control"
func (n *Interface_Ethernet_EnableFlowControlPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Ethernet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-flow-control"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Ethernet).EnableFlowControl
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_FecModePath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/fec-mode YANG schema element.
type Interface_Ethernet_FecModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_FecModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/fec-mode YANG schema element.
type Interface_Ethernet_FecModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/fec-mode"
//	Path from root:       "/interfaces/interface/ethernet/state/fec-mode"
func (n *Interface_Ethernet_FecModePath) State() ygnmi.SingletonQuery[oc.E_IfEthernet_INTERFACE_FEC] {
	return ygnmi.NewSingletonQuery[oc.E_IfEthernet_INTERFACE_FEC](
		"Interface_Ethernet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfEthernet_INTERFACE_FEC, bool) {
			ret := gs.(*oc.Interface_Ethernet).FecMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/fec-mode"
//	Path from root:       "/interfaces/interface/ethernet/state/fec-mode"
func (n *Interface_Ethernet_FecModePathAny) State() ygnmi.WildcardQuery[oc.E_IfEthernet_INTERFACE_FEC] {
	return ygnmi.NewWildcardQuery[oc.E_IfEthernet_INTERFACE_FEC](
		"Interface_Ethernet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfEthernet_INTERFACE_FEC, bool) {
			ret := gs.(*oc.Interface_Ethernet).FecMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "config/fec-mode"
//	Path from root:       "/interfaces/interface/ethernet/config/fec-mode"
func (n *Interface_Ethernet_FecModePath) Config() ygnmi.ConfigQuery[oc.E_IfEthernet_INTERFACE_FEC] {
	return ygnmi.NewConfigQuery[oc.E_IfEthernet_INTERFACE_FEC](
		"Interface_Ethernet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fec-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfEthernet_INTERFACE_FEC, bool) {
			ret := gs.(*oc.Interface_Ethernet).FecMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "config/fec-mode"
//	Path from root:       "/interfaces/interface/ethernet/config/fec-mode"
func (n *Interface_Ethernet_FecModePathAny) Config() ygnmi.WildcardQuery[oc.E_IfEthernet_INTERFACE_FEC] {
	return ygnmi.NewWildcardQuery[oc.E_IfEthernet_INTERFACE_FEC](
		"Interface_Ethernet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fec-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfEthernet_INTERFACE_FEC, bool) {
			ret := gs.(*oc.Interface_Ethernet).FecMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_HwMacAddressPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/hw-mac-address YANG schema element.
type Interface_Ethernet_HwMacAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_HwMacAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/hw-mac-address YANG schema element.
type Interface_Ethernet_HwMacAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/hw-mac-address"
//	Path from root:       "/interfaces/interface/ethernet/state/hw-mac-address"
func (n *Interface_Ethernet_HwMacAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hw-mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Ethernet).HwMacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/hw-mac-address"
//	Path from root:       "/interfaces/interface/ethernet/state/hw-mac-address"
func (n *Interface_Ethernet_HwMacAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hw-mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Ethernet).HwMacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_MacAddressPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/mac-address YANG schema element.
type Interface_Ethernet_MacAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_MacAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/mac-address YANG schema element.
type Interface_Ethernet_MacAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/mac-address"
//	Path from root:       "/interfaces/interface/ethernet/state/mac-address"
func (n *Interface_Ethernet_MacAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Ethernet).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/mac-address"
//	Path from root:       "/interfaces/interface/ethernet/state/mac-address"
func (n *Interface_Ethernet_MacAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Ethernet).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "config/mac-address"
//	Path from root:       "/interfaces/interface/ethernet/config/mac-address"
func (n *Interface_Ethernet_MacAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Ethernet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Ethernet).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "config/mac-address"
//	Path from root:       "/interfaces/interface/ethernet/config/mac-address"
func (n *Interface_Ethernet_MacAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Ethernet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Ethernet).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_NegotiatedDuplexModePath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/negotiated-duplex-mode YANG schema element.
type Interface_Ethernet_NegotiatedDuplexModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_NegotiatedDuplexModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/negotiated-duplex-mode YANG schema element.
type Interface_Ethernet_NegotiatedDuplexModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/negotiated-duplex-mode"
//	Path from root:       "/interfaces/interface/ethernet/state/negotiated-duplex-mode"
func (n *Interface_Ethernet_NegotiatedDuplexModePath) State() ygnmi.SingletonQuery[oc.E_Ethernet_NegotiatedDuplexMode] {
	return ygnmi.NewSingletonQuery[oc.E_Ethernet_NegotiatedDuplexMode](
		"Interface_Ethernet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "negotiated-duplex-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ethernet_NegotiatedDuplexMode, bool) {
			ret := gs.(*oc.Interface_Ethernet).NegotiatedDuplexMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/negotiated-duplex-mode"
//	Path from root:       "/interfaces/interface/ethernet/state/negotiated-duplex-mode"
func (n *Interface_Ethernet_NegotiatedDuplexModePathAny) State() ygnmi.WildcardQuery[oc.E_Ethernet_NegotiatedDuplexMode] {
	return ygnmi.NewWildcardQuery[oc.E_Ethernet_NegotiatedDuplexMode](
		"Interface_Ethernet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "negotiated-duplex-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ethernet_NegotiatedDuplexMode, bool) {
			ret := gs.(*oc.Interface_Ethernet).NegotiatedDuplexMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_NegotiatedPortSpeedPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/negotiated-port-speed YANG schema element.
type Interface_Ethernet_NegotiatedPortSpeedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_NegotiatedPortSpeedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/negotiated-port-speed YANG schema element.
type Interface_Ethernet_NegotiatedPortSpeedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/negotiated-port-speed"
//	Path from root:       "/interfaces/interface/ethernet/state/negotiated-port-speed"
func (n *Interface_Ethernet_NegotiatedPortSpeedPath) State() ygnmi.SingletonQuery[oc.E_IfEthernet_ETHERNET_SPEED] {
	return ygnmi.NewSingletonQuery[oc.E_IfEthernet_ETHERNET_SPEED](
		"Interface_Ethernet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "negotiated-port-speed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfEthernet_ETHERNET_SPEED, bool) {
			ret := gs.(*oc.Interface_Ethernet).NegotiatedPortSpeed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/negotiated-port-speed"
//	Path from root:       "/interfaces/interface/ethernet/state/negotiated-port-speed"
func (n *Interface_Ethernet_NegotiatedPortSpeedPathAny) State() ygnmi.WildcardQuery[oc.E_IfEthernet_ETHERNET_SPEED] {
	return ygnmi.NewWildcardQuery[oc.E_IfEthernet_ETHERNET_SPEED](
		"Interface_Ethernet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "negotiated-port-speed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfEthernet_ETHERNET_SPEED, bool) {
			ret := gs.(*oc.Interface_Ethernet).NegotiatedPortSpeed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_PortSpeedPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/port-speed YANG schema element.
type Interface_Ethernet_PortSpeedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_PortSpeedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/port-speed YANG schema element.
type Interface_Ethernet_PortSpeedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/port-speed"
//	Path from root:       "/interfaces/interface/ethernet/state/port-speed"
func (n *Interface_Ethernet_PortSpeedPath) State() ygnmi.SingletonQuery[oc.E_IfEthernet_ETHERNET_SPEED] {
	return ygnmi.NewSingletonQuery[oc.E_IfEthernet_ETHERNET_SPEED](
		"Interface_Ethernet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-speed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfEthernet_ETHERNET_SPEED, bool) {
			ret := gs.(*oc.Interface_Ethernet).PortSpeed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/port-speed"
//	Path from root:       "/interfaces/interface/ethernet/state/port-speed"
func (n *Interface_Ethernet_PortSpeedPathAny) State() ygnmi.WildcardQuery[oc.E_IfEthernet_ETHERNET_SPEED] {
	return ygnmi.NewWildcardQuery[oc.E_IfEthernet_ETHERNET_SPEED](
		"Interface_Ethernet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-speed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfEthernet_ETHERNET_SPEED, bool) {
			ret := gs.(*oc.Interface_Ethernet).PortSpeed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "config/port-speed"
//	Path from root:       "/interfaces/interface/ethernet/config/port-speed"
func (n *Interface_Ethernet_PortSpeedPath) Config() ygnmi.ConfigQuery[oc.E_IfEthernet_ETHERNET_SPEED] {
	return ygnmi.NewConfigQuery[oc.E_IfEthernet_ETHERNET_SPEED](
		"Interface_Ethernet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "port-speed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfEthernet_ETHERNET_SPEED, bool) {
			ret := gs.(*oc.Interface_Ethernet).PortSpeed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "config/port-speed"
//	Path from root:       "/interfaces/interface/ethernet/config/port-speed"
func (n *Interface_Ethernet_PortSpeedPathAny) Config() ygnmi.WildcardQuery[oc.E_IfEthernet_ETHERNET_SPEED] {
	return ygnmi.NewWildcardQuery[oc.E_IfEthernet_ETHERNET_SPEED](
		"Interface_Ethernet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "port-speed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfEthernet_ETHERNET_SPEED, bool) {
			ret := gs.(*oc.Interface_Ethernet).PortSpeed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_StandaloneLinkTrainingPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/standalone-link-training YANG schema element.
type Interface_Ethernet_StandaloneLinkTrainingPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_StandaloneLinkTrainingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/standalone-link-training YANG schema element.
type Interface_Ethernet_StandaloneLinkTrainingPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/standalone-link-training"
//	Path from root:       "/interfaces/interface/ethernet/state/standalone-link-training"
func (n *Interface_Ethernet_StandaloneLinkTrainingPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "standalone-link-training"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Ethernet).StandaloneLinkTraining
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/standalone-link-training"
//	Path from root:       "/interfaces/interface/ethernet/state/standalone-link-training"
func (n *Interface_Ethernet_StandaloneLinkTrainingPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "standalone-link-training"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Ethernet).StandaloneLinkTraining
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "config/standalone-link-training"
//	Path from root:       "/interfaces/interface/ethernet/config/standalone-link-training"
func (n *Interface_Ethernet_StandaloneLinkTrainingPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Ethernet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "standalone-link-training"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Ethernet).StandaloneLinkTraining
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "config/standalone-link-training"
//	Path from root:       "/interfaces/interface/ethernet/config/standalone-link-training"
func (n *Interface_Ethernet_StandaloneLinkTrainingPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Ethernet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "standalone-link-training"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Ethernet).StandaloneLinkTraining
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_EthernetPath represents the /openconfig-interfaces/interfaces/interface/ethernet YANG schema element.
type Interface_EthernetPath struct {
	*ygnmi.NodePath
}

// Interface_EthernetPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet YANG schema element.
type Interface_EthernetPathAny struct {
	*ygnmi.NodePath
}

// AggregateId (leaf): Specify the logical aggregate interface to which
// this interface belongs
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/aggregate-id"
//	Path from root:       "/interfaces/interface/ethernet/*/aggregate-id"
func (n *Interface_EthernetPath) AggregateId() *Interface_Ethernet_AggregateIdPath {
	ps := &Interface_Ethernet_AggregateIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "aggregate-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AggregateId (leaf): Specify the logical aggregate interface to which
// this interface belongs
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/aggregate-id"
//	Path from root:       "/interfaces/interface/ethernet/*/aggregate-id"
func (n *Interface_EthernetPathAny) AggregateId() *Interface_Ethernet_AggregateIdPathAny {
	ps := &Interface_Ethernet_AggregateIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "aggregate-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AutoNegotiate (leaf): Set to TRUE to request the interface to auto-negotiate
// transmission parameters with its peer interface.  When
// set to FALSE, the transmission parameters are specified
// manually.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/auto-negotiate"
//	Path from root:       "/interfaces/interface/ethernet/*/auto-negotiate"
func (n *Interface_EthernetPath) AutoNegotiate() *Interface_Ethernet_AutoNegotiatePath {
	ps := &Interface_Ethernet_AutoNegotiatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auto-negotiate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AutoNegotiate (leaf): Set to TRUE to request the interface to auto-negotiate
// transmission parameters with its peer interface.  When
// set to FALSE, the transmission parameters are specified
// manually.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/auto-negotiate"
//	Path from root:       "/interfaces/interface/ethernet/*/auto-negotiate"
func (n *Interface_EthernetPathAny) AutoNegotiate() *Interface_Ethernet_AutoNegotiatePathAny {
	ps := &Interface_Ethernet_AutoNegotiatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auto-negotiate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (container): Ethernet interface counters
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/ethernet/state/counters"
func (n *Interface_EthernetPath) Counters() *Interface_Ethernet_CountersPath {
	ps := &Interface_Ethernet_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Ethernet interface counters
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/ethernet/state/counters"
func (n *Interface_EthernetPathAny) Counters() *Interface_Ethernet_CountersPathAny {
	ps := &Interface_Ethernet_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DuplexMode (leaf): When auto-negotiate is TRUE, this optionally sets the
// duplex mode that will be advertised to the peer.  If
// unspecified, the interface should negotiate the duplex mode
// directly (typically full-duplex).  When auto-negotiate is
// FALSE, this sets the duplex mode on the interface directly.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/duplex-mode"
//	Path from root:       "/interfaces/interface/ethernet/*/duplex-mode"
func (n *Interface_EthernetPath) DuplexMode() *Interface_Ethernet_DuplexModePath {
	ps := &Interface_Ethernet_DuplexModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "duplex-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DuplexMode (leaf): When auto-negotiate is TRUE, this optionally sets the
// duplex mode that will be advertised to the peer.  If
// unspecified, the interface should negotiate the duplex mode
// directly (typically full-duplex).  When auto-negotiate is
// FALSE, this sets the duplex mode on the interface directly.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/duplex-mode"
//	Path from root:       "/interfaces/interface/ethernet/*/duplex-mode"
func (n *Interface_EthernetPathAny) DuplexMode() *Interface_Ethernet_DuplexModePathAny {
	ps := &Interface_Ethernet_DuplexModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "duplex-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableFlowControl (leaf): Enable or disable flow control for this interface.
// Ethernet flow control is a mechanism by which a receiver
// may send PAUSE frames to a sender to stop transmission for
// a specified time.
//
// This setting should override auto-negotiated flow control
// settings.  If left unspecified, and auto-negotiate is TRUE,
// flow control mode is negotiated with the peer interface.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enable-flow-control"
//	Path from root:       "/interfaces/interface/ethernet/*/enable-flow-control"
func (n *Interface_EthernetPath) EnableFlowControl() *Interface_Ethernet_EnableFlowControlPath {
	ps := &Interface_Ethernet_EnableFlowControlPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-flow-control"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableFlowControl (leaf): Enable or disable flow control for this interface.
// Ethernet flow control is a mechanism by which a receiver
// may send PAUSE frames to a sender to stop transmission for
// a specified time.
//
// This setting should override auto-negotiated flow control
// settings.  If left unspecified, and auto-negotiate is TRUE,
// flow control mode is negotiated with the peer interface.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enable-flow-control"
//	Path from root:       "/interfaces/interface/ethernet/*/enable-flow-control"
func (n *Interface_EthernetPathAny) EnableFlowControl() *Interface_Ethernet_EnableFlowControlPathAny {
	ps := &Interface_Ethernet_EnableFlowControlPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-flow-control"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecMode (leaf): The FEC mode applied to the physical channels associated with
// the interface.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/fec-mode"
//	Path from root:       "/interfaces/interface/ethernet/*/fec-mode"
func (n *Interface_EthernetPath) FecMode() *Interface_Ethernet_FecModePath {
	ps := &Interface_Ethernet_FecModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fec-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecMode (leaf): The FEC mode applied to the physical channels associated with
// the interface.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/fec-mode"
//	Path from root:       "/interfaces/interface/ethernet/*/fec-mode"
func (n *Interface_EthernetPathAny) FecMode() *Interface_Ethernet_FecModePathAny {
	ps := &Interface_Ethernet_FecModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fec-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HwMacAddress (leaf): Represents the 'burned-in', or system-assigned, MAC
// address for the Ethernet interface.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/hw-mac-address"
//	Path from root:       "/interfaces/interface/ethernet/state/hw-mac-address"
func (n *Interface_EthernetPath) HwMacAddress() *Interface_Ethernet_HwMacAddressPath {
	ps := &Interface_Ethernet_HwMacAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "hw-mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HwMacAddress (leaf): Represents the 'burned-in', or system-assigned, MAC
// address for the Ethernet interface.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/hw-mac-address"
//	Path from root:       "/interfaces/interface/ethernet/state/hw-mac-address"
func (n *Interface_EthernetPathAny) HwMacAddress() *Interface_Ethernet_HwMacAddressPathAny {
	ps := &Interface_Ethernet_HwMacAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "hw-mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacAddress (leaf): Assigns a MAC address to the Ethernet interface.  If not
// specified, the corresponding operational state leaf is
// expected to show the system-assigned MAC address.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mac-address"
//	Path from root:       "/interfaces/interface/ethernet/*/mac-address"
func (n *Interface_EthernetPath) MacAddress() *Interface_Ethernet_MacAddressPath {
	ps := &Interface_Ethernet_MacAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacAddress (leaf): Assigns a MAC address to the Ethernet interface.  If not
// specified, the corresponding operational state leaf is
// expected to show the system-assigned MAC address.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mac-address"
//	Path from root:       "/interfaces/interface/ethernet/*/mac-address"
func (n *Interface_EthernetPathAny) MacAddress() *Interface_Ethernet_MacAddressPathAny {
	ps := &Interface_Ethernet_MacAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NegotiatedDuplexMode (leaf): When auto-negotiate is set to TRUE, and the interface has
// completed auto-negotiation with the remote peer, this value
// shows the duplex mode that has been negotiated.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/negotiated-duplex-mode"
//	Path from root:       "/interfaces/interface/ethernet/state/negotiated-duplex-mode"
func (n *Interface_EthernetPath) NegotiatedDuplexMode() *Interface_Ethernet_NegotiatedDuplexModePath {
	ps := &Interface_Ethernet_NegotiatedDuplexModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "negotiated-duplex-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NegotiatedDuplexMode (leaf): When auto-negotiate is set to TRUE, and the interface has
// completed auto-negotiation with the remote peer, this value
// shows the duplex mode that has been negotiated.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/negotiated-duplex-mode"
//	Path from root:       "/interfaces/interface/ethernet/state/negotiated-duplex-mode"
func (n *Interface_EthernetPathAny) NegotiatedDuplexMode() *Interface_Ethernet_NegotiatedDuplexModePathAny {
	ps := &Interface_Ethernet_NegotiatedDuplexModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "negotiated-duplex-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NegotiatedPortSpeed (leaf): When auto-negotiate is set to TRUE, and the interface has
// completed auto-negotiation with the remote peer, this value
// shows the interface speed that has been negotiated.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/negotiated-port-speed"
//	Path from root:       "/interfaces/interface/ethernet/state/negotiated-port-speed"
func (n *Interface_EthernetPath) NegotiatedPortSpeed() *Interface_Ethernet_NegotiatedPortSpeedPath {
	ps := &Interface_Ethernet_NegotiatedPortSpeedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "negotiated-port-speed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NegotiatedPortSpeed (leaf): When auto-negotiate is set to TRUE, and the interface has
// completed auto-negotiation with the remote peer, this value
// shows the interface speed that has been negotiated.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/negotiated-port-speed"
//	Path from root:       "/interfaces/interface/ethernet/state/negotiated-port-speed"
func (n *Interface_EthernetPathAny) NegotiatedPortSpeed() *Interface_Ethernet_NegotiatedPortSpeedPathAny {
	ps := &Interface_Ethernet_NegotiatedPortSpeedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "negotiated-port-speed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortSpeed (leaf): When auto-negotiate is TRUE, this optionally sets the
// port-speed mode that will be advertised to the peer for
// negotiation.  If unspecified, it is expected that the
// interface will select the highest speed available based on
// negotiation.  When auto-negotiate is set to FALSE, sets the
// link speed to a fixed value -- supported values are defined
// by ETHERNET_SPEED identities
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/port-speed"
//	Path from root:       "/interfaces/interface/ethernet/*/port-speed"
func (n *Interface_EthernetPath) PortSpeed() *Interface_Ethernet_PortSpeedPath {
	ps := &Interface_Ethernet_PortSpeedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port-speed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortSpeed (leaf): When auto-negotiate is TRUE, this optionally sets the
// port-speed mode that will be advertised to the peer for
// negotiation.  If unspecified, it is expected that the
// interface will select the highest speed available based on
// negotiation.  When auto-negotiate is set to FALSE, sets the
// link speed to a fixed value -- supported values are defined
// by ETHERNET_SPEED identities
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/port-speed"
//	Path from root:       "/interfaces/interface/ethernet/*/port-speed"
func (n *Interface_EthernetPathAny) PortSpeed() *Interface_Ethernet_PortSpeedPathAny {
	ps := &Interface_Ethernet_PortSpeedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port-speed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StandaloneLinkTraining (leaf): Link training is automatic tuning of the SerDes transmit and
// receive parameters to ensure an optimal connection over copper
// links. It is normally run as part of the auto negotiation
// sequence as specified in IEEE 802.3 Clause 73.
//
// Standalone link training is used when full auto negotiation is
// not desired on an Ethernet link but link training is needed.
// It is configured by setting the standalone-link-training leaf
// to TRUE and augo-negotiate leaf to FALSE.
//
// Note: If auto-negotiate is true, then the value of standalone
// link training leaf will be ignored.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/standalone-link-training"
//	Path from root:       "/interfaces/interface/ethernet/*/standalone-link-training"
func (n *Interface_EthernetPath) StandaloneLinkTraining() *Interface_Ethernet_StandaloneLinkTrainingPath {
	ps := &Interface_Ethernet_StandaloneLinkTrainingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "standalone-link-training"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StandaloneLinkTraining (leaf): Link training is automatic tuning of the SerDes transmit and
// receive parameters to ensure an optimal connection over copper
// links. It is normally run as part of the auto negotiation
// sequence as specified in IEEE 802.3 Clause 73.
//
// Standalone link training is used when full auto negotiation is
// not desired on an Ethernet link but link training is needed.
// It is configured by setting the standalone-link-training leaf
// to TRUE and augo-negotiate leaf to FALSE.
//
// Note: If auto-negotiate is true, then the value of standalone
// link training leaf will be ignored.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/standalone-link-training"
//	Path from root:       "/interfaces/interface/ethernet/*/standalone-link-training"
func (n *Interface_EthernetPathAny) StandaloneLinkTraining() *Interface_Ethernet_StandaloneLinkTrainingPathAny {
	ps := &Interface_Ethernet_StandaloneLinkTrainingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "standalone-link-training"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SwitchedVlan (container): Enclosing container for VLAN interface-specific
// data on Ethernet interfaces.  These are for standard
// L2, switched-style VLANs.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "switched-vlan"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan"
func (n *Interface_EthernetPath) SwitchedVlan() *Interface_Ethernet_SwitchedVlanPath {
	ps := &Interface_Ethernet_SwitchedVlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"switched-vlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SwitchedVlan (container): Enclosing container for VLAN interface-specific
// data on Ethernet interfaces.  These are for standard
// L2, switched-style VLANs.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "switched-vlan"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan"
func (n *Interface_EthernetPathAny) SwitchedVlan() *Interface_Ethernet_SwitchedVlanPathAny {
	ps := &Interface_Ethernet_SwitchedVlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"switched-vlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_EthernetPath) State() ygnmi.SingletonQuery[*oc.Interface_Ethernet] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Ethernet](
		"Interface_Ethernet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_EthernetPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Ethernet] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Ethernet](
		"Interface_Ethernet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_EthernetPath) Config() ygnmi.ConfigQuery[*oc.Interface_Ethernet] {
	return ygnmi.NewConfigQuery[*oc.Interface_Ethernet](
		"Interface_Ethernet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_EthernetPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Ethernet] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Ethernet](
		"Interface_Ethernet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_In_8021QFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-8021q-frames YANG schema element.
type Interface_Ethernet_Counters_In_8021QFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_In_8021QFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-8021q-frames YANG schema element.
type Interface_Ethernet_Counters_In_8021QFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-8021q-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-8021q-frames"
func (n *Interface_Ethernet_Counters_In_8021QFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-8021q-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).In_8021QFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-8021q-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-8021q-frames"
func (n *Interface_Ethernet_Counters_In_8021QFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-8021q-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).In_8021QFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InBlockErrorsPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-block-errors YANG schema element.
type Interface_Ethernet_Counters_InBlockErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InBlockErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-block-errors YANG schema element.
type Interface_Ethernet_Counters_InBlockErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-block-errors"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-block-errors"
func (n *Interface_Ethernet_Counters_InBlockErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-block-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InBlockErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-block-errors"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-block-errors"
func (n *Interface_Ethernet_Counters_InBlockErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-block-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InBlockErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InCarrierErrorsPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-carrier-errors YANG schema element.
type Interface_Ethernet_Counters_InCarrierErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InCarrierErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-carrier-errors YANG schema element.
type Interface_Ethernet_Counters_InCarrierErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-carrier-errors"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-carrier-errors"
func (n *Interface_Ethernet_Counters_InCarrierErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-carrier-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InCarrierErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-carrier-errors"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-carrier-errors"
func (n *Interface_Ethernet_Counters_InCarrierErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-carrier-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InCarrierErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InCrcErrorsPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-crc-errors YANG schema element.
type Interface_Ethernet_Counters_InCrcErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InCrcErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-crc-errors YANG schema element.
type Interface_Ethernet_Counters_InCrcErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-crc-errors"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-crc-errors"
func (n *Interface_Ethernet_Counters_InCrcErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-crc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InCrcErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-crc-errors"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-crc-errors"
func (n *Interface_Ethernet_Counters_InCrcErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-crc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InCrcErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InFragmentFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-fragment-frames YANG schema element.
type Interface_Ethernet_Counters_InFragmentFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InFragmentFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-fragment-frames YANG schema element.
type Interface_Ethernet_Counters_InFragmentFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-fragment-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-fragment-frames"
func (n *Interface_Ethernet_Counters_InFragmentFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-fragment-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InFragmentFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-fragment-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-fragment-frames"
func (n *Interface_Ethernet_Counters_InFragmentFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-fragment-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InFragmentFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InInterruptedTxPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-interrupted-tx YANG schema element.
type Interface_Ethernet_Counters_InInterruptedTxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InInterruptedTxPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-interrupted-tx YANG schema element.
type Interface_Ethernet_Counters_InInterruptedTxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-interrupted-tx"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-interrupted-tx"
func (n *Interface_Ethernet_Counters_InInterruptedTxPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-interrupted-tx"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InInterruptedTx
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-interrupted-tx"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-interrupted-tx"
func (n *Interface_Ethernet_Counters_InInterruptedTxPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-interrupted-tx"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InInterruptedTx
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InJabberFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-jabber-frames YANG schema element.
type Interface_Ethernet_Counters_InJabberFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InJabberFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-jabber-frames YANG schema element.
type Interface_Ethernet_Counters_InJabberFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-jabber-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-jabber-frames"
func (n *Interface_Ethernet_Counters_InJabberFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-jabber-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InJabberFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-jabber-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-jabber-frames"
func (n *Interface_Ethernet_Counters_InJabberFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-jabber-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InJabberFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InLateCollisionPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-late-collision YANG schema element.
type Interface_Ethernet_Counters_InLateCollisionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InLateCollisionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-late-collision YANG schema element.
type Interface_Ethernet_Counters_InLateCollisionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-late-collision"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-late-collision"
func (n *Interface_Ethernet_Counters_InLateCollisionPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-late-collision"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InLateCollision
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-late-collision"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-late-collision"
func (n *Interface_Ethernet_Counters_InLateCollisionPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-late-collision"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InLateCollision
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InMacControlFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-mac-control-frames YANG schema element.
type Interface_Ethernet_Counters_InMacControlFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InMacControlFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-mac-control-frames YANG schema element.
type Interface_Ethernet_Counters_InMacControlFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-mac-control-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-mac-control-frames"
func (n *Interface_Ethernet_Counters_InMacControlFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-mac-control-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InMacControlFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-mac-control-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-mac-control-frames"
func (n *Interface_Ethernet_Counters_InMacControlFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-mac-control-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InMacControlFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InMacErrorsRxPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-mac-errors-rx YANG schema element.
type Interface_Ethernet_Counters_InMacErrorsRxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InMacErrorsRxPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-mac-errors-rx YANG schema element.
type Interface_Ethernet_Counters_InMacErrorsRxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-mac-errors-rx"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-mac-errors-rx"
func (n *Interface_Ethernet_Counters_InMacErrorsRxPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-mac-errors-rx"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InMacErrorsRx
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-mac-errors-rx"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-mac-errors-rx"
func (n *Interface_Ethernet_Counters_InMacErrorsRxPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-mac-errors-rx"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InMacErrorsRx
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InMacPauseFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-mac-pause-frames YANG schema element.
type Interface_Ethernet_Counters_InMacPauseFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InMacPauseFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-mac-pause-frames YANG schema element.
type Interface_Ethernet_Counters_InMacPauseFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-mac-pause-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-mac-pause-frames"
func (n *Interface_Ethernet_Counters_InMacPauseFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-mac-pause-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InMacPauseFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-mac-pause-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-mac-pause-frames"
func (n *Interface_Ethernet_Counters_InMacPauseFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-mac-pause-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InMacPauseFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InMaxsizeExceededPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-maxsize-exceeded YANG schema element.
type Interface_Ethernet_Counters_InMaxsizeExceededPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InMaxsizeExceededPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-maxsize-exceeded YANG schema element.
type Interface_Ethernet_Counters_InMaxsizeExceededPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-maxsize-exceeded"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-maxsize-exceeded"
func (n *Interface_Ethernet_Counters_InMaxsizeExceededPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-maxsize-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InMaxsizeExceeded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-maxsize-exceeded"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-maxsize-exceeded"
func (n *Interface_Ethernet_Counters_InMaxsizeExceededPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-maxsize-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InMaxsizeExceeded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InOversizeFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-oversize-frames YANG schema element.
type Interface_Ethernet_Counters_InOversizeFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InOversizeFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-oversize-frames YANG schema element.
type Interface_Ethernet_Counters_InOversizeFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-oversize-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-oversize-frames"
func (n *Interface_Ethernet_Counters_InOversizeFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-oversize-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InOversizeFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-oversize-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-oversize-frames"
func (n *Interface_Ethernet_Counters_InOversizeFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-oversize-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InOversizeFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InSingleCollisionPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-single-collision YANG schema element.
type Interface_Ethernet_Counters_InSingleCollisionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InSingleCollisionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-single-collision YANG schema element.
type Interface_Ethernet_Counters_InSingleCollisionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-single-collision"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-single-collision"
func (n *Interface_Ethernet_Counters_InSingleCollisionPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-single-collision"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InSingleCollision
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-single-collision"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-single-collision"
func (n *Interface_Ethernet_Counters_InSingleCollisionPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-single-collision"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InSingleCollision
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InSymbolErrorPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-symbol-error YANG schema element.
type Interface_Ethernet_Counters_InSymbolErrorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InSymbolErrorPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-symbol-error YANG schema element.
type Interface_Ethernet_Counters_InSymbolErrorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-symbol-error"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-symbol-error"
func (n *Interface_Ethernet_Counters_InSymbolErrorPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-symbol-error"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InSymbolError
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-symbol-error"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-symbol-error"
func (n *Interface_Ethernet_Counters_InSymbolErrorPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-symbol-error"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InSymbolError
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InUndersizeFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-undersize-frames YANG schema element.
type Interface_Ethernet_Counters_InUndersizeFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InUndersizeFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-undersize-frames YANG schema element.
type Interface_Ethernet_Counters_InUndersizeFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-undersize-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-undersize-frames"
func (n *Interface_Ethernet_Counters_InUndersizeFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-undersize-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InUndersizeFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "in-undersize-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-undersize-frames"
func (n *Interface_Ethernet_Counters_InUndersizeFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-undersize-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).InUndersizeFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_Out_8021QFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-8021q-frames YANG schema element.
type Interface_Ethernet_Counters_Out_8021QFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_Out_8021QFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-8021q-frames YANG schema element.
type Interface_Ethernet_Counters_Out_8021QFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "out-8021q-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/out-8021q-frames"
func (n *Interface_Ethernet_Counters_Out_8021QFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-8021q-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).Out_8021QFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "out-8021q-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/out-8021q-frames"
func (n *Interface_Ethernet_Counters_Out_8021QFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-8021q-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).Out_8021QFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_OutMacControlFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-mac-control-frames YANG schema element.
type Interface_Ethernet_Counters_OutMacControlFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_OutMacControlFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-mac-control-frames YANG schema element.
type Interface_Ethernet_Counters_OutMacControlFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "out-mac-control-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/out-mac-control-frames"
func (n *Interface_Ethernet_Counters_OutMacControlFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-mac-control-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).OutMacControlFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "out-mac-control-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/out-mac-control-frames"
func (n *Interface_Ethernet_Counters_OutMacControlFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-mac-control-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).OutMacControlFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_OutMacErrorsTxPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-mac-errors-tx YANG schema element.
type Interface_Ethernet_Counters_OutMacErrorsTxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_OutMacErrorsTxPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-mac-errors-tx YANG schema element.
type Interface_Ethernet_Counters_OutMacErrorsTxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "out-mac-errors-tx"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/out-mac-errors-tx"
func (n *Interface_Ethernet_Counters_OutMacErrorsTxPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-mac-errors-tx"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).OutMacErrorsTx
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "out-mac-errors-tx"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/out-mac-errors-tx"
func (n *Interface_Ethernet_Counters_OutMacErrorsTxPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-mac-errors-tx"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).OutMacErrorsTx
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_OutMacPauseFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-mac-pause-frames YANG schema element.
type Interface_Ethernet_Counters_OutMacPauseFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_OutMacPauseFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-mac-pause-frames YANG schema element.
type Interface_Ethernet_Counters_OutMacPauseFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "out-mac-pause-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/out-mac-pause-frames"
func (n *Interface_Ethernet_Counters_OutMacPauseFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-mac-pause-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).OutMacPauseFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "out-mac-pause-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/out-mac-pause-frames"
func (n *Interface_Ethernet_Counters_OutMacPauseFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-mac-pause-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters).OutMacPauseFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_CountersPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters YANG schema element.
type Interface_Ethernet_CountersPath struct {
	*ygnmi.NodePath
}

// Interface_Ethernet_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters YANG schema element.
type Interface_Ethernet_CountersPathAny struct {
	*ygnmi.NodePath
}

// In_8021QFrames (leaf): Number of 802.1q tagged frames received on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-8021q-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-8021q-frames"
func (n *Interface_Ethernet_CountersPath) In_8021QFrames() *Interface_Ethernet_Counters_In_8021QFramesPath {
	ps := &Interface_Ethernet_Counters_In_8021QFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-8021q-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// In_8021QFrames (leaf): Number of 802.1q tagged frames received on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-8021q-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-8021q-frames"
func (n *Interface_Ethernet_CountersPathAny) In_8021QFrames() *Interface_Ethernet_Counters_In_8021QFramesPathAny {
	ps := &Interface_Ethernet_Counters_In_8021QFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-8021q-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBlockErrors (leaf): The number of received errored blocks. Error detection codes
// are capable of detecting whether one or more errors have
// occurred in a given sequence of bits – the block. It is
// normally not possible to determine the exact number of errored
// bits within the block
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-block-errors"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-block-errors"
func (n *Interface_Ethernet_CountersPath) InBlockErrors() *Interface_Ethernet_Counters_InBlockErrorsPath {
	ps := &Interface_Ethernet_Counters_InBlockErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-block-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBlockErrors (leaf): The number of received errored blocks. Error detection codes
// are capable of detecting whether one or more errors have
// occurred in a given sequence of bits – the block. It is
// normally not possible to determine the exact number of errored
// bits within the block
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-block-errors"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-block-errors"
func (n *Interface_Ethernet_CountersPathAny) InBlockErrors() *Interface_Ethernet_Counters_InBlockErrorsPathAny {
	ps := &Interface_Ethernet_Counters_InBlockErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-block-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InCarrierErrors (leaf): The number of received errored frames due to a carrier issue.
// The value refers to MIB counter for
// dot3StatsCarrierSenseErrors
// oid=1.3.6.1.2.1.10.7.2.1.11
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-carrier-errors"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-carrier-errors"
func (n *Interface_Ethernet_CountersPath) InCarrierErrors() *Interface_Ethernet_Counters_InCarrierErrorsPath {
	ps := &Interface_Ethernet_Counters_InCarrierErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-carrier-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InCarrierErrors (leaf): The number of received errored frames due to a carrier issue.
// The value refers to MIB counter for
// dot3StatsCarrierSenseErrors
// oid=1.3.6.1.2.1.10.7.2.1.11
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-carrier-errors"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-carrier-errors"
func (n *Interface_Ethernet_CountersPathAny) InCarrierErrors() *Interface_Ethernet_Counters_InCarrierErrorsPathAny {
	ps := &Interface_Ethernet_Counters_InCarrierErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-carrier-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InCrcErrors (leaf): The total number of frames received that
// had a length (excluding framing bits, but
// including FCS octets) of between 64 and 1518
// octets, inclusive, but had either a bad
// Frame Check Sequence (FCS) with an integral
// number of octets (FCS Error) or a bad FCS with
// a non-integral number of octets (Alignment Error)
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-crc-errors"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-crc-errors"
func (n *Interface_Ethernet_CountersPath) InCrcErrors() *Interface_Ethernet_Counters_InCrcErrorsPath {
	ps := &Interface_Ethernet_Counters_InCrcErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-crc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InCrcErrors (leaf): The total number of frames received that
// had a length (excluding framing bits, but
// including FCS octets) of between 64 and 1518
// octets, inclusive, but had either a bad
// Frame Check Sequence (FCS) with an integral
// number of octets (FCS Error) or a bad FCS with
// a non-integral number of octets (Alignment Error)
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-crc-errors"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-crc-errors"
func (n *Interface_Ethernet_CountersPathAny) InCrcErrors() *Interface_Ethernet_Counters_InCrcErrorsPathAny {
	ps := &Interface_Ethernet_Counters_InCrcErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-crc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InDistribution (container): The size distribution of the received frames.
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-distribution"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution"
func (n *Interface_Ethernet_CountersPath) InDistribution() *Interface_Ethernet_Counters_InDistributionPath {
	ps := &Interface_Ethernet_Counters_InDistributionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-distribution"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InDistribution (container): The size distribution of the received frames.
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-distribution"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution"
func (n *Interface_Ethernet_CountersPathAny) InDistribution() *Interface_Ethernet_Counters_InDistributionPathAny {
	ps := &Interface_Ethernet_Counters_InDistributionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-distribution"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InFragmentFrames (leaf): The total number of frames received that were less than
// 64 octets in length (excluding framing bits but including
// FCS octets) and had either a bad Frame Check Sequence
// (FCS) with an integral number of octets (FCS Error) or a
// bad FCS with a non-integral number of octets (Alignment
// Error).
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-fragment-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-fragment-frames"
func (n *Interface_Ethernet_CountersPath) InFragmentFrames() *Interface_Ethernet_Counters_InFragmentFramesPath {
	ps := &Interface_Ethernet_Counters_InFragmentFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-fragment-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFragmentFrames (leaf): The total number of frames received that were less than
// 64 octets in length (excluding framing bits but including
// FCS octets) and had either a bad Frame Check Sequence
// (FCS) with an integral number of octets (FCS Error) or a
// bad FCS with a non-integral number of octets (Alignment
// Error).
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-fragment-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-fragment-frames"
func (n *Interface_Ethernet_CountersPathAny) InFragmentFrames() *Interface_Ethernet_Counters_InFragmentFramesPathAny {
	ps := &Interface_Ethernet_Counters_InFragmentFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-fragment-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InInterruptedTx (leaf): The number of received errored frames due to interrupted
// transmission issue. The value refers to MIB counter for
// dot3StatsDeferredTransmissions
// oid=1.3.6.1.2.1.10.7.2.1.7
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-interrupted-tx"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-interrupted-tx"
func (n *Interface_Ethernet_CountersPath) InInterruptedTx() *Interface_Ethernet_Counters_InInterruptedTxPath {
	ps := &Interface_Ethernet_Counters_InInterruptedTxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-interrupted-tx"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InInterruptedTx (leaf): The number of received errored frames due to interrupted
// transmission issue. The value refers to MIB counter for
// dot3StatsDeferredTransmissions
// oid=1.3.6.1.2.1.10.7.2.1.7
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-interrupted-tx"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-interrupted-tx"
func (n *Interface_Ethernet_CountersPathAny) InInterruptedTx() *Interface_Ethernet_Counters_InInterruptedTxPathAny {
	ps := &Interface_Ethernet_Counters_InInterruptedTxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-interrupted-tx"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InJabberFrames (leaf): Number of jabber frames received on the
// interface.  Jabber frames are typically defined as oversize
// frames which also have a bad CRC.  Implementations may use
// slightly different definitions of what constitutes a jabber
// frame.  Often indicative of a NIC hardware problem.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-jabber-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-jabber-frames"
func (n *Interface_Ethernet_CountersPath) InJabberFrames() *Interface_Ethernet_Counters_InJabberFramesPath {
	ps := &Interface_Ethernet_Counters_InJabberFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-jabber-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InJabberFrames (leaf): Number of jabber frames received on the
// interface.  Jabber frames are typically defined as oversize
// frames which also have a bad CRC.  Implementations may use
// slightly different definitions of what constitutes a jabber
// frame.  Often indicative of a NIC hardware problem.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-jabber-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-jabber-frames"
func (n *Interface_Ethernet_CountersPathAny) InJabberFrames() *Interface_Ethernet_Counters_InJabberFramesPathAny {
	ps := &Interface_Ethernet_Counters_InJabberFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-jabber-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLateCollision (leaf): The number of received errored frames due to late collision
// issue. The value refers to MIB counter for
// dot3StatsLateCollisions
// oid=1.3.6.1.2.1.10.7.2.1.8
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-late-collision"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-late-collision"
func (n *Interface_Ethernet_CountersPath) InLateCollision() *Interface_Ethernet_Counters_InLateCollisionPath {
	ps := &Interface_Ethernet_Counters_InLateCollisionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-late-collision"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLateCollision (leaf): The number of received errored frames due to late collision
// issue. The value refers to MIB counter for
// dot3StatsLateCollisions
// oid=1.3.6.1.2.1.10.7.2.1.8
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-late-collision"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-late-collision"
func (n *Interface_Ethernet_CountersPathAny) InLateCollision() *Interface_Ethernet_Counters_InLateCollisionPathAny {
	ps := &Interface_Ethernet_Counters_InLateCollisionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-late-collision"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMacControlFrames (leaf): MAC layer control frames received on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-mac-control-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-mac-control-frames"
func (n *Interface_Ethernet_CountersPath) InMacControlFrames() *Interface_Ethernet_Counters_InMacControlFramesPath {
	ps := &Interface_Ethernet_Counters_InMacControlFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMacControlFrames (leaf): MAC layer control frames received on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-mac-control-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-mac-control-frames"
func (n *Interface_Ethernet_CountersPathAny) InMacControlFrames() *Interface_Ethernet_Counters_InMacControlFramesPathAny {
	ps := &Interface_Ethernet_Counters_InMacControlFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMacErrorsRx (leaf): The number of received errored frames due to MAC errors
// received. The value refers to MIB counter for
// dot3StatsInternalMacReceiveErrors
// oid=1.3.6.1.2.1.10.7.2.1.16
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-mac-errors-rx"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-mac-errors-rx"
func (n *Interface_Ethernet_CountersPath) InMacErrorsRx() *Interface_Ethernet_Counters_InMacErrorsRxPath {
	ps := &Interface_Ethernet_Counters_InMacErrorsRxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-mac-errors-rx"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMacErrorsRx (leaf): The number of received errored frames due to MAC errors
// received. The value refers to MIB counter for
// dot3StatsInternalMacReceiveErrors
// oid=1.3.6.1.2.1.10.7.2.1.16
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-mac-errors-rx"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-mac-errors-rx"
func (n *Interface_Ethernet_CountersPathAny) InMacErrorsRx() *Interface_Ethernet_Counters_InMacErrorsRxPathAny {
	ps := &Interface_Ethernet_Counters_InMacErrorsRxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-mac-errors-rx"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMacPauseFrames (leaf): MAC layer PAUSE frames received on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-mac-pause-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-mac-pause-frames"
func (n *Interface_Ethernet_CountersPath) InMacPauseFrames() *Interface_Ethernet_Counters_InMacPauseFramesPath {
	ps := &Interface_Ethernet_Counters_InMacPauseFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMacPauseFrames (leaf): MAC layer PAUSE frames received on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-mac-pause-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-mac-pause-frames"
func (n *Interface_Ethernet_CountersPathAny) InMacPauseFrames() *Interface_Ethernet_Counters_InMacPauseFramesPathAny {
	ps := &Interface_Ethernet_Counters_InMacPauseFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMaxsizeExceeded (leaf): The total number frames received that are well-formed but
// dropped due to exceeding the maximum frame size on the interface
// (e.g., MTU or MRU)
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-maxsize-exceeded"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-maxsize-exceeded"
func (n *Interface_Ethernet_CountersPath) InMaxsizeExceeded() *Interface_Ethernet_Counters_InMaxsizeExceededPath {
	ps := &Interface_Ethernet_Counters_InMaxsizeExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-maxsize-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMaxsizeExceeded (leaf): The total number frames received that are well-formed but
// dropped due to exceeding the maximum frame size on the interface
// (e.g., MTU or MRU)
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-maxsize-exceeded"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-maxsize-exceeded"
func (n *Interface_Ethernet_CountersPathAny) InMaxsizeExceeded() *Interface_Ethernet_Counters_InMaxsizeExceededPathAny {
	ps := &Interface_Ethernet_Counters_InMaxsizeExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-maxsize-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOversizeFrames (leaf): The total number of frames received that were
// longer than 1518 octets (excluding framing bits,
// but including FCS octets) and were otherwise
// well formed.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-oversize-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-oversize-frames"
func (n *Interface_Ethernet_CountersPath) InOversizeFrames() *Interface_Ethernet_Counters_InOversizeFramesPath {
	ps := &Interface_Ethernet_Counters_InOversizeFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-oversize-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOversizeFrames (leaf): The total number of frames received that were
// longer than 1518 octets (excluding framing bits,
// but including FCS octets) and were otherwise
// well formed.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-oversize-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-oversize-frames"
func (n *Interface_Ethernet_CountersPathAny) InOversizeFrames() *Interface_Ethernet_Counters_InOversizeFramesPathAny {
	ps := &Interface_Ethernet_Counters_InOversizeFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-oversize-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InSingleCollision (leaf): The number of received errored frames due to single collision
// issue. The value refers to MIB counter for
// dot3StatsSingleCollisionFrames
// oid=1.3.6.1.2.1.10.7.2.1.4
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-single-collision"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-single-collision"
func (n *Interface_Ethernet_CountersPath) InSingleCollision() *Interface_Ethernet_Counters_InSingleCollisionPath {
	ps := &Interface_Ethernet_Counters_InSingleCollisionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-single-collision"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InSingleCollision (leaf): The number of received errored frames due to single collision
// issue. The value refers to MIB counter for
// dot3StatsSingleCollisionFrames
// oid=1.3.6.1.2.1.10.7.2.1.4
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-single-collision"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-single-collision"
func (n *Interface_Ethernet_CountersPathAny) InSingleCollision() *Interface_Ethernet_Counters_InSingleCollisionPathAny {
	ps := &Interface_Ethernet_Counters_InSingleCollisionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-single-collision"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InSymbolError (leaf): The number of received errored frames due to symbol error.
// The value refers to MIB counter for
// in-symbol-error
// oid=1.3.6.1.2.1.10.7.2.1.18
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-symbol-error"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-symbol-error"
func (n *Interface_Ethernet_CountersPath) InSymbolError() *Interface_Ethernet_Counters_InSymbolErrorPath {
	ps := &Interface_Ethernet_Counters_InSymbolErrorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-symbol-error"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InSymbolError (leaf): The number of received errored frames due to symbol error.
// The value refers to MIB counter for
// in-symbol-error
// oid=1.3.6.1.2.1.10.7.2.1.18
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-symbol-error"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-symbol-error"
func (n *Interface_Ethernet_CountersPathAny) InSymbolError() *Interface_Ethernet_Counters_InSymbolErrorPathAny {
	ps := &Interface_Ethernet_Counters_InSymbolErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-symbol-error"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUndersizeFrames (leaf): The total number of frames received that were
// less than 64 octets long (excluding framing bits,
// but including FCS octets) and were otherwise well
// formed.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-undersize-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-undersize-frames"
func (n *Interface_Ethernet_CountersPath) InUndersizeFrames() *Interface_Ethernet_Counters_InUndersizeFramesPath {
	ps := &Interface_Ethernet_Counters_InUndersizeFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-undersize-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUndersizeFrames (leaf): The total number of frames received that were
// less than 64 octets long (excluding framing bits,
// but including FCS octets) and were otherwise well
// formed.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-undersize-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-undersize-frames"
func (n *Interface_Ethernet_CountersPathAny) InUndersizeFrames() *Interface_Ethernet_Counters_InUndersizeFramesPathAny {
	ps := &Interface_Ethernet_Counters_InUndersizeFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-undersize-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Out_8021QFrames (leaf): Number of 802.1q tagged frames sent on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-8021q-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/out-8021q-frames"
func (n *Interface_Ethernet_CountersPath) Out_8021QFrames() *Interface_Ethernet_Counters_Out_8021QFramesPath {
	ps := &Interface_Ethernet_Counters_Out_8021QFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-8021q-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Out_8021QFrames (leaf): Number of 802.1q tagged frames sent on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-8021q-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/out-8021q-frames"
func (n *Interface_Ethernet_CountersPathAny) Out_8021QFrames() *Interface_Ethernet_Counters_Out_8021QFramesPathAny {
	ps := &Interface_Ethernet_Counters_Out_8021QFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-8021q-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMacControlFrames (leaf): MAC layer control frames sent on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-mac-control-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/out-mac-control-frames"
func (n *Interface_Ethernet_CountersPath) OutMacControlFrames() *Interface_Ethernet_Counters_OutMacControlFramesPath {
	ps := &Interface_Ethernet_Counters_OutMacControlFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMacControlFrames (leaf): MAC layer control frames sent on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-mac-control-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/out-mac-control-frames"
func (n *Interface_Ethernet_CountersPathAny) OutMacControlFrames() *Interface_Ethernet_Counters_OutMacControlFramesPathAny {
	ps := &Interface_Ethernet_Counters_OutMacControlFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMacErrorsTx (leaf): The number of sent errored frames due to MAC errors
// transmitted. The value refers to MIB counter for
// dot3StatsInternalMacTransmitErrors
// oid=1.3.6.1.2.1.10.7.2.1.10
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-mac-errors-tx"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/out-mac-errors-tx"
func (n *Interface_Ethernet_CountersPath) OutMacErrorsTx() *Interface_Ethernet_Counters_OutMacErrorsTxPath {
	ps := &Interface_Ethernet_Counters_OutMacErrorsTxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-mac-errors-tx"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMacErrorsTx (leaf): The number of sent errored frames due to MAC errors
// transmitted. The value refers to MIB counter for
// dot3StatsInternalMacTransmitErrors
// oid=1.3.6.1.2.1.10.7.2.1.10
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-mac-errors-tx"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/out-mac-errors-tx"
func (n *Interface_Ethernet_CountersPathAny) OutMacErrorsTx() *Interface_Ethernet_Counters_OutMacErrorsTxPathAny {
	ps := &Interface_Ethernet_Counters_OutMacErrorsTxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-mac-errors-tx"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMacPauseFrames (leaf): MAC layer PAUSE frames sent on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-mac-pause-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/out-mac-pause-frames"
func (n *Interface_Ethernet_CountersPath) OutMacPauseFrames() *Interface_Ethernet_Counters_OutMacPauseFramesPath {
	ps := &Interface_Ethernet_Counters_OutMacPauseFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMacPauseFrames (leaf): MAC layer PAUSE frames sent on the interface
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-mac-pause-frames"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/out-mac-pause-frames"
func (n *Interface_Ethernet_CountersPathAny) OutMacPauseFrames() *Interface_Ethernet_Counters_OutMacPauseFramesPathAny {
	ps := &Interface_Ethernet_Counters_OutMacPauseFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Ethernet_CountersPath) State() ygnmi.SingletonQuery[*oc.Interface_Ethernet_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Ethernet_Counters](
		"Interface_Ethernet_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Ethernet_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Ethernet_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Ethernet_Counters](
		"Interface_Ethernet_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InDistribution_InFrames_1024_1518OctetsPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-1024-1518-octets YANG schema element.
type Interface_Ethernet_Counters_InDistribution_InFrames_1024_1518OctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InDistribution_InFrames_1024_1518OctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-1024-1518-octets YANG schema element.
type Interface_Ethernet_Counters_InDistribution_InFrames_1024_1518OctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-if-ethernet-ext"
//	Path from parent:     "in-frames-1024-1518-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-1024-1518-octets"
func (n *Interface_Ethernet_Counters_InDistribution_InFrames_1024_1518OctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters_InDistribution",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-frames-1024-1518-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters_InDistribution).InFrames_1024_1518Octets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters_InDistribution) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-if-ethernet-ext"
//	Path from parent:     "in-frames-1024-1518-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-1024-1518-octets"
func (n *Interface_Ethernet_Counters_InDistribution_InFrames_1024_1518OctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters_InDistribution",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-frames-1024-1518-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters_InDistribution).InFrames_1024_1518Octets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters_InDistribution) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InDistribution_InFrames_128_255OctetsPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-128-255-octets YANG schema element.
type Interface_Ethernet_Counters_InDistribution_InFrames_128_255OctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InDistribution_InFrames_128_255OctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-128-255-octets YANG schema element.
type Interface_Ethernet_Counters_InDistribution_InFrames_128_255OctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-if-ethernet-ext"
//	Path from parent:     "in-frames-128-255-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-128-255-octets"
func (n *Interface_Ethernet_Counters_InDistribution_InFrames_128_255OctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters_InDistribution",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-frames-128-255-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters_InDistribution).InFrames_128_255Octets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters_InDistribution) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-if-ethernet-ext"
//	Path from parent:     "in-frames-128-255-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-128-255-octets"
func (n *Interface_Ethernet_Counters_InDistribution_InFrames_128_255OctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters_InDistribution",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-frames-128-255-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters_InDistribution).InFrames_128_255Octets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters_InDistribution) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InDistribution_InFrames_256_511OctetsPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-256-511-octets YANG schema element.
type Interface_Ethernet_Counters_InDistribution_InFrames_256_511OctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InDistribution_InFrames_256_511OctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-256-511-octets YANG schema element.
type Interface_Ethernet_Counters_InDistribution_InFrames_256_511OctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-if-ethernet-ext"
//	Path from parent:     "in-frames-256-511-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-256-511-octets"
func (n *Interface_Ethernet_Counters_InDistribution_InFrames_256_511OctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters_InDistribution",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-frames-256-511-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters_InDistribution).InFrames_256_511Octets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters_InDistribution) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-if-ethernet-ext"
//	Path from parent:     "in-frames-256-511-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-256-511-octets"
func (n *Interface_Ethernet_Counters_InDistribution_InFrames_256_511OctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters_InDistribution",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-frames-256-511-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters_InDistribution).InFrames_256_511Octets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters_InDistribution) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InDistribution_InFrames_512_1023OctetsPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-512-1023-octets YANG schema element.
type Interface_Ethernet_Counters_InDistribution_InFrames_512_1023OctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InDistribution_InFrames_512_1023OctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-512-1023-octets YANG schema element.
type Interface_Ethernet_Counters_InDistribution_InFrames_512_1023OctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-if-ethernet-ext"
//	Path from parent:     "in-frames-512-1023-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-512-1023-octets"
func (n *Interface_Ethernet_Counters_InDistribution_InFrames_512_1023OctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters_InDistribution",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-frames-512-1023-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters_InDistribution).InFrames_512_1023Octets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters_InDistribution) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-if-ethernet-ext"
//	Path from parent:     "in-frames-512-1023-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-512-1023-octets"
func (n *Interface_Ethernet_Counters_InDistribution_InFrames_512_1023OctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters_InDistribution",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-frames-512-1023-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters_InDistribution).InFrames_512_1023Octets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters_InDistribution) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InDistribution_InFrames_64OctetsPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-64-octets YANG schema element.
type Interface_Ethernet_Counters_InDistribution_InFrames_64OctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InDistribution_InFrames_64OctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-64-octets YANG schema element.
type Interface_Ethernet_Counters_InDistribution_InFrames_64OctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-if-ethernet-ext"
//	Path from parent:     "in-frames-64-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-64-octets"
func (n *Interface_Ethernet_Counters_InDistribution_InFrames_64OctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters_InDistribution",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-frames-64-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters_InDistribution).InFrames_64Octets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters_InDistribution) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-if-ethernet-ext"
//	Path from parent:     "in-frames-64-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-64-octets"
func (n *Interface_Ethernet_Counters_InDistribution_InFrames_64OctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters_InDistribution",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-frames-64-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters_InDistribution).InFrames_64Octets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters_InDistribution) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InDistribution_InFrames_65_127OctetsPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-65-127-octets YANG schema element.
type Interface_Ethernet_Counters_InDistribution_InFrames_65_127OctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_Counters_InDistribution_InFrames_65_127OctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-65-127-octets YANG schema element.
type Interface_Ethernet_Counters_InDistribution_InFrames_65_127OctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-if-ethernet-ext"
//	Path from parent:     "in-frames-65-127-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-65-127-octets"
func (n *Interface_Ethernet_Counters_InDistribution_InFrames_65_127OctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Ethernet_Counters_InDistribution",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-frames-65-127-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters_InDistribution).InFrames_65_127Octets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters_InDistribution) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-if-ethernet-ext"
//	Path from parent:     "in-frames-65-127-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-65-127-octets"
func (n *Interface_Ethernet_Counters_InDistribution_InFrames_65_127OctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Ethernet_Counters_InDistribution",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-frames-65-127-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Ethernet_Counters_InDistribution).InFrames_65_127Octets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_Counters_InDistribution) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_Counters_InDistributionPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-distribution YANG schema element.
type Interface_Ethernet_Counters_InDistributionPath struct {
	*ygnmi.NodePath
}

// Interface_Ethernet_Counters_InDistributionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-distribution YANG schema element.
type Interface_Ethernet_Counters_InDistributionPathAny struct {
	*ygnmi.NodePath
}

// InFrames_1024_1518Octets (leaf): Number of good and bad packets received that were
// between 1024 and 1518 bytes in length inclusive
// (excluding framing bits but including FCS bytes).
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-frames-1024-1518-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-1024-1518-octets"
func (n *Interface_Ethernet_Counters_InDistributionPath) InFrames_1024_1518Octets() *Interface_Ethernet_Counters_InDistribution_InFrames_1024_1518OctetsPath {
	ps := &Interface_Ethernet_Counters_InDistribution_InFrames_1024_1518OctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-frames-1024-1518-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFrames_1024_1518Octets (leaf): Number of good and bad packets received that were
// between 1024 and 1518 bytes in length inclusive
// (excluding framing bits but including FCS bytes).
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-frames-1024-1518-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-1024-1518-octets"
func (n *Interface_Ethernet_Counters_InDistributionPathAny) InFrames_1024_1518Octets() *Interface_Ethernet_Counters_InDistribution_InFrames_1024_1518OctetsPathAny {
	ps := &Interface_Ethernet_Counters_InDistribution_InFrames_1024_1518OctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-frames-1024-1518-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFrames_128_255Octets (leaf): Number of good and bad packets received that were
// between 128 and 255 bytes in length inclusive
// (excluding framing bits but including FCS bytes).
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-frames-128-255-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-128-255-octets"
func (n *Interface_Ethernet_Counters_InDistributionPath) InFrames_128_255Octets() *Interface_Ethernet_Counters_InDistribution_InFrames_128_255OctetsPath {
	ps := &Interface_Ethernet_Counters_InDistribution_InFrames_128_255OctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-frames-128-255-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFrames_128_255Octets (leaf): Number of good and bad packets received that were
// between 128 and 255 bytes in length inclusive
// (excluding framing bits but including FCS bytes).
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-frames-128-255-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-128-255-octets"
func (n *Interface_Ethernet_Counters_InDistributionPathAny) InFrames_128_255Octets() *Interface_Ethernet_Counters_InDistribution_InFrames_128_255OctetsPathAny {
	ps := &Interface_Ethernet_Counters_InDistribution_InFrames_128_255OctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-frames-128-255-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFrames_256_511Octets (leaf): Number of good and bad packets received that were
// between 256 and 511 bytes in length inclusive
// (excluding framing bits but including FCS bytes).
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-frames-256-511-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-256-511-octets"
func (n *Interface_Ethernet_Counters_InDistributionPath) InFrames_256_511Octets() *Interface_Ethernet_Counters_InDistribution_InFrames_256_511OctetsPath {
	ps := &Interface_Ethernet_Counters_InDistribution_InFrames_256_511OctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-frames-256-511-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFrames_256_511Octets (leaf): Number of good and bad packets received that were
// between 256 and 511 bytes in length inclusive
// (excluding framing bits but including FCS bytes).
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-frames-256-511-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-256-511-octets"
func (n *Interface_Ethernet_Counters_InDistributionPathAny) InFrames_256_511Octets() *Interface_Ethernet_Counters_InDistribution_InFrames_256_511OctetsPathAny {
	ps := &Interface_Ethernet_Counters_InDistribution_InFrames_256_511OctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-frames-256-511-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFrames_512_1023Octets (leaf): Number of good and bad packets received that were
// between 512 and 1023 bytes in length inclusive
// (excluding framing bits but including FCS bytes).
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-frames-512-1023-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-512-1023-octets"
func (n *Interface_Ethernet_Counters_InDistributionPath) InFrames_512_1023Octets() *Interface_Ethernet_Counters_InDistribution_InFrames_512_1023OctetsPath {
	ps := &Interface_Ethernet_Counters_InDistribution_InFrames_512_1023OctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-frames-512-1023-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFrames_512_1023Octets (leaf): Number of good and bad packets received that were
// between 512 and 1023 bytes in length inclusive
// (excluding framing bits but including FCS bytes).
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-frames-512-1023-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-512-1023-octets"
func (n *Interface_Ethernet_Counters_InDistributionPathAny) InFrames_512_1023Octets() *Interface_Ethernet_Counters_InDistribution_InFrames_512_1023OctetsPathAny {
	ps := &Interface_Ethernet_Counters_InDistribution_InFrames_512_1023OctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-frames-512-1023-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFrames_64Octets (leaf): Number of packets (including bad packets) received that
// were 64 bytes in length (excluding framing bits but
// including FCS bytes).
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-frames-64-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-64-octets"
func (n *Interface_Ethernet_Counters_InDistributionPath) InFrames_64Octets() *Interface_Ethernet_Counters_InDistribution_InFrames_64OctetsPath {
	ps := &Interface_Ethernet_Counters_InDistribution_InFrames_64OctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-frames-64-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFrames_64Octets (leaf): Number of packets (including bad packets) received that
// were 64 bytes in length (excluding framing bits but
// including FCS bytes).
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-frames-64-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-64-octets"
func (n *Interface_Ethernet_Counters_InDistributionPathAny) InFrames_64Octets() *Interface_Ethernet_Counters_InDistribution_InFrames_64OctetsPathAny {
	ps := &Interface_Ethernet_Counters_InDistribution_InFrames_64OctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-frames-64-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFrames_65_127Octets (leaf): Number of good and bad packets received that were
// between 65 and 127 bytes in length (excluding framing bits
// but including FCS bytes).
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-frames-65-127-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-65-127-octets"
func (n *Interface_Ethernet_Counters_InDistributionPath) InFrames_65_127Octets() *Interface_Ethernet_Counters_InDistribution_InFrames_65_127OctetsPath {
	ps := &Interface_Ethernet_Counters_InDistribution_InFrames_65_127OctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-frames-65-127-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFrames_65_127Octets (leaf): Number of good and bad packets received that were
// between 65 and 127 bytes in length (excluding framing bits
// but including FCS bytes).
//
//	Defining module:      "openconfig-if-ethernet-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-frames-65-127-octets"
//	Path from root:       "/interfaces/interface/ethernet/state/counters/in-distribution/in-frames-65-127-octets"
func (n *Interface_Ethernet_Counters_InDistributionPathAny) InFrames_65_127Octets() *Interface_Ethernet_Counters_InDistribution_InFrames_65_127OctetsPathAny {
	ps := &Interface_Ethernet_Counters_InDistribution_InFrames_65_127OctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-frames-65-127-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Ethernet_Counters_InDistributionPath) State() ygnmi.SingletonQuery[*oc.Interface_Ethernet_Counters_InDistribution] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Ethernet_Counters_InDistribution](
		"Interface_Ethernet_Counters_InDistribution",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Ethernet_Counters_InDistributionPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Ethernet_Counters_InDistribution] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Ethernet_Counters_InDistribution](
		"Interface_Ethernet_Counters_InDistribution",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_SwitchedVlan_AccessVlanPath represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/access-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlan_AccessVlanPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_SwitchedVlan_AccessVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/access-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlan_AccessVlanPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/access-vlan"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/state/access-vlan"
func (n *Interface_Ethernet_SwitchedVlan_AccessVlanPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Ethernet_SwitchedVlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "access-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Ethernet_SwitchedVlan).AccessVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/access-vlan"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/state/access-vlan"
func (n *Interface_Ethernet_SwitchedVlan_AccessVlanPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Ethernet_SwitchedVlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "access-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Ethernet_SwitchedVlan).AccessVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/access-vlan"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/config/access-vlan"
func (n *Interface_Ethernet_SwitchedVlan_AccessVlanPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Ethernet_SwitchedVlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "access-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Ethernet_SwitchedVlan).AccessVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/access-vlan"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/config/access-vlan"
func (n *Interface_Ethernet_SwitchedVlan_AccessVlanPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Ethernet_SwitchedVlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "access-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Ethernet_SwitchedVlan).AccessVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_SwitchedVlan_InterfaceModePath represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/interface-mode YANG schema element.
type Interface_Ethernet_SwitchedVlan_InterfaceModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_SwitchedVlan_InterfaceModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/interface-mode YANG schema element.
type Interface_Ethernet_SwitchedVlan_InterfaceModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/interface-mode"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/state/interface-mode"
func (n *Interface_Ethernet_SwitchedVlan_InterfaceModePath) State() ygnmi.SingletonQuery[oc.E_Vlan_VlanModeType] {
	return ygnmi.NewSingletonQuery[oc.E_Vlan_VlanModeType](
		"Interface_Ethernet_SwitchedVlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Vlan_VlanModeType, bool) {
			ret := gs.(*oc.Interface_Ethernet_SwitchedVlan).InterfaceMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/interface-mode"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/state/interface-mode"
func (n *Interface_Ethernet_SwitchedVlan_InterfaceModePathAny) State() ygnmi.WildcardQuery[oc.E_Vlan_VlanModeType] {
	return ygnmi.NewWildcardQuery[oc.E_Vlan_VlanModeType](
		"Interface_Ethernet_SwitchedVlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Vlan_VlanModeType, bool) {
			ret := gs.(*oc.Interface_Ethernet_SwitchedVlan).InterfaceMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/interface-mode"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/config/interface-mode"
func (n *Interface_Ethernet_SwitchedVlan_InterfaceModePath) Config() ygnmi.ConfigQuery[oc.E_Vlan_VlanModeType] {
	return ygnmi.NewConfigQuery[oc.E_Vlan_VlanModeType](
		"Interface_Ethernet_SwitchedVlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Vlan_VlanModeType, bool) {
			ret := gs.(*oc.Interface_Ethernet_SwitchedVlan).InterfaceMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/interface-mode"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/config/interface-mode"
func (n *Interface_Ethernet_SwitchedVlan_InterfaceModePathAny) Config() ygnmi.WildcardQuery[oc.E_Vlan_VlanModeType] {
	return ygnmi.NewWildcardQuery[oc.E_Vlan_VlanModeType](
		"Interface_Ethernet_SwitchedVlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Vlan_VlanModeType, bool) {
			ret := gs.(*oc.Interface_Ethernet_SwitchedVlan).InterfaceMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_SwitchedVlan_NativeVlanPath represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/native-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlan_NativeVlanPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_SwitchedVlan_NativeVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/native-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlan_NativeVlanPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/native-vlan"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/state/native-vlan"
func (n *Interface_Ethernet_SwitchedVlan_NativeVlanPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Ethernet_SwitchedVlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "native-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Ethernet_SwitchedVlan).NativeVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/native-vlan"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/state/native-vlan"
func (n *Interface_Ethernet_SwitchedVlan_NativeVlanPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Ethernet_SwitchedVlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "native-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Ethernet_SwitchedVlan).NativeVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/native-vlan"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/config/native-vlan"
func (n *Interface_Ethernet_SwitchedVlan_NativeVlanPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Ethernet_SwitchedVlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "native-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Ethernet_SwitchedVlan).NativeVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/native-vlan"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/config/native-vlan"
func (n *Interface_Ethernet_SwitchedVlan_NativeVlanPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Ethernet_SwitchedVlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "native-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Ethernet_SwitchedVlan).NativeVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_SwitchedVlan_TrunkVlansPath represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/trunk-vlans YANG schema element.
type Interface_Ethernet_SwitchedVlan_TrunkVlansPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_SwitchedVlan_TrunkVlansPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/trunk-vlans YANG schema element.
type Interface_Ethernet_SwitchedVlan_TrunkVlansPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/trunk-vlans"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/state/trunk-vlans"
func (n *Interface_Ethernet_SwitchedVlan_TrunkVlansPath) State() ygnmi.SingletonQuery[[]oc.Interface_Ethernet_SwitchedVlan_TrunkVlans_Union] {
	return ygnmi.NewSingletonQuery[[]oc.Interface_Ethernet_SwitchedVlan_TrunkVlans_Union](
		"Interface_Ethernet_SwitchedVlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "trunk-vlans"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.Interface_Ethernet_SwitchedVlan_TrunkVlans_Union, bool) {
			ret := gs.(*oc.Interface_Ethernet_SwitchedVlan).TrunkVlans
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/trunk-vlans"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/state/trunk-vlans"
func (n *Interface_Ethernet_SwitchedVlan_TrunkVlansPathAny) State() ygnmi.WildcardQuery[[]oc.Interface_Ethernet_SwitchedVlan_TrunkVlans_Union] {
	return ygnmi.NewWildcardQuery[[]oc.Interface_Ethernet_SwitchedVlan_TrunkVlans_Union](
		"Interface_Ethernet_SwitchedVlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "trunk-vlans"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.Interface_Ethernet_SwitchedVlan_TrunkVlans_Union, bool) {
			ret := gs.(*oc.Interface_Ethernet_SwitchedVlan).TrunkVlans
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/trunk-vlans"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/config/trunk-vlans"
func (n *Interface_Ethernet_SwitchedVlan_TrunkVlansPath) Config() ygnmi.ConfigQuery[[]oc.Interface_Ethernet_SwitchedVlan_TrunkVlans_Union] {
	return ygnmi.NewConfigQuery[[]oc.Interface_Ethernet_SwitchedVlan_TrunkVlans_Union](
		"Interface_Ethernet_SwitchedVlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "trunk-vlans"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.Interface_Ethernet_SwitchedVlan_TrunkVlans_Union, bool) {
			ret := gs.(*oc.Interface_Ethernet_SwitchedVlan).TrunkVlans
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/trunk-vlans"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/config/trunk-vlans"
func (n *Interface_Ethernet_SwitchedVlan_TrunkVlansPathAny) Config() ygnmi.WildcardQuery[[]oc.Interface_Ethernet_SwitchedVlan_TrunkVlans_Union] {
	return ygnmi.NewWildcardQuery[[]oc.Interface_Ethernet_SwitchedVlan_TrunkVlans_Union](
		"Interface_Ethernet_SwitchedVlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "trunk-vlans"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.Interface_Ethernet_SwitchedVlan_TrunkVlans_Union, bool) {
			ret := gs.(*oc.Interface_Ethernet_SwitchedVlan).TrunkVlans
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_SwitchedVlanPath represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlanPath struct {
	*ygnmi.NodePath
}

// Interface_Ethernet_SwitchedVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlanPathAny struct {
	*ygnmi.NodePath
}

// AccessVlan (leaf): Assign the access vlan to the access port.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/access-vlan"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/*/access-vlan"
func (n *Interface_Ethernet_SwitchedVlanPath) AccessVlan() *Interface_Ethernet_SwitchedVlan_AccessVlanPath {
	ps := &Interface_Ethernet_SwitchedVlan_AccessVlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "access-vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessVlan (leaf): Assign the access vlan to the access port.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/access-vlan"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/*/access-vlan"
func (n *Interface_Ethernet_SwitchedVlanPathAny) AccessVlan() *Interface_Ethernet_SwitchedVlan_AccessVlanPathAny {
	ps := &Interface_Ethernet_SwitchedVlan_AccessVlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "access-vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceMode (leaf): Set the interface to access or trunk mode for
// VLANs
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interface-mode"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/*/interface-mode"
func (n *Interface_Ethernet_SwitchedVlanPath) InterfaceMode() *Interface_Ethernet_SwitchedVlan_InterfaceModePath {
	ps := &Interface_Ethernet_SwitchedVlan_InterfaceModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceMode (leaf): Set the interface to access or trunk mode for
// VLANs
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interface-mode"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/*/interface-mode"
func (n *Interface_Ethernet_SwitchedVlanPathAny) InterfaceMode() *Interface_Ethernet_SwitchedVlan_InterfaceModePathAny {
	ps := &Interface_Ethernet_SwitchedVlan_InterfaceModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NativeVlan (leaf): Set the native VLAN id for untagged frames arriving on
// a trunk interface.  Tagged frames sent on an interface
// configured with a native VLAN should have their tags
// stripped prior to transmission. This configuration is only
// valid on a trunk interface.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/native-vlan"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/*/native-vlan"
func (n *Interface_Ethernet_SwitchedVlanPath) NativeVlan() *Interface_Ethernet_SwitchedVlan_NativeVlanPath {
	ps := &Interface_Ethernet_SwitchedVlan_NativeVlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "native-vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NativeVlan (leaf): Set the native VLAN id for untagged frames arriving on
// a trunk interface.  Tagged frames sent on an interface
// configured with a native VLAN should have their tags
// stripped prior to transmission. This configuration is only
// valid on a trunk interface.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/native-vlan"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/*/native-vlan"
func (n *Interface_Ethernet_SwitchedVlanPathAny) NativeVlan() *Interface_Ethernet_SwitchedVlan_NativeVlanPathAny {
	ps := &Interface_Ethernet_SwitchedVlan_NativeVlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "native-vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrunkVlans (leaf-list): Specify VLANs, or ranges thereof, that the interface may
// carry when in trunk mode.  If not specified, all VLANs are
// allowed on the interface. Ranges are specified in the form
// x..y, where x<y - ranges are assumed to be inclusive (such
// that the VLAN range is x <= range <= y.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/trunk-vlans"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/*/trunk-vlans"
func (n *Interface_Ethernet_SwitchedVlanPath) TrunkVlans() *Interface_Ethernet_SwitchedVlan_TrunkVlansPath {
	ps := &Interface_Ethernet_SwitchedVlan_TrunkVlansPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "trunk-vlans"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrunkVlans (leaf-list): Specify VLANs, or ranges thereof, that the interface may
// carry when in trunk mode.  If not specified, all VLANs are
// allowed on the interface. Ranges are specified in the form
// x..y, where x<y - ranges are assumed to be inclusive (such
// that the VLAN range is x <= range <= y.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/trunk-vlans"
//	Path from root:       "/interfaces/interface/ethernet/switched-vlan/*/trunk-vlans"
func (n *Interface_Ethernet_SwitchedVlanPathAny) TrunkVlans() *Interface_Ethernet_SwitchedVlan_TrunkVlansPathAny {
	ps := &Interface_Ethernet_SwitchedVlan_TrunkVlansPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "trunk-vlans"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Ethernet_SwitchedVlanPath) State() ygnmi.SingletonQuery[*oc.Interface_Ethernet_SwitchedVlan] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Ethernet_SwitchedVlan](
		"Interface_Ethernet_SwitchedVlan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Ethernet_SwitchedVlanPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Ethernet_SwitchedVlan] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Ethernet_SwitchedVlan](
		"Interface_Ethernet_SwitchedVlan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Ethernet_SwitchedVlanPath) Config() ygnmi.ConfigQuery[*oc.Interface_Ethernet_SwitchedVlan] {
	return ygnmi.NewConfigQuery[*oc.Interface_Ethernet_SwitchedVlan](
		"Interface_Ethernet_SwitchedVlan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Ethernet_SwitchedVlanPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Ethernet_SwitchedVlan] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Ethernet_SwitchedVlan](
		"Interface_Ethernet_SwitchedVlan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_HoldTime_DownPath represents the /openconfig-interfaces/interfaces/interface/hold-time/state/down YANG schema element.
type Interface_HoldTime_DownPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_HoldTime_DownPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/hold-time/state/down YANG schema element.
type Interface_HoldTime_DownPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/down"
//	Path from root:       "/interfaces/interface/hold-time/state/down"
func (n *Interface_HoldTime_DownPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_HoldTime",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "down"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_HoldTime).Down
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_HoldTime) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/down"
//	Path from root:       "/interfaces/interface/hold-time/state/down"
func (n *Interface_HoldTime_DownPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_HoldTime",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "down"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_HoldTime).Down
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_HoldTime) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/down"
//	Path from root:       "/interfaces/interface/hold-time/config/down"
func (n *Interface_HoldTime_DownPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_HoldTime",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "down"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_HoldTime).Down
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_HoldTime) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/down"
//	Path from root:       "/interfaces/interface/hold-time/config/down"
func (n *Interface_HoldTime_DownPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_HoldTime",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "down"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_HoldTime).Down
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_HoldTime) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_HoldTime_UpPath represents the /openconfig-interfaces/interfaces/interface/hold-time/state/up YANG schema element.
type Interface_HoldTime_UpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_HoldTime_UpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/hold-time/state/up YANG schema element.
type Interface_HoldTime_UpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/up"
//	Path from root:       "/interfaces/interface/hold-time/state/up"
func (n *Interface_HoldTime_UpPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_HoldTime",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_HoldTime).Up
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_HoldTime) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/up"
//	Path from root:       "/interfaces/interface/hold-time/state/up"
func (n *Interface_HoldTime_UpPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_HoldTime",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_HoldTime).Up
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_HoldTime) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/up"
//	Path from root:       "/interfaces/interface/hold-time/config/up"
func (n *Interface_HoldTime_UpPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_HoldTime",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "up"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_HoldTime).Up
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_HoldTime) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/up"
//	Path from root:       "/interfaces/interface/hold-time/config/up"
func (n *Interface_HoldTime_UpPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_HoldTime",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "up"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_HoldTime).Up
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_HoldTime) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_HoldTimePath represents the /openconfig-interfaces/interfaces/interface/hold-time YANG schema element.
type Interface_HoldTimePath struct {
	*ygnmi.NodePath
}

// Interface_HoldTimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/hold-time YANG schema element.
type Interface_HoldTimePathAny struct {
	*ygnmi.NodePath
}

// Down (leaf): Dampens advertisement when the interface transitions from
// up to down.  A zero value means dampening is turned off,
// i.e., immediate notification.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/down"
//	Path from root:       "/interfaces/interface/hold-time/*/down"
func (n *Interface_HoldTimePath) Down() *Interface_HoldTime_DownPath {
	ps := &Interface_HoldTime_DownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "down"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Down (leaf): Dampens advertisement when the interface transitions from
// up to down.  A zero value means dampening is turned off,
// i.e., immediate notification.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/down"
//	Path from root:       "/interfaces/interface/hold-time/*/down"
func (n *Interface_HoldTimePathAny) Down() *Interface_HoldTime_DownPathAny {
	ps := &Interface_HoldTime_DownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "down"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Up (leaf): Dampens advertisement when the interface
// transitions from down to up.  A zero value means dampening
// is turned off, i.e., immediate notification.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/up"
//	Path from root:       "/interfaces/interface/hold-time/*/up"
func (n *Interface_HoldTimePath) Up() *Interface_HoldTime_UpPath {
	ps := &Interface_HoldTime_UpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "up"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Up (leaf): Dampens advertisement when the interface
// transitions from down to up.  A zero value means dampening
// is turned off, i.e., immediate notification.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/up"
//	Path from root:       "/interfaces/interface/hold-time/*/up"
func (n *Interface_HoldTimePathAny) Up() *Interface_HoldTime_UpPathAny {
	ps := &Interface_HoldTime_UpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "up"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_HoldTimePath) State() ygnmi.SingletonQuery[*oc.Interface_HoldTime] {
	return ygnmi.NewSingletonQuery[*oc.Interface_HoldTime](
		"Interface_HoldTime",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_HoldTimePathAny) State() ygnmi.WildcardQuery[*oc.Interface_HoldTime] {
	return ygnmi.NewWildcardQuery[*oc.Interface_HoldTime](
		"Interface_HoldTime",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_HoldTimePath) Config() ygnmi.ConfigQuery[*oc.Interface_HoldTime] {
	return ygnmi.NewConfigQuery[*oc.Interface_HoldTime](
		"Interface_HoldTime",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_HoldTimePathAny) Config() ygnmi.WildcardQuery[*oc.Interface_HoldTime] {
	return ygnmi.NewWildcardQuery[*oc.Interface_HoldTime](
		"Interface_HoldTime",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_PenaltyBasedAied_DecayHalfLifePath represents the /openconfig-interfaces/interfaces/interface/penalty-based-aied/state/decay-half-life YANG schema element.
type Interface_PenaltyBasedAied_DecayHalfLifePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_PenaltyBasedAied_DecayHalfLifePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/penalty-based-aied/state/decay-half-life YANG schema element.
type Interface_PenaltyBasedAied_DecayHalfLifePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/decay-half-life"
//	Path from root:       "/interfaces/interface/penalty-based-aied/state/decay-half-life"
func (n *Interface_PenaltyBasedAied_DecayHalfLifePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_PenaltyBasedAied",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decay-half-life"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_PenaltyBasedAied).DecayHalfLife
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_PenaltyBasedAied) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/decay-half-life"
//	Path from root:       "/interfaces/interface/penalty-based-aied/state/decay-half-life"
func (n *Interface_PenaltyBasedAied_DecayHalfLifePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_PenaltyBasedAied",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decay-half-life"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_PenaltyBasedAied).DecayHalfLife
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_PenaltyBasedAied) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/decay-half-life"
//	Path from root:       "/interfaces/interface/penalty-based-aied/config/decay-half-life"
func (n *Interface_PenaltyBasedAied_DecayHalfLifePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_PenaltyBasedAied",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decay-half-life"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_PenaltyBasedAied).DecayHalfLife
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_PenaltyBasedAied) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/decay-half-life"
//	Path from root:       "/interfaces/interface/penalty-based-aied/config/decay-half-life"
func (n *Interface_PenaltyBasedAied_DecayHalfLifePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_PenaltyBasedAied",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decay-half-life"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_PenaltyBasedAied).DecayHalfLife
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_PenaltyBasedAied) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_PenaltyBasedAied_FlapPenaltyPath represents the /openconfig-interfaces/interfaces/interface/penalty-based-aied/state/flap-penalty YANG schema element.
type Interface_PenaltyBasedAied_FlapPenaltyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_PenaltyBasedAied_FlapPenaltyPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/penalty-based-aied/state/flap-penalty YANG schema element.
type Interface_PenaltyBasedAied_FlapPenaltyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/flap-penalty"
//	Path from root:       "/interfaces/interface/penalty-based-aied/state/flap-penalty"
func (n *Interface_PenaltyBasedAied_FlapPenaltyPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_PenaltyBasedAied",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flap-penalty"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_PenaltyBasedAied).FlapPenalty
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_PenaltyBasedAied) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/flap-penalty"
//	Path from root:       "/interfaces/interface/penalty-based-aied/state/flap-penalty"
func (n *Interface_PenaltyBasedAied_FlapPenaltyPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_PenaltyBasedAied",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flap-penalty"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_PenaltyBasedAied).FlapPenalty
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_PenaltyBasedAied) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/flap-penalty"
//	Path from root:       "/interfaces/interface/penalty-based-aied/config/flap-penalty"
func (n *Interface_PenaltyBasedAied_FlapPenaltyPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_PenaltyBasedAied",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "flap-penalty"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_PenaltyBasedAied).FlapPenalty
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_PenaltyBasedAied) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/flap-penalty"
//	Path from root:       "/interfaces/interface/penalty-based-aied/config/flap-penalty"
func (n *Interface_PenaltyBasedAied_FlapPenaltyPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_PenaltyBasedAied",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "flap-penalty"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_PenaltyBasedAied).FlapPenalty
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_PenaltyBasedAied) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_PenaltyBasedAied_MaxSuppressTimePath represents the /openconfig-interfaces/interfaces/interface/penalty-based-aied/state/max-suppress-time YANG schema element.
type Interface_PenaltyBasedAied_MaxSuppressTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_PenaltyBasedAied_MaxSuppressTimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/penalty-based-aied/state/max-suppress-time YANG schema element.
type Interface_PenaltyBasedAied_MaxSuppressTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/max-suppress-time"
//	Path from root:       "/interfaces/interface/penalty-based-aied/state/max-suppress-time"
func (n *Interface_PenaltyBasedAied_MaxSuppressTimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_PenaltyBasedAied",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-suppress-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_PenaltyBasedAied).MaxSuppressTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_PenaltyBasedAied) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/max-suppress-time"
//	Path from root:       "/interfaces/interface/penalty-based-aied/state/max-suppress-time"
func (n *Interface_PenaltyBasedAied_MaxSuppressTimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_PenaltyBasedAied",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-suppress-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_PenaltyBasedAied).MaxSuppressTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_PenaltyBasedAied) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/max-suppress-time"
//	Path from root:       "/interfaces/interface/penalty-based-aied/config/max-suppress-time"
func (n *Interface_PenaltyBasedAied_MaxSuppressTimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_PenaltyBasedAied",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-suppress-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_PenaltyBasedAied).MaxSuppressTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_PenaltyBasedAied) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/max-suppress-time"
//	Path from root:       "/interfaces/interface/penalty-based-aied/config/max-suppress-time"
func (n *Interface_PenaltyBasedAied_MaxSuppressTimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_PenaltyBasedAied",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-suppress-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_PenaltyBasedAied).MaxSuppressTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_PenaltyBasedAied) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_PenaltyBasedAied_ReuseThresholdPath represents the /openconfig-interfaces/interfaces/interface/penalty-based-aied/state/reuse-threshold YANG schema element.
type Interface_PenaltyBasedAied_ReuseThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_PenaltyBasedAied_ReuseThresholdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/penalty-based-aied/state/reuse-threshold YANG schema element.
type Interface_PenaltyBasedAied_ReuseThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/reuse-threshold"
//	Path from root:       "/interfaces/interface/penalty-based-aied/state/reuse-threshold"
func (n *Interface_PenaltyBasedAied_ReuseThresholdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_PenaltyBasedAied",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reuse-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_PenaltyBasedAied).ReuseThreshold
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_PenaltyBasedAied) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/reuse-threshold"
//	Path from root:       "/interfaces/interface/penalty-based-aied/state/reuse-threshold"
func (n *Interface_PenaltyBasedAied_ReuseThresholdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_PenaltyBasedAied",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reuse-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_PenaltyBasedAied).ReuseThreshold
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_PenaltyBasedAied) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/reuse-threshold"
//	Path from root:       "/interfaces/interface/penalty-based-aied/config/reuse-threshold"
func (n *Interface_PenaltyBasedAied_ReuseThresholdPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_PenaltyBasedAied",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "reuse-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_PenaltyBasedAied).ReuseThreshold
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_PenaltyBasedAied) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/reuse-threshold"
//	Path from root:       "/interfaces/interface/penalty-based-aied/config/reuse-threshold"
func (n *Interface_PenaltyBasedAied_ReuseThresholdPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_PenaltyBasedAied",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "reuse-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_PenaltyBasedAied).ReuseThreshold
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_PenaltyBasedAied) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_PenaltyBasedAied_SuppressThresholdPath represents the /openconfig-interfaces/interfaces/interface/penalty-based-aied/state/suppress-threshold YANG schema element.
type Interface_PenaltyBasedAied_SuppressThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_PenaltyBasedAied_SuppressThresholdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/penalty-based-aied/state/suppress-threshold YANG schema element.
type Interface_PenaltyBasedAied_SuppressThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/suppress-threshold"
//	Path from root:       "/interfaces/interface/penalty-based-aied/state/suppress-threshold"
func (n *Interface_PenaltyBasedAied_SuppressThresholdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_PenaltyBasedAied",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "suppress-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_PenaltyBasedAied).SuppressThreshold
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_PenaltyBasedAied) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/suppress-threshold"
//	Path from root:       "/interfaces/interface/penalty-based-aied/state/suppress-threshold"
func (n *Interface_PenaltyBasedAied_SuppressThresholdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_PenaltyBasedAied",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "suppress-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_PenaltyBasedAied).SuppressThreshold
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_PenaltyBasedAied) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/suppress-threshold"
//	Path from root:       "/interfaces/interface/penalty-based-aied/config/suppress-threshold"
func (n *Interface_PenaltyBasedAied_SuppressThresholdPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_PenaltyBasedAied",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "suppress-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_PenaltyBasedAied).SuppressThreshold
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_PenaltyBasedAied) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/suppress-threshold"
//	Path from root:       "/interfaces/interface/penalty-based-aied/config/suppress-threshold"
func (n *Interface_PenaltyBasedAied_SuppressThresholdPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_PenaltyBasedAied",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "suppress-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_PenaltyBasedAied).SuppressThreshold
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_PenaltyBasedAied) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_PenaltyBasedAiedPath represents the /openconfig-interfaces/interfaces/interface/penalty-based-aied YANG schema element.
type Interface_PenaltyBasedAiedPath struct {
	*ygnmi.NodePath
}

// Interface_PenaltyBasedAiedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/penalty-based-aied YANG schema element.
type Interface_PenaltyBasedAiedPathAny struct {
	*ygnmi.NodePath
}

// DecayHalfLife (leaf): The amount of time after which an interface's penalty is decreased by half. Decay-half-time should not be more than max-suppress-time.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/decay-half-life"
//	Path from root:       "/interfaces/interface/penalty-based-aied/*/decay-half-life"
func (n *Interface_PenaltyBasedAiedPath) DecayHalfLife() *Interface_PenaltyBasedAied_DecayHalfLifePath {
	ps := &Interface_PenaltyBasedAied_DecayHalfLifePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decay-half-life"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DecayHalfLife (leaf): The amount of time after which an interface's penalty is decreased by half. Decay-half-time should not be more than max-suppress-time.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/decay-half-life"
//	Path from root:       "/interfaces/interface/penalty-based-aied/*/decay-half-life"
func (n *Interface_PenaltyBasedAiedPathAny) DecayHalfLife() *Interface_PenaltyBasedAied_DecayHalfLifePathAny {
	ps := &Interface_PenaltyBasedAied_DecayHalfLifePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decay-half-life"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FlapPenalty (leaf): A penalty that each down event costs. A value of 0 indicates the config is disabled.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/flap-penalty"
//	Path from root:       "/interfaces/interface/penalty-based-aied/*/flap-penalty"
func (n *Interface_PenaltyBasedAiedPath) FlapPenalty() *Interface_PenaltyBasedAied_FlapPenaltyPath {
	ps := &Interface_PenaltyBasedAied_FlapPenaltyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "flap-penalty"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FlapPenalty (leaf): A penalty that each down event costs. A value of 0 indicates the config is disabled.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/flap-penalty"
//	Path from root:       "/interfaces/interface/penalty-based-aied/*/flap-penalty"
func (n *Interface_PenaltyBasedAiedPathAny) FlapPenalty() *Interface_PenaltyBasedAied_FlapPenaltyPathAny {
	ps := &Interface_PenaltyBasedAied_FlapPenaltyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "flap-penalty"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxSuppressTime (leaf): Maximum time an interface can remain damped since the last link down event no matter how unstable it has been prior to this period of stability. In a damped state, the interface's state change will not be advertised.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/max-suppress-time"
//	Path from root:       "/interfaces/interface/penalty-based-aied/*/max-suppress-time"
func (n *Interface_PenaltyBasedAiedPath) MaxSuppressTime() *Interface_PenaltyBasedAied_MaxSuppressTimePath {
	ps := &Interface_PenaltyBasedAied_MaxSuppressTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-suppress-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxSuppressTime (leaf): Maximum time an interface can remain damped since the last link down event no matter how unstable it has been prior to this period of stability. In a damped state, the interface's state change will not be advertised.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/max-suppress-time"
//	Path from root:       "/interfaces/interface/penalty-based-aied/*/max-suppress-time"
func (n *Interface_PenaltyBasedAiedPathAny) MaxSuppressTime() *Interface_PenaltyBasedAied_MaxSuppressTimePathAny {
	ps := &Interface_PenaltyBasedAied_MaxSuppressTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-suppress-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReuseThreshold (leaf): When the accumulated penalty decreases to this reuse threshold, the interface is not damped anymore. Interface state changes are advertised to applications. A value of 0 indicates config is disabled.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/reuse-threshold"
//	Path from root:       "/interfaces/interface/penalty-based-aied/*/reuse-threshold"
func (n *Interface_PenaltyBasedAiedPath) ReuseThreshold() *Interface_PenaltyBasedAied_ReuseThresholdPath {
	ps := &Interface_PenaltyBasedAied_ReuseThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "reuse-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReuseThreshold (leaf): When the accumulated penalty decreases to this reuse threshold, the interface is not damped anymore. Interface state changes are advertised to applications. A value of 0 indicates config is disabled.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/reuse-threshold"
//	Path from root:       "/interfaces/interface/penalty-based-aied/*/reuse-threshold"
func (n *Interface_PenaltyBasedAiedPathAny) ReuseThreshold() *Interface_PenaltyBasedAied_ReuseThresholdPathAny {
	ps := &Interface_PenaltyBasedAied_ReuseThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "reuse-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SuppressThreshold (leaf): The accumulated penalty that triggers the damping of an interface. A value of 0 indicates config is disabled.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/suppress-threshold"
//	Path from root:       "/interfaces/interface/penalty-based-aied/*/suppress-threshold"
func (n *Interface_PenaltyBasedAiedPath) SuppressThreshold() *Interface_PenaltyBasedAied_SuppressThresholdPath {
	ps := &Interface_PenaltyBasedAied_SuppressThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "suppress-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SuppressThreshold (leaf): The accumulated penalty that triggers the damping of an interface. A value of 0 indicates config is disabled.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/suppress-threshold"
//	Path from root:       "/interfaces/interface/penalty-based-aied/*/suppress-threshold"
func (n *Interface_PenaltyBasedAiedPathAny) SuppressThreshold() *Interface_PenaltyBasedAied_SuppressThresholdPathAny {
	ps := &Interface_PenaltyBasedAied_SuppressThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "suppress-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_PenaltyBasedAiedPath) State() ygnmi.SingletonQuery[*oc.Interface_PenaltyBasedAied] {
	return ygnmi.NewSingletonQuery[*oc.Interface_PenaltyBasedAied](
		"Interface_PenaltyBasedAied",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_PenaltyBasedAiedPathAny) State() ygnmi.WildcardQuery[*oc.Interface_PenaltyBasedAied] {
	return ygnmi.NewWildcardQuery[*oc.Interface_PenaltyBasedAied](
		"Interface_PenaltyBasedAied",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_PenaltyBasedAiedPath) Config() ygnmi.ConfigQuery[*oc.Interface_PenaltyBasedAied] {
	return ygnmi.NewConfigQuery[*oc.Interface_PenaltyBasedAied](
		"Interface_PenaltyBasedAied",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_PenaltyBasedAiedPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_PenaltyBasedAied] {
	return ygnmi.NewWildcardQuery[*oc.Interface_PenaltyBasedAied](
		"Interface_PenaltyBasedAied",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Rates_InBitsRatePath represents the /openconfig-interfaces/interfaces/interface/rates/state/in-bits-rate YANG schema element.
type Interface_Rates_InBitsRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Rates_InBitsRatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/rates/state/in-bits-rate YANG schema element.
type Interface_Rates_InBitsRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-if-rates"
//	Path from parent:     "state/in-bits-rate"
//	Path from root:       "/interfaces/interface/rates/state/in-bits-rate"
func (n *Interface_Rates_InBitsRatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Rates",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bits-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Rates).InBitsRate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Rates) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-if-rates"
//	Path from parent:     "state/in-bits-rate"
//	Path from root:       "/interfaces/interface/rates/state/in-bits-rate"
func (n *Interface_Rates_InBitsRatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Rates",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bits-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Rates).InBitsRate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Rates) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Rates_InPktsRatePath represents the /openconfig-interfaces/interfaces/interface/rates/state/in-pkts-rate YANG schema element.
type Interface_Rates_InPktsRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Rates_InPktsRatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/rates/state/in-pkts-rate YANG schema element.
type Interface_Rates_InPktsRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-if-rates"
//	Path from parent:     "state/in-pkts-rate"
//	Path from root:       "/interfaces/interface/rates/state/in-pkts-rate"
func (n *Interface_Rates_InPktsRatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Rates",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pkts-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Rates).InPktsRate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Rates) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-if-rates"
//	Path from parent:     "state/in-pkts-rate"
//	Path from root:       "/interfaces/interface/rates/state/in-pkts-rate"
func (n *Interface_Rates_InPktsRatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Rates",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pkts-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Rates).InPktsRate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Rates) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Rates_LoadIntervalPath represents the /openconfig-interfaces/interfaces/interface/rates/state/load-interval YANG schema element.
type Interface_Rates_LoadIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Rates_LoadIntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/rates/state/load-interval YANG schema element.
type Interface_Rates_LoadIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-if-rates"
//	Path from parent:     "state/load-interval"
//	Path from root:       "/interfaces/interface/rates/state/load-interval"
func (n *Interface_Rates_LoadIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Rates",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "load-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Rates).LoadInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Rates) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-if-rates"
//	Path from parent:     "state/load-interval"
//	Path from root:       "/interfaces/interface/rates/state/load-interval"
func (n *Interface_Rates_LoadIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Rates",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "load-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Rates).LoadInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Rates) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-if-rates"
//	Path from parent:     "config/load-interval"
//	Path from root:       "/interfaces/interface/rates/config/load-interval"
func (n *Interface_Rates_LoadIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Rates",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "load-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Rates).LoadInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Rates) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-if-rates"
//	Path from parent:     "config/load-interval"
//	Path from root:       "/interfaces/interface/rates/config/load-interval"
func (n *Interface_Rates_LoadIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Rates",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "load-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Rates).LoadInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Rates) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Rates_OutBitsRatePath represents the /openconfig-interfaces/interfaces/interface/rates/state/out-bits-rate YANG schema element.
type Interface_Rates_OutBitsRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Rates_OutBitsRatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/rates/state/out-bits-rate YANG schema element.
type Interface_Rates_OutBitsRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-if-rates"
//	Path from parent:     "state/out-bits-rate"
//	Path from root:       "/interfaces/interface/rates/state/out-bits-rate"
func (n *Interface_Rates_OutBitsRatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Rates",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bits-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Rates).OutBitsRate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Rates) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-if-rates"
//	Path from parent:     "state/out-bits-rate"
//	Path from root:       "/interfaces/interface/rates/state/out-bits-rate"
func (n *Interface_Rates_OutBitsRatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Rates",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bits-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Rates).OutBitsRate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Rates) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Rates_OutPktsRatePath represents the /openconfig-interfaces/interfaces/interface/rates/state/out-pkts-rate YANG schema element.
type Interface_Rates_OutPktsRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Rates_OutPktsRatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/rates/state/out-pkts-rate YANG schema element.
type Interface_Rates_OutPktsRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-if-rates"
//	Path from parent:     "state/out-pkts-rate"
//	Path from root:       "/interfaces/interface/rates/state/out-pkts-rate"
func (n *Interface_Rates_OutPktsRatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Rates",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-pkts-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Rates).OutPktsRate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Rates) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-if-rates"
//	Path from parent:     "state/out-pkts-rate"
//	Path from root:       "/interfaces/interface/rates/state/out-pkts-rate"
func (n *Interface_Rates_OutPktsRatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Rates",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-pkts-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Rates).OutPktsRate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Rates) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RatesPath represents the /openconfig-interfaces/interfaces/interface/rates YANG schema element.
type Interface_RatesPath struct {
	*ygnmi.NodePath
}

// Interface_RatesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/rates YANG schema element.
type Interface_RatesPathAny struct {
	*ygnmi.NodePath
}

// InBitsRate (leaf): The calculated received rate of the interface, measured in bits
// per second.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/in-bits-rate"
//	Path from root:       "/interfaces/interface/rates/state/in-bits-rate"
func (n *Interface_RatesPath) InBitsRate() *Interface_Rates_InBitsRatePath {
	ps := &Interface_Rates_InBitsRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bits-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBitsRate (leaf): The calculated received rate of the interface, measured in bits
// per second.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/in-bits-rate"
//	Path from root:       "/interfaces/interface/rates/state/in-bits-rate"
func (n *Interface_RatesPathAny) InBitsRate() *Interface_Rates_InBitsRatePathAny {
	ps := &Interface_Rates_InBitsRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bits-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPktsRate (leaf): The calculated received rate of the interface, measured in packets
// per second.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/in-pkts-rate"
//	Path from root:       "/interfaces/interface/rates/state/in-pkts-rate"
func (n *Interface_RatesPath) InPktsRate() *Interface_Rates_InPktsRatePath {
	ps := &Interface_Rates_InPktsRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pkts-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPktsRate (leaf): The calculated received rate of the interface, measured in packets
// per second.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/in-pkts-rate"
//	Path from root:       "/interfaces/interface/rates/state/in-pkts-rate"
func (n *Interface_RatesPathAny) InPktsRate() *Interface_Rates_InPktsRatePathAny {
	ps := &Interface_Rates_InPktsRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pkts-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LoadInterval (leaf): The interval of interface rates calculation in seconds
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/load-interval"
//	Path from root:       "/interfaces/interface/rates/*/load-interval"
func (n *Interface_RatesPath) LoadInterval() *Interface_Rates_LoadIntervalPath {
	ps := &Interface_Rates_LoadIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "load-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LoadInterval (leaf): The interval of interface rates calculation in seconds
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/load-interval"
//	Path from root:       "/interfaces/interface/rates/*/load-interval"
func (n *Interface_RatesPathAny) LoadInterval() *Interface_Rates_LoadIntervalPathAny {
	ps := &Interface_Rates_LoadIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "load-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBitsRate (leaf): The calculated transmitted rate of the interface, measured in bits
// per second.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/out-bits-rate"
//	Path from root:       "/interfaces/interface/rates/state/out-bits-rate"
func (n *Interface_RatesPath) OutBitsRate() *Interface_Rates_OutBitsRatePath {
	ps := &Interface_Rates_OutBitsRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bits-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBitsRate (leaf): The calculated transmitted rate of the interface, measured in bits
// per second.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/out-bits-rate"
//	Path from root:       "/interfaces/interface/rates/state/out-bits-rate"
func (n *Interface_RatesPathAny) OutBitsRate() *Interface_Rates_OutBitsRatePathAny {
	ps := &Interface_Rates_OutBitsRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bits-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPktsRate (leaf): The calculated transmitted rate of the interface, measured in packets
// per second.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/out-pkts-rate"
//	Path from root:       "/interfaces/interface/rates/state/out-pkts-rate"
func (n *Interface_RatesPath) OutPktsRate() *Interface_Rates_OutPktsRatePath {
	ps := &Interface_Rates_OutPktsRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-pkts-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPktsRate (leaf): The calculated transmitted rate of the interface, measured in packets
// per second.
//
//	Defining module:      "openconfig-if-rates"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/out-pkts-rate"
//	Path from root:       "/interfaces/interface/rates/state/out-pkts-rate"
func (n *Interface_RatesPathAny) OutPktsRate() *Interface_Rates_OutPktsRatePathAny {
	ps := &Interface_Rates_OutPktsRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-pkts-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RatesPath) State() ygnmi.SingletonQuery[*oc.Interface_Rates] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Rates](
		"Interface_Rates",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RatesPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Rates] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Rates](
		"Interface_Rates",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RatesPath) Config() ygnmi.ConfigQuery[*oc.Interface_Rates] {
	return ygnmi.NewConfigQuery[*oc.Interface_Rates](
		"Interface_Rates",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RatesPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Rates] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Rates](
		"Interface_Rates",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_VlanPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/state/vlan YANG schema element.
type Interface_RoutedVlan_VlanPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_VlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/state/vlan YANG schema element.
type Interface_RoutedVlan_VlanPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan"
//	Path from root:       "/interfaces/interface/routed-vlan/state/vlan"
func (n *Interface_RoutedVlan_VlanPath) State() ygnmi.SingletonQuery[oc.Interface_RoutedVlan_Vlan_Union] {
	return ygnmi.NewSingletonQuery[oc.Interface_RoutedVlan_Vlan_Union](
		"Interface_RoutedVlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Interface_RoutedVlan_Vlan_Union, bool) {
			ret := gs.(*oc.Interface_RoutedVlan).Vlan
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan"
//	Path from root:       "/interfaces/interface/routed-vlan/state/vlan"
func (n *Interface_RoutedVlan_VlanPathAny) State() ygnmi.WildcardQuery[oc.Interface_RoutedVlan_Vlan_Union] {
	return ygnmi.NewWildcardQuery[oc.Interface_RoutedVlan_Vlan_Union](
		"Interface_RoutedVlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Interface_RoutedVlan_Vlan_Union, bool) {
			ret := gs.(*oc.Interface_RoutedVlan).Vlan
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan"
//	Path from root:       "/interfaces/interface/routed-vlan/config/vlan"
func (n *Interface_RoutedVlan_VlanPath) Config() ygnmi.ConfigQuery[oc.Interface_RoutedVlan_Vlan_Union] {
	return ygnmi.NewConfigQuery[oc.Interface_RoutedVlan_Vlan_Union](
		"Interface_RoutedVlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Interface_RoutedVlan_Vlan_Union, bool) {
			ret := gs.(*oc.Interface_RoutedVlan).Vlan
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan"
//	Path from root:       "/interfaces/interface/routed-vlan/config/vlan"
func (n *Interface_RoutedVlan_VlanPathAny) Config() ygnmi.WildcardQuery[oc.Interface_RoutedVlan_Vlan_Union] {
	return ygnmi.NewWildcardQuery[oc.Interface_RoutedVlan_Vlan_Union](
		"Interface_RoutedVlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Interface_RoutedVlan_Vlan_Union, bool) {
			ret := gs.(*oc.Interface_RoutedVlan).Vlan
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlanPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan YANG schema element.
type Interface_RoutedVlanPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan YANG schema element.
type Interface_RoutedVlanPathAny struct {
	*ygnmi.NodePath
}

// Ipv4 (container): Parameters for the IPv4 address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "ipv4"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4"
func (n *Interface_RoutedVlanPath) Ipv4() *Interface_RoutedVlan_Ipv4Path {
	ps := &Interface_RoutedVlan_Ipv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4 (container): Parameters for the IPv4 address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "ipv4"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4"
func (n *Interface_RoutedVlanPathAny) Ipv4() *Interface_RoutedVlan_Ipv4PathAny {
	ps := &Interface_RoutedVlan_Ipv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6 (container): Parameters for the IPv6 address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "ipv6"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6"
func (n *Interface_RoutedVlanPath) Ipv6() *Interface_RoutedVlan_Ipv6Path {
	ps := &Interface_RoutedVlan_Ipv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6 (container): Parameters for the IPv6 address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "ipv6"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6"
func (n *Interface_RoutedVlanPathAny) Ipv6() *Interface_RoutedVlan_Ipv6PathAny {
	ps := &Interface_RoutedVlan_Ipv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vlan (leaf): References the VLAN for which this IP interface
// provides routing services -- similar to a switch virtual
// interface (SVI), or integrated routing and bridging interface
// (IRB) in some implementations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan"
//	Path from root:       "/interfaces/interface/routed-vlan/*/vlan"
func (n *Interface_RoutedVlanPath) Vlan() *Interface_RoutedVlan_VlanPath {
	ps := &Interface_RoutedVlan_VlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vlan (leaf): References the VLAN for which this IP interface
// provides routing services -- similar to a switch virtual
// interface (SVI), or integrated routing and bridging interface
// (IRB) in some implementations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan"
//	Path from root:       "/interfaces/interface/routed-vlan/*/vlan"
func (n *Interface_RoutedVlanPathAny) Vlan() *Interface_RoutedVlan_VlanPathAny {
	ps := &Interface_RoutedVlan_VlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlanPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan](
		"Interface_RoutedVlan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlanPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan](
		"Interface_RoutedVlan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlanPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan](
		"Interface_RoutedVlan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlanPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan](
		"Interface_RoutedVlan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_DhcpClientPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/dhcp-client YANG schema element.
type Interface_RoutedVlan_Ipv4_DhcpClientPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_DhcpClientPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/dhcp-client YANG schema element.
type Interface_RoutedVlan_Ipv4_DhcpClientPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/dhcp-client"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/dhcp-client"
func (n *Interface_RoutedVlan_Ipv4_DhcpClientPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/dhcp-client"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/dhcp-client"
func (n *Interface_RoutedVlan_Ipv4_DhcpClientPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/dhcp-client"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/config/dhcp-client"
func (n *Interface_RoutedVlan_Ipv4_DhcpClientPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/dhcp-client"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/config/dhcp-client"
func (n *Interface_RoutedVlan_Ipv4_DhcpClientPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv4_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv4_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/enabled"
func (n *Interface_RoutedVlan_Ipv4_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/enabled"
func (n *Interface_RoutedVlan_Ipv4_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/config/enabled"
func (n *Interface_RoutedVlan_Ipv4_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/config/enabled"
func (n *Interface_RoutedVlan_Ipv4_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_GratuitousArpAcceptedPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/gratuitous-arp-accepted YANG schema element.
type Interface_RoutedVlan_Ipv4_GratuitousArpAcceptedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_GratuitousArpAcceptedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/gratuitous-arp-accepted YANG schema element.
type Interface_RoutedVlan_Ipv4_GratuitousArpAcceptedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/gratuitous-arp-accepted"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/gratuitous-arp-accepted"
func (n *Interface_RoutedVlan_Ipv4_GratuitousArpAcceptedPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "gratuitous-arp-accepted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).GratuitousArpAccepted
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/gratuitous-arp-accepted"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/gratuitous-arp-accepted"
func (n *Interface_RoutedVlan_Ipv4_GratuitousArpAcceptedPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "gratuitous-arp-accepted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).GratuitousArpAccepted
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/gratuitous-arp-accepted"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/config/gratuitous-arp-accepted"
func (n *Interface_RoutedVlan_Ipv4_GratuitousArpAcceptedPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "gratuitous-arp-accepted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).GratuitousArpAccepted
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/gratuitous-arp-accepted"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/config/gratuitous-arp-accepted"
func (n *Interface_RoutedVlan_Ipv4_GratuitousArpAcceptedPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "gratuitous-arp-accepted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).GratuitousArpAccepted
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_MtuPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/mtu YANG schema element.
type Interface_RoutedVlan_Ipv4_MtuPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/mtu YANG schema element.
type Interface_RoutedVlan_Ipv4_MtuPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mtu"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/mtu"
func (n *Interface_RoutedVlan_Ipv4_MtuPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_RoutedVlan_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Mtu
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mtu"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/mtu"
func (n *Interface_RoutedVlan_Ipv4_MtuPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_RoutedVlan_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Mtu
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mtu"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/config/mtu"
func (n *Interface_RoutedVlan_Ipv4_MtuPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_RoutedVlan_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Mtu
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mtu"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/config/mtu"
func (n *Interface_RoutedVlan_Ipv4_MtuPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_RoutedVlan_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Mtu
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4Path represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4 YANG schema element.
type Interface_RoutedVlan_Ipv4Path struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4PathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4 YANG schema element.
type Interface_RoutedVlan_Ipv4PathAny struct {
	*ygnmi.NodePath
}

// AddressAny (list): The list of configured IPv4 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address"
func (n *Interface_RoutedVlan_Ipv4Path) AddressAny() *Interface_RoutedVlan_Ipv4_AddressPathAny {
	ps := &Interface_RoutedVlan_Ipv4_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// AddressAny (list): The list of configured IPv4 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address"
func (n *Interface_RoutedVlan_Ipv4PathAny) AddressAny() *Interface_RoutedVlan_Ipv4_AddressPathAny {
	ps := &Interface_RoutedVlan_Ipv4_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// Address (list): The list of configured IPv4 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address"
//
//	Ip: string
func (n *Interface_RoutedVlan_Ipv4Path) Address(Ip string) *Interface_RoutedVlan_Ipv4_AddressPath {
	ps := &Interface_RoutedVlan_Ipv4_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// Address (list): The list of configured IPv4 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address"
//
//	Ip: string
func (n *Interface_RoutedVlan_Ipv4PathAny) Address(Ip string) *Interface_RoutedVlan_Ipv4_AddressPathAny {
	ps := &Interface_RoutedVlan_Ipv4_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// AddressMap (list): The list of configured IPv4 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address"
func (n *Interface_RoutedVlan_Ipv4Path) AddressMap() *Interface_RoutedVlan_Ipv4_AddressPathMap {
	ps := &Interface_RoutedVlan_Ipv4_AddressPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AddressMap (list): The list of configured IPv4 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address"
func (n *Interface_RoutedVlan_Ipv4PathAny) AddressMap() *Interface_RoutedVlan_Ipv4_AddressPathMapAny {
	ps := &Interface_RoutedVlan_Ipv4_AddressPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters"
func (n *Interface_RoutedVlan_Ipv4Path) Counters() *Interface_RoutedVlan_Ipv4_CountersPath {
	ps := &Interface_RoutedVlan_Ipv4_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters"
func (n *Interface_RoutedVlan_Ipv4PathAny) Counters() *Interface_RoutedVlan_Ipv4_CountersPathAny {
	ps := &Interface_RoutedVlan_Ipv4_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/dhcp-client"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/*/dhcp-client"
func (n *Interface_RoutedVlan_Ipv4Path) DhcpClient() *Interface_RoutedVlan_Ipv4_DhcpClientPath {
	ps := &Interface_RoutedVlan_Ipv4_DhcpClientPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/dhcp-client"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/*/dhcp-client"
func (n *Interface_RoutedVlan_Ipv4PathAny) DhcpClient() *Interface_RoutedVlan_Ipv4_DhcpClientPathAny {
	ps := &Interface_RoutedVlan_Ipv4_DhcpClientPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Controls whether IPv4 is enabled or disabled on this
// interface.  When IPv4 is enabled, this interface is
// connected to an IPv4 stack, and the interface can send
// and receive IPv4 packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/*/enabled"
func (n *Interface_RoutedVlan_Ipv4Path) Enabled() *Interface_RoutedVlan_Ipv4_EnabledPath {
	ps := &Interface_RoutedVlan_Ipv4_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Controls whether IPv4 is enabled or disabled on this
// interface.  When IPv4 is enabled, this interface is
// connected to an IPv4 stack, and the interface can send
// and receive IPv4 packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/*/enabled"
func (n *Interface_RoutedVlan_Ipv4PathAny) Enabled() *Interface_RoutedVlan_Ipv4_EnabledPathAny {
	ps := &Interface_RoutedVlan_Ipv4_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GratuitousArpAccepted (leaf): When set to true, gratuitous ARPs will be accepted and
// the ARP table will be updated.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/gratuitous-arp-accepted"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/*/gratuitous-arp-accepted"
func (n *Interface_RoutedVlan_Ipv4Path) GratuitousArpAccepted() *Interface_RoutedVlan_Ipv4_GratuitousArpAcceptedPath {
	ps := &Interface_RoutedVlan_Ipv4_GratuitousArpAcceptedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "gratuitous-arp-accepted"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GratuitousArpAccepted (leaf): When set to true, gratuitous ARPs will be accepted and
// the ARP table will be updated.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/gratuitous-arp-accepted"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/*/gratuitous-arp-accepted"
func (n *Interface_RoutedVlan_Ipv4PathAny) GratuitousArpAccepted() *Interface_RoutedVlan_Ipv4_GratuitousArpAcceptedPathAny {
	ps := &Interface_RoutedVlan_Ipv4_GratuitousArpAcceptedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "gratuitous-arp-accepted"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mtu (leaf): The size, in octets, of the largest IPv4 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mtu"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/*/mtu"
func (n *Interface_RoutedVlan_Ipv4Path) Mtu() *Interface_RoutedVlan_Ipv4_MtuPath {
	ps := &Interface_RoutedVlan_Ipv4_MtuPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mtu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mtu (leaf): The size, in octets, of the largest IPv4 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mtu"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/*/mtu"
func (n *Interface_RoutedVlan_Ipv4PathAny) Mtu() *Interface_RoutedVlan_Ipv4_MtuPathAny {
	ps := &Interface_RoutedVlan_Ipv4_MtuPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mtu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborAny (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor"
func (n *Interface_RoutedVlan_Ipv4Path) NeighborAny() *Interface_RoutedVlan_Ipv4_NeighborPathAny {
	ps := &Interface_RoutedVlan_Ipv4_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// NeighborAny (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor"
func (n *Interface_RoutedVlan_Ipv4PathAny) NeighborAny() *Interface_RoutedVlan_Ipv4_NeighborPathAny {
	ps := &Interface_RoutedVlan_Ipv4_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// Neighbor (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor"
//
//	Ip: string
func (n *Interface_RoutedVlan_Ipv4Path) Neighbor(Ip string) *Interface_RoutedVlan_Ipv4_NeighborPath {
	ps := &Interface_RoutedVlan_Ipv4_NeighborPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// Neighbor (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor"
//
//	Ip: string
func (n *Interface_RoutedVlan_Ipv4PathAny) Neighbor(Ip string) *Interface_RoutedVlan_Ipv4_NeighborPathAny {
	ps := &Interface_RoutedVlan_Ipv4_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// NeighborMap (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor"
func (n *Interface_RoutedVlan_Ipv4Path) NeighborMap() *Interface_RoutedVlan_Ipv4_NeighborPathMap {
	ps := &Interface_RoutedVlan_Ipv4_NeighborPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborMap (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor"
func (n *Interface_RoutedVlan_Ipv4PathAny) NeighborMap() *Interface_RoutedVlan_Ipv4_NeighborPathMapAny {
	ps := &Interface_RoutedVlan_Ipv4_NeighborPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ProxyArp (container): Configuration and operational state parameters
// relating to proxy ARP. This functionality allows a
// system to respond to ARP requests that are not
// explicitly destined to the local system.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "proxy-arp"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/proxy-arp"
func (n *Interface_RoutedVlan_Ipv4Path) ProxyArp() *Interface_RoutedVlan_Ipv4_ProxyArpPath {
	ps := &Interface_RoutedVlan_Ipv4_ProxyArpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"proxy-arp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ProxyArp (container): Configuration and operational state parameters
// relating to proxy ARP. This functionality allows a
// system to respond to ARP requests that are not
// explicitly destined to the local system.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "proxy-arp"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/proxy-arp"
func (n *Interface_RoutedVlan_Ipv4PathAny) ProxyArp() *Interface_RoutedVlan_Ipv4_ProxyArpPathAny {
	ps := &Interface_RoutedVlan_Ipv4_ProxyArpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"proxy-arp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "unnumbered"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered"
func (n *Interface_RoutedVlan_Ipv4Path) Unnumbered() *Interface_RoutedVlan_Ipv4_UnnumberedPath {
	ps := &Interface_RoutedVlan_Ipv4_UnnumberedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "unnumbered"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered"
func (n *Interface_RoutedVlan_Ipv4PathAny) Unnumbered() *Interface_RoutedVlan_Ipv4_UnnumberedPathAny {
	ps := &Interface_RoutedVlan_Ipv4_UnnumberedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Urpf (container): URPF container.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf"
func (n *Interface_RoutedVlan_Ipv4Path) Urpf() *Interface_RoutedVlan_Ipv4_UrpfPath {
	ps := &Interface_RoutedVlan_Ipv4_UrpfPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Urpf (container): URPF container.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf"
func (n *Interface_RoutedVlan_Ipv4PathAny) Urpf() *Interface_RoutedVlan_Ipv4_UrpfPathAny {
	ps := &Interface_RoutedVlan_Ipv4_UrpfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4Path) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv4] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv4](
		"Interface_RoutedVlan_Ipv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4PathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4](
		"Interface_RoutedVlan_Ipv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4Path) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv4] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv4](
		"Interface_RoutedVlan_Ipv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4PathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4](
		"Interface_RoutedVlan_Ipv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_IpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/ip YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_IpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/ip YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_IpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/ip"
func (n *Interface_RoutedVlan_Ipv4_Address_IpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_RoutedVlan_Ipv4_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/ip"
func (n *Interface_RoutedVlan_Ipv4_Address_IpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv4_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/config/ip"
func (n *Interface_RoutedVlan_Ipv4_Address_IpPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_RoutedVlan_Ipv4_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/config/ip"
func (n *Interface_RoutedVlan_Ipv4_Address_IpPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv4_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_OriginPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_OriginPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_OriginPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv4_Address_OriginPath) State() ygnmi.SingletonQuery[oc.E_IfIp_IpAddressOrigin] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_IpAddressOrigin](
		"Interface_RoutedVlan_Ipv4_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_IpAddressOrigin, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv4_Address_OriginPathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_IpAddressOrigin] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_IpAddressOrigin](
		"Interface_RoutedVlan_Ipv4_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_IpAddressOrigin, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/prefix-length YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/prefix-length YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/prefix-length"
func (n *Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/prefix-length"
func (n *Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/config/prefix-length"
func (n *Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/config/prefix-length"
func (n *Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_TypePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/type YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_TypePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/type YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/type"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/type"
func (n *Interface_RoutedVlan_Ipv4_Address_TypePath) State() ygnmi.SingletonQuery[oc.E_IfIp_Ipv4AddressType] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_Ipv4AddressType](
		"Interface_RoutedVlan_Ipv4_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv4AddressType, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/type"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/type"
func (n *Interface_RoutedVlan_Ipv4_Address_TypePathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_Ipv4AddressType] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_Ipv4AddressType](
		"Interface_RoutedVlan_Ipv4_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv4AddressType, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/type"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/config/type"
func (n *Interface_RoutedVlan_Ipv4_Address_TypePath) Config() ygnmi.ConfigQuery[oc.E_IfIp_Ipv4AddressType] {
	return ygnmi.NewConfigQuery[oc.E_IfIp_Ipv4AddressType](
		"Interface_RoutedVlan_Ipv4_Address",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv4AddressType, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/type"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/config/type"
func (n *Interface_RoutedVlan_Ipv4_Address_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_IfIp_Ipv4AddressType] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_Ipv4AddressType](
		"Interface_RoutedVlan_Ipv4_Address",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv4AddressType, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_AddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv4_AddressPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_AddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv4_AddressPathAny struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_AddressPathMap represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv4_AddressPathMap struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_AddressPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv4_AddressPathMapAny struct {
	*ygnmi.NodePath
}

// Ip (leaf): The IPv4 address on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/*/ip"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) Ip() *Interface_RoutedVlan_Ipv4_Address_IpPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_IpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ip (leaf): The IPv4 address on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/*/ip"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) Ip() *Interface_RoutedVlan_Ipv4_Address_IpPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_IpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) Origin() *Interface_RoutedVlan_Ipv4_Address_OriginPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_OriginPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) Origin() *Interface_RoutedVlan_Ipv4_Address_OriginPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_OriginPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The length of the subnet prefix.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/*/prefix-length"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) PrefixLength() *Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The length of the subnet prefix.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/*/prefix-length"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) PrefixLength() *Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Specifies the explicit type of the IPv4 address being assigned
// to the interface. By default, addresses are assumed to be a primary address.
// Where secondary addresses is to be configured, this leaf should be set
// to SECONDARY.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/type"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/*/type"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) Type() *Interface_RoutedVlan_Ipv4_Address_TypePath {
	ps := &Interface_RoutedVlan_Ipv4_Address_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Specifies the explicit type of the IPv4 address being assigned
// to the interface. By default, addresses are assumed to be a primary address.
// Where secondary addresses is to be configured, this leaf should be set
// to SECONDARY.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/type"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/*/type"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) Type() *Interface_RoutedVlan_Ipv4_Address_TypePathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) VrrpGroupAny() *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
	return ps
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) VrrpGroupAny() *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
	return ps
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
//
//	VirtualRouterId: uint8
func (n *Interface_RoutedVlan_Ipv4_AddressPath) VrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
	return ps
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
//
//	VirtualRouterId: uint8
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) VrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
	return ps
}

// VrrpGroupMap (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) VrrpGroupMap() *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMap {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// VrrpGroupMap (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) VrrpGroupMap() *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMapAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_AddressPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Address] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Address](
		"Interface_RoutedVlan_Ipv4_Address",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address](
		"Interface_RoutedVlan_Ipv4_Address",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_AddressPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Address] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Address](
		"Interface_RoutedVlan_Ipv4_Address",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address](
		"Interface_RoutedVlan_Ipv4_Address",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_AddressPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Address] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Address](
		"Interface_RoutedVlan_Ipv4",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv4_Address, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_AddressPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Address] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Address](
		"Interface_RoutedVlan_Ipv4",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv4_Address, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_AddressPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Address] {
	return ygnmi.NewConfigQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Address](
		"Interface_RoutedVlan_Ipv4",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv4_Address, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_AddressPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Address] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Address](
		"Interface_RoutedVlan_Ipv4",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv4_Address, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/accept-mode YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/accept-mode YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/accept-mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/accept-mode"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "accept-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).AcceptMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/accept-mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/accept-mode"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "accept-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).AcceptMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/accept-mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "accept-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).AcceptMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/accept-mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "accept-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).AcceptMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/advertisement-interval YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/advertisement-interval YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/advertisement-interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).AdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/advertisement-interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).AdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/advertisement-interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).AdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/advertisement-interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).AdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).CurrentPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).CurrentPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).Preempt
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).Preempt
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).Preempt
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).Preempt
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt-delay YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt-delay YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt-delay"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt-delay"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt-delay"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt-delay"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt-delay"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt-delay"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/priority YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/priority YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-address YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-address YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-address"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-address"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-router-id YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-router-id YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-router-id"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-router-id"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-router-id"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-router-id"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMap represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMap struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMapAny struct {
	*ygnmi.NodePath
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/accept-mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/accept-mode"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) AcceptMode() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "accept-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/accept-mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/accept-mode"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) AcceptMode() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "accept-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/advertisement-interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) AdvertisementInterval() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/advertisement-interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) AdvertisementInterval() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) CurrentPriority() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) CurrentPriority() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-tracking"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) InterfaceTracking() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-tracking"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) InterfaceTracking() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/preempt"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) Preempt() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/preempt"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) Preempt() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt-delay"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/preempt-delay"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) PreemptDelay() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt-delay"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/preempt-delay"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) PreemptDelay() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) Priority() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) Priority() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/virtual-address"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) VirtualAddress() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/virtual-address"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) VirtualAddress() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-router-id"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) VirtualRouterId() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-router-id"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) VirtualRouterId() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv4_Address",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv4_Address",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMap) Config() ygnmi.ConfigQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewConfigQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv4_Address",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMapAny) Config() ygnmi.WildcardQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv4_Address",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority-decrement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority-decrement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority-decrement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority-decrement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/track-interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/track-interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/track-interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/track-interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny struct {
	*ygnmi.NodePath
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority-decrement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/*/priority-decrement"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) PriorityDecrement() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority-decrement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/*/priority-decrement"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) PriorityDecrement() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/track-interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/*/track-interface"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) TrackInterface() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "track-interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/track-interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/*/track-interface"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) TrackInterface() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "track-interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_UrpfDropBytesPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/urpf-drop-bytes YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_UrpfDropBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_UrpfDropBytesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/urpf-drop-bytes YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_UrpfDropBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "urpf-drop-bytes"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/urpf-drop-bytes"
func (n *Interface_RoutedVlan_Ipv4_Counters_UrpfDropBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"urpf-drop-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).UrpfDropBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "urpf-drop-bytes"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/urpf-drop-bytes"
func (n *Interface_RoutedVlan_Ipv4_Counters_UrpfDropBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"urpf-drop-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).UrpfDropBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_UrpfDropPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/urpf-drop-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_UrpfDropPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_UrpfDropPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/urpf-drop-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_UrpfDropPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "urpf-drop-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/urpf-drop-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_UrpfDropPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"urpf-drop-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).UrpfDropPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "urpf-drop-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/urpf-drop-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_UrpfDropPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"urpf-drop-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).UrpfDropPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_CountersPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv4_CountersPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv4_CountersPathAny struct {
	*ygnmi.NodePath
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InDiscardedPkts() *Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InDiscardedPkts() *Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InErrorPkts() *Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InErrorPkts() *Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InForwardedOctets() *Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InForwardedOctets() *Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InForwardedPkts() *Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InForwardedPkts() *Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastOctets (leaf): The total number of octets received in input IP
// multicast packets for the specified address
// family, including those received in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InMulticastOctets() *Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastOctets (leaf): The total number of octets received in input IP
// multicast packets for the specified address
// family, including those received in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InMulticastOctets() *Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastPkts (leaf): The number of IP packets received for the specified
// address family that are multicast packets.
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InMulticastPkts() *Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastPkts (leaf): The number of IP packets received for the specified
// address family that are multicast packets.
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InMulticastPkts() *Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InOctets() *Interface_RoutedVlan_Ipv4_Counters_InOctetsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InOctets() *Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including all IP unicast, multicast,
// broadcast and error packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InPkts() *Interface_RoutedVlan_Ipv4_Counters_InPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including all IP unicast, multicast,
// broadcast and error packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InPkts() *Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutDiscardedPkts() *Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutDiscardedPkts() *Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutErrorPkts() *Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutErrorPkts() *Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutForwardedOctets() *Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutForwardedOctets() *Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutForwardedPkts() *Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutForwardedPkts() *Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastOctets (leaf): The total number of IP multicast octets transmitted.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutMulticastOctets() *Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastOctets (leaf): The total number of IP multicast octets transmitted.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutMulticastOctets() *Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastPkts (leaf): The total number of IP multicast packets transmitted.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutMulticastPkts() *Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastPkts (leaf): The total number of IP multicast packets transmitted.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutMulticastPkts() *Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutOctets() *Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutOctets() *Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device as well as unicast, multicast and broadcast
// packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutPkts() *Interface_RoutedVlan_Ipv4_Counters_OutPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device as well as unicast, multicast and broadcast
// packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutPkts() *Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UrpfDropBytes (leaf): This counter counts bytes/octets discarded as result of
// Unicast Reverse Path Forwarding verification.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf-drop-bytes"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/urpf-drop-bytes"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) UrpfDropBytes() *Interface_RoutedVlan_Ipv4_Counters_UrpfDropBytesPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_UrpfDropBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf-drop-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UrpfDropBytes (leaf): This counter counts bytes/octets discarded as result of
// Unicast Reverse Path Forwarding verification.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf-drop-bytes"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/urpf-drop-bytes"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) UrpfDropBytes() *Interface_RoutedVlan_Ipv4_Counters_UrpfDropBytesPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_UrpfDropBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf-drop-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UrpfDropPkts (leaf): This counter counts packet discarded as result of Unicast
// Reverse Path Forwarding verification.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf-drop-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/urpf-drop-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) UrpfDropPkts() *Interface_RoutedVlan_Ipv4_Counters_UrpfDropPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_UrpfDropPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf-drop-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UrpfDropPkts (leaf): This counter counts packet discarded as result of Unicast
// Reverse Path Forwarding verification.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf-drop-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/urpf-drop-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) UrpfDropPkts() *Interface_RoutedVlan_Ipv4_Counters_UrpfDropPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_UrpfDropPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf-drop-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_CountersPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Counters](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Counters](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Neighbor_IpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/ip YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_IpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/ip YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/ip"
func (n *Interface_RoutedVlan_Ipv4_Neighbor_IpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/ip"
func (n *Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/ip"
func (n *Interface_RoutedVlan_Ipv4_Neighbor_IpPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/ip"
func (n *Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/link-layer-address YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/link-layer-address YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/link-layer-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/link-layer-address"
func (n *Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/link-layer-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/link-layer-address"
func (n *Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/link-layer-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/link-layer-address"
func (n *Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/link-layer-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/link-layer-address"
func (n *Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Neighbor_OriginPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_OriginPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv4_Neighbor_OriginPath) State() ygnmi.SingletonQuery[oc.E_IfIp_NeighborOrigin] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_NeighborOrigin](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_NeighborOrigin, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Neighbor).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_NeighborOrigin] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_NeighborOrigin](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_NeighborOrigin, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Neighbor).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_NeighborPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv4_NeighborPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_NeighborPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv4_NeighborPathAny struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_NeighborPathMap represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv4_NeighborPathMap struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_NeighborPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv4_NeighborPathMapAny struct {
	*ygnmi.NodePath
}

// Ip (leaf): The IPv4 address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/*/ip"
func (n *Interface_RoutedVlan_Ipv4_NeighborPath) Ip() *Interface_RoutedVlan_Ipv4_Neighbor_IpPath {
	ps := &Interface_RoutedVlan_Ipv4_Neighbor_IpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ip (leaf): The IPv4 address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/*/ip"
func (n *Interface_RoutedVlan_Ipv4_NeighborPathAny) Ip() *Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/link-layer-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/*/link-layer-address"
func (n *Interface_RoutedVlan_Ipv4_NeighborPath) LinkLayerAddress() *Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath {
	ps := &Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/link-layer-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/*/link-layer-address"
func (n *Interface_RoutedVlan_Ipv4_NeighborPathAny) LinkLayerAddress() *Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this neighbor entry, static or dynamic.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv4_NeighborPath) Origin() *Interface_RoutedVlan_Ipv4_Neighbor_OriginPath {
	ps := &Interface_RoutedVlan_Ipv4_Neighbor_OriginPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this neighbor entry, static or dynamic.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv4_NeighborPathAny) Origin() *Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_NeighborPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Neighbor] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Neighbor](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_NeighborPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Neighbor](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_NeighborPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Neighbor] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Neighbor](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_NeighborPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Neighbor](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_NeighborPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor](
		"Interface_RoutedVlan_Ipv4",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_NeighborPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor](
		"Interface_RoutedVlan_Ipv4",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_NeighborPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor] {
	return ygnmi.NewConfigQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor](
		"Interface_RoutedVlan_Ipv4",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_NeighborPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor](
		"Interface_RoutedVlan_Ipv4",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// Interface_RoutedVlan_Ipv4_ProxyArp_ModePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp/state/mode YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArp_ModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp/state/mode YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/proxy-arp/state/mode"
func (n *Interface_RoutedVlan_Ipv4_ProxyArp_ModePath) State() ygnmi.SingletonQuery[oc.E_ProxyArp_Mode] {
	return ygnmi.NewSingletonQuery[oc.E_ProxyArp_Mode](
		"Interface_RoutedVlan_Ipv4_ProxyArp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_ProxyArp_Mode, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_ProxyArp).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_ProxyArp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/proxy-arp/state/mode"
func (n *Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny) State() ygnmi.WildcardQuery[oc.E_ProxyArp_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_ProxyArp_Mode](
		"Interface_RoutedVlan_Ipv4_ProxyArp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_ProxyArp_Mode, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_ProxyArp).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_ProxyArp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/proxy-arp/config/mode"
func (n *Interface_RoutedVlan_Ipv4_ProxyArp_ModePath) Config() ygnmi.ConfigQuery[oc.E_ProxyArp_Mode] {
	return ygnmi.NewConfigQuery[oc.E_ProxyArp_Mode](
		"Interface_RoutedVlan_Ipv4_ProxyArp",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_ProxyArp_Mode, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_ProxyArp).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_ProxyArp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/proxy-arp/config/mode"
func (n *Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny) Config() ygnmi.WildcardQuery[oc.E_ProxyArp_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_ProxyArp_Mode](
		"Interface_RoutedVlan_Ipv4_ProxyArp",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_ProxyArp_Mode, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_ProxyArp).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_ProxyArp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_ProxyArpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArpPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_ProxyArpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArpPathAny struct {
	*ygnmi.NodePath
}

// Mode (leaf): When set to a value other than DISABLE, the local system should
// respond to ARP requests that are for target addresses other than
// those that are configured on the local subinterface using its own
// MAC address as the target hardware address. If the REMOTE_ONLY
// value is specified, replies are only sent when the target address
// falls outside the locally configured subnets on the interface,
// whereas with the ALL value, all requests, regardless of their
// target address are replied to.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/proxy-arp/*/mode"
func (n *Interface_RoutedVlan_Ipv4_ProxyArpPath) Mode() *Interface_RoutedVlan_Ipv4_ProxyArp_ModePath {
	ps := &Interface_RoutedVlan_Ipv4_ProxyArp_ModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): When set to a value other than DISABLE, the local system should
// respond to ARP requests that are for target addresses other than
// those that are configured on the local subinterface using its own
// MAC address as the target hardware address. If the REMOTE_ONLY
// value is specified, replies are only sent when the target address
// falls outside the locally configured subnets on the interface,
// whereas with the ALL value, all requests, regardless of their
// target address are replied to.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/proxy-arp/*/mode"
func (n *Interface_RoutedVlan_Ipv4_ProxyArpPathAny) Mode() *Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny {
	ps := &Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_ProxyArpPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv4_ProxyArp] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv4_ProxyArp](
		"Interface_RoutedVlan_Ipv4_ProxyArp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_ProxyArpPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_ProxyArp] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_ProxyArp](
		"Interface_RoutedVlan_Ipv4_ProxyArp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_ProxyArpPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv4_ProxyArp] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv4_ProxyArp](
		"Interface_RoutedVlan_Ipv4_ProxyArp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_ProxyArpPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_ProxyArp] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_ProxyArp](
		"Interface_RoutedVlan_Ipv4_ProxyArp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/state/enabled"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv4_Unnumbered",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/state/enabled"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4_Unnumbered",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/config/enabled"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv4_Unnumbered",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/config/enabled"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4_Unnumbered",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv4_UnnumberedPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv4_UnnumberedPathAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/*/enabled"
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPath) Enabled() *Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath {
	ps := &Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/*/enabled"
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPathAny) Enabled() *Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-ref"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref"
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPath) InterfaceRef() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath {
	ps := &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-ref"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref"
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPathAny) InterfaceRef() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered](
		"Interface_RoutedVlan_Ipv4_Unnumbered",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered](
		"Interface_RoutedVlan_Ipv4_Unnumbered",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered](
		"Interface_RoutedVlan_Ipv4_Unnumbered",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered](
		"Interface_RoutedVlan_Ipv4_Unnumbered",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/interface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/interface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/interface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/interface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/subinterface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/subinterface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/subinterface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/subinterface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/*/interface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath) Interface() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath {
	ps := &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/*/interface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny) Interface() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny {
	ps := &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is required, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/*/subinterface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath) Subinterface() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath {
	ps := &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is required, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/*/subinterface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny {
	ps := &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Urpf_AllowDefaultRoutePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/urpf/state/allow-default-route YANG schema element.
type Interface_RoutedVlan_Ipv4_Urpf_AllowDefaultRoutePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Urpf_AllowDefaultRoutePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/urpf/state/allow-default-route YANG schema element.
type Interface_RoutedVlan_Ipv4_Urpf_AllowDefaultRoutePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-default-route"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/state/allow-default-route"
func (n *Interface_RoutedVlan_Ipv4_Urpf_AllowDefaultRoutePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv4_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-default-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Urpf).AllowDefaultRoute
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-default-route"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/state/allow-default-route"
func (n *Interface_RoutedVlan_Ipv4_Urpf_AllowDefaultRoutePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-default-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Urpf).AllowDefaultRoute
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-default-route"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/config/allow-default-route"
func (n *Interface_RoutedVlan_Ipv4_Urpf_AllowDefaultRoutePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv4_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-default-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Urpf).AllowDefaultRoute
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-default-route"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/config/allow-default-route"
func (n *Interface_RoutedVlan_Ipv4_Urpf_AllowDefaultRoutePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-default-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Urpf).AllowDefaultRoute
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Urpf_AllowDropNextHopPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/urpf/state/allow-drop-next-hop YANG schema element.
type Interface_RoutedVlan_Ipv4_Urpf_AllowDropNextHopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Urpf_AllowDropNextHopPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/urpf/state/allow-drop-next-hop YANG schema element.
type Interface_RoutedVlan_Ipv4_Urpf_AllowDropNextHopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/state/allow-drop-next-hop"
func (n *Interface_RoutedVlan_Ipv4_Urpf_AllowDropNextHopPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv4_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-drop-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Urpf).AllowDropNextHop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/state/allow-drop-next-hop"
func (n *Interface_RoutedVlan_Ipv4_Urpf_AllowDropNextHopPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-drop-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Urpf).AllowDropNextHop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/config/allow-drop-next-hop"
func (n *Interface_RoutedVlan_Ipv4_Urpf_AllowDropNextHopPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv4_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-drop-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Urpf).AllowDropNextHop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/config/allow-drop-next-hop"
func (n *Interface_RoutedVlan_Ipv4_Urpf_AllowDropNextHopPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-drop-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Urpf).AllowDropNextHop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Urpf_AllowFeasiblePathPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/urpf/state/allow-feasible-path YANG schema element.
type Interface_RoutedVlan_Ipv4_Urpf_AllowFeasiblePathPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Urpf_AllowFeasiblePathPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/urpf/state/allow-feasible-path YANG schema element.
type Interface_RoutedVlan_Ipv4_Urpf_AllowFeasiblePathPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-feasible-path"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/state/allow-feasible-path"
func (n *Interface_RoutedVlan_Ipv4_Urpf_AllowFeasiblePathPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv4_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-feasible-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Urpf).AllowFeasiblePath
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-feasible-path"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/state/allow-feasible-path"
func (n *Interface_RoutedVlan_Ipv4_Urpf_AllowFeasiblePathPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-feasible-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Urpf).AllowFeasiblePath
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-feasible-path"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/config/allow-feasible-path"
func (n *Interface_RoutedVlan_Ipv4_Urpf_AllowFeasiblePathPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv4_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-feasible-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Urpf).AllowFeasiblePath
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-feasible-path"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/config/allow-feasible-path"
func (n *Interface_RoutedVlan_Ipv4_Urpf_AllowFeasiblePathPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-feasible-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Urpf).AllowFeasiblePath
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Urpf_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/urpf/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv4_Urpf_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Urpf_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/urpf/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv4_Urpf_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/state/enabled"
func (n *Interface_RoutedVlan_Ipv4_Urpf_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv4_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Urpf).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/state/enabled"
func (n *Interface_RoutedVlan_Ipv4_Urpf_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Urpf).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/config/enabled"
func (n *Interface_RoutedVlan_Ipv4_Urpf_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv4_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Urpf).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/config/enabled"
func (n *Interface_RoutedVlan_Ipv4_Urpf_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Urpf).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Urpf_ModePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/urpf/state/mode YANG schema element.
type Interface_RoutedVlan_Ipv4_Urpf_ModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Urpf_ModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/urpf/state/mode YANG schema element.
type Interface_RoutedVlan_Ipv4_Urpf_ModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/state/mode"
func (n *Interface_RoutedVlan_Ipv4_Urpf_ModePath) State() ygnmi.SingletonQuery[oc.E_IfIp_UrpfMode] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_UrpfMode](
		"Interface_RoutedVlan_Ipv4_Urpf",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_UrpfMode, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Urpf).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/state/mode"
func (n *Interface_RoutedVlan_Ipv4_Urpf_ModePathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_UrpfMode] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_UrpfMode](
		"Interface_RoutedVlan_Ipv4_Urpf",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_UrpfMode, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Urpf).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/config/mode"
func (n *Interface_RoutedVlan_Ipv4_Urpf_ModePath) Config() ygnmi.ConfigQuery[oc.E_IfIp_UrpfMode] {
	return ygnmi.NewConfigQuery[oc.E_IfIp_UrpfMode](
		"Interface_RoutedVlan_Ipv4_Urpf",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_UrpfMode, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Urpf).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/config/mode"
func (n *Interface_RoutedVlan_Ipv4_Urpf_ModePathAny) Config() ygnmi.WildcardQuery[oc.E_IfIp_UrpfMode] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_UrpfMode](
		"Interface_RoutedVlan_Ipv4_Urpf",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_UrpfMode, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Urpf).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_UrpfPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/urpf YANG schema element.
type Interface_RoutedVlan_Ipv4_UrpfPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_UrpfPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/urpf YANG schema element.
type Interface_RoutedVlan_Ipv4_UrpfPathAny struct {
	*ygnmi.NodePath
}

// AllowDefaultRoute (leaf): If set to false, and the packet's source address LPMs to the
// default route (0.0.0.0/0 or ::/0) then the URPF check fails and the
// packet is discarded.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-default-route"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/*/allow-default-route"
func (n *Interface_RoutedVlan_Ipv4_UrpfPath) AllowDefaultRoute() *Interface_RoutedVlan_Ipv4_Urpf_AllowDefaultRoutePath {
	ps := &Interface_RoutedVlan_Ipv4_Urpf_AllowDefaultRoutePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-default-route"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowDefaultRoute (leaf): If set to false, and the packet's source address LPMs to the
// default route (0.0.0.0/0 or ::/0) then the URPF check fails and the
// packet is discarded.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-default-route"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/*/allow-default-route"
func (n *Interface_RoutedVlan_Ipv4_UrpfPathAny) AllowDefaultRoute() *Interface_RoutedVlan_Ipv4_Urpf_AllowDefaultRoutePathAny {
	ps := &Interface_RoutedVlan_Ipv4_Urpf_AllowDefaultRoutePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-default-route"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowDropNextHop (leaf): If set to false, and the packet's source address LPMs to a route
// with DROP as the next-hop, then the URPF check fails and the packet
// is discarded.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/*/allow-drop-next-hop"
func (n *Interface_RoutedVlan_Ipv4_UrpfPath) AllowDropNextHop() *Interface_RoutedVlan_Ipv4_Urpf_AllowDropNextHopPath {
	ps := &Interface_RoutedVlan_Ipv4_Urpf_AllowDropNextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-drop-next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowDropNextHop (leaf): If set to false, and the packet's source address LPMs to a route
// with DROP as the next-hop, then the URPF check fails and the packet
// is discarded.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/*/allow-drop-next-hop"
func (n *Interface_RoutedVlan_Ipv4_UrpfPathAny) AllowDropNextHop() *Interface_RoutedVlan_Ipv4_Urpf_AllowDropNextHopPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Urpf_AllowDropNextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-drop-next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowFeasiblePath (leaf): The routing system may select subset of all learned paths.  For example,
// BGP without multi-path enabled will install only one of many possible ECMP
// paths into the FIB or ECMP multipath limits may select only a subset of all
// available paths. If set to true, the URPF check passes if the source address
// LPMs to any path in the RIB, even if it is not selected for forwarding in the
// FIB.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-feasible-path"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/*/allow-feasible-path"
func (n *Interface_RoutedVlan_Ipv4_UrpfPath) AllowFeasiblePath() *Interface_RoutedVlan_Ipv4_Urpf_AllowFeasiblePathPath {
	ps := &Interface_RoutedVlan_Ipv4_Urpf_AllowFeasiblePathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-feasible-path"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowFeasiblePath (leaf): The routing system may select subset of all learned paths.  For example,
// BGP without multi-path enabled will install only one of many possible ECMP
// paths into the FIB or ECMP multipath limits may select only a subset of all
// available paths. If set to true, the URPF check passes if the source address
// LPMs to any path in the RIB, even if it is not selected for forwarding in the
// FIB.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-feasible-path"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/*/allow-feasible-path"
func (n *Interface_RoutedVlan_Ipv4_UrpfPathAny) AllowFeasiblePath() *Interface_RoutedVlan_Ipv4_Urpf_AllowFeasiblePathPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Urpf_AllowFeasiblePathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-feasible-path"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Turns ON/OFF packet's source address verification against content of
// FIB. This is one of anti-spoofing protection techniques.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/*/enabled"
func (n *Interface_RoutedVlan_Ipv4_UrpfPath) Enabled() *Interface_RoutedVlan_Ipv4_Urpf_EnabledPath {
	ps := &Interface_RoutedVlan_Ipv4_Urpf_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Turns ON/OFF packet's source address verification against content of
// FIB. This is one of anti-spoofing protection techniques.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/*/enabled"
func (n *Interface_RoutedVlan_Ipv4_UrpfPathAny) Enabled() *Interface_RoutedVlan_Ipv4_Urpf_EnabledPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Urpf_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): The URPF in STRICT mode requires the ingress packet source address
// to have a longest prefix match (LPM) for a route in the forwarding table
// with a next-hop of the interface the packet was received on.
// The URPF in LOOSE mode requires the ingress packet source address to
// LPM a route in the forwarding table, but may have any next-hop.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/*/mode"
func (n *Interface_RoutedVlan_Ipv4_UrpfPath) Mode() *Interface_RoutedVlan_Ipv4_Urpf_ModePath {
	ps := &Interface_RoutedVlan_Ipv4_Urpf_ModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): The URPF in STRICT mode requires the ingress packet source address
// to have a longest prefix match (LPM) for a route in the forwarding table
// with a next-hop of the interface the packet was received on.
// The URPF in LOOSE mode requires the ingress packet source address to
// LPM a route in the forwarding table, but may have any next-hop.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/urpf/*/mode"
func (n *Interface_RoutedVlan_Ipv4_UrpfPathAny) Mode() *Interface_RoutedVlan_Ipv4_Urpf_ModePathAny {
	ps := &Interface_RoutedVlan_Ipv4_Urpf_ModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_UrpfPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Urpf] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Urpf](
		"Interface_RoutedVlan_Ipv4_Urpf",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_UrpfPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Urpf] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Urpf](
		"Interface_RoutedVlan_Ipv4_Urpf",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_UrpfPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Urpf] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Urpf](
		"Interface_RoutedVlan_Ipv4_Urpf",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_UrpfPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Urpf] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Urpf](
		"Interface_RoutedVlan_Ipv4_Urpf",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_DhcpClientPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/dhcp-client YANG schema element.
type Interface_RoutedVlan_Ipv6_DhcpClientPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_DhcpClientPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/dhcp-client YANG schema element.
type Interface_RoutedVlan_Ipv6_DhcpClientPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/dhcp-client"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/dhcp-client"
func (n *Interface_RoutedVlan_Ipv6_DhcpClientPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/dhcp-client"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/dhcp-client"
func (n *Interface_RoutedVlan_Ipv6_DhcpClientPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/dhcp-client"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/config/dhcp-client"
func (n *Interface_RoutedVlan_Ipv6_DhcpClientPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/dhcp-client"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/config/dhcp-client"
func (n *Interface_RoutedVlan_Ipv6_DhcpClientPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/dup-addr-detect-transmits YANG schema element.
type Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/dup-addr-detect-transmits YANG schema element.
type Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/dup-addr-detect-transmits"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/dup-addr-detect-transmits"
func (n *Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dup-addr-detect-transmits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).DupAddrDetectTransmits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/dup-addr-detect-transmits"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/dup-addr-detect-transmits"
func (n *Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dup-addr-detect-transmits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).DupAddrDetectTransmits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/dup-addr-detect-transmits"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/config/dup-addr-detect-transmits"
func (n *Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dup-addr-detect-transmits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).DupAddrDetectTransmits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/dup-addr-detect-transmits"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/config/dup-addr-detect-transmits"
func (n *Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dup-addr-detect-transmits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).DupAddrDetectTransmits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/enabled"
func (n *Interface_RoutedVlan_Ipv6_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/enabled"
func (n *Interface_RoutedVlan_Ipv6_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/config/enabled"
func (n *Interface_RoutedVlan_Ipv6_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/config/enabled"
func (n *Interface_RoutedVlan_Ipv6_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_LearnUnsolicitedPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/learn-unsolicited YANG schema element.
type Interface_RoutedVlan_Ipv6_LearnUnsolicitedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_LearnUnsolicitedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/learn-unsolicited YANG schema element.
type Interface_RoutedVlan_Ipv6_LearnUnsolicitedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/learn-unsolicited"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/learn-unsolicited"
func (n *Interface_RoutedVlan_Ipv6_LearnUnsolicitedPath) State() ygnmi.SingletonQuery[oc.E_Ipv6_LearnUnsolicited] {
	return ygnmi.NewSingletonQuery[oc.E_Ipv6_LearnUnsolicited](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "learn-unsolicited"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv6_LearnUnsolicited, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).LearnUnsolicited
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/learn-unsolicited"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/learn-unsolicited"
func (n *Interface_RoutedVlan_Ipv6_LearnUnsolicitedPathAny) State() ygnmi.WildcardQuery[oc.E_Ipv6_LearnUnsolicited] {
	return ygnmi.NewWildcardQuery[oc.E_Ipv6_LearnUnsolicited](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "learn-unsolicited"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv6_LearnUnsolicited, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).LearnUnsolicited
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/learn-unsolicited"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/config/learn-unsolicited"
func (n *Interface_RoutedVlan_Ipv6_LearnUnsolicitedPath) Config() ygnmi.ConfigQuery[oc.E_Ipv6_LearnUnsolicited] {
	return ygnmi.NewConfigQuery[oc.E_Ipv6_LearnUnsolicited](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "learn-unsolicited"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv6_LearnUnsolicited, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).LearnUnsolicited
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/learn-unsolicited"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/config/learn-unsolicited"
func (n *Interface_RoutedVlan_Ipv6_LearnUnsolicitedPathAny) Config() ygnmi.WildcardQuery[oc.E_Ipv6_LearnUnsolicited] {
	return ygnmi.NewWildcardQuery[oc.E_Ipv6_LearnUnsolicited](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "learn-unsolicited"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv6_LearnUnsolicited, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).LearnUnsolicited
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_MtuPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/mtu YANG schema element.
type Interface_RoutedVlan_Ipv6_MtuPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/mtu YANG schema element.
type Interface_RoutedVlan_Ipv6_MtuPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mtu"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/mtu"
func (n *Interface_RoutedVlan_Ipv6_MtuPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Mtu
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mtu"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/mtu"
func (n *Interface_RoutedVlan_Ipv6_MtuPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Mtu
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mtu"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/config/mtu"
func (n *Interface_RoutedVlan_Ipv6_MtuPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Mtu
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mtu"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/config/mtu"
func (n *Interface_RoutedVlan_Ipv6_MtuPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Mtu
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6Path represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6 YANG schema element.
type Interface_RoutedVlan_Ipv6Path struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6PathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6 YANG schema element.
type Interface_RoutedVlan_Ipv6PathAny struct {
	*ygnmi.NodePath
}

// AddressAny (list): The list of configured IPv6 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address"
func (n *Interface_RoutedVlan_Ipv6Path) AddressAny() *Interface_RoutedVlan_Ipv6_AddressPathAny {
	ps := &Interface_RoutedVlan_Ipv6_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// AddressAny (list): The list of configured IPv6 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address"
func (n *Interface_RoutedVlan_Ipv6PathAny) AddressAny() *Interface_RoutedVlan_Ipv6_AddressPathAny {
	ps := &Interface_RoutedVlan_Ipv6_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// Address (list): The list of configured IPv6 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address"
//
//	Ip: string
func (n *Interface_RoutedVlan_Ipv6Path) Address(Ip string) *Interface_RoutedVlan_Ipv6_AddressPath {
	ps := &Interface_RoutedVlan_Ipv6_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// Address (list): The list of configured IPv6 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address"
//
//	Ip: string
func (n *Interface_RoutedVlan_Ipv6PathAny) Address(Ip string) *Interface_RoutedVlan_Ipv6_AddressPathAny {
	ps := &Interface_RoutedVlan_Ipv6_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// AddressMap (list): The list of configured IPv6 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address"
func (n *Interface_RoutedVlan_Ipv6Path) AddressMap() *Interface_RoutedVlan_Ipv6_AddressPathMap {
	ps := &Interface_RoutedVlan_Ipv6_AddressPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AddressMap (list): The list of configured IPv6 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address"
func (n *Interface_RoutedVlan_Ipv6PathAny) AddressMap() *Interface_RoutedVlan_Ipv6_AddressPathMapAny {
	ps := &Interface_RoutedVlan_Ipv6_AddressPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters"
func (n *Interface_RoutedVlan_Ipv6Path) Counters() *Interface_RoutedVlan_Ipv6_CountersPath {
	ps := &Interface_RoutedVlan_Ipv6_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters"
func (n *Interface_RoutedVlan_Ipv6PathAny) Counters() *Interface_RoutedVlan_Ipv6_CountersPathAny {
	ps := &Interface_RoutedVlan_Ipv6_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/dhcp-client"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/*/dhcp-client"
func (n *Interface_RoutedVlan_Ipv6Path) DhcpClient() *Interface_RoutedVlan_Ipv6_DhcpClientPath {
	ps := &Interface_RoutedVlan_Ipv6_DhcpClientPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/dhcp-client"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/*/dhcp-client"
func (n *Interface_RoutedVlan_Ipv6PathAny) DhcpClient() *Interface_RoutedVlan_Ipv6_DhcpClientPathAny {
	ps := &Interface_RoutedVlan_Ipv6_DhcpClientPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DupAddrDetectTransmits (leaf): The number of consecutive Neighbor Solicitation messages
// sent while performing Duplicate Address Detection on a
// tentative address.  A value of zero indicates that
// Duplicate Address Detection is not performed on
// tentative addresses.  A value of one indicates a single
// transmission with no follow-up retransmissions.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/dup-addr-detect-transmits"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/*/dup-addr-detect-transmits"
func (n *Interface_RoutedVlan_Ipv6Path) DupAddrDetectTransmits() *Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath {
	ps := &Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dup-addr-detect-transmits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DupAddrDetectTransmits (leaf): The number of consecutive Neighbor Solicitation messages
// sent while performing Duplicate Address Detection on a
// tentative address.  A value of zero indicates that
// Duplicate Address Detection is not performed on
// tentative addresses.  A value of one indicates a single
// transmission with no follow-up retransmissions.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/dup-addr-detect-transmits"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/*/dup-addr-detect-transmits"
func (n *Interface_RoutedVlan_Ipv6PathAny) DupAddrDetectTransmits() *Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny {
	ps := &Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dup-addr-detect-transmits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Controls whether IPv6 is enabled or disabled on this
// interface.  When IPv6 is enabled, this interface is
// connected to an IPv6 stack, and the interface can send
// and receive IPv6 packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/*/enabled"
func (n *Interface_RoutedVlan_Ipv6Path) Enabled() *Interface_RoutedVlan_Ipv6_EnabledPath {
	ps := &Interface_RoutedVlan_Ipv6_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Controls whether IPv6 is enabled or disabled on this
// interface.  When IPv6 is enabled, this interface is
// connected to an IPv6 stack, and the interface can send
// and receive IPv6 packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/*/enabled"
func (n *Interface_RoutedVlan_Ipv6PathAny) Enabled() *Interface_RoutedVlan_Ipv6_EnabledPathAny {
	ps := &Interface_RoutedVlan_Ipv6_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LearnUnsolicited (leaf): Sets if neighbors should be learned from unsolicited neighbor
// advertisements for global or link local addresses or both.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/learn-unsolicited"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/*/learn-unsolicited"
func (n *Interface_RoutedVlan_Ipv6Path) LearnUnsolicited() *Interface_RoutedVlan_Ipv6_LearnUnsolicitedPath {
	ps := &Interface_RoutedVlan_Ipv6_LearnUnsolicitedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "learn-unsolicited"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LearnUnsolicited (leaf): Sets if neighbors should be learned from unsolicited neighbor
// advertisements for global or link local addresses or both.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/learn-unsolicited"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/*/learn-unsolicited"
func (n *Interface_RoutedVlan_Ipv6PathAny) LearnUnsolicited() *Interface_RoutedVlan_Ipv6_LearnUnsolicitedPathAny {
	ps := &Interface_RoutedVlan_Ipv6_LearnUnsolicitedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "learn-unsolicited"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mtu (leaf): The size, in octets, of the largest IPv6 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mtu"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/*/mtu"
func (n *Interface_RoutedVlan_Ipv6Path) Mtu() *Interface_RoutedVlan_Ipv6_MtuPath {
	ps := &Interface_RoutedVlan_Ipv6_MtuPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mtu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mtu (leaf): The size, in octets, of the largest IPv6 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mtu"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/*/mtu"
func (n *Interface_RoutedVlan_Ipv6PathAny) Mtu() *Interface_RoutedVlan_Ipv6_MtuPathAny {
	ps := &Interface_RoutedVlan_Ipv6_MtuPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mtu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborAny (list): List of IPv6 neighbors
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
func (n *Interface_RoutedVlan_Ipv6Path) NeighborAny() *Interface_RoutedVlan_Ipv6_NeighborPathAny {
	ps := &Interface_RoutedVlan_Ipv6_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// NeighborAny (list): List of IPv6 neighbors
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
func (n *Interface_RoutedVlan_Ipv6PathAny) NeighborAny() *Interface_RoutedVlan_Ipv6_NeighborPathAny {
	ps := &Interface_RoutedVlan_Ipv6_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// Neighbor (list): List of IPv6 neighbors
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
//
//	Ip: string
func (n *Interface_RoutedVlan_Ipv6Path) Neighbor(Ip string) *Interface_RoutedVlan_Ipv6_NeighborPath {
	ps := &Interface_RoutedVlan_Ipv6_NeighborPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// Neighbor (list): List of IPv6 neighbors
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
//
//	Ip: string
func (n *Interface_RoutedVlan_Ipv6PathAny) Neighbor(Ip string) *Interface_RoutedVlan_Ipv6_NeighborPathAny {
	ps := &Interface_RoutedVlan_Ipv6_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// NeighborMap (list): List of IPv6 neighbors
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
func (n *Interface_RoutedVlan_Ipv6Path) NeighborMap() *Interface_RoutedVlan_Ipv6_NeighborPathMap {
	ps := &Interface_RoutedVlan_Ipv6_NeighborPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborMap (list): List of IPv6 neighbors
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
func (n *Interface_RoutedVlan_Ipv6PathAny) NeighborMap() *Interface_RoutedVlan_Ipv6_NeighborPathMapAny {
	ps := &Interface_RoutedVlan_Ipv6_NeighborPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RouterAdvertisement (container): Configuration and operational state parameters relating to
// router advertisements.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "router-advertisement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement"
func (n *Interface_RoutedVlan_Ipv6Path) RouterAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisementPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"router-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RouterAdvertisement (container): Configuration and operational state parameters relating to
// router advertisements.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "router-advertisement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement"
func (n *Interface_RoutedVlan_Ipv6PathAny) RouterAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"router-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "unnumbered"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered"
func (n *Interface_RoutedVlan_Ipv6Path) Unnumbered() *Interface_RoutedVlan_Ipv6_UnnumberedPath {
	ps := &Interface_RoutedVlan_Ipv6_UnnumberedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "unnumbered"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered"
func (n *Interface_RoutedVlan_Ipv6PathAny) Unnumbered() *Interface_RoutedVlan_Ipv6_UnnumberedPathAny {
	ps := &Interface_RoutedVlan_Ipv6_UnnumberedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Urpf (container): URPF container
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf"
func (n *Interface_RoutedVlan_Ipv6Path) Urpf() *Interface_RoutedVlan_Ipv6_UrpfPath {
	ps := &Interface_RoutedVlan_Ipv6_UrpfPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Urpf (container): URPF container
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf"
func (n *Interface_RoutedVlan_Ipv6PathAny) Urpf() *Interface_RoutedVlan_Ipv6_UrpfPathAny {
	ps := &Interface_RoutedVlan_Ipv6_UrpfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6Path) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv6] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv6](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6PathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6Path) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv6] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv6](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6PathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Address_IpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/ip YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_IpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Address_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/ip YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_IpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/ip"
func (n *Interface_RoutedVlan_Ipv6_Address_IpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_RoutedVlan_Ipv6_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/ip"
func (n *Interface_RoutedVlan_Ipv6_Address_IpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv6_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/config/ip"
func (n *Interface_RoutedVlan_Ipv6_Address_IpPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_RoutedVlan_Ipv6_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/config/ip"
func (n *Interface_RoutedVlan_Ipv6_Address_IpPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv6_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Address_OriginPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_OriginPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Address_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_OriginPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv6_Address_OriginPath) State() ygnmi.SingletonQuery[oc.E_IfIp_IpAddressOrigin] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_IpAddressOrigin](
		"Interface_RoutedVlan_Ipv6_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_IpAddressOrigin, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv6_Address_OriginPathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_IpAddressOrigin] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_IpAddressOrigin](
		"Interface_RoutedVlan_Ipv6_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_IpAddressOrigin, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/prefix-length YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/prefix-length YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/prefix-length"
func (n *Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/prefix-length"
func (n *Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/config/prefix-length"
func (n *Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/config/prefix-length"
func (n *Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Address_StatusPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/status YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_StatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Address_StatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/status YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_StatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/status"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/status"
func (n *Interface_RoutedVlan_Ipv6_Address_StatusPath) State() ygnmi.SingletonQuery[oc.E_Address_Status] {
	return ygnmi.NewSingletonQuery[oc.E_Address_Status](
		"Interface_RoutedVlan_Ipv6_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Address_Status, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).Status
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/status"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/status"
func (n *Interface_RoutedVlan_Ipv6_Address_StatusPathAny) State() ygnmi.WildcardQuery[oc.E_Address_Status] {
	return ygnmi.NewWildcardQuery[oc.E_Address_Status](
		"Interface_RoutedVlan_Ipv6_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Address_Status, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).Status
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Address_TypePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/type YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Address_TypePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/type YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/type"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/type"
func (n *Interface_RoutedVlan_Ipv6_Address_TypePath) State() ygnmi.SingletonQuery[oc.E_IfIp_Ipv6AddressType] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_Ipv6AddressType](
		"Interface_RoutedVlan_Ipv6_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv6AddressType, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/type"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/type"
func (n *Interface_RoutedVlan_Ipv6_Address_TypePathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_Ipv6AddressType] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_Ipv6AddressType](
		"Interface_RoutedVlan_Ipv6_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv6AddressType, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/type"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/config/type"
func (n *Interface_RoutedVlan_Ipv6_Address_TypePath) Config() ygnmi.ConfigQuery[oc.E_IfIp_Ipv6AddressType] {
	return ygnmi.NewConfigQuery[oc.E_IfIp_Ipv6AddressType](
		"Interface_RoutedVlan_Ipv6_Address",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv6AddressType, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/type"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/config/type"
func (n *Interface_RoutedVlan_Ipv6_Address_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_IfIp_Ipv6AddressType] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_Ipv6AddressType](
		"Interface_RoutedVlan_Ipv6_Address",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv6AddressType, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_AddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv6_AddressPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_AddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv6_AddressPathAny struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_AddressPathMap represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv6_AddressPathMap struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_AddressPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv6_AddressPathMapAny struct {
	*ygnmi.NodePath
}

// Ip (leaf): The IPv6 address on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/*/ip"
func (n *Interface_RoutedVlan_Ipv6_AddressPath) Ip() *Interface_RoutedVlan_Ipv6_Address_IpPath {
	ps := &Interface_RoutedVlan_Ipv6_Address_IpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ip (leaf): The IPv6 address on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/*/ip"
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) Ip() *Interface_RoutedVlan_Ipv6_Address_IpPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_IpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this address, e.g., static, dhcp, etc.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv6_AddressPath) Origin() *Interface_RoutedVlan_Ipv6_Address_OriginPath {
	ps := &Interface_RoutedVlan_Ipv6_Address_OriginPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this address, e.g., static, dhcp, etc.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) Origin() *Interface_RoutedVlan_Ipv6_Address_OriginPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_OriginPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The length of the subnet prefix.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/*/prefix-length"
func (n *Interface_RoutedVlan_Ipv6_AddressPath) PrefixLength() *Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath {
	ps := &Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The length of the subnet prefix.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/*/prefix-length"
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) PrefixLength() *Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Status (leaf): The status of an address.  Most of the states correspond
// to states from the IPv6 Stateless Address
// Autoconfiguration protocol.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/status"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/status"
func (n *Interface_RoutedVlan_Ipv6_AddressPath) Status() *Interface_RoutedVlan_Ipv6_Address_StatusPath {
	ps := &Interface_RoutedVlan_Ipv6_Address_StatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Status (leaf): The status of an address.  Most of the states correspond
// to states from the IPv6 Stateless Address
// Autoconfiguration protocol.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/status"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/status"
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) Status() *Interface_RoutedVlan_Ipv6_Address_StatusPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_StatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Specifies the explicit type of the IPv6 address being assigned
// to the interface. By default, addresses are assumed to be
// global unicast.  Where a link-local address is to be explicitly
// configured, this leaf should be set to LINK_LOCAL.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/type"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/*/type"
func (n *Interface_RoutedVlan_Ipv6_AddressPath) Type() *Interface_RoutedVlan_Ipv6_Address_TypePath {
	ps := &Interface_RoutedVlan_Ipv6_Address_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Specifies the explicit type of the IPv6 address being assigned
// to the interface. By default, addresses are assumed to be
// global unicast.  Where a link-local address is to be explicitly
// configured, this leaf should be set to LINK_LOCAL.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/type"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/*/type"
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) Type() *Interface_RoutedVlan_Ipv6_Address_TypePathAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group"
func (n *Interface_RoutedVlan_Ipv6_AddressPath) VrrpGroupAny() *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
	return ps
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group"
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) VrrpGroupAny() *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
	return ps
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group"
//
//	VirtualRouterId: uint8
func (n *Interface_RoutedVlan_Ipv6_AddressPath) VrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
	return ps
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group"
//
//	VirtualRouterId: uint8
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) VrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
	return ps
}

// VrrpGroupMap (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group"
func (n *Interface_RoutedVlan_Ipv6_AddressPath) VrrpGroupMap() *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathMap {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// VrrpGroupMap (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group"
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) VrrpGroupMap() *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathMapAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_AddressPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv6_Address] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv6_Address](
		"Interface_RoutedVlan_Ipv6_Address",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Address] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Address](
		"Interface_RoutedVlan_Ipv6_Address",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_AddressPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv6_Address] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv6_Address](
		"Interface_RoutedVlan_Ipv6_Address",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Address] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Address](
		"Interface_RoutedVlan_Ipv6_Address",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_AddressPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_Address] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_Address](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv6_Address, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_AddressPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_Address] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_Address](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv6_Address, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_AddressPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_Address] {
	return ygnmi.NewConfigQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_Address](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv6_Address, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_AddressPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_Address] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_Address](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv6_Address, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/accept-mode YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/accept-mode YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/accept-mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/accept-mode"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "accept-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).AcceptMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/accept-mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/accept-mode"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "accept-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).AcceptMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/accept-mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "accept-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).AcceptMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/accept-mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "accept-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).AcceptMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/advertisement-interval YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/advertisement-interval YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/advertisement-interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).AdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/advertisement-interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).AdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/advertisement-interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).AdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/advertisement-interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).AdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).CurrentPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).CurrentPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/preempt YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/preempt YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/preempt"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).Preempt
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/preempt"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).Preempt
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).Preempt
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).Preempt
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/preempt-delay YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/preempt-delay YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt-delay"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/preempt-delay"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt-delay"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/preempt-delay"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt-delay"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt-delay"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/priority YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/priority YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-address YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-address YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-address"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-address"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-link-local YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-link-local YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-link-local"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-link-local"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-link-local"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).VirtualLinkLocal
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-link-local"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-link-local"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-link-local"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).VirtualLinkLocal
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-link-local"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-link-local"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).VirtualLinkLocal
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-link-local"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-link-local"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).VirtualLinkLocal
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-router-id YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-router-id YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-router-id"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-router-id"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-router-id"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-router-id"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathMap represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathMap struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathMapAny struct {
	*ygnmi.NodePath
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/accept-mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/*/accept-mode"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) AcceptMode() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePath {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "accept-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/accept-mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/*/accept-mode"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) AcceptMode() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePathAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "accept-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/advertisement-interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/*/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) AdvertisementInterval() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/advertisement-interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/*/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) AdvertisementInterval() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) CurrentPriority() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPath {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) CurrentPriority() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-tracking"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) InterfaceTracking() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-tracking"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) InterfaceTracking() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/*/preempt"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) Preempt() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPath {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/*/preempt"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) Preempt() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt-delay"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/*/preempt-delay"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) PreemptDelay() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPath {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt-delay"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/*/preempt-delay"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) PreemptDelay() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/*/priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) Priority() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPath {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/*/priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) Priority() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/*/virtual-address"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) VirtualAddress() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPath {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/*/virtual-address"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) VirtualAddress() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualLinkLocal (leaf): For VRRP on IPv6 interfaces, sets the virtual link local
// address
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-link-local"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/*/virtual-link-local"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) VirtualLinkLocal() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-link-local"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualLinkLocal (leaf): For VRRP on IPv6 interfaces, sets the virtual link local
// address
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-link-local"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/*/virtual-link-local"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) VirtualLinkLocal() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-link-local"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-router-id"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/*/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) VirtualRouterId() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPath {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-router-id"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/*/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) VirtualRouterId() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv6_Address",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv6_Address",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathMap) Config() ygnmi.ConfigQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewConfigQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv6_Address",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathMapAny) Config() ygnmi.WildcardQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv6_Address",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority-decrement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority-decrement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority-decrement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority-decrement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/track-interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/track-interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/track-interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/track-interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny struct {
	*ygnmi.NodePath
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority-decrement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/*/priority-decrement"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) PriorityDecrement() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority-decrement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/*/priority-decrement"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) PriorityDecrement() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/track-interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/*/track-interface"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) TrackInterface() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "track-interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/track-interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/*/track-interface"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) TrackInterface() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny {
	ps := &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "track-interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking](
		"Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).InDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).InDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).InErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).InErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).InForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).InForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).InForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).InForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Counters_InMulticastOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-multicast-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InMulticastOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Counters_InMulticastOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-multicast-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InMulticastOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-multicast-octets"
func (n *Interface_RoutedVlan_Ipv6_Counters_InMulticastOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).InMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-multicast-octets"
func (n *Interface_RoutedVlan_Ipv6_Counters_InMulticastOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).InMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Counters_InMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-multicast-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Counters_InMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-multicast-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_InMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).InMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_InMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).InMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv6_Counters_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv6_Counters_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).OutDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).OutDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).OutErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).OutErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).OutForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).OutForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).OutForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).OutForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Counters_OutMulticastOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-multicast-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutMulticastOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Counters_OutMulticastOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-multicast-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutMulticastOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-multicast-octets"
func (n *Interface_RoutedVlan_Ipv6_Counters_OutMulticastOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).OutMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-multicast-octets"
func (n *Interface_RoutedVlan_Ipv6_Counters_OutMulticastOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).OutMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Counters_OutMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-multicast-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Counters_OutMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-multicast-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_OutMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).OutMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_OutMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).OutMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv6_Counters_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv6_Counters_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Counters_UrpfDropBytesPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/urpf-drop-bytes YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_UrpfDropBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Counters_UrpfDropBytesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/urpf-drop-bytes YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_UrpfDropBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "urpf-drop-bytes"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/urpf-drop-bytes"
func (n *Interface_RoutedVlan_Ipv6_Counters_UrpfDropBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"urpf-drop-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).UrpfDropBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "urpf-drop-bytes"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/urpf-drop-bytes"
func (n *Interface_RoutedVlan_Ipv6_Counters_UrpfDropBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"urpf-drop-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).UrpfDropBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Counters_UrpfDropPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/urpf-drop-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_UrpfDropPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Counters_UrpfDropPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/urpf-drop-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_UrpfDropPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "urpf-drop-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/urpf-drop-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_UrpfDropPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"urpf-drop-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).UrpfDropPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "urpf-drop-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/urpf-drop-pkts"
func (n *Interface_RoutedVlan_Ipv6_Counters_UrpfDropPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"urpf-drop-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Counters).UrpfDropPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_CountersPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv6_CountersPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv6_CountersPathAny struct {
	*ygnmi.NodePath
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InDiscardedPkts() *Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPath {
	ps := &Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InDiscardedPkts() *Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InErrorPkts() *Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPath {
	ps := &Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InErrorPkts() *Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InForwardedOctets() *Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPath {
	ps := &Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InForwardedOctets() *Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InForwardedPkts() *Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPath {
	ps := &Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InForwardedPkts() *Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastOctets (leaf): The total number of octets received in input IP
// multicast packets for the specified address
// family, including those received in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-multicast-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InMulticastOctets() *Interface_RoutedVlan_Ipv6_Counters_InMulticastOctetsPath {
	ps := &Interface_RoutedVlan_Ipv6_Counters_InMulticastOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastOctets (leaf): The total number of octets received in input IP
// multicast packets for the specified address
// family, including those received in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-multicast-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InMulticastOctets() *Interface_RoutedVlan_Ipv6_Counters_InMulticastOctetsPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Counters_InMulticastOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastPkts (leaf): The number of IP packets received for the specified
// address family that are multicast packets.
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InMulticastPkts() *Interface_RoutedVlan_Ipv6_Counters_InMulticastPktsPath {
	ps := &Interface_RoutedVlan_Ipv6_Counters_InMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastPkts (leaf): The number of IP packets received for the specified
// address family that are multicast packets.
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InMulticastPkts() *Interface_RoutedVlan_Ipv6_Counters_InMulticastPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Counters_InMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InOctets() *Interface_RoutedVlan_Ipv6_Counters_InOctetsPath {
	ps := &Interface_RoutedVlan_Ipv6_Counters_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InOctets() *Interface_RoutedVlan_Ipv6_Counters_InOctetsPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Counters_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including all IP unicast, multicast,
// broadcast and error packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InPkts() *Interface_RoutedVlan_Ipv6_Counters_InPktsPath {
	ps := &Interface_RoutedVlan_Ipv6_Counters_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including all IP unicast, multicast,
// broadcast and error packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InPkts() *Interface_RoutedVlan_Ipv6_Counters_InPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Counters_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutDiscardedPkts() *Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPath {
	ps := &Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutDiscardedPkts() *Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutErrorPkts() *Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPath {
	ps := &Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutErrorPkts() *Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutForwardedOctets() *Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPath {
	ps := &Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutForwardedOctets() *Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutForwardedPkts() *Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPath {
	ps := &Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutForwardedPkts() *Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastOctets (leaf): The total number of IP multicast octets transmitted.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-multicast-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutMulticastOctets() *Interface_RoutedVlan_Ipv6_Counters_OutMulticastOctetsPath {
	ps := &Interface_RoutedVlan_Ipv6_Counters_OutMulticastOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastOctets (leaf): The total number of IP multicast octets transmitted.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-multicast-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutMulticastOctets() *Interface_RoutedVlan_Ipv6_Counters_OutMulticastOctetsPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Counters_OutMulticastOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastPkts (leaf): The total number of IP multicast packets transmitted.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutMulticastPkts() *Interface_RoutedVlan_Ipv6_Counters_OutMulticastPktsPath {
	ps := &Interface_RoutedVlan_Ipv6_Counters_OutMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastPkts (leaf): The total number of IP multicast packets transmitted.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutMulticastPkts() *Interface_RoutedVlan_Ipv6_Counters_OutMulticastPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Counters_OutMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutOctets() *Interface_RoutedVlan_Ipv6_Counters_OutOctetsPath {
	ps := &Interface_RoutedVlan_Ipv6_Counters_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutOctets() *Interface_RoutedVlan_Ipv6_Counters_OutOctetsPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Counters_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device as well as unicast, multicast and broadcast
// packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutPkts() *Interface_RoutedVlan_Ipv6_Counters_OutPktsPath {
	ps := &Interface_RoutedVlan_Ipv6_Counters_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device as well as unicast, multicast and broadcast
// packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutPkts() *Interface_RoutedVlan_Ipv6_Counters_OutPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Counters_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UrpfDropBytes (leaf): This counter counts bytes/octets discarded as result of
// Unicast Reverse Path Forwarding verification.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf-drop-bytes"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/urpf-drop-bytes"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) UrpfDropBytes() *Interface_RoutedVlan_Ipv6_Counters_UrpfDropBytesPath {
	ps := &Interface_RoutedVlan_Ipv6_Counters_UrpfDropBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf-drop-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UrpfDropBytes (leaf): This counter counts bytes/octets discarded as result of
// Unicast Reverse Path Forwarding verification.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf-drop-bytes"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/urpf-drop-bytes"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) UrpfDropBytes() *Interface_RoutedVlan_Ipv6_Counters_UrpfDropBytesPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Counters_UrpfDropBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf-drop-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UrpfDropPkts (leaf): This counter counts packet discarded as result of Unicast
// Reverse Path Forwarding verification.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf-drop-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/urpf-drop-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) UrpfDropPkts() *Interface_RoutedVlan_Ipv6_Counters_UrpfDropPktsPath {
	ps := &Interface_RoutedVlan_Ipv6_Counters_UrpfDropPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf-drop-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UrpfDropPkts (leaf): This counter counts packet discarded as result of Unicast
// Reverse Path Forwarding verification.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf-drop-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters/urpf-drop-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) UrpfDropPkts() *Interface_RoutedVlan_Ipv6_Counters_UrpfDropPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Counters_UrpfDropPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf-drop-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_CountersPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv6_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv6_Counters](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Counters](
		"Interface_RoutedVlan_Ipv6_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Neighbor_IpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/ip YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_IpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Neighbor_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/ip YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_IpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/ip"
func (n *Interface_RoutedVlan_Ipv6_Neighbor_IpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_RoutedVlan_Ipv6_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/ip"
func (n *Interface_RoutedVlan_Ipv6_Neighbor_IpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv6_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/config/ip"
func (n *Interface_RoutedVlan_Ipv6_Neighbor_IpPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_RoutedVlan_Ipv6_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/config/ip"
func (n *Interface_RoutedVlan_Ipv6_Neighbor_IpPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv6_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/is-router YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/is-router YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/is-router"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "is-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Neighbor).IsRouter
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/is-router"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "is-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Neighbor).IsRouter
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/link-layer-address YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/link-layer-address YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/link-layer-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/link-layer-address"
func (n *Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_RoutedVlan_Ipv6_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/link-layer-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/link-layer-address"
func (n *Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv6_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/link-layer-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/config/link-layer-address"
func (n *Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_RoutedVlan_Ipv6_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/link-layer-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/config/link-layer-address"
func (n *Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv6_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/neighbor-state YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/neighbor-state YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/neighbor-state"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePath) State() ygnmi.SingletonQuery[oc.E_Neighbor_NeighborState] {
	return ygnmi.NewSingletonQuery[oc.E_Neighbor_NeighborState](
		"Interface_RoutedVlan_Ipv6_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Neighbor_NeighborState, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Neighbor).NeighborState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/neighbor-state"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePathAny) State() ygnmi.WildcardQuery[oc.E_Neighbor_NeighborState] {
	return ygnmi.NewWildcardQuery[oc.E_Neighbor_NeighborState](
		"Interface_RoutedVlan_Ipv6_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Neighbor_NeighborState, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Neighbor).NeighborState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Neighbor_OriginPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_OriginPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Neighbor_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_OriginPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv6_Neighbor_OriginPath) State() ygnmi.SingletonQuery[oc.E_IfIp_NeighborOrigin] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_NeighborOrigin](
		"Interface_RoutedVlan_Ipv6_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_NeighborOrigin, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Neighbor).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv6_Neighbor_OriginPathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_NeighborOrigin] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_NeighborOrigin](
		"Interface_RoutedVlan_Ipv6_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_NeighborOrigin, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Neighbor).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_NeighborPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv6_NeighborPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_NeighborPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv6_NeighborPathAny struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_NeighborPathMap represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv6_NeighborPathMap struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_NeighborPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv6_NeighborPathMapAny struct {
	*ygnmi.NodePath
}

// Ip (leaf): The IPv6 address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/*/ip"
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) Ip() *Interface_RoutedVlan_Ipv6_Neighbor_IpPath {
	ps := &Interface_RoutedVlan_Ipv6_Neighbor_IpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ip (leaf): The IPv6 address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/*/ip"
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) Ip() *Interface_RoutedVlan_Ipv6_Neighbor_IpPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Neighbor_IpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IsRouter (leaf): Indicates that the neighbor node acts as a router.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/is-router"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) IsRouter() *Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPath {
	ps := &Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "is-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IsRouter (leaf): Indicates that the neighbor node acts as a router.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/is-router"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) IsRouter() *Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "is-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/link-layer-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/*/link-layer-address"
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) LinkLayerAddress() *Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPath {
	ps := &Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/link-layer-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/*/link-layer-address"
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) LinkLayerAddress() *Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborState (leaf): The Neighbor Unreachability Detection state of this
// entry.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/neighbor-state"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) NeighborState() *Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePath {
	ps := &Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborState (leaf): The Neighbor Unreachability Detection state of this
// entry.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/neighbor-state"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) NeighborState() *Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePathAny {
	ps := &Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this neighbor entry.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) Origin() *Interface_RoutedVlan_Ipv6_Neighbor_OriginPath {
	ps := &Interface_RoutedVlan_Ipv6_Neighbor_OriginPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this neighbor entry.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) Origin() *Interface_RoutedVlan_Ipv6_Neighbor_OriginPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Neighbor_OriginPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv6_Neighbor] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv6_Neighbor](
		"Interface_RoutedVlan_Ipv6_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Neighbor](
		"Interface_RoutedVlan_Ipv6_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv6_Neighbor] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv6_Neighbor](
		"Interface_RoutedVlan_Ipv6_Neighbor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Neighbor](
		"Interface_RoutedVlan_Ipv6_Neighbor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_NeighborPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_Neighbor] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_Neighbor](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv6_Neighbor, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_NeighborPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_Neighbor] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_Neighbor](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv6_Neighbor, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_NeighborPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_Neighbor] {
	return ygnmi.NewConfigQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_Neighbor](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv6_Neighbor, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_NeighborPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_Neighbor] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_Neighbor](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv6_Neighbor, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_EnablePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/enable YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_EnablePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/enable YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enable"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/enable"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enable"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/enable"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enable"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/enable"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enable"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/enable"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/interval YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/interval YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/interval"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Interval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/interval"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Interval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/interval"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Interval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/interval"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Interval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/lifetime YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/lifetime YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Lifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Lifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Lifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Lifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_ManagedPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/managed YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_ManagedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_ManagedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/managed YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_ManagedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/managed"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/managed"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_ManagedPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "managed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Managed
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/managed"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/managed"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_ManagedPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "managed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Managed
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/managed"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/managed"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_ManagedPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "managed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Managed
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/managed"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/managed"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_ManagedPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "managed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Managed
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_ModePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/mode YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_ModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_ModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/mode YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_ModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/mode"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_ModePath) State() ygnmi.SingletonQuery[oc.E_RouterAdvertisement_Mode] {
	return ygnmi.NewSingletonQuery[oc.E_RouterAdvertisement_Mode](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RouterAdvertisement_Mode, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/mode"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_ModePathAny) State() ygnmi.WildcardQuery[oc.E_RouterAdvertisement_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_RouterAdvertisement_Mode](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RouterAdvertisement_Mode, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/mode"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_ModePath) Config() ygnmi.ConfigQuery[oc.E_RouterAdvertisement_Mode] {
	return ygnmi.NewConfigQuery[oc.E_RouterAdvertisement_Mode](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RouterAdvertisement_Mode, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/mode"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_ModePathAny) Config() ygnmi.WildcardQuery[oc.E_RouterAdvertisement_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_RouterAdvertisement_Mode](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RouterAdvertisement_Mode, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_OtherConfigPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/other-config YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_OtherConfigPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_OtherConfigPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/other-config YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_OtherConfigPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/other-config"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/other-config"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_OtherConfigPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "other-config"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).OtherConfig
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/other-config"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/other-config"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_OtherConfigPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "other-config"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).OtherConfig
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/other-config"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/other-config"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_OtherConfigPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "other-config"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).OtherConfig
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/other-config"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/other-config"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_OtherConfigPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "other-config"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).OtherConfig
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/suppress YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/suppress YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/suppress"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/suppress"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "suppress"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Suppress
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/suppress"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/suppress"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "suppress"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Suppress
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/suppress"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/suppress"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "suppress"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Suppress
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/suppress"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/suppress"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "suppress"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Suppress
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisementPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisementPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny struct {
	*ygnmi.NodePath
}

// Enable (leaf): If set to false, all IPv6 router advertisement functions are
// disabled.  The local system will not transmit router advertisement
// messages and will not respond to router solicitation messages.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enable"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/*/enable"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Enable() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_EnablePath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): If set to false, all IPv6 router advertisement functions are
// disabled.  The local system will not transmit router advertisement
// messages and will not respond to router solicitation messages.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enable"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/*/enable"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Enable() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_EnablePathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): The interval between periodic router advertisement neighbor
// discovery messages sent on this interface expressed in
// seconds.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/*/interval"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Interval() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): The interval between periodic router advertisement neighbor
// discovery messages sent on this interface expressed in
// seconds.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/*/interval"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Interval() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Lifetime (leaf): The lifetime advertised in the router advertisement neighbor
// discovery message on this interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/*/lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Lifetime() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Lifetime (leaf): The lifetime advertised in the router advertisement neighbor
// discovery message on this interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/*/lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Lifetime() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Managed (leaf): When set to true, the managed address configuration (M) flag is set in
// the advertised router advertisement. The M flag indicates that there are
// addresses available via DHCPv6.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/managed"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/*/managed"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Managed() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_ManagedPath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_ManagedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "managed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Managed (leaf): When set to true, the managed address configuration (M) flag is set in
// the advertised router advertisement. The M flag indicates that there are
// addresses available via DHCPv6.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/managed"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/*/managed"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Managed() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_ManagedPathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_ManagedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "managed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): Mode controls which set of behaviors the local system should perform
// to support IPv6 router advertisements.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/*/mode"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Mode() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_ModePath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_ModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): Mode controls which set of behaviors the local system should perform
// to support IPv6 router advertisements.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/*/mode"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Mode() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_ModePathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_ModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OtherConfig (leaf): When set to true, the other configuration (O) flag is set in the
// advertised router advertisement. The O flag indicates that there is
// other configuration available via DHCPv6 (e.g., DNS servers).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/other-config"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/*/other-config"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) OtherConfig() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_OtherConfigPath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_OtherConfigPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "other-config"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OtherConfig (leaf): When set to true, the other configuration (O) flag is set in the
// advertised router advertisement. The O flag indicates that there is
// other configuration available via DHCPv6 (e.g., DNS servers).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/other-config"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/*/other-config"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) OtherConfig() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_OtherConfigPathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_OtherConfigPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "other-config"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixAny (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) PrefixAny() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// PrefixAny (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) PrefixAny() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// Prefix (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix"
//
//	Prefix: string
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Prefix(Prefix string) *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// Prefix (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix"
//
//	Prefix: string
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Prefix(Prefix string) *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// PrefixMap (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) PrefixMap() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathMap {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixMap (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) PrefixMap() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathMapAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Suppress (leaf): When set to true, router advertisement neighbor discovery
// messages are not transmitted on this interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/suppress"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/*/suppress"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Suppress() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "suppress"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Suppress (leaf): When set to true, router advertisement neighbor discovery
// messages are not transmitted on this interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/suppress"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/*/suppress"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Suppress() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "suppress"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/disable-advertisement YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/disable-advertisement YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/disable-advertisement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/disable-advertisement"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-advertisement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).DisableAdvertisement
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/disable-advertisement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/disable-advertisement"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-advertisement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).DisableAdvertisement
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/disable-advertisement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/disable-advertisement"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-advertisement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).DisableAdvertisement
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/disable-advertisement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/disable-advertisement"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-advertisement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).DisableAdvertisement
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/disable-autoconfiguration YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/disable-autoconfiguration YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/disable-autoconfiguration"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-autoconfiguration"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).DisableAutoconfiguration
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/disable-autoconfiguration"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-autoconfiguration"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).DisableAutoconfiguration
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/disable-autoconfiguration"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-autoconfiguration"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).DisableAutoconfiguration
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/disable-autoconfiguration"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-autoconfiguration"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).DisableAutoconfiguration
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/enable-onlink YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/enable-onlink YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enable-onlink"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/enable-onlink"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-onlink"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).EnableOnlink
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enable-onlink"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/enable-onlink"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-onlink"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).EnableOnlink
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enable-onlink"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/enable-onlink"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-onlink"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).EnableOnlink
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enable-onlink"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/enable-onlink"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-onlink"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).EnableOnlink
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/preferred-lifetime YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/preferred-lifetime YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preferred-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/preferred-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).PreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preferred-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/preferred-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).PreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preferred-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/preferred-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).PreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preferred-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/preferred-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).PreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/prefix YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/prefix YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/prefix"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/prefix"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/prefix"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/prefix"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/valid-lifetime YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/valid-lifetime YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/valid-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/valid-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).ValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/valid-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/valid-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).ValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/valid-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/valid-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).ValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/valid-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/valid-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).ValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathMap represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathMap struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathMapAny struct {
	*ygnmi.NodePath
}

// DisableAdvertisement (leaf): When set to true, the prefix is not advertised within
// router advertisement messages that are sent as a result of
// router soliciation messages.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/disable-advertisement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/disable-advertisement"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) DisableAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-advertisement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisableAdvertisement (leaf): When set to true, the prefix is not advertised within
// router advertisement messages that are sent as a result of
// router soliciation messages.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/disable-advertisement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/disable-advertisement"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) DisableAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-advertisement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisableAutoconfiguration (leaf): When set to true, the prefix is marked as not to be used for stateless
// address configuration. This is achieved by setting the autonomous address
// configuration bit for the prefix.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/disable-autoconfiguration"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) DisableAutoconfiguration() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-autoconfiguration"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisableAutoconfiguration (leaf): When set to true, the prefix is marked as not to be used for stateless
// address configuration. This is achieved by setting the autonomous address
// configuration bit for the prefix.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/disable-autoconfiguration"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) DisableAutoconfiguration() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-autoconfiguration"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableOnlink (leaf): When set to true, the prefix is marked as being on link by setting the
// L-bit for the prefix within a router advertisement.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enable-onlink"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/enable-onlink"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) EnableOnlink() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-onlink"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableOnlink (leaf): When set to true, the prefix is marked as being on link by setting the
// L-bit for the prefix within a router advertisement.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enable-onlink"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/enable-onlink"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) EnableOnlink() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-onlink"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreferredLifetime (leaf): The length of time that the address within the prefix remains
// in the preferred state, i.e., unrestricted use is allowed by
// upper-layer protocols. See RFC4862 for a complete definition
// of preferred behaviours.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preferred-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/preferred-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) PreferredLifetime() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreferredLifetime (leaf): The length of time that the address within the prefix remains
// in the preferred state, i.e., unrestricted use is allowed by
// upper-layer protocols. See RFC4862 for a complete definition
// of preferred behaviours.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preferred-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/preferred-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) PreferredLifetime() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv6 prefix to be advertised within the router advertisement
// message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/prefix"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/prefix"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) Prefix() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv6 prefix to be advertised within the router advertisement
// message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/prefix"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/prefix"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) Prefix() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ValidLifetime (leaf): The length of time that the prefix is valid relative to the time
// the packet was sent.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/valid-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/valid-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) ValidLifetime() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "valid-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ValidLifetime (leaf): The length of time that the prefix is valid relative to the time
// the packet was sent.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/valid-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/valid-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) ValidLifetime() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "valid-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:prefixes"},
			PostRelPath: []string{"openconfig-if-ip:prefix"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:prefixes"},
			PostRelPath: []string{"openconfig-if-ip:prefix"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewConfigQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:prefixes"},
			PostRelPath: []string{"openconfig-if-ip:prefix"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:prefixes"},
			PostRelPath: []string{"openconfig-if-ip:prefix"},
		},
	)
}

// Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/state/enabled"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6_Unnumbered",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/state/enabled"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_Unnumbered",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/config/enabled"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6_Unnumbered",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/config/enabled"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_Unnumbered",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv6_UnnumberedPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv6_UnnumberedPathAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/*/enabled"
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPath) Enabled() *Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath {
	ps := &Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/*/enabled"
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPathAny) Enabled() *Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-ref"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref"
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPath) InterfaceRef() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath {
	ps := &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-ref"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref"
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPathAny) InterfaceRef() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered](
		"Interface_RoutedVlan_Ipv6_Unnumbered",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered](
		"Interface_RoutedVlan_Ipv6_Unnumbered",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered](
		"Interface_RoutedVlan_Ipv6_Unnumbered",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered](
		"Interface_RoutedVlan_Ipv6_Unnumbered",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/interface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/interface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/interface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/interface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/subinterface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/subinterface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/subinterface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/subinterface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/*/interface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath) Interface() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath {
	ps := &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/*/interface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny) Interface() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny {
	ps := &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is required, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/*/subinterface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath) Subinterface() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath {
	ps := &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is required, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/*/subinterface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny {
	ps := &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Urpf_AllowDefaultRoutePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/urpf/state/allow-default-route YANG schema element.
type Interface_RoutedVlan_Ipv6_Urpf_AllowDefaultRoutePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Urpf_AllowDefaultRoutePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/urpf/state/allow-default-route YANG schema element.
type Interface_RoutedVlan_Ipv6_Urpf_AllowDefaultRoutePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-default-route"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/state/allow-default-route"
func (n *Interface_RoutedVlan_Ipv6_Urpf_AllowDefaultRoutePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-default-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Urpf).AllowDefaultRoute
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-default-route"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/state/allow-default-route"
func (n *Interface_RoutedVlan_Ipv6_Urpf_AllowDefaultRoutePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-default-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Urpf).AllowDefaultRoute
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-default-route"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/config/allow-default-route"
func (n *Interface_RoutedVlan_Ipv6_Urpf_AllowDefaultRoutePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-default-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Urpf).AllowDefaultRoute
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-default-route"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/config/allow-default-route"
func (n *Interface_RoutedVlan_Ipv6_Urpf_AllowDefaultRoutePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-default-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Urpf).AllowDefaultRoute
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Urpf_AllowDropNextHopPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/urpf/state/allow-drop-next-hop YANG schema element.
type Interface_RoutedVlan_Ipv6_Urpf_AllowDropNextHopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Urpf_AllowDropNextHopPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/urpf/state/allow-drop-next-hop YANG schema element.
type Interface_RoutedVlan_Ipv6_Urpf_AllowDropNextHopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/state/allow-drop-next-hop"
func (n *Interface_RoutedVlan_Ipv6_Urpf_AllowDropNextHopPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-drop-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Urpf).AllowDropNextHop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/state/allow-drop-next-hop"
func (n *Interface_RoutedVlan_Ipv6_Urpf_AllowDropNextHopPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-drop-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Urpf).AllowDropNextHop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/config/allow-drop-next-hop"
func (n *Interface_RoutedVlan_Ipv6_Urpf_AllowDropNextHopPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-drop-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Urpf).AllowDropNextHop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/config/allow-drop-next-hop"
func (n *Interface_RoutedVlan_Ipv6_Urpf_AllowDropNextHopPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-drop-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Urpf).AllowDropNextHop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Urpf_AllowFeasiblePathPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/urpf/state/allow-feasible-path YANG schema element.
type Interface_RoutedVlan_Ipv6_Urpf_AllowFeasiblePathPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Urpf_AllowFeasiblePathPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/urpf/state/allow-feasible-path YANG schema element.
type Interface_RoutedVlan_Ipv6_Urpf_AllowFeasiblePathPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-feasible-path"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/state/allow-feasible-path"
func (n *Interface_RoutedVlan_Ipv6_Urpf_AllowFeasiblePathPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-feasible-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Urpf).AllowFeasiblePath
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-feasible-path"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/state/allow-feasible-path"
func (n *Interface_RoutedVlan_Ipv6_Urpf_AllowFeasiblePathPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-feasible-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Urpf).AllowFeasiblePath
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-feasible-path"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/config/allow-feasible-path"
func (n *Interface_RoutedVlan_Ipv6_Urpf_AllowFeasiblePathPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-feasible-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Urpf).AllowFeasiblePath
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-feasible-path"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/config/allow-feasible-path"
func (n *Interface_RoutedVlan_Ipv6_Urpf_AllowFeasiblePathPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-feasible-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Urpf).AllowFeasiblePath
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Urpf_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/urpf/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_Urpf_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Urpf_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/urpf/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_Urpf_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/state/enabled"
func (n *Interface_RoutedVlan_Ipv6_Urpf_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Urpf).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/state/enabled"
func (n *Interface_RoutedVlan_Ipv6_Urpf_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Urpf).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/config/enabled"
func (n *Interface_RoutedVlan_Ipv6_Urpf_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Urpf).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/config/enabled"
func (n *Interface_RoutedVlan_Ipv6_Urpf_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Urpf).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Urpf_ModePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/urpf/state/mode YANG schema element.
type Interface_RoutedVlan_Ipv6_Urpf_ModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Urpf_ModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/urpf/state/mode YANG schema element.
type Interface_RoutedVlan_Ipv6_Urpf_ModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/state/mode"
func (n *Interface_RoutedVlan_Ipv6_Urpf_ModePath) State() ygnmi.SingletonQuery[oc.E_IfIp_UrpfMode] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_UrpfMode](
		"Interface_RoutedVlan_Ipv6_Urpf",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_UrpfMode, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Urpf).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/state/mode"
func (n *Interface_RoutedVlan_Ipv6_Urpf_ModePathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_UrpfMode] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_UrpfMode](
		"Interface_RoutedVlan_Ipv6_Urpf",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_UrpfMode, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Urpf).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/config/mode"
func (n *Interface_RoutedVlan_Ipv6_Urpf_ModePath) Config() ygnmi.ConfigQuery[oc.E_IfIp_UrpfMode] {
	return ygnmi.NewConfigQuery[oc.E_IfIp_UrpfMode](
		"Interface_RoutedVlan_Ipv6_Urpf",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_UrpfMode, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Urpf).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/config/mode"
func (n *Interface_RoutedVlan_Ipv6_Urpf_ModePathAny) Config() ygnmi.WildcardQuery[oc.E_IfIp_UrpfMode] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_UrpfMode](
		"Interface_RoutedVlan_Ipv6_Urpf",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_UrpfMode, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Urpf).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_UrpfPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/urpf YANG schema element.
type Interface_RoutedVlan_Ipv6_UrpfPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_UrpfPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/urpf YANG schema element.
type Interface_RoutedVlan_Ipv6_UrpfPathAny struct {
	*ygnmi.NodePath
}

// AllowDefaultRoute (leaf): If set to false, and the packet's source address LPMs to the
// default route (0.0.0.0/0 or ::/0) then the URPF check fails and the
// packet is discarded.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-default-route"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/*/allow-default-route"
func (n *Interface_RoutedVlan_Ipv6_UrpfPath) AllowDefaultRoute() *Interface_RoutedVlan_Ipv6_Urpf_AllowDefaultRoutePath {
	ps := &Interface_RoutedVlan_Ipv6_Urpf_AllowDefaultRoutePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-default-route"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowDefaultRoute (leaf): If set to false, and the packet's source address LPMs to the
// default route (0.0.0.0/0 or ::/0) then the URPF check fails and the
// packet is discarded.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-default-route"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/*/allow-default-route"
func (n *Interface_RoutedVlan_Ipv6_UrpfPathAny) AllowDefaultRoute() *Interface_RoutedVlan_Ipv6_Urpf_AllowDefaultRoutePathAny {
	ps := &Interface_RoutedVlan_Ipv6_Urpf_AllowDefaultRoutePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-default-route"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowDropNextHop (leaf): If set to false, and the packet's source address LPMs to a route
// with DROP as the next-hop, then the URPF check fails and the packet
// is discarded.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/*/allow-drop-next-hop"
func (n *Interface_RoutedVlan_Ipv6_UrpfPath) AllowDropNextHop() *Interface_RoutedVlan_Ipv6_Urpf_AllowDropNextHopPath {
	ps := &Interface_RoutedVlan_Ipv6_Urpf_AllowDropNextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-drop-next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowDropNextHop (leaf): If set to false, and the packet's source address LPMs to a route
// with DROP as the next-hop, then the URPF check fails and the packet
// is discarded.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/*/allow-drop-next-hop"
func (n *Interface_RoutedVlan_Ipv6_UrpfPathAny) AllowDropNextHop() *Interface_RoutedVlan_Ipv6_Urpf_AllowDropNextHopPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Urpf_AllowDropNextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-drop-next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowFeasiblePath (leaf): The routing system may select subset of all learned paths.  For example,
// BGP without multi-path enabled will install only one of many possible ECMP
// paths into the FIB or ECMP multipath limits may select only a subset of all
// available paths. If set to true, the URPF check passes if the source address
// LPMs to any path in the RIB, even if it is not selected for forwarding in the
// FIB.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-feasible-path"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/*/allow-feasible-path"
func (n *Interface_RoutedVlan_Ipv6_UrpfPath) AllowFeasiblePath() *Interface_RoutedVlan_Ipv6_Urpf_AllowFeasiblePathPath {
	ps := &Interface_RoutedVlan_Ipv6_Urpf_AllowFeasiblePathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-feasible-path"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowFeasiblePath (leaf): The routing system may select subset of all learned paths.  For example,
// BGP without multi-path enabled will install only one of many possible ECMP
// paths into the FIB or ECMP multipath limits may select only a subset of all
// available paths. If set to true, the URPF check passes if the source address
// LPMs to any path in the RIB, even if it is not selected for forwarding in the
// FIB.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-feasible-path"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/*/allow-feasible-path"
func (n *Interface_RoutedVlan_Ipv6_UrpfPathAny) AllowFeasiblePath() *Interface_RoutedVlan_Ipv6_Urpf_AllowFeasiblePathPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Urpf_AllowFeasiblePathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-feasible-path"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Turns ON/OFF packet's source address verification against content of
// FIB. This is one of anti-spoofing protection techniques.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/*/enabled"
func (n *Interface_RoutedVlan_Ipv6_UrpfPath) Enabled() *Interface_RoutedVlan_Ipv6_Urpf_EnabledPath {
	ps := &Interface_RoutedVlan_Ipv6_Urpf_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Turns ON/OFF packet's source address verification against content of
// FIB. This is one of anti-spoofing protection techniques.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/*/enabled"
func (n *Interface_RoutedVlan_Ipv6_UrpfPathAny) Enabled() *Interface_RoutedVlan_Ipv6_Urpf_EnabledPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Urpf_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): The URPF in STRICT mode requires the ingress packet source address
// to have a longest prefix match (LPM) for a route in the forwarding table
// with a next-hop of the interface the packet was received on.
// The URPF in LOOSE mode requires the ingress packet source address to
// LPM a route in the forwarding table, but may have any next-hop.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/*/mode"
func (n *Interface_RoutedVlan_Ipv6_UrpfPath) Mode() *Interface_RoutedVlan_Ipv6_Urpf_ModePath {
	ps := &Interface_RoutedVlan_Ipv6_Urpf_ModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): The URPF in STRICT mode requires the ingress packet source address
// to have a longest prefix match (LPM) for a route in the forwarding table
// with a next-hop of the interface the packet was received on.
// The URPF in LOOSE mode requires the ingress packet source address to
// LPM a route in the forwarding table, but may have any next-hop.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/urpf/*/mode"
func (n *Interface_RoutedVlan_Ipv6_UrpfPathAny) Mode() *Interface_RoutedVlan_Ipv6_Urpf_ModePathAny {
	ps := &Interface_RoutedVlan_Ipv6_Urpf_ModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_UrpfPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv6_Urpf] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv6_Urpf](
		"Interface_RoutedVlan_Ipv6_Urpf",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_UrpfPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Urpf] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Urpf](
		"Interface_RoutedVlan_Ipv6_Urpf",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_UrpfPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv6_Urpf] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv6_Urpf](
		"Interface_RoutedVlan_Ipv6_Urpf",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_UrpfPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Urpf] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Urpf](
		"Interface_RoutedVlan_Ipv6_Urpf",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_AdminStatusPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/admin-status YANG schema element.
type Interface_Subinterface_AdminStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_AdminStatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/admin-status YANG schema element.
type Interface_Subinterface_AdminStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/admin-status"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/admin-status"
func (n *Interface_Subinterface_AdminStatusPath) State() ygnmi.SingletonQuery[oc.E_Interface_AdminStatus] {
	return ygnmi.NewSingletonQuery[oc.E_Interface_AdminStatus](
		"Interface_Subinterface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_AdminStatus, bool) {
			ret := gs.(*oc.Interface_Subinterface).AdminStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/admin-status"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/admin-status"
func (n *Interface_Subinterface_AdminStatusPathAny) State() ygnmi.WildcardQuery[oc.E_Interface_AdminStatus] {
	return ygnmi.NewWildcardQuery[oc.E_Interface_AdminStatus](
		"Interface_Subinterface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_AdminStatus, bool) {
			ret := gs.(*oc.Interface_Subinterface).AdminStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_CpuPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/cpu YANG schema element.
type Interface_Subinterface_CpuPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_CpuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/cpu YANG schema element.
type Interface_Subinterface_CpuPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/cpu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/cpu"
func (n *Interface_Subinterface_CpuPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cpu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface).Cpu
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/cpu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/cpu"
func (n *Interface_Subinterface_CpuPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cpu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface).Cpu
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_DescriptionPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/description YANG schema element.
type Interface_Subinterface_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_DescriptionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/description YANG schema element.
type Interface_Subinterface_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/description"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/description"
func (n *Interface_Subinterface_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/description"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/description"
func (n *Interface_Subinterface_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/description"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/config/description"
func (n *Interface_Subinterface_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Subinterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/description"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/config/description"
func (n *Interface_Subinterface_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/enabled YANG schema element.
type Interface_Subinterface_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/enabled YANG schema element.
type Interface_Subinterface_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/enabled"
func (n *Interface_Subinterface_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/enabled"
func (n *Interface_Subinterface_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/config/enabled"
func (n *Interface_Subinterface_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/config/enabled"
func (n *Interface_Subinterface_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_IfindexPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/ifindex YANG schema element.
type Interface_Subinterface_IfindexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_IfindexPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/ifindex YANG schema element.
type Interface_Subinterface_IfindexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/ifindex"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/ifindex"
func (n *Interface_Subinterface_IfindexPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ifindex"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface).Ifindex
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/ifindex"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/ifindex"
func (n *Interface_Subinterface_IfindexPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ifindex"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface).Ifindex
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_IndexPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/index YANG schema element.
type Interface_Subinterface_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_IndexPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/index YANG schema element.
type Interface_Subinterface_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/index"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/index"
func (n *Interface_Subinterface_IndexPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/index"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/index"
func (n *Interface_Subinterface_IndexPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/index"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/config/index"
func (n *Interface_Subinterface_IndexPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_Subinterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/index"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/config/index"
func (n *Interface_Subinterface_IndexPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_LastChangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/last-change YANG schema element.
type Interface_Subinterface_LastChangePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_LastChangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/last-change YANG schema element.
type Interface_Subinterface_LastChangePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/last-change"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/last-change"
func (n *Interface_Subinterface_LastChangePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-change"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface).LastChange
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/last-change"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/last-change"
func (n *Interface_Subinterface_LastChangePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-change"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface).LastChange
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_LogicalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/logical YANG schema element.
type Interface_Subinterface_LogicalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_LogicalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/logical YANG schema element.
type Interface_Subinterface_LogicalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/logical"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/logical"
func (n *Interface_Subinterface_LogicalPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "logical"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface).Logical
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/logical"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/logical"
func (n *Interface_Subinterface_LogicalPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "logical"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface).Logical
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_ManagementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/management YANG schema element.
type Interface_Subinterface_ManagementPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_ManagementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/management YANG schema element.
type Interface_Subinterface_ManagementPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/management"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/management"
func (n *Interface_Subinterface_ManagementPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "management"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface).Management
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/management"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/management"
func (n *Interface_Subinterface_ManagementPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "management"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface).Management
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_NamePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/name YANG schema element.
type Interface_Subinterface_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_NamePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/name YANG schema element.
type Interface_Subinterface_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/name"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/name"
func (n *Interface_Subinterface_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/name"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/name"
func (n *Interface_Subinterface_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_OperStatusPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/oper-status YANG schema element.
type Interface_Subinterface_OperStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_OperStatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/oper-status YANG schema element.
type Interface_Subinterface_OperStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/oper-status"
func (n *Interface_Subinterface_OperStatusPath) State() ygnmi.SingletonQuery[oc.E_Interface_OperStatus] {
	return ygnmi.NewSingletonQuery[oc.E_Interface_OperStatus](
		"Interface_Subinterface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_OperStatus, bool) {
			ret := gs.(*oc.Interface_Subinterface).OperStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/oper-status"
func (n *Interface_Subinterface_OperStatusPathAny) State() ygnmi.WildcardQuery[oc.E_Interface_OperStatus] {
	return ygnmi.NewWildcardQuery[oc.E_Interface_OperStatus](
		"Interface_Subinterface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_OperStatus, bool) {
			ret := gs.(*oc.Interface_Subinterface).OperStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_SubinterfacePath struct {
	*ygnmi.NodePath
}

// Interface_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_SubinterfacePathAny struct {
	*ygnmi.NodePath
}

// Interface_SubinterfacePathMap represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_SubinterfacePathMap struct {
	*ygnmi.NodePath
}

// Interface_SubinterfacePathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_SubinterfacePathMapAny struct {
	*ygnmi.NodePath
}

// AdminStatus (leaf): The desired state of the interface.  In RFC 7223 this leaf
// has the same read semantics as ifAdminStatus.  Here, it
// reflects the administrative state as set by enabling or
// disabling the interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/admin-status"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/admin-status"
func (n *Interface_SubinterfacePath) AdminStatus() *Interface_Subinterface_AdminStatusPath {
	ps := &Interface_Subinterface_AdminStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "admin-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminStatus (leaf): The desired state of the interface.  In RFC 7223 this leaf
// has the same read semantics as ifAdminStatus.  Here, it
// reflects the administrative state as set by enabling or
// disabling the interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/admin-status"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/admin-status"
func (n *Interface_SubinterfacePathAny) AdminStatus() *Interface_Subinterface_AdminStatusPathAny {
	ps := &Interface_Subinterface_AdminStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "admin-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (container): A collection of interface specific statistics entitites which are
// not common to subinterfaces.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters"
func (n *Interface_SubinterfacePath) Counters() *Interface_Subinterface_CountersPath {
	ps := &Interface_Subinterface_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of interface specific statistics entitites which are
// not common to subinterfaces.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters"
func (n *Interface_SubinterfacePathAny) Counters() *Interface_Subinterface_CountersPathAny {
	ps := &Interface_Subinterface_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Cpu (leaf): When set to true, the interface is for traffic
// that is handled by the system CPU, sometimes also called the
// control plane interface.  On systems that represent the CPU
// interface as an Ethernet interface, for example, this leaf
// should be used to distinguish the CPU interface from dataplane
// interfaces.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/cpu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/cpu"
func (n *Interface_SubinterfacePath) Cpu() *Interface_Subinterface_CpuPath {
	ps := &Interface_Subinterface_CpuPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cpu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Cpu (leaf): When set to true, the interface is for traffic
// that is handled by the system CPU, sometimes also called the
// control plane interface.  On systems that represent the CPU
// interface as an Ethernet interface, for example, this leaf
// should be used to distinguish the CPU interface from dataplane
// interfaces.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/cpu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/cpu"
func (n *Interface_SubinterfacePathAny) Cpu() *Interface_Subinterface_CpuPathAny {
	ps := &Interface_Subinterface_CpuPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cpu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): A textual description of the interface.
//
// A server implementation MAY map this leaf to the ifAlias
// MIB object.  Such an implementation needs to use some
// mechanism to handle the differences in size and characters
// allowed between this leaf and ifAlias.  The definition of
// such a mechanism is outside the scope of this document.
//
// Since ifAlias is defined to be stored in non-volatile
// storage, the MIB implementation MUST map ifAlias to the
// value of 'description' in the persistently stored
// datastore.
//
// Specifically, if the device supports ':startup', when
// ifAlias is read the device MUST return the value of
// 'description' in the 'startup' datastore, and when it is
// written, it MUST be written to the 'running' and 'startup'
// datastores.  Note that it is up to the implementation to
//
// decide whether to modify this single leaf in 'startup' or
// perform an implicit copy-config from 'running' to
// 'startup'.
//
// If the device does not support ':startup', ifAlias MUST
// be mapped to the 'description' leaf in the 'running'
// datastore.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/description"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/*/description"
func (n *Interface_SubinterfacePath) Description() *Interface_Subinterface_DescriptionPath {
	ps := &Interface_Subinterface_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): A textual description of the interface.
//
// A server implementation MAY map this leaf to the ifAlias
// MIB object.  Such an implementation needs to use some
// mechanism to handle the differences in size and characters
// allowed between this leaf and ifAlias.  The definition of
// such a mechanism is outside the scope of this document.
//
// Since ifAlias is defined to be stored in non-volatile
// storage, the MIB implementation MUST map ifAlias to the
// value of 'description' in the persistently stored
// datastore.
//
// Specifically, if the device supports ':startup', when
// ifAlias is read the device MUST return the value of
// 'description' in the 'startup' datastore, and when it is
// written, it MUST be written to the 'running' and 'startup'
// datastores.  Note that it is up to the implementation to
//
// decide whether to modify this single leaf in 'startup' or
// perform an implicit copy-config from 'running' to
// 'startup'.
//
// If the device does not support ':startup', ifAlias MUST
// be mapped to the 'description' leaf in the 'running'
// datastore.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/description"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/*/description"
func (n *Interface_SubinterfacePathAny) Description() *Interface_Subinterface_DescriptionPathAny {
	ps := &Interface_Subinterface_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): This leaf contains the configured, desired state of the
// interface.
//
// Systems that implement the IF-MIB use the value of this
// leaf in the 'running' datastore to set
// IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
// has been initialized, as described in RFC 2863.
//
// Changes in this leaf in the 'running' datastore are
// reflected in ifAdminStatus, but if ifAdminStatus is
// changed over SNMP, this leaf is not affected.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/*/enabled"
func (n *Interface_SubinterfacePath) Enabled() *Interface_Subinterface_EnabledPath {
	ps := &Interface_Subinterface_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): This leaf contains the configured, desired state of the
// interface.
//
// Systems that implement the IF-MIB use the value of this
// leaf in the 'running' datastore to set
// IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
// has been initialized, as described in RFC 2863.
//
// Changes in this leaf in the 'running' datastore are
// reflected in ifAdminStatus, but if ifAdminStatus is
// changed over SNMP, this leaf is not affected.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/*/enabled"
func (n *Interface_SubinterfacePathAny) Enabled() *Interface_Subinterface_EnabledPathAny {
	ps := &Interface_Subinterface_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ifindex (leaf): System assigned number for each interface.  Corresponds to
// ifIndex object in SNMP Interface MIB
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/ifindex"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/ifindex"
func (n *Interface_SubinterfacePath) Ifindex() *Interface_Subinterface_IfindexPath {
	ps := &Interface_Subinterface_IfindexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ifindex"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ifindex (leaf): System assigned number for each interface.  Corresponds to
// ifIndex object in SNMP Interface MIB
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/ifindex"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/ifindex"
func (n *Interface_SubinterfacePathAny) Ifindex() *Interface_Subinterface_IfindexPathAny {
	ps := &Interface_Subinterface_IfindexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ifindex"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): The index of the subinterface, or logical interface number.
// On systems with no support for subinterfaces, or not using
// subinterfaces, this value should default to 0, i.e., the
// default subinterface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/index"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/*/index"
func (n *Interface_SubinterfacePath) Index() *Interface_Subinterface_IndexPath {
	ps := &Interface_Subinterface_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): The index of the subinterface, or logical interface number.
// On systems with no support for subinterfaces, or not using
// subinterfaces, this value should default to 0, i.e., the
// default subinterface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/index"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/*/index"
func (n *Interface_SubinterfacePathAny) Index() *Interface_Subinterface_IndexPathAny {
	ps := &Interface_Subinterface_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv4 (container): Parameters for the IPv4 address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "ipv4"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4"
func (n *Interface_SubinterfacePath) Ipv4() *Interface_Subinterface_Ipv4Path {
	ps := &Interface_Subinterface_Ipv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4 (container): Parameters for the IPv4 address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "ipv4"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4"
func (n *Interface_SubinterfacePathAny) Ipv4() *Interface_Subinterface_Ipv4PathAny {
	ps := &Interface_Subinterface_Ipv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6 (container): Parameters for the IPv6 address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "ipv6"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6"
func (n *Interface_SubinterfacePath) Ipv6() *Interface_Subinterface_Ipv6Path {
	ps := &Interface_Subinterface_Ipv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6 (container): Parameters for the IPv6 address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "ipv6"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6"
func (n *Interface_SubinterfacePathAny) Ipv6() *Interface_Subinterface_Ipv6PathAny {
	ps := &Interface_Subinterface_Ipv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LastChange (leaf): This timestamp indicates the absolute time of the last
// state change of the interface (e.g., up-to-down transition).
// This is different than the SNMP ifLastChange object in the
// standard interface MIB in that it is not relative to the
// system boot time (i.e,. sysUpTime).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/last-change"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/last-change"
func (n *Interface_SubinterfacePath) LastChange() *Interface_Subinterface_LastChangePath {
	ps := &Interface_Subinterface_LastChangePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastChange (leaf): This timestamp indicates the absolute time of the last
// state change of the interface (e.g., up-to-down transition).
// This is different than the SNMP ifLastChange object in the
// standard interface MIB in that it is not relative to the
// system boot time (i.e,. sysUpTime).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/last-change"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/last-change"
func (n *Interface_SubinterfacePathAny) LastChange() *Interface_Subinterface_LastChangePathAny {
	ps := &Interface_Subinterface_LastChangePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Logical (leaf): When set to true, the interface is a logical interface
// which does not have an associated physical port or
// channel on the system.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/logical"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/logical"
func (n *Interface_SubinterfacePath) Logical() *Interface_Subinterface_LogicalPath {
	ps := &Interface_Subinterface_LogicalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "logical"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Logical (leaf): When set to true, the interface is a logical interface
// which does not have an associated physical port or
// channel on the system.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/logical"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/logical"
func (n *Interface_SubinterfacePathAny) Logical() *Interface_Subinterface_LogicalPathAny {
	ps := &Interface_Subinterface_LogicalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "logical"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Management (leaf): When set to true, the interface is a dedicated
// management interface that is not connected to dataplane
// interfaces.  It may be used to connect the system to an
// out-of-band management network, for example.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/management"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/management"
func (n *Interface_SubinterfacePath) Management() *Interface_Subinterface_ManagementPath {
	ps := &Interface_Subinterface_ManagementPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Management (leaf): When set to true, the interface is a dedicated
// management interface that is not connected to dataplane
// interfaces.  It may be used to connect the system to an
// out-of-band management network, for example.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/management"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/management"
func (n *Interface_SubinterfacePathAny) Management() *Interface_Subinterface_ManagementPathAny {
	ps := &Interface_Subinterface_ManagementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The system-assigned name for the sub-interface.  This MAY
// be a combination of the base interface name and the
// subinterface index, or some other convention used by the
// system.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/name"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/name"
func (n *Interface_SubinterfacePath) Name() *Interface_Subinterface_NamePath {
	ps := &Interface_Subinterface_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The system-assigned name for the sub-interface.  This MAY
// be a combination of the base interface name and the
// subinterface index, or some other convention used by the
// system.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/name"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/name"
func (n *Interface_SubinterfacePathAny) Name() *Interface_Subinterface_NamePathAny {
	ps := &Interface_Subinterface_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperStatus (leaf): The current operational state of the interface.
//
// This leaf has the same semantics as ifOperStatus.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/oper-status"
func (n *Interface_SubinterfacePath) OperStatus() *Interface_Subinterface_OperStatusPath {
	ps := &Interface_Subinterface_OperStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperStatus (leaf): The current operational state of the interface.
//
// This leaf has the same semantics as ifOperStatus.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/oper-status"
func (n *Interface_SubinterfacePathAny) OperStatus() *Interface_Subinterface_OperStatusPathAny {
	ps := &Interface_Subinterface_OperStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vlan (container): Enclosing container for VLAN interface-specific
// data on subinterfaces
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vlan"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan"
func (n *Interface_SubinterfacePath) Vlan() *Interface_Subinterface_VlanPath {
	ps := &Interface_Subinterface_VlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vlan (container): Enclosing container for VLAN interface-specific
// data on subinterfaces
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vlan"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan"
func (n *Interface_SubinterfacePathAny) Vlan() *Interface_Subinterface_VlanPathAny {
	ps := &Interface_Subinterface_VlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_SubinterfacePath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface](
		"Interface_Subinterface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_SubinterfacePathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface](
		"Interface_Subinterface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_SubinterfacePath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface](
		"Interface_Subinterface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_SubinterfacePathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface](
		"Interface_Subinterface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_SubinterfacePathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.Interface_Subinterface] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.Interface_Subinterface](
		"Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Interface_Subinterface, bool) {
			ret := gs.(*oc.Interface).Subinterface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-interfaces:subinterfaces"},
			PostRelPath: []string{"openconfig-interfaces:subinterface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_SubinterfacePathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.Interface_Subinterface] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.Interface_Subinterface](
		"Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Interface_Subinterface, bool) {
			ret := gs.(*oc.Interface).Subinterface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-interfaces:subinterfaces"},
			PostRelPath: []string{"openconfig-interfaces:subinterface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_SubinterfacePathMap) Config() ygnmi.ConfigQuery[map[uint32]*oc.Interface_Subinterface] {
	return ygnmi.NewConfigQuery[map[uint32]*oc.Interface_Subinterface](
		"Interface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Interface_Subinterface, bool) {
			ret := gs.(*oc.Interface).Subinterface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-interfaces:subinterfaces"},
			PostRelPath: []string{"openconfig-interfaces:subinterface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_SubinterfacePathMapAny) Config() ygnmi.WildcardQuery[map[uint32]*oc.Interface_Subinterface] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.Interface_Subinterface](
		"Interface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Interface_Subinterface, bool) {
			ret := gs.(*oc.Interface).Subinterface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-interfaces:subinterfaces"},
			PostRelPath: []string{"openconfig-interfaces:subinterface"},
		},
	)
}

// Interface_Subinterface_Counters_CarrierTransitionsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions YANG schema element.
type Interface_Subinterface_Counters_CarrierTransitionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_CarrierTransitionsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions YANG schema element.
type Interface_Subinterface_Counters_CarrierTransitionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "carrier-transitions"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions"
func (n *Interface_Subinterface_Counters_CarrierTransitionsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"carrier-transitions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).CarrierTransitions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "carrier-transitions"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions"
func (n *Interface_Subinterface_Counters_CarrierTransitionsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"carrier-transitions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).CarrierTransitions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_InBroadcastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts YANG schema element.
type Interface_Subinterface_Counters_InBroadcastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_InBroadcastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts YANG schema element.
type Interface_Subinterface_Counters_InBroadcastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-broadcast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts"
func (n *Interface_Subinterface_Counters_InBroadcastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-broadcast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InBroadcastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-broadcast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts"
func (n *Interface_Subinterface_Counters_InBroadcastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-broadcast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InBroadcastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_InDiscardsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards YANG schema element.
type Interface_Subinterface_Counters_InDiscardsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_InDiscardsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards YANG schema element.
type Interface_Subinterface_Counters_InDiscardsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discards"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards"
func (n *Interface_Subinterface_Counters_InDiscardsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-discards"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InDiscards
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discards"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards"
func (n *Interface_Subinterface_Counters_InDiscardsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-discards"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InDiscards
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_InErrorsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors YANG schema element.
type Interface_Subinterface_Counters_InErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_InErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors YANG schema element.
type Interface_Subinterface_Counters_InErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors"
func (n *Interface_Subinterface_Counters_InErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors"
func (n *Interface_Subinterface_Counters_InErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_InFcsErrorsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors YANG schema element.
type Interface_Subinterface_Counters_InFcsErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_InFcsErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors YANG schema element.
type Interface_Subinterface_Counters_InFcsErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-fcs-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors"
func (n *Interface_Subinterface_Counters_InFcsErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-fcs-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InFcsErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-fcs-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors"
func (n *Interface_Subinterface_Counters_InFcsErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-fcs-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InFcsErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_InMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts YANG schema element.
type Interface_Subinterface_Counters_InMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_InMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts YANG schema element.
type Interface_Subinterface_Counters_InMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_Counters_InMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_Counters_InMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Counters_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Counters_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets"
func (n *Interface_Subinterface_Counters_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets"
func (n *Interface_Subinterface_Counters_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Counters_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Counters_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts"
func (n *Interface_Subinterface_Counters_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts"
func (n *Interface_Subinterface_Counters_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_InUnicastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts YANG schema element.
type Interface_Subinterface_Counters_InUnicastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_InUnicastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts YANG schema element.
type Interface_Subinterface_Counters_InUnicastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts"
func (n *Interface_Subinterface_Counters_InUnicastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-unicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InUnicastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts"
func (n *Interface_Subinterface_Counters_InUnicastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-unicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InUnicastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_InUnknownProtosPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos YANG schema element.
type Interface_Subinterface_Counters_InUnknownProtosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_InUnknownProtosPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos YANG schema element.
type Interface_Subinterface_Counters_InUnknownProtosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unknown-protos"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos"
func (n *Interface_Subinterface_Counters_InUnknownProtosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-unknown-protos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InUnknownProtos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unknown-protos"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos"
func (n *Interface_Subinterface_Counters_InUnknownProtosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-unknown-protos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InUnknownProtos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_LastClearPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear YANG schema element.
type Interface_Subinterface_Counters_LastClearPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_LastClearPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear YANG schema element.
type Interface_Subinterface_Counters_LastClearPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "last-clear"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear"
func (n *Interface_Subinterface_Counters_LastClearPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).LastClear
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "last-clear"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear"
func (n *Interface_Subinterface_Counters_LastClearPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).LastClear
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_OutBroadcastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutBroadcastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_OutBroadcastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutBroadcastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-broadcast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts"
func (n *Interface_Subinterface_Counters_OutBroadcastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-broadcast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutBroadcastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-broadcast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts"
func (n *Interface_Subinterface_Counters_OutBroadcastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-broadcast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutBroadcastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_OutDiscardsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards YANG schema element.
type Interface_Subinterface_Counters_OutDiscardsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_OutDiscardsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards YANG schema element.
type Interface_Subinterface_Counters_OutDiscardsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discards"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards"
func (n *Interface_Subinterface_Counters_OutDiscardsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-discards"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutDiscards
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discards"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards"
func (n *Interface_Subinterface_Counters_OutDiscardsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-discards"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutDiscards
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_OutErrorsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors YANG schema element.
type Interface_Subinterface_Counters_OutErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_OutErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors YANG schema element.
type Interface_Subinterface_Counters_OutErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors"
func (n *Interface_Subinterface_Counters_OutErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors"
func (n *Interface_Subinterface_Counters_OutErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_OutMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_OutMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_Counters_OutMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_Counters_OutMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Counters_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Counters_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets"
func (n *Interface_Subinterface_Counters_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets"
func (n *Interface_Subinterface_Counters_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Counters_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Counters_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts"
func (n *Interface_Subinterface_Counters_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts"
func (n *Interface_Subinterface_Counters_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_OutUnicastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutUnicastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_OutUnicastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutUnicastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-unicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts"
func (n *Interface_Subinterface_Counters_OutUnicastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-unicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutUnicastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-unicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts"
func (n *Interface_Subinterface_Counters_OutUnicastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-unicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutUnicastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_CountersPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type Interface_Subinterface_CountersPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type Interface_Subinterface_CountersPathAny struct {
	*ygnmi.NodePath
}

// CarrierTransitions (leaf): Number of times the interface state has transitioned
// between up and down since the time the device restarted
// or the last-clear time, whichever is most recent.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "carrier-transitions"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions"
func (n *Interface_Subinterface_CountersPath) CarrierTransitions() *Interface_Subinterface_Counters_CarrierTransitionsPath {
	ps := &Interface_Subinterface_Counters_CarrierTransitionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"carrier-transitions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CarrierTransitions (leaf): Number of times the interface state has transitioned
// between up and down since the time the device restarted
// or the last-clear time, whichever is most recent.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "carrier-transitions"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions"
func (n *Interface_Subinterface_CountersPathAny) CarrierTransitions() *Interface_Subinterface_Counters_CarrierTransitionsPathAny {
	ps := &Interface_Subinterface_Counters_CarrierTransitionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"carrier-transitions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBroadcastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a broadcast
// address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-broadcast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts"
func (n *Interface_Subinterface_CountersPath) InBroadcastPkts() *Interface_Subinterface_Counters_InBroadcastPktsPath {
	ps := &Interface_Subinterface_Counters_InBroadcastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBroadcastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a broadcast
// address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-broadcast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts"
func (n *Interface_Subinterface_CountersPathAny) InBroadcastPkts() *Interface_Subinterface_Counters_InBroadcastPktsPathAny {
	ps := &Interface_Subinterface_Counters_InBroadcastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InDiscards (leaf): The number of inbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being deliverable to a higher-layer
// protocol.  One possible reason for discarding such a
// packet could be to free up buffer space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discards"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards"
func (n *Interface_Subinterface_CountersPath) InDiscards() *Interface_Subinterface_Counters_InDiscardsPath {
	ps := &Interface_Subinterface_Counters_InDiscardsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-discards"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InDiscards (leaf): The number of inbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being deliverable to a higher-layer
// protocol.  One possible reason for discarding such a
// packet could be to free up buffer space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discards"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards"
func (n *Interface_Subinterface_CountersPathAny) InDiscards() *Interface_Subinterface_Counters_InDiscardsPathAny {
	ps := &Interface_Subinterface_Counters_InDiscardsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-discards"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InErrors (leaf): For packet-oriented interfaces, the number of inbound
// packets that contained errors preventing them from being
// deliverable to a higher-layer protocol.  For character-
// oriented or fixed-length interfaces, the number of
// inbound transmission units that contained errors
// preventing them from being deliverable to a higher-layer
// protocol.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors"
func (n *Interface_Subinterface_CountersPath) InErrors() *Interface_Subinterface_Counters_InErrorsPath {
	ps := &Interface_Subinterface_Counters_InErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InErrors (leaf): For packet-oriented interfaces, the number of inbound
// packets that contained errors preventing them from being
// deliverable to a higher-layer protocol.  For character-
// oriented or fixed-length interfaces, the number of
// inbound transmission units that contained errors
// preventing them from being deliverable to a higher-layer
// protocol.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors"
func (n *Interface_Subinterface_CountersPathAny) InErrors() *Interface_Subinterface_Counters_InErrorsPathAny {
	ps := &Interface_Subinterface_Counters_InErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFcsErrors (leaf): Number of received packets which had errors in the
// frame check sequence (FCS), i.e., framing errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-fcs-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors"
func (n *Interface_Subinterface_CountersPath) InFcsErrors() *Interface_Subinterface_Counters_InFcsErrorsPath {
	ps := &Interface_Subinterface_Counters_InFcsErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-fcs-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFcsErrors (leaf): Number of received packets which had errors in the
// frame check sequence (FCS), i.e., framing errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-fcs-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors"
func (n *Interface_Subinterface_CountersPathAny) InFcsErrors() *Interface_Subinterface_Counters_InFcsErrorsPathAny {
	ps := &Interface_Subinterface_Counters_InFcsErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-fcs-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a multicast
// address at this sub-layer.  For a MAC-layer protocol,
// this includes both Group and Functional addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_CountersPath) InMulticastPkts() *Interface_Subinterface_Counters_InMulticastPktsPath {
	ps := &Interface_Subinterface_Counters_InMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a multicast
// address at this sub-layer.  For a MAC-layer protocol,
// this includes both Group and Functional addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_CountersPathAny) InMulticastPkts() *Interface_Subinterface_Counters_InMulticastPktsPathAny {
	ps := &Interface_Subinterface_Counters_InMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of octets received on the interface,
// including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets"
func (n *Interface_Subinterface_CountersPath) InOctets() *Interface_Subinterface_Counters_InOctetsPath {
	ps := &Interface_Subinterface_Counters_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of octets received on the interface,
// including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets"
func (n *Interface_Subinterface_CountersPathAny) InOctets() *Interface_Subinterface_Counters_InOctetsPathAny {
	ps := &Interface_Subinterface_Counters_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of packets received on the interface,
// including all unicast, multicast, broadcast and bad packets
// etc.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts"
func (n *Interface_Subinterface_CountersPath) InPkts() *Interface_Subinterface_Counters_InPktsPath {
	ps := &Interface_Subinterface_Counters_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of packets received on the interface,
// including all unicast, multicast, broadcast and bad packets
// etc.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts"
func (n *Interface_Subinterface_CountersPathAny) InPkts() *Interface_Subinterface_Counters_InPktsPathAny {
	ps := &Interface_Subinterface_Counters_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUnicastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were not addressed to a
// multicast or broadcast address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts"
func (n *Interface_Subinterface_CountersPath) InUnicastPkts() *Interface_Subinterface_Counters_InUnicastPktsPath {
	ps := &Interface_Subinterface_Counters_InUnicastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUnicastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were not addressed to a
// multicast or broadcast address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts"
func (n *Interface_Subinterface_CountersPathAny) InUnicastPkts() *Interface_Subinterface_Counters_InUnicastPktsPathAny {
	ps := &Interface_Subinterface_Counters_InUnicastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUnknownProtos (leaf): For packet-oriented interfaces, the number of packets
// received via the interface that were discarded because
// of an unknown or unsupported protocol.  For
// character-oriented or fixed-length interfaces that
// support protocol multiplexing, the number of
// transmission units received via the interface that were
// discarded because of an unknown or unsupported protocol.
// For any interface that does not support protocol
// multiplexing, this counter is not present.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unknown-protos"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos"
func (n *Interface_Subinterface_CountersPath) InUnknownProtos() *Interface_Subinterface_Counters_InUnknownProtosPath {
	ps := &Interface_Subinterface_Counters_InUnknownProtosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-unknown-protos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUnknownProtos (leaf): For packet-oriented interfaces, the number of packets
// received via the interface that were discarded because
// of an unknown or unsupported protocol.  For
// character-oriented or fixed-length interfaces that
// support protocol multiplexing, the number of
// transmission units received via the interface that were
// discarded because of an unknown or unsupported protocol.
// For any interface that does not support protocol
// multiplexing, this counter is not present.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unknown-protos"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos"
func (n *Interface_Subinterface_CountersPathAny) InUnknownProtos() *Interface_Subinterface_Counters_InUnknownProtosPathAny {
	ps := &Interface_Subinterface_Counters_InUnknownProtosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-unknown-protos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastClear (leaf): Timestamp of the last time the interface counters were
// cleared.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "last-clear"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear"
func (n *Interface_Subinterface_CountersPath) LastClear() *Interface_Subinterface_Counters_LastClearPath {
	ps := &Interface_Subinterface_Counters_LastClearPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastClear (leaf): Timestamp of the last time the interface counters were
// cleared.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "last-clear"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear"
func (n *Interface_Subinterface_CountersPathAny) LastClear() *Interface_Subinterface_Counters_LastClearPathAny {
	ps := &Interface_Subinterface_Counters_LastClearPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBroadcastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// broadcast address at this sub-layer, including those
// that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-broadcast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts"
func (n *Interface_Subinterface_CountersPath) OutBroadcastPkts() *Interface_Subinterface_Counters_OutBroadcastPktsPath {
	ps := &Interface_Subinterface_Counters_OutBroadcastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBroadcastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// broadcast address at this sub-layer, including those
// that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-broadcast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts"
func (n *Interface_Subinterface_CountersPathAny) OutBroadcastPkts() *Interface_Subinterface_Counters_OutBroadcastPktsPathAny {
	ps := &Interface_Subinterface_Counters_OutBroadcastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDiscards (leaf): The number of outbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being transmitted.  One possible reason
// for discarding such a packet could be to free up buffer
// space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discards"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards"
func (n *Interface_Subinterface_CountersPath) OutDiscards() *Interface_Subinterface_Counters_OutDiscardsPath {
	ps := &Interface_Subinterface_Counters_OutDiscardsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-discards"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDiscards (leaf): The number of outbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being transmitted.  One possible reason
// for discarding such a packet could be to free up buffer
// space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discards"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards"
func (n *Interface_Subinterface_CountersPathAny) OutDiscards() *Interface_Subinterface_Counters_OutDiscardsPathAny {
	ps := &Interface_Subinterface_Counters_OutDiscardsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-discards"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutErrors (leaf): For packet-oriented interfaces, the number of outbound
// packets that could not be transmitted because of errors.
// For character-oriented or fixed-length interfaces, the
// number of outbound transmission units that could not be
// transmitted because of errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors"
func (n *Interface_Subinterface_CountersPath) OutErrors() *Interface_Subinterface_Counters_OutErrorsPath {
	ps := &Interface_Subinterface_Counters_OutErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutErrors (leaf): For packet-oriented interfaces, the number of outbound
// packets that could not be transmitted because of errors.
// For character-oriented or fixed-length interfaces, the
// number of outbound transmission units that could not be
// transmitted because of errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors"
func (n *Interface_Subinterface_CountersPathAny) OutErrors() *Interface_Subinterface_Counters_OutErrorsPathAny {
	ps := &Interface_Subinterface_Counters_OutErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// multicast address at this sub-layer, including those
// that were discarded or not sent.  For a MAC-layer
// protocol, this includes both Group and Functional
// addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_CountersPath) OutMulticastPkts() *Interface_Subinterface_Counters_OutMulticastPktsPath {
	ps := &Interface_Subinterface_Counters_OutMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// multicast address at this sub-layer, including those
// that were discarded or not sent.  For a MAC-layer
// protocol, this includes both Group and Functional
// addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_CountersPathAny) OutMulticastPkts() *Interface_Subinterface_Counters_OutMulticastPktsPathAny {
	ps := &Interface_Subinterface_Counters_OutMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of octets transmitted out of the
// interface, including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets"
func (n *Interface_Subinterface_CountersPath) OutOctets() *Interface_Subinterface_Counters_OutOctetsPath {
	ps := &Interface_Subinterface_Counters_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of octets transmitted out of the
// interface, including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets"
func (n *Interface_Subinterface_CountersPathAny) OutOctets() *Interface_Subinterface_Counters_OutOctetsPathAny {
	ps := &Interface_Subinterface_Counters_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of packets transmitted out of the
// interface, including all unicast, multicast, broadcast,
// and bad packets etc.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts"
func (n *Interface_Subinterface_CountersPath) OutPkts() *Interface_Subinterface_Counters_OutPktsPath {
	ps := &Interface_Subinterface_Counters_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of packets transmitted out of the
// interface, including all unicast, multicast, broadcast,
// and bad packets etc.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts"
func (n *Interface_Subinterface_CountersPathAny) OutPkts() *Interface_Subinterface_Counters_OutPktsPathAny {
	ps := &Interface_Subinterface_Counters_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutUnicastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were not addressed
// to a multicast or broadcast address at this sub-layer,
// including those that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-unicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts"
func (n *Interface_Subinterface_CountersPath) OutUnicastPkts() *Interface_Subinterface_Counters_OutUnicastPktsPath {
	ps := &Interface_Subinterface_Counters_OutUnicastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutUnicastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were not addressed
// to a multicast or broadcast address at this sub-layer,
// including those that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-unicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts"
func (n *Interface_Subinterface_CountersPathAny) OutUnicastPkts() *Interface_Subinterface_Counters_OutUnicastPktsPathAny {
	ps := &Interface_Subinterface_Counters_OutUnicastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_CountersPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Counters](
		"Interface_Subinterface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Counters](
		"Interface_Subinterface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_DhcpClientPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/dhcp-client YANG schema element.
type Interface_Subinterface_Ipv4_DhcpClientPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_DhcpClientPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/dhcp-client YANG schema element.
type Interface_Subinterface_Ipv4_DhcpClientPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/dhcp-client"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/dhcp-client"
func (n *Interface_Subinterface_Ipv4_DhcpClientPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/dhcp-client"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/dhcp-client"
func (n *Interface_Subinterface_Ipv4_DhcpClientPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/dhcp-client"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/config/dhcp-client"
func (n *Interface_Subinterface_Ipv4_DhcpClientPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/dhcp-client"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/config/dhcp-client"
func (n *Interface_Subinterface_Ipv4_DhcpClientPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/enabled YANG schema element.
type Interface_Subinterface_Ipv4_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/enabled YANG schema element.
type Interface_Subinterface_Ipv4_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/enabled"
func (n *Interface_Subinterface_Ipv4_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/enabled"
func (n *Interface_Subinterface_Ipv4_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/config/enabled"
func (n *Interface_Subinterface_Ipv4_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/config/enabled"
func (n *Interface_Subinterface_Ipv4_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_GratuitousArpAcceptedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/gratuitous-arp-accepted YANG schema element.
type Interface_Subinterface_Ipv4_GratuitousArpAcceptedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_GratuitousArpAcceptedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/gratuitous-arp-accepted YANG schema element.
type Interface_Subinterface_Ipv4_GratuitousArpAcceptedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/gratuitous-arp-accepted"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/gratuitous-arp-accepted"
func (n *Interface_Subinterface_Ipv4_GratuitousArpAcceptedPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "gratuitous-arp-accepted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).GratuitousArpAccepted
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/gratuitous-arp-accepted"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/gratuitous-arp-accepted"
func (n *Interface_Subinterface_Ipv4_GratuitousArpAcceptedPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "gratuitous-arp-accepted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).GratuitousArpAccepted
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/gratuitous-arp-accepted"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/config/gratuitous-arp-accepted"
func (n *Interface_Subinterface_Ipv4_GratuitousArpAcceptedPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "gratuitous-arp-accepted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).GratuitousArpAccepted
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/gratuitous-arp-accepted"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/config/gratuitous-arp-accepted"
func (n *Interface_Subinterface_Ipv4_GratuitousArpAcceptedPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "gratuitous-arp-accepted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).GratuitousArpAccepted
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_MtuPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/mtu YANG schema element.
type Interface_Subinterface_Ipv4_MtuPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/mtu YANG schema element.
type Interface_Subinterface_Ipv4_MtuPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mtu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/mtu"
func (n *Interface_Subinterface_Ipv4_MtuPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Mtu
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mtu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/mtu"
func (n *Interface_Subinterface_Ipv4_MtuPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Mtu
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mtu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/config/mtu"
func (n *Interface_Subinterface_Ipv4_MtuPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Mtu
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mtu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/config/mtu"
func (n *Interface_Subinterface_Ipv4_MtuPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Mtu
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4Path represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4 YANG schema element.
type Interface_Subinterface_Ipv4Path struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv4PathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4 YANG schema element.
type Interface_Subinterface_Ipv4PathAny struct {
	*ygnmi.NodePath
}

// AddressAny (list): The list of configured IPv4 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
func (n *Interface_Subinterface_Ipv4Path) AddressAny() *Interface_Subinterface_Ipv4_AddressPathAny {
	ps := &Interface_Subinterface_Ipv4_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// AddressAny (list): The list of configured IPv4 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
func (n *Interface_Subinterface_Ipv4PathAny) AddressAny() *Interface_Subinterface_Ipv4_AddressPathAny {
	ps := &Interface_Subinterface_Ipv4_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// Address (list): The list of configured IPv4 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
//
//	Ip: string
func (n *Interface_Subinterface_Ipv4Path) Address(Ip string) *Interface_Subinterface_Ipv4_AddressPath {
	ps := &Interface_Subinterface_Ipv4_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// Address (list): The list of configured IPv4 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
//
//	Ip: string
func (n *Interface_Subinterface_Ipv4PathAny) Address(Ip string) *Interface_Subinterface_Ipv4_AddressPathAny {
	ps := &Interface_Subinterface_Ipv4_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// AddressMap (list): The list of configured IPv4 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
func (n *Interface_Subinterface_Ipv4Path) AddressMap() *Interface_Subinterface_Ipv4_AddressPathMap {
	ps := &Interface_Subinterface_Ipv4_AddressPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AddressMap (list): The list of configured IPv4 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
func (n *Interface_Subinterface_Ipv4PathAny) AddressMap() *Interface_Subinterface_Ipv4_AddressPathMapAny {
	ps := &Interface_Subinterface_Ipv4_AddressPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters"
func (n *Interface_Subinterface_Ipv4Path) Counters() *Interface_Subinterface_Ipv4_CountersPath {
	ps := &Interface_Subinterface_Ipv4_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters"
func (n *Interface_Subinterface_Ipv4PathAny) Counters() *Interface_Subinterface_Ipv4_CountersPathAny {
	ps := &Interface_Subinterface_Ipv4_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/dhcp-client"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/*/dhcp-client"
func (n *Interface_Subinterface_Ipv4Path) DhcpClient() *Interface_Subinterface_Ipv4_DhcpClientPath {
	ps := &Interface_Subinterface_Ipv4_DhcpClientPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/dhcp-client"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/*/dhcp-client"
func (n *Interface_Subinterface_Ipv4PathAny) DhcpClient() *Interface_Subinterface_Ipv4_DhcpClientPathAny {
	ps := &Interface_Subinterface_Ipv4_DhcpClientPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Controls whether IPv4 is enabled or disabled on this
// interface.  When IPv4 is enabled, this interface is
// connected to an IPv4 stack, and the interface can send
// and receive IPv4 packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/*/enabled"
func (n *Interface_Subinterface_Ipv4Path) Enabled() *Interface_Subinterface_Ipv4_EnabledPath {
	ps := &Interface_Subinterface_Ipv4_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Controls whether IPv4 is enabled or disabled on this
// interface.  When IPv4 is enabled, this interface is
// connected to an IPv4 stack, and the interface can send
// and receive IPv4 packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/*/enabled"
func (n *Interface_Subinterface_Ipv4PathAny) Enabled() *Interface_Subinterface_Ipv4_EnabledPathAny {
	ps := &Interface_Subinterface_Ipv4_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GratuitousArpAccepted (leaf): When set to true, gratuitous ARPs will be accepted and
// the ARP table will be updated.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/gratuitous-arp-accepted"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/*/gratuitous-arp-accepted"
func (n *Interface_Subinterface_Ipv4Path) GratuitousArpAccepted() *Interface_Subinterface_Ipv4_GratuitousArpAcceptedPath {
	ps := &Interface_Subinterface_Ipv4_GratuitousArpAcceptedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "gratuitous-arp-accepted"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GratuitousArpAccepted (leaf): When set to true, gratuitous ARPs will be accepted and
// the ARP table will be updated.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/gratuitous-arp-accepted"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/*/gratuitous-arp-accepted"
func (n *Interface_Subinterface_Ipv4PathAny) GratuitousArpAccepted() *Interface_Subinterface_Ipv4_GratuitousArpAcceptedPathAny {
	ps := &Interface_Subinterface_Ipv4_GratuitousArpAcceptedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "gratuitous-arp-accepted"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mtu (leaf): The size, in octets, of the largest IPv4 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mtu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/*/mtu"
func (n *Interface_Subinterface_Ipv4Path) Mtu() *Interface_Subinterface_Ipv4_MtuPath {
	ps := &Interface_Subinterface_Ipv4_MtuPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mtu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mtu (leaf): The size, in octets, of the largest IPv4 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mtu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/*/mtu"
func (n *Interface_Subinterface_Ipv4PathAny) Mtu() *Interface_Subinterface_Ipv4_MtuPathAny {
	ps := &Interface_Subinterface_Ipv4_MtuPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mtu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborAny (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
func (n *Interface_Subinterface_Ipv4Path) NeighborAny() *Interface_Subinterface_Ipv4_NeighborPathAny {
	ps := &Interface_Subinterface_Ipv4_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// NeighborAny (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
func (n *Interface_Subinterface_Ipv4PathAny) NeighborAny() *Interface_Subinterface_Ipv4_NeighborPathAny {
	ps := &Interface_Subinterface_Ipv4_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// Neighbor (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
//
//	Ip: string
func (n *Interface_Subinterface_Ipv4Path) Neighbor(Ip string) *Interface_Subinterface_Ipv4_NeighborPath {
	ps := &Interface_Subinterface_Ipv4_NeighborPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// Neighbor (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
//
//	Ip: string
func (n *Interface_Subinterface_Ipv4PathAny) Neighbor(Ip string) *Interface_Subinterface_Ipv4_NeighborPathAny {
	ps := &Interface_Subinterface_Ipv4_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// NeighborMap (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
func (n *Interface_Subinterface_Ipv4Path) NeighborMap() *Interface_Subinterface_Ipv4_NeighborPathMap {
	ps := &Interface_Subinterface_Ipv4_NeighborPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborMap (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
func (n *Interface_Subinterface_Ipv4PathAny) NeighborMap() *Interface_Subinterface_Ipv4_NeighborPathMapAny {
	ps := &Interface_Subinterface_Ipv4_NeighborPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ProxyArp (container): Configuration and operational state parameters
// relating to proxy ARP. This functionality allows a
// system to respond to ARP requests that are not
// explicitly destined to the local system.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "proxy-arp"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp"
func (n *Interface_Subinterface_Ipv4Path) ProxyArp() *Interface_Subinterface_Ipv4_ProxyArpPath {
	ps := &Interface_Subinterface_Ipv4_ProxyArpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"proxy-arp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ProxyArp (container): Configuration and operational state parameters
// relating to proxy ARP. This functionality allows a
// system to respond to ARP requests that are not
// explicitly destined to the local system.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "proxy-arp"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp"
func (n *Interface_Subinterface_Ipv4PathAny) ProxyArp() *Interface_Subinterface_Ipv4_ProxyArpPathAny {
	ps := &Interface_Subinterface_Ipv4_ProxyArpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"proxy-arp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "unnumbered"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered"
func (n *Interface_Subinterface_Ipv4Path) Unnumbered() *Interface_Subinterface_Ipv4_UnnumberedPath {
	ps := &Interface_Subinterface_Ipv4_UnnumberedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "unnumbered"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered"
func (n *Interface_Subinterface_Ipv4PathAny) Unnumbered() *Interface_Subinterface_Ipv4_UnnumberedPathAny {
	ps := &Interface_Subinterface_Ipv4_UnnumberedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Urpf (container): URPF container.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf"
func (n *Interface_Subinterface_Ipv4Path) Urpf() *Interface_Subinterface_Ipv4_UrpfPath {
	ps := &Interface_Subinterface_Ipv4_UrpfPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Urpf (container): URPF container.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf"
func (n *Interface_Subinterface_Ipv4PathAny) Urpf() *Interface_Subinterface_Ipv4_UrpfPathAny {
	ps := &Interface_Subinterface_Ipv4_UrpfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4Path) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv4] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv4](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4PathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4Path) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv4] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv4](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4PathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Address_IpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/ip YANG schema element.
type Interface_Subinterface_Ipv4_Address_IpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Address_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/ip YANG schema element.
type Interface_Subinterface_Ipv4_Address_IpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/ip"
func (n *Interface_Subinterface_Ipv4_Address_IpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/ip"
func (n *Interface_Subinterface_Ipv4_Address_IpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/ip"
func (n *Interface_Subinterface_Ipv4_Address_IpPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Subinterface_Ipv4_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/ip"
func (n *Interface_Subinterface_Ipv4_Address_IpPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv4_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Address_OriginPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin YANG schema element.
type Interface_Subinterface_Ipv4_Address_OriginPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Address_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin YANG schema element.
type Interface_Subinterface_Ipv4_Address_OriginPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv4_Address_OriginPath) State() ygnmi.SingletonQuery[oc.E_IfIp_IpAddressOrigin] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_IpAddressOrigin](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_IpAddressOrigin, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv4_Address_OriginPathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_IpAddressOrigin] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_IpAddressOrigin](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_IpAddressOrigin, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/prefix-length YANG schema element.
type Interface_Subinterface_Ipv4_Address_PrefixLengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/prefix-length YANG schema element.
type Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/prefix-length"
func (n *Interface_Subinterface_Ipv4_Address_PrefixLengthPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/prefix-length"
func (n *Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix-length"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/prefix-length"
func (n *Interface_Subinterface_Ipv4_Address_PrefixLengthPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_Subinterface_Ipv4_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix-length"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/prefix-length"
func (n *Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv4_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Address_TypePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/type YANG schema element.
type Interface_Subinterface_Ipv4_Address_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Address_TypePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/type YANG schema element.
type Interface_Subinterface_Ipv4_Address_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/type"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/type"
func (n *Interface_Subinterface_Ipv4_Address_TypePath) State() ygnmi.SingletonQuery[oc.E_IfIp_Ipv4AddressType] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_Ipv4AddressType](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv4AddressType, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/type"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/type"
func (n *Interface_Subinterface_Ipv4_Address_TypePathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_Ipv4AddressType] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_Ipv4AddressType](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv4AddressType, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/type"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/type"
func (n *Interface_Subinterface_Ipv4_Address_TypePath) Config() ygnmi.ConfigQuery[oc.E_IfIp_Ipv4AddressType] {
	return ygnmi.NewConfigQuery[oc.E_IfIp_Ipv4AddressType](
		"Interface_Subinterface_Ipv4_Address",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv4AddressType, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/type"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/type"
func (n *Interface_Subinterface_Ipv4_Address_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_IfIp_Ipv4AddressType] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_Ipv4AddressType](
		"Interface_Subinterface_Ipv4_Address",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv4AddressType, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_AddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address YANG schema element.
type Interface_Subinterface_Ipv4_AddressPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv4_AddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address YANG schema element.
type Interface_Subinterface_Ipv4_AddressPathAny struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv4_AddressPathMap represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address YANG schema element.
type Interface_Subinterface_Ipv4_AddressPathMap struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv4_AddressPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address YANG schema element.
type Interface_Subinterface_Ipv4_AddressPathMapAny struct {
	*ygnmi.NodePath
}

// Ip (leaf): The IPv4 address on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/*/ip"
func (n *Interface_Subinterface_Ipv4_AddressPath) Ip() *Interface_Subinterface_Ipv4_Address_IpPath {
	ps := &Interface_Subinterface_Ipv4_Address_IpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ip (leaf): The IPv4 address on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/*/ip"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) Ip() *Interface_Subinterface_Ipv4_Address_IpPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_IpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv4_AddressPath) Origin() *Interface_Subinterface_Ipv4_Address_OriginPath {
	ps := &Interface_Subinterface_Ipv4_Address_OriginPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) Origin() *Interface_Subinterface_Ipv4_Address_OriginPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_OriginPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The length of the subnet prefix.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/prefix-length"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/*/prefix-length"
func (n *Interface_Subinterface_Ipv4_AddressPath) PrefixLength() *Interface_Subinterface_Ipv4_Address_PrefixLengthPath {
	ps := &Interface_Subinterface_Ipv4_Address_PrefixLengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The length of the subnet prefix.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/prefix-length"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/*/prefix-length"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) PrefixLength() *Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Specifies the explicit type of the IPv4 address being assigned
// to the interface. By default, addresses are assumed to be a primary address.
// Where secondary addresses is to be configured, this leaf should be set
// to SECONDARY.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/type"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/*/type"
func (n *Interface_Subinterface_Ipv4_AddressPath) Type() *Interface_Subinterface_Ipv4_Address_TypePath {
	ps := &Interface_Subinterface_Ipv4_Address_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Specifies the explicit type of the IPv4 address being assigned
// to the interface. By default, addresses are assumed to be a primary address.
// Where secondary addresses is to be configured, this leaf should be set
// to SECONDARY.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/type"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/*/type"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) Type() *Interface_Subinterface_Ipv4_Address_TypePathAny {
	ps := &Interface_Subinterface_Ipv4_Address_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
func (n *Interface_Subinterface_Ipv4_AddressPath) VrrpGroupAny() *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
	return ps
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) VrrpGroupAny() *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
	return ps
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
//
//	VirtualRouterId: uint8
func (n *Interface_Subinterface_Ipv4_AddressPath) VrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv4_Address_VrrpGroupPath {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
	return ps
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
//
//	VirtualRouterId: uint8
func (n *Interface_Subinterface_Ipv4_AddressPathAny) VrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
	return ps
}

// VrrpGroupMap (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
func (n *Interface_Subinterface_Ipv4_AddressPath) VrrpGroupMap() *Interface_Subinterface_Ipv4_Address_VrrpGroupPathMap {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// VrrpGroupMap (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) VrrpGroupMap() *Interface_Subinterface_Ipv4_Address_VrrpGroupPathMapAny {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_AddressPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv4_Address] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv4_Address](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_AddressPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4_Address] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4_Address](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_AddressPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv4_Address] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv4_Address](
		"Interface_Subinterface_Ipv4_Address",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_AddressPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4_Address] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4_Address](
		"Interface_Subinterface_Ipv4_Address",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_AddressPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Interface_Subinterface_Ipv4_Address] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Interface_Subinterface_Ipv4_Address](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv4_Address, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_AddressPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Interface_Subinterface_Ipv4_Address] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_Subinterface_Ipv4_Address](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv4_Address, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_AddressPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Interface_Subinterface_Ipv4_Address] {
	return ygnmi.NewConfigQuery[map[string]*oc.Interface_Subinterface_Ipv4_Address](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv4_Address, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_AddressPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Interface_Subinterface_Ipv4_Address] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_Subinterface_Ipv4_Address](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv4_Address, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/accept-mode YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/accept-mode YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/accept-mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/accept-mode"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "accept-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).AcceptMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/accept-mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/accept-mode"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "accept-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).AcceptMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/accept-mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "accept-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).AcceptMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/accept-mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "accept-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).AcceptMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/advertisement-interval YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/advertisement-interval YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/advertisement-interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/advertisement-interval"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).AdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/advertisement-interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/advertisement-interval"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).AdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/advertisement-interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).AdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/advertisement-interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).AdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).CurrentPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).CurrentPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/preempt YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/preempt YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/preempt"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).Preempt
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/preempt"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).Preempt
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).Preempt
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).Preempt
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/preempt-delay YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/preempt-delay YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt-delay"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/preempt-delay"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt-delay"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/preempt-delay"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt-delay"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt-delay"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/priority YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/priority YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-address YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-address YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-address"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-address"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-router-id YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-router-id YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-router-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-router-id"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-router-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-router-id"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-router-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-router-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Address_VrrpGroupPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroupPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroupPathMap represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroupPathMap struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroupPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroupPathMapAny struct {
	*ygnmi.NodePath
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/accept-mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/*/accept-mode"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) AcceptMode() *Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePath {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "accept-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/accept-mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/*/accept-mode"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) AcceptMode() *Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePathAny {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "accept-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/advertisement-interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/*/advertisement-interval"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) AdvertisementInterval() *Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/advertisement-interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/*/advertisement-interval"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) AdvertisementInterval() *Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) CurrentPriority() *Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPath {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) CurrentPriority() *Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-tracking"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) InterfaceTracking() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-tracking"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) InterfaceTracking() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/*/preempt"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) Preempt() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPath {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/*/preempt"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) Preempt() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt-delay"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/*/preempt-delay"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) PreemptDelay() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPath {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt-delay"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/*/preempt-delay"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) PreemptDelay() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/*/priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) Priority() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPath {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/*/priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) Priority() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/*/virtual-address"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) VirtualAddress() *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPath {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/*/virtual-address"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) VirtualAddress() *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-router-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/*/virtual-router-id"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) VirtualRouterId() *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPath {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-router-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/*/virtual-router-id"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) VirtualRouterId() *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathMap) Config() ygnmi.ConfigQuery[map[uint8]*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewConfigQuery[map[uint8]*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup](
		"Interface_Subinterface_Ipv4_Address",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathMapAny) Config() ygnmi.WildcardQuery[map[uint8]*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup](
		"Interface_Subinterface_Ipv4_Address",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority-decrement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority-decrement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority-decrement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority-decrement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/track-interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/track-interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/track-interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/track-interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny struct {
	*ygnmi.NodePath
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority-decrement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/*/priority-decrement"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) PriorityDecrement() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority-decrement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/*/priority-decrement"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) PriorityDecrement() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/track-interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/*/track-interface"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) TrackInterface() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "track-interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/track-interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/*/track-interface"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) TrackInterface() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "track-interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking](
		"Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).InDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).InDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Counters_InErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-error-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InErrorPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Counters_InErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-error-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InErrorPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_InErrorPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).InErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_InErrorPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).InErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).InForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).InForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Counters_InForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InForwardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Counters_InForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InForwardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_InForwardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).InForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_InForwardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).InForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Counters_InMulticastOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-multicast-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InMulticastOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Counters_InMulticastOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-multicast-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InMulticastOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-multicast-octets"
func (n *Interface_Subinterface_Ipv4_Counters_InMulticastOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).InMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-multicast-octets"
func (n *Interface_Subinterface_Ipv4_Counters_InMulticastOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).InMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Counters_InMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-multicast-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Counters_InMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-multicast-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_InMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).InMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_InMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).InMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv4_Counters_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv4_Counters_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).OutDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).OutDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Counters_OutErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-error-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutErrorPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Counters_OutErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-error-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutErrorPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_OutErrorPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).OutErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_OutErrorPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).OutErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).OutForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).OutForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).OutForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).OutForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Counters_OutMulticastOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-multicast-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutMulticastOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Counters_OutMulticastOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-multicast-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutMulticastOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-multicast-octets"
func (n *Interface_Subinterface_Ipv4_Counters_OutMulticastOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).OutMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-multicast-octets"
func (n *Interface_Subinterface_Ipv4_Counters_OutMulticastOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).OutMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Counters_OutMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-multicast-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Counters_OutMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-multicast-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_OutMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).OutMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_OutMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).OutMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv4_Counters_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv4_Counters_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Counters_UrpfDropBytesPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/urpf-drop-bytes YANG schema element.
type Interface_Subinterface_Ipv4_Counters_UrpfDropBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Counters_UrpfDropBytesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/urpf-drop-bytes YANG schema element.
type Interface_Subinterface_Ipv4_Counters_UrpfDropBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "urpf-drop-bytes"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/urpf-drop-bytes"
func (n *Interface_Subinterface_Ipv4_Counters_UrpfDropBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"urpf-drop-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).UrpfDropBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "urpf-drop-bytes"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/urpf-drop-bytes"
func (n *Interface_Subinterface_Ipv4_Counters_UrpfDropBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"urpf-drop-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).UrpfDropBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Counters_UrpfDropPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/urpf-drop-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_UrpfDropPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Counters_UrpfDropPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/urpf-drop-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_UrpfDropPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "urpf-drop-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/urpf-drop-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_UrpfDropPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"urpf-drop-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).UrpfDropPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "urpf-drop-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/urpf-drop-pkts"
func (n *Interface_Subinterface_Ipv4_Counters_UrpfDropPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"urpf-drop-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Counters).UrpfDropPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_CountersPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters YANG schema element.
type Interface_Subinterface_Ipv4_CountersPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv4_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters YANG schema element.
type Interface_Subinterface_Ipv4_CountersPathAny struct {
	*ygnmi.NodePath
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) InDiscardedPkts() *Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPath {
	ps := &Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InDiscardedPkts() *Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPathAny {
	ps := &Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) InErrorPkts() *Interface_Subinterface_Ipv4_Counters_InErrorPktsPath {
	ps := &Interface_Subinterface_Ipv4_Counters_InErrorPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InErrorPkts() *Interface_Subinterface_Ipv4_Counters_InErrorPktsPathAny {
	ps := &Interface_Subinterface_Ipv4_Counters_InErrorPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv4_CountersPath) InForwardedOctets() *Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPath {
	ps := &Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InForwardedOctets() *Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPathAny {
	ps := &Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) InForwardedPkts() *Interface_Subinterface_Ipv4_Counters_InForwardedPktsPath {
	ps := &Interface_Subinterface_Ipv4_Counters_InForwardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InForwardedPkts() *Interface_Subinterface_Ipv4_Counters_InForwardedPktsPathAny {
	ps := &Interface_Subinterface_Ipv4_Counters_InForwardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastOctets (leaf): The total number of octets received in input IP
// multicast packets for the specified address
// family, including those received in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-multicast-octets"
func (n *Interface_Subinterface_Ipv4_CountersPath) InMulticastOctets() *Interface_Subinterface_Ipv4_Counters_InMulticastOctetsPath {
	ps := &Interface_Subinterface_Ipv4_Counters_InMulticastOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastOctets (leaf): The total number of octets received in input IP
// multicast packets for the specified address
// family, including those received in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-multicast-octets"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InMulticastOctets() *Interface_Subinterface_Ipv4_Counters_InMulticastOctetsPathAny {
	ps := &Interface_Subinterface_Ipv4_Counters_InMulticastOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastPkts (leaf): The number of IP packets received for the specified
// address family that are multicast packets.
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) InMulticastPkts() *Interface_Subinterface_Ipv4_Counters_InMulticastPktsPath {
	ps := &Interface_Subinterface_Ipv4_Counters_InMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastPkts (leaf): The number of IP packets received for the specified
// address family that are multicast packets.
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InMulticastPkts() *Interface_Subinterface_Ipv4_Counters_InMulticastPktsPathAny {
	ps := &Interface_Subinterface_Ipv4_Counters_InMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv4_CountersPath) InOctets() *Interface_Subinterface_Ipv4_Counters_InOctetsPath {
	ps := &Interface_Subinterface_Ipv4_Counters_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InOctets() *Interface_Subinterface_Ipv4_Counters_InOctetsPathAny {
	ps := &Interface_Subinterface_Ipv4_Counters_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including all IP unicast, multicast,
// broadcast and error packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) InPkts() *Interface_Subinterface_Ipv4_Counters_InPktsPath {
	ps := &Interface_Subinterface_Ipv4_Counters_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including all IP unicast, multicast,
// broadcast and error packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InPkts() *Interface_Subinterface_Ipv4_Counters_InPktsPathAny {
	ps := &Interface_Subinterface_Ipv4_Counters_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutDiscardedPkts() *Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPath {
	ps := &Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutDiscardedPkts() *Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPathAny {
	ps := &Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutErrorPkts() *Interface_Subinterface_Ipv4_Counters_OutErrorPktsPath {
	ps := &Interface_Subinterface_Ipv4_Counters_OutErrorPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutErrorPkts() *Interface_Subinterface_Ipv4_Counters_OutErrorPktsPathAny {
	ps := &Interface_Subinterface_Ipv4_Counters_OutErrorPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutForwardedOctets() *Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPath {
	ps := &Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutForwardedOctets() *Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPathAny {
	ps := &Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutForwardedPkts() *Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPath {
	ps := &Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutForwardedPkts() *Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPathAny {
	ps := &Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastOctets (leaf): The total number of IP multicast octets transmitted.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-multicast-octets"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutMulticastOctets() *Interface_Subinterface_Ipv4_Counters_OutMulticastOctetsPath {
	ps := &Interface_Subinterface_Ipv4_Counters_OutMulticastOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastOctets (leaf): The total number of IP multicast octets transmitted.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-multicast-octets"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutMulticastOctets() *Interface_Subinterface_Ipv4_Counters_OutMulticastOctetsPathAny {
	ps := &Interface_Subinterface_Ipv4_Counters_OutMulticastOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastPkts (leaf): The total number of IP multicast packets transmitted.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutMulticastPkts() *Interface_Subinterface_Ipv4_Counters_OutMulticastPktsPath {
	ps := &Interface_Subinterface_Ipv4_Counters_OutMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastPkts (leaf): The total number of IP multicast packets transmitted.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutMulticastPkts() *Interface_Subinterface_Ipv4_Counters_OutMulticastPktsPathAny {
	ps := &Interface_Subinterface_Ipv4_Counters_OutMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutOctets() *Interface_Subinterface_Ipv4_Counters_OutOctetsPath {
	ps := &Interface_Subinterface_Ipv4_Counters_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutOctets() *Interface_Subinterface_Ipv4_Counters_OutOctetsPathAny {
	ps := &Interface_Subinterface_Ipv4_Counters_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device as well as unicast, multicast and broadcast
// packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutPkts() *Interface_Subinterface_Ipv4_Counters_OutPktsPath {
	ps := &Interface_Subinterface_Ipv4_Counters_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device as well as unicast, multicast and broadcast
// packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutPkts() *Interface_Subinterface_Ipv4_Counters_OutPktsPathAny {
	ps := &Interface_Subinterface_Ipv4_Counters_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UrpfDropBytes (leaf): This counter counts bytes/octets discarded as result of
// Unicast Reverse Path Forwarding verification.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf-drop-bytes"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/urpf-drop-bytes"
func (n *Interface_Subinterface_Ipv4_CountersPath) UrpfDropBytes() *Interface_Subinterface_Ipv4_Counters_UrpfDropBytesPath {
	ps := &Interface_Subinterface_Ipv4_Counters_UrpfDropBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf-drop-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UrpfDropBytes (leaf): This counter counts bytes/octets discarded as result of
// Unicast Reverse Path Forwarding verification.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf-drop-bytes"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/urpf-drop-bytes"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) UrpfDropBytes() *Interface_Subinterface_Ipv4_Counters_UrpfDropBytesPathAny {
	ps := &Interface_Subinterface_Ipv4_Counters_UrpfDropBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf-drop-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UrpfDropPkts (leaf): This counter counts packet discarded as result of Unicast
// Reverse Path Forwarding verification.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf-drop-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/urpf-drop-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) UrpfDropPkts() *Interface_Subinterface_Ipv4_Counters_UrpfDropPktsPath {
	ps := &Interface_Subinterface_Ipv4_Counters_UrpfDropPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf-drop-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UrpfDropPkts (leaf): This counter counts packet discarded as result of Unicast
// Reverse Path Forwarding verification.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf-drop-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/urpf-drop-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) UrpfDropPkts() *Interface_Subinterface_Ipv4_Counters_UrpfDropPktsPathAny {
	ps := &Interface_Subinterface_Ipv4_Counters_UrpfDropPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf-drop-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_CountersPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv4_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv4_Counters](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4_Counters](
		"Interface_Subinterface_Ipv4_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Neighbor_IpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/ip YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_IpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Neighbor_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/ip YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_IpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/ip"
func (n *Interface_Subinterface_Ipv4_Neighbor_IpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Subinterface_Ipv4_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/ip"
func (n *Interface_Subinterface_Ipv4_Neighbor_IpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv4_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/ip"
func (n *Interface_Subinterface_Ipv4_Neighbor_IpPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Subinterface_Ipv4_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/ip"
func (n *Interface_Subinterface_Ipv4_Neighbor_IpPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv4_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/link-layer-address YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/link-layer-address YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/link-layer-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/link-layer-address"
func (n *Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Subinterface_Ipv4_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/link-layer-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/link-layer-address"
func (n *Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv4_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/link-layer-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/link-layer-address"
func (n *Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Subinterface_Ipv4_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/link-layer-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/link-layer-address"
func (n *Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv4_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Neighbor_OriginPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/origin YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_OriginPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Neighbor_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/origin YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_OriginPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv4_Neighbor_OriginPath) State() ygnmi.SingletonQuery[oc.E_IfIp_NeighborOrigin] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_NeighborOrigin](
		"Interface_Subinterface_Ipv4_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_NeighborOrigin, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Neighbor).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv4_Neighbor_OriginPathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_NeighborOrigin] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_NeighborOrigin](
		"Interface_Subinterface_Ipv4_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_NeighborOrigin, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Neighbor).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_NeighborPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv4_NeighborPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv4_NeighborPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv4_NeighborPathAny struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv4_NeighborPathMap represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv4_NeighborPathMap struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv4_NeighborPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv4_NeighborPathMapAny struct {
	*ygnmi.NodePath
}

// Ip (leaf): The IPv4 address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/*/ip"
func (n *Interface_Subinterface_Ipv4_NeighborPath) Ip() *Interface_Subinterface_Ipv4_Neighbor_IpPath {
	ps := &Interface_Subinterface_Ipv4_Neighbor_IpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ip (leaf): The IPv4 address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/*/ip"
func (n *Interface_Subinterface_Ipv4_NeighborPathAny) Ip() *Interface_Subinterface_Ipv4_Neighbor_IpPathAny {
	ps := &Interface_Subinterface_Ipv4_Neighbor_IpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/link-layer-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/*/link-layer-address"
func (n *Interface_Subinterface_Ipv4_NeighborPath) LinkLayerAddress() *Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPath {
	ps := &Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/link-layer-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/*/link-layer-address"
func (n *Interface_Subinterface_Ipv4_NeighborPathAny) LinkLayerAddress() *Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPathAny {
	ps := &Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this neighbor entry, static or dynamic.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv4_NeighborPath) Origin() *Interface_Subinterface_Ipv4_Neighbor_OriginPath {
	ps := &Interface_Subinterface_Ipv4_Neighbor_OriginPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this neighbor entry, static or dynamic.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv4_NeighborPathAny) Origin() *Interface_Subinterface_Ipv4_Neighbor_OriginPathAny {
	ps := &Interface_Subinterface_Ipv4_Neighbor_OriginPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_NeighborPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv4_Neighbor] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv4_Neighbor](
		"Interface_Subinterface_Ipv4_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_NeighborPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4_Neighbor](
		"Interface_Subinterface_Ipv4_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_NeighborPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv4_Neighbor] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv4_Neighbor](
		"Interface_Subinterface_Ipv4_Neighbor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_NeighborPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4_Neighbor](
		"Interface_Subinterface_Ipv4_Neighbor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_NeighborPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Interface_Subinterface_Ipv4_Neighbor] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Interface_Subinterface_Ipv4_Neighbor](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv4_Neighbor, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_NeighborPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Interface_Subinterface_Ipv4_Neighbor] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_Subinterface_Ipv4_Neighbor](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv4_Neighbor, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_NeighborPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Interface_Subinterface_Ipv4_Neighbor] {
	return ygnmi.NewConfigQuery[map[string]*oc.Interface_Subinterface_Ipv4_Neighbor](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv4_Neighbor, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_NeighborPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Interface_Subinterface_Ipv4_Neighbor] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_Subinterface_Ipv4_Neighbor](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv4_Neighbor, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// Interface_Subinterface_Ipv4_ProxyArp_ModePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/state/mode YANG schema element.
type Interface_Subinterface_Ipv4_ProxyArp_ModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_ProxyArp_ModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/state/mode YANG schema element.
type Interface_Subinterface_Ipv4_ProxyArp_ModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/state/mode"
func (n *Interface_Subinterface_Ipv4_ProxyArp_ModePath) State() ygnmi.SingletonQuery[oc.E_ProxyArp_Mode] {
	return ygnmi.NewSingletonQuery[oc.E_ProxyArp_Mode](
		"Interface_Subinterface_Ipv4_ProxyArp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_ProxyArp_Mode, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_ProxyArp).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_ProxyArp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/state/mode"
func (n *Interface_Subinterface_Ipv4_ProxyArp_ModePathAny) State() ygnmi.WildcardQuery[oc.E_ProxyArp_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_ProxyArp_Mode](
		"Interface_Subinterface_Ipv4_ProxyArp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_ProxyArp_Mode, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_ProxyArp).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_ProxyArp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/config/mode"
func (n *Interface_Subinterface_Ipv4_ProxyArp_ModePath) Config() ygnmi.ConfigQuery[oc.E_ProxyArp_Mode] {
	return ygnmi.NewConfigQuery[oc.E_ProxyArp_Mode](
		"Interface_Subinterface_Ipv4_ProxyArp",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_ProxyArp_Mode, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_ProxyArp).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_ProxyArp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/config/mode"
func (n *Interface_Subinterface_Ipv4_ProxyArp_ModePathAny) Config() ygnmi.WildcardQuery[oc.E_ProxyArp_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_ProxyArp_Mode](
		"Interface_Subinterface_Ipv4_ProxyArp",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_ProxyArp_Mode, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_ProxyArp).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_ProxyArp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_ProxyArpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp YANG schema element.
type Interface_Subinterface_Ipv4_ProxyArpPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv4_ProxyArpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp YANG schema element.
type Interface_Subinterface_Ipv4_ProxyArpPathAny struct {
	*ygnmi.NodePath
}

// Mode (leaf): When set to a value other than DISABLE, the local system should
// respond to ARP requests that are for target addresses other than
// those that are configured on the local subinterface using its own
// MAC address as the target hardware address. If the REMOTE_ONLY
// value is specified, replies are only sent when the target address
// falls outside the locally configured subnets on the interface,
// whereas with the ALL value, all requests, regardless of their
// target address are replied to.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/*/mode"
func (n *Interface_Subinterface_Ipv4_ProxyArpPath) Mode() *Interface_Subinterface_Ipv4_ProxyArp_ModePath {
	ps := &Interface_Subinterface_Ipv4_ProxyArp_ModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): When set to a value other than DISABLE, the local system should
// respond to ARP requests that are for target addresses other than
// those that are configured on the local subinterface using its own
// MAC address as the target hardware address. If the REMOTE_ONLY
// value is specified, replies are only sent when the target address
// falls outside the locally configured subnets on the interface,
// whereas with the ALL value, all requests, regardless of their
// target address are replied to.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/*/mode"
func (n *Interface_Subinterface_Ipv4_ProxyArpPathAny) Mode() *Interface_Subinterface_Ipv4_ProxyArp_ModePathAny {
	ps := &Interface_Subinterface_Ipv4_ProxyArp_ModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_ProxyArpPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv4_ProxyArp] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv4_ProxyArp](
		"Interface_Subinterface_Ipv4_ProxyArp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_ProxyArpPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4_ProxyArp] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4_ProxyArp](
		"Interface_Subinterface_Ipv4_ProxyArp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_ProxyArpPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv4_ProxyArp] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv4_ProxyArp](
		"Interface_Subinterface_Ipv4_ProxyArp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_ProxyArpPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4_ProxyArp] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4_ProxyArp](
		"Interface_Subinterface_Ipv4_ProxyArp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/state/enabled YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/state/enabled YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/state/enabled"
func (n *Interface_Subinterface_Ipv4_Unnumbered_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv4_Unnumbered",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/state/enabled"
func (n *Interface_Subinterface_Ipv4_Unnumbered_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4_Unnumbered",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/config/enabled"
func (n *Interface_Subinterface_Ipv4_Unnumbered_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv4_Unnumbered",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/config/enabled"
func (n *Interface_Subinterface_Ipv4_Unnumbered_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4_Unnumbered",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered YANG schema element.
type Interface_Subinterface_Ipv4_UnnumberedPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv4_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered YANG schema element.
type Interface_Subinterface_Ipv4_UnnumberedPathAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/*/enabled"
func (n *Interface_Subinterface_Ipv4_UnnumberedPath) Enabled() *Interface_Subinterface_Ipv4_Unnumbered_EnabledPath {
	ps := &Interface_Subinterface_Ipv4_Unnumbered_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/*/enabled"
func (n *Interface_Subinterface_Ipv4_UnnumberedPathAny) Enabled() *Interface_Subinterface_Ipv4_Unnumbered_EnabledPathAny {
	ps := &Interface_Subinterface_Ipv4_Unnumbered_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-ref"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref"
func (n *Interface_Subinterface_Ipv4_UnnumberedPath) InterfaceRef() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath {
	ps := &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-ref"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref"
func (n *Interface_Subinterface_Ipv4_UnnumberedPathAny) InterfaceRef() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny {
	ps := &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_UnnumberedPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv4_Unnumbered] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv4_Unnumbered](
		"Interface_Subinterface_Ipv4_Unnumbered",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_UnnumberedPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4_Unnumbered] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4_Unnumbered](
		"Interface_Subinterface_Ipv4_Unnumbered",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_UnnumberedPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv4_Unnumbered] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv4_Unnumbered](
		"Interface_Subinterface_Ipv4_Unnumbered",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_UnnumberedPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4_Unnumbered] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4_Unnumbered](
		"Interface_Subinterface_Ipv4_Unnumbered",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/state/interface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/state/interface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/config/interface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/config/interface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/state/subinterface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/state/subinterface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/config/subinterface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/config/subinterface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/*/interface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath) Interface() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePath {
	ps := &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/*/interface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny) Interface() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny {
	ps := &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is required, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/*/subinterface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath) Subinterface() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath {
	ps := &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is required, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/*/subinterface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny {
	ps := &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef](
		"Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef](
		"Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef](
		"Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef](
		"Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Urpf_AllowDefaultRoutePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/state/allow-default-route YANG schema element.
type Interface_Subinterface_Ipv4_Urpf_AllowDefaultRoutePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Urpf_AllowDefaultRoutePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/state/allow-default-route YANG schema element.
type Interface_Subinterface_Ipv4_Urpf_AllowDefaultRoutePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-default-route"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/state/allow-default-route"
func (n *Interface_Subinterface_Ipv4_Urpf_AllowDefaultRoutePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv4_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-default-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Urpf).AllowDefaultRoute
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-default-route"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/state/allow-default-route"
func (n *Interface_Subinterface_Ipv4_Urpf_AllowDefaultRoutePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-default-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Urpf).AllowDefaultRoute
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-default-route"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/config/allow-default-route"
func (n *Interface_Subinterface_Ipv4_Urpf_AllowDefaultRoutePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv4_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-default-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Urpf).AllowDefaultRoute
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-default-route"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/config/allow-default-route"
func (n *Interface_Subinterface_Ipv4_Urpf_AllowDefaultRoutePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-default-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Urpf).AllowDefaultRoute
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Urpf_AllowDropNextHopPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/state/allow-drop-next-hop YANG schema element.
type Interface_Subinterface_Ipv4_Urpf_AllowDropNextHopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Urpf_AllowDropNextHopPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/state/allow-drop-next-hop YANG schema element.
type Interface_Subinterface_Ipv4_Urpf_AllowDropNextHopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/state/allow-drop-next-hop"
func (n *Interface_Subinterface_Ipv4_Urpf_AllowDropNextHopPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv4_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-drop-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Urpf).AllowDropNextHop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/state/allow-drop-next-hop"
func (n *Interface_Subinterface_Ipv4_Urpf_AllowDropNextHopPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-drop-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Urpf).AllowDropNextHop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/config/allow-drop-next-hop"
func (n *Interface_Subinterface_Ipv4_Urpf_AllowDropNextHopPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv4_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-drop-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Urpf).AllowDropNextHop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/config/allow-drop-next-hop"
func (n *Interface_Subinterface_Ipv4_Urpf_AllowDropNextHopPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-drop-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Urpf).AllowDropNextHop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Urpf_AllowFeasiblePathPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/state/allow-feasible-path YANG schema element.
type Interface_Subinterface_Ipv4_Urpf_AllowFeasiblePathPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Urpf_AllowFeasiblePathPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/state/allow-feasible-path YANG schema element.
type Interface_Subinterface_Ipv4_Urpf_AllowFeasiblePathPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-feasible-path"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/state/allow-feasible-path"
func (n *Interface_Subinterface_Ipv4_Urpf_AllowFeasiblePathPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv4_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-feasible-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Urpf).AllowFeasiblePath
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-feasible-path"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/state/allow-feasible-path"
func (n *Interface_Subinterface_Ipv4_Urpf_AllowFeasiblePathPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-feasible-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Urpf).AllowFeasiblePath
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-feasible-path"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/config/allow-feasible-path"
func (n *Interface_Subinterface_Ipv4_Urpf_AllowFeasiblePathPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv4_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-feasible-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Urpf).AllowFeasiblePath
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-feasible-path"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/config/allow-feasible-path"
func (n *Interface_Subinterface_Ipv4_Urpf_AllowFeasiblePathPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-feasible-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Urpf).AllowFeasiblePath
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Urpf_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/state/enabled YANG schema element.
type Interface_Subinterface_Ipv4_Urpf_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Urpf_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/state/enabled YANG schema element.
type Interface_Subinterface_Ipv4_Urpf_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/state/enabled"
func (n *Interface_Subinterface_Ipv4_Urpf_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv4_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Urpf).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/state/enabled"
func (n *Interface_Subinterface_Ipv4_Urpf_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Urpf).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/config/enabled"
func (n *Interface_Subinterface_Ipv4_Urpf_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv4_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Urpf).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/config/enabled"
func (n *Interface_Subinterface_Ipv4_Urpf_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Urpf).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Urpf_ModePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/state/mode YANG schema element.
type Interface_Subinterface_Ipv4_Urpf_ModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Urpf_ModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/state/mode YANG schema element.
type Interface_Subinterface_Ipv4_Urpf_ModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/state/mode"
func (n *Interface_Subinterface_Ipv4_Urpf_ModePath) State() ygnmi.SingletonQuery[oc.E_IfIp_UrpfMode] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_UrpfMode](
		"Interface_Subinterface_Ipv4_Urpf",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_UrpfMode, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Urpf).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/state/mode"
func (n *Interface_Subinterface_Ipv4_Urpf_ModePathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_UrpfMode] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_UrpfMode](
		"Interface_Subinterface_Ipv4_Urpf",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_UrpfMode, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Urpf).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/config/mode"
func (n *Interface_Subinterface_Ipv4_Urpf_ModePath) Config() ygnmi.ConfigQuery[oc.E_IfIp_UrpfMode] {
	return ygnmi.NewConfigQuery[oc.E_IfIp_UrpfMode](
		"Interface_Subinterface_Ipv4_Urpf",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_UrpfMode, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Urpf).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/config/mode"
func (n *Interface_Subinterface_Ipv4_Urpf_ModePathAny) Config() ygnmi.WildcardQuery[oc.E_IfIp_UrpfMode] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_UrpfMode](
		"Interface_Subinterface_Ipv4_Urpf",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_UrpfMode, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Urpf).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_UrpfPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/urpf YANG schema element.
type Interface_Subinterface_Ipv4_UrpfPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv4_UrpfPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/urpf YANG schema element.
type Interface_Subinterface_Ipv4_UrpfPathAny struct {
	*ygnmi.NodePath
}

// AllowDefaultRoute (leaf): If set to false, and the packet's source address LPMs to the
// default route (0.0.0.0/0 or ::/0) then the URPF check fails and the
// packet is discarded.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-default-route"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/*/allow-default-route"
func (n *Interface_Subinterface_Ipv4_UrpfPath) AllowDefaultRoute() *Interface_Subinterface_Ipv4_Urpf_AllowDefaultRoutePath {
	ps := &Interface_Subinterface_Ipv4_Urpf_AllowDefaultRoutePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-default-route"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowDefaultRoute (leaf): If set to false, and the packet's source address LPMs to the
// default route (0.0.0.0/0 or ::/0) then the URPF check fails and the
// packet is discarded.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-default-route"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/*/allow-default-route"
func (n *Interface_Subinterface_Ipv4_UrpfPathAny) AllowDefaultRoute() *Interface_Subinterface_Ipv4_Urpf_AllowDefaultRoutePathAny {
	ps := &Interface_Subinterface_Ipv4_Urpf_AllowDefaultRoutePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-default-route"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowDropNextHop (leaf): If set to false, and the packet's source address LPMs to a route
// with DROP as the next-hop, then the URPF check fails and the packet
// is discarded.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/*/allow-drop-next-hop"
func (n *Interface_Subinterface_Ipv4_UrpfPath) AllowDropNextHop() *Interface_Subinterface_Ipv4_Urpf_AllowDropNextHopPath {
	ps := &Interface_Subinterface_Ipv4_Urpf_AllowDropNextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-drop-next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowDropNextHop (leaf): If set to false, and the packet's source address LPMs to a route
// with DROP as the next-hop, then the URPF check fails and the packet
// is discarded.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/*/allow-drop-next-hop"
func (n *Interface_Subinterface_Ipv4_UrpfPathAny) AllowDropNextHop() *Interface_Subinterface_Ipv4_Urpf_AllowDropNextHopPathAny {
	ps := &Interface_Subinterface_Ipv4_Urpf_AllowDropNextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-drop-next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowFeasiblePath (leaf): The routing system may select subset of all learned paths.  For example,
// BGP without multi-path enabled will install only one of many possible ECMP
// paths into the FIB or ECMP multipath limits may select only a subset of all
// available paths. If set to true, the URPF check passes if the source address
// LPMs to any path in the RIB, even if it is not selected for forwarding in the
// FIB.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-feasible-path"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/*/allow-feasible-path"
func (n *Interface_Subinterface_Ipv4_UrpfPath) AllowFeasiblePath() *Interface_Subinterface_Ipv4_Urpf_AllowFeasiblePathPath {
	ps := &Interface_Subinterface_Ipv4_Urpf_AllowFeasiblePathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-feasible-path"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowFeasiblePath (leaf): The routing system may select subset of all learned paths.  For example,
// BGP without multi-path enabled will install only one of many possible ECMP
// paths into the FIB or ECMP multipath limits may select only a subset of all
// available paths. If set to true, the URPF check passes if the source address
// LPMs to any path in the RIB, even if it is not selected for forwarding in the
// FIB.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-feasible-path"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/*/allow-feasible-path"
func (n *Interface_Subinterface_Ipv4_UrpfPathAny) AllowFeasiblePath() *Interface_Subinterface_Ipv4_Urpf_AllowFeasiblePathPathAny {
	ps := &Interface_Subinterface_Ipv4_Urpf_AllowFeasiblePathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-feasible-path"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Turns ON/OFF packet's source address verification against content of
// FIB. This is one of anti-spoofing protection techniques.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/*/enabled"
func (n *Interface_Subinterface_Ipv4_UrpfPath) Enabled() *Interface_Subinterface_Ipv4_Urpf_EnabledPath {
	ps := &Interface_Subinterface_Ipv4_Urpf_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Turns ON/OFF packet's source address verification against content of
// FIB. This is one of anti-spoofing protection techniques.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/*/enabled"
func (n *Interface_Subinterface_Ipv4_UrpfPathAny) Enabled() *Interface_Subinterface_Ipv4_Urpf_EnabledPathAny {
	ps := &Interface_Subinterface_Ipv4_Urpf_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): The URPF in STRICT mode requires the ingress packet source address
// to have a longest prefix match (LPM) for a route in the forwarding table
// with a next-hop of the interface the packet was received on.
// The URPF in LOOSE mode requires the ingress packet source address to
// LPM a route in the forwarding table, but may have any next-hop.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/*/mode"
func (n *Interface_Subinterface_Ipv4_UrpfPath) Mode() *Interface_Subinterface_Ipv4_Urpf_ModePath {
	ps := &Interface_Subinterface_Ipv4_Urpf_ModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): The URPF in STRICT mode requires the ingress packet source address
// to have a longest prefix match (LPM) for a route in the forwarding table
// with a next-hop of the interface the packet was received on.
// The URPF in LOOSE mode requires the ingress packet source address to
// LPM a route in the forwarding table, but may have any next-hop.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/urpf/*/mode"
func (n *Interface_Subinterface_Ipv4_UrpfPathAny) Mode() *Interface_Subinterface_Ipv4_Urpf_ModePathAny {
	ps := &Interface_Subinterface_Ipv4_Urpf_ModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_UrpfPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv4_Urpf] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv4_Urpf](
		"Interface_Subinterface_Ipv4_Urpf",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_UrpfPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4_Urpf] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4_Urpf](
		"Interface_Subinterface_Ipv4_Urpf",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_UrpfPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv4_Urpf] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv4_Urpf](
		"Interface_Subinterface_Ipv4_Urpf",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_UrpfPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4_Urpf] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4_Urpf](
		"Interface_Subinterface_Ipv4_Urpf",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_DhcpClientPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/dhcp-client YANG schema element.
type Interface_Subinterface_Ipv6_DhcpClientPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_DhcpClientPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/dhcp-client YANG schema element.
type Interface_Subinterface_Ipv6_DhcpClientPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/dhcp-client"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/dhcp-client"
func (n *Interface_Subinterface_Ipv6_DhcpClientPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/dhcp-client"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/dhcp-client"
func (n *Interface_Subinterface_Ipv6_DhcpClientPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/dhcp-client"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/config/dhcp-client"
func (n *Interface_Subinterface_Ipv6_DhcpClientPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/dhcp-client"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/config/dhcp-client"
func (n *Interface_Subinterface_Ipv6_DhcpClientPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/dup-addr-detect-transmits YANG schema element.
type Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/dup-addr-detect-transmits YANG schema element.
type Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/dup-addr-detect-transmits"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/dup-addr-detect-transmits"
func (n *Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dup-addr-detect-transmits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).DupAddrDetectTransmits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/dup-addr-detect-transmits"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/dup-addr-detect-transmits"
func (n *Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dup-addr-detect-transmits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).DupAddrDetectTransmits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/dup-addr-detect-transmits"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/config/dup-addr-detect-transmits"
func (n *Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_Subinterface_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dup-addr-detect-transmits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).DupAddrDetectTransmits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/dup-addr-detect-transmits"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/config/dup-addr-detect-transmits"
func (n *Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dup-addr-detect-transmits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).DupAddrDetectTransmits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/enabled YANG schema element.
type Interface_Subinterface_Ipv6_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/enabled YANG schema element.
type Interface_Subinterface_Ipv6_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/enabled"
func (n *Interface_Subinterface_Ipv6_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/enabled"
func (n *Interface_Subinterface_Ipv6_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/config/enabled"
func (n *Interface_Subinterface_Ipv6_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/config/enabled"
func (n *Interface_Subinterface_Ipv6_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_LearnUnsolicitedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/learn-unsolicited YANG schema element.
type Interface_Subinterface_Ipv6_LearnUnsolicitedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_LearnUnsolicitedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/learn-unsolicited YANG schema element.
type Interface_Subinterface_Ipv6_LearnUnsolicitedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/learn-unsolicited"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/learn-unsolicited"
func (n *Interface_Subinterface_Ipv6_LearnUnsolicitedPath) State() ygnmi.SingletonQuery[oc.E_Ipv6_LearnUnsolicited] {
	return ygnmi.NewSingletonQuery[oc.E_Ipv6_LearnUnsolicited](
		"Interface_Subinterface_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "learn-unsolicited"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv6_LearnUnsolicited, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).LearnUnsolicited
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/learn-unsolicited"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/learn-unsolicited"
func (n *Interface_Subinterface_Ipv6_LearnUnsolicitedPathAny) State() ygnmi.WildcardQuery[oc.E_Ipv6_LearnUnsolicited] {
	return ygnmi.NewWildcardQuery[oc.E_Ipv6_LearnUnsolicited](
		"Interface_Subinterface_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "learn-unsolicited"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv6_LearnUnsolicited, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).LearnUnsolicited
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/learn-unsolicited"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/config/learn-unsolicited"
func (n *Interface_Subinterface_Ipv6_LearnUnsolicitedPath) Config() ygnmi.ConfigQuery[oc.E_Ipv6_LearnUnsolicited] {
	return ygnmi.NewConfigQuery[oc.E_Ipv6_LearnUnsolicited](
		"Interface_Subinterface_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "learn-unsolicited"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv6_LearnUnsolicited, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).LearnUnsolicited
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/learn-unsolicited"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/config/learn-unsolicited"
func (n *Interface_Subinterface_Ipv6_LearnUnsolicitedPathAny) Config() ygnmi.WildcardQuery[oc.E_Ipv6_LearnUnsolicited] {
	return ygnmi.NewWildcardQuery[oc.E_Ipv6_LearnUnsolicited](
		"Interface_Subinterface_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "learn-unsolicited"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv6_LearnUnsolicited, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).LearnUnsolicited
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_MtuPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/mtu YANG schema element.
type Interface_Subinterface_Ipv6_MtuPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/mtu YANG schema element.
type Interface_Subinterface_Ipv6_MtuPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mtu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/mtu"
func (n *Interface_Subinterface_Ipv6_MtuPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).Mtu
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mtu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/mtu"
func (n *Interface_Subinterface_Ipv6_MtuPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).Mtu
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mtu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/config/mtu"
func (n *Interface_Subinterface_Ipv6_MtuPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_Subinterface_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).Mtu
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mtu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/config/mtu"
func (n *Interface_Subinterface_Ipv6_MtuPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).Mtu
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6Path represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6 YANG schema element.
type Interface_Subinterface_Ipv6Path struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6PathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6 YANG schema element.
type Interface_Subinterface_Ipv6PathAny struct {
	*ygnmi.NodePath
}

// AddressAny (list): The list of configured IPv6 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address"
func (n *Interface_Subinterface_Ipv6Path) AddressAny() *Interface_Subinterface_Ipv6_AddressPathAny {
	ps := &Interface_Subinterface_Ipv6_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// AddressAny (list): The list of configured IPv6 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address"
func (n *Interface_Subinterface_Ipv6PathAny) AddressAny() *Interface_Subinterface_Ipv6_AddressPathAny {
	ps := &Interface_Subinterface_Ipv6_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// Address (list): The list of configured IPv6 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address"
//
//	Ip: string
func (n *Interface_Subinterface_Ipv6Path) Address(Ip string) *Interface_Subinterface_Ipv6_AddressPath {
	ps := &Interface_Subinterface_Ipv6_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// Address (list): The list of configured IPv6 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address"
//
//	Ip: string
func (n *Interface_Subinterface_Ipv6PathAny) Address(Ip string) *Interface_Subinterface_Ipv6_AddressPathAny {
	ps := &Interface_Subinterface_Ipv6_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// AddressMap (list): The list of configured IPv6 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address"
func (n *Interface_Subinterface_Ipv6Path) AddressMap() *Interface_Subinterface_Ipv6_AddressPathMap {
	ps := &Interface_Subinterface_Ipv6_AddressPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AddressMap (list): The list of configured IPv6 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address"
func (n *Interface_Subinterface_Ipv6PathAny) AddressMap() *Interface_Subinterface_Ipv6_AddressPathMapAny {
	ps := &Interface_Subinterface_Ipv6_AddressPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Autoconf (container): Top-level container for IPv6 autoconf
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "autoconf"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf"
func (n *Interface_Subinterface_Ipv6Path) Autoconf() *Interface_Subinterface_Ipv6_AutoconfPath {
	ps := &Interface_Subinterface_Ipv6_AutoconfPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"autoconf"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Autoconf (container): Top-level container for IPv6 autoconf
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "autoconf"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf"
func (n *Interface_Subinterface_Ipv6PathAny) Autoconf() *Interface_Subinterface_Ipv6_AutoconfPathAny {
	ps := &Interface_Subinterface_Ipv6_AutoconfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"autoconf"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters"
func (n *Interface_Subinterface_Ipv6Path) Counters() *Interface_Subinterface_Ipv6_CountersPath {
	ps := &Interface_Subinterface_Ipv6_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters"
func (n *Interface_Subinterface_Ipv6PathAny) Counters() *Interface_Subinterface_Ipv6_CountersPathAny {
	ps := &Interface_Subinterface_Ipv6_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/dhcp-client"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/*/dhcp-client"
func (n *Interface_Subinterface_Ipv6Path) DhcpClient() *Interface_Subinterface_Ipv6_DhcpClientPath {
	ps := &Interface_Subinterface_Ipv6_DhcpClientPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/dhcp-client"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/*/dhcp-client"
func (n *Interface_Subinterface_Ipv6PathAny) DhcpClient() *Interface_Subinterface_Ipv6_DhcpClientPathAny {
	ps := &Interface_Subinterface_Ipv6_DhcpClientPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DupAddrDetectTransmits (leaf): The number of consecutive Neighbor Solicitation messages
// sent while performing Duplicate Address Detection on a
// tentative address.  A value of zero indicates that
// Duplicate Address Detection is not performed on
// tentative addresses.  A value of one indicates a single
// transmission with no follow-up retransmissions.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/dup-addr-detect-transmits"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/*/dup-addr-detect-transmits"
func (n *Interface_Subinterface_Ipv6Path) DupAddrDetectTransmits() *Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPath {
	ps := &Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dup-addr-detect-transmits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DupAddrDetectTransmits (leaf): The number of consecutive Neighbor Solicitation messages
// sent while performing Duplicate Address Detection on a
// tentative address.  A value of zero indicates that
// Duplicate Address Detection is not performed on
// tentative addresses.  A value of one indicates a single
// transmission with no follow-up retransmissions.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/dup-addr-detect-transmits"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/*/dup-addr-detect-transmits"
func (n *Interface_Subinterface_Ipv6PathAny) DupAddrDetectTransmits() *Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPathAny {
	ps := &Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dup-addr-detect-transmits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Controls whether IPv6 is enabled or disabled on this
// interface.  When IPv6 is enabled, this interface is
// connected to an IPv6 stack, and the interface can send
// and receive IPv6 packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/*/enabled"
func (n *Interface_Subinterface_Ipv6Path) Enabled() *Interface_Subinterface_Ipv6_EnabledPath {
	ps := &Interface_Subinterface_Ipv6_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Controls whether IPv6 is enabled or disabled on this
// interface.  When IPv6 is enabled, this interface is
// connected to an IPv6 stack, and the interface can send
// and receive IPv6 packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/*/enabled"
func (n *Interface_Subinterface_Ipv6PathAny) Enabled() *Interface_Subinterface_Ipv6_EnabledPathAny {
	ps := &Interface_Subinterface_Ipv6_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LearnUnsolicited (leaf): Sets if neighbors should be learned from unsolicited neighbor
// advertisements for global or link local addresses or both.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/learn-unsolicited"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/*/learn-unsolicited"
func (n *Interface_Subinterface_Ipv6Path) LearnUnsolicited() *Interface_Subinterface_Ipv6_LearnUnsolicitedPath {
	ps := &Interface_Subinterface_Ipv6_LearnUnsolicitedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "learn-unsolicited"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LearnUnsolicited (leaf): Sets if neighbors should be learned from unsolicited neighbor
// advertisements for global or link local addresses or both.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/learn-unsolicited"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/*/learn-unsolicited"
func (n *Interface_Subinterface_Ipv6PathAny) LearnUnsolicited() *Interface_Subinterface_Ipv6_LearnUnsolicitedPathAny {
	ps := &Interface_Subinterface_Ipv6_LearnUnsolicitedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "learn-unsolicited"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mtu (leaf): The size, in octets, of the largest IPv6 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mtu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/*/mtu"
func (n *Interface_Subinterface_Ipv6Path) Mtu() *Interface_Subinterface_Ipv6_MtuPath {
	ps := &Interface_Subinterface_Ipv6_MtuPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mtu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mtu (leaf): The size, in octets, of the largest IPv6 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mtu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/*/mtu"
func (n *Interface_Subinterface_Ipv6PathAny) Mtu() *Interface_Subinterface_Ipv6_MtuPathAny {
	ps := &Interface_Subinterface_Ipv6_MtuPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mtu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborAny (list): List of IPv6 neighbors
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor"
func (n *Interface_Subinterface_Ipv6Path) NeighborAny() *Interface_Subinterface_Ipv6_NeighborPathAny {
	ps := &Interface_Subinterface_Ipv6_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// NeighborAny (list): List of IPv6 neighbors
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor"
func (n *Interface_Subinterface_Ipv6PathAny) NeighborAny() *Interface_Subinterface_Ipv6_NeighborPathAny {
	ps := &Interface_Subinterface_Ipv6_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// Neighbor (list): List of IPv6 neighbors
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor"
//
//	Ip: string
func (n *Interface_Subinterface_Ipv6Path) Neighbor(Ip string) *Interface_Subinterface_Ipv6_NeighborPath {
	ps := &Interface_Subinterface_Ipv6_NeighborPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// Neighbor (list): List of IPv6 neighbors
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor"
//
//	Ip: string
func (n *Interface_Subinterface_Ipv6PathAny) Neighbor(Ip string) *Interface_Subinterface_Ipv6_NeighborPathAny {
	ps := &Interface_Subinterface_Ipv6_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// NeighborMap (list): List of IPv6 neighbors
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor"
func (n *Interface_Subinterface_Ipv6Path) NeighborMap() *Interface_Subinterface_Ipv6_NeighborPathMap {
	ps := &Interface_Subinterface_Ipv6_NeighborPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborMap (list): List of IPv6 neighbors
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor"
func (n *Interface_Subinterface_Ipv6PathAny) NeighborMap() *Interface_Subinterface_Ipv6_NeighborPathMapAny {
	ps := &Interface_Subinterface_Ipv6_NeighborPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RouterAdvertisement (container): Configuration and operational state parameters relating to
// router advertisements.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "router-advertisement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement"
func (n *Interface_Subinterface_Ipv6Path) RouterAdvertisement() *Interface_Subinterface_Ipv6_RouterAdvertisementPath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisementPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"router-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RouterAdvertisement (container): Configuration and operational state parameters relating to
// router advertisements.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "router-advertisement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement"
func (n *Interface_Subinterface_Ipv6PathAny) RouterAdvertisement() *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"router-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "unnumbered"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered"
func (n *Interface_Subinterface_Ipv6Path) Unnumbered() *Interface_Subinterface_Ipv6_UnnumberedPath {
	ps := &Interface_Subinterface_Ipv6_UnnumberedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "unnumbered"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered"
func (n *Interface_Subinterface_Ipv6PathAny) Unnumbered() *Interface_Subinterface_Ipv6_UnnumberedPathAny {
	ps := &Interface_Subinterface_Ipv6_UnnumberedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Urpf (container): URPF container
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf"
func (n *Interface_Subinterface_Ipv6Path) Urpf() *Interface_Subinterface_Ipv6_UrpfPath {
	ps := &Interface_Subinterface_Ipv6_UrpfPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Urpf (container): URPF container
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf"
func (n *Interface_Subinterface_Ipv6PathAny) Urpf() *Interface_Subinterface_Ipv6_UrpfPathAny {
	ps := &Interface_Subinterface_Ipv6_UrpfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6Path) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6](
		"Interface_Subinterface_Ipv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6PathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6](
		"Interface_Subinterface_Ipv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6Path) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv6] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv6](
		"Interface_Subinterface_Ipv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6PathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6](
		"Interface_Subinterface_Ipv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_IpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/ip YANG schema element.
type Interface_Subinterface_Ipv6_Address_IpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/ip YANG schema element.
type Interface_Subinterface_Ipv6_Address_IpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/ip"
func (n *Interface_Subinterface_Ipv6_Address_IpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Subinterface_Ipv6_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/ip"
func (n *Interface_Subinterface_Ipv6_Address_IpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/ip"
func (n *Interface_Subinterface_Ipv6_Address_IpPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Subinterface_Ipv6_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/ip"
func (n *Interface_Subinterface_Ipv6_Address_IpPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_OriginPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/origin YANG schema element.
type Interface_Subinterface_Ipv6_Address_OriginPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/origin YANG schema element.
type Interface_Subinterface_Ipv6_Address_OriginPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv6_Address_OriginPath) State() ygnmi.SingletonQuery[oc.E_IfIp_IpAddressOrigin] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_IpAddressOrigin](
		"Interface_Subinterface_Ipv6_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_IpAddressOrigin, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv6_Address_OriginPathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_IpAddressOrigin] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_IpAddressOrigin](
		"Interface_Subinterface_Ipv6_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_IpAddressOrigin, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/prefix-length YANG schema element.
type Interface_Subinterface_Ipv6_Address_PrefixLengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/prefix-length YANG schema element.
type Interface_Subinterface_Ipv6_Address_PrefixLengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/prefix-length"
func (n *Interface_Subinterface_Ipv6_Address_PrefixLengthPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_Subinterface_Ipv6_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/prefix-length"
func (n *Interface_Subinterface_Ipv6_Address_PrefixLengthPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv6_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix-length"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/prefix-length"
func (n *Interface_Subinterface_Ipv6_Address_PrefixLengthPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_Subinterface_Ipv6_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix-length"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/prefix-length"
func (n *Interface_Subinterface_Ipv6_Address_PrefixLengthPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv6_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_StatusPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/status YANG schema element.
type Interface_Subinterface_Ipv6_Address_StatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_StatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/status YANG schema element.
type Interface_Subinterface_Ipv6_Address_StatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/status"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/status"
func (n *Interface_Subinterface_Ipv6_Address_StatusPath) State() ygnmi.SingletonQuery[oc.E_Address_Status] {
	return ygnmi.NewSingletonQuery[oc.E_Address_Status](
		"Interface_Subinterface_Ipv6_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Address_Status, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).Status
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/status"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/status"
func (n *Interface_Subinterface_Ipv6_Address_StatusPathAny) State() ygnmi.WildcardQuery[oc.E_Address_Status] {
	return ygnmi.NewWildcardQuery[oc.E_Address_Status](
		"Interface_Subinterface_Ipv6_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Address_Status, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).Status
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_TypePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/type YANG schema element.
type Interface_Subinterface_Ipv6_Address_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_TypePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/type YANG schema element.
type Interface_Subinterface_Ipv6_Address_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/type"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/type"
func (n *Interface_Subinterface_Ipv6_Address_TypePath) State() ygnmi.SingletonQuery[oc.E_IfIp_Ipv6AddressType] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_Ipv6AddressType](
		"Interface_Subinterface_Ipv6_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv6AddressType, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/type"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/type"
func (n *Interface_Subinterface_Ipv6_Address_TypePathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_Ipv6AddressType] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_Ipv6AddressType](
		"Interface_Subinterface_Ipv6_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv6AddressType, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/type"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/type"
func (n *Interface_Subinterface_Ipv6_Address_TypePath) Config() ygnmi.ConfigQuery[oc.E_IfIp_Ipv6AddressType] {
	return ygnmi.NewConfigQuery[oc.E_IfIp_Ipv6AddressType](
		"Interface_Subinterface_Ipv6_Address",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv6AddressType, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/type"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/type"
func (n *Interface_Subinterface_Ipv6_Address_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_IfIp_Ipv6AddressType] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_Ipv6AddressType](
		"Interface_Subinterface_Ipv6_Address",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv6AddressType, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_AddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address YANG schema element.
type Interface_Subinterface_Ipv6_AddressPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_AddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address YANG schema element.
type Interface_Subinterface_Ipv6_AddressPathAny struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_AddressPathMap represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address YANG schema element.
type Interface_Subinterface_Ipv6_AddressPathMap struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_AddressPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address YANG schema element.
type Interface_Subinterface_Ipv6_AddressPathMapAny struct {
	*ygnmi.NodePath
}

// Ip (leaf): The IPv6 address on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/*/ip"
func (n *Interface_Subinterface_Ipv6_AddressPath) Ip() *Interface_Subinterface_Ipv6_Address_IpPath {
	ps := &Interface_Subinterface_Ipv6_Address_IpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ip (leaf): The IPv6 address on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/*/ip"
func (n *Interface_Subinterface_Ipv6_AddressPathAny) Ip() *Interface_Subinterface_Ipv6_Address_IpPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_IpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this address, e.g., static, dhcp, etc.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv6_AddressPath) Origin() *Interface_Subinterface_Ipv6_Address_OriginPath {
	ps := &Interface_Subinterface_Ipv6_Address_OriginPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this address, e.g., static, dhcp, etc.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv6_AddressPathAny) Origin() *Interface_Subinterface_Ipv6_Address_OriginPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_OriginPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The length of the subnet prefix.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/prefix-length"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/*/prefix-length"
func (n *Interface_Subinterface_Ipv6_AddressPath) PrefixLength() *Interface_Subinterface_Ipv6_Address_PrefixLengthPath {
	ps := &Interface_Subinterface_Ipv6_Address_PrefixLengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The length of the subnet prefix.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/prefix-length"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/*/prefix-length"
func (n *Interface_Subinterface_Ipv6_AddressPathAny) PrefixLength() *Interface_Subinterface_Ipv6_Address_PrefixLengthPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_PrefixLengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Status (leaf): The status of an address.  Most of the states correspond
// to states from the IPv6 Stateless Address
// Autoconfiguration protocol.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/status"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/status"
func (n *Interface_Subinterface_Ipv6_AddressPath) Status() *Interface_Subinterface_Ipv6_Address_StatusPath {
	ps := &Interface_Subinterface_Ipv6_Address_StatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Status (leaf): The status of an address.  Most of the states correspond
// to states from the IPv6 Stateless Address
// Autoconfiguration protocol.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/status"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/status"
func (n *Interface_Subinterface_Ipv6_AddressPathAny) Status() *Interface_Subinterface_Ipv6_Address_StatusPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_StatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Specifies the explicit type of the IPv6 address being assigned
// to the interface. By default, addresses are assumed to be
// global unicast.  Where a link-local address is to be explicitly
// configured, this leaf should be set to LINK_LOCAL.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/type"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/*/type"
func (n *Interface_Subinterface_Ipv6_AddressPath) Type() *Interface_Subinterface_Ipv6_Address_TypePath {
	ps := &Interface_Subinterface_Ipv6_Address_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Specifies the explicit type of the IPv6 address being assigned
// to the interface. By default, addresses are assumed to be
// global unicast.  Where a link-local address is to be explicitly
// configured, this leaf should be set to LINK_LOCAL.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/type"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/*/type"
func (n *Interface_Subinterface_Ipv6_AddressPathAny) Type() *Interface_Subinterface_Ipv6_Address_TypePathAny {
	ps := &Interface_Subinterface_Ipv6_Address_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group"
func (n *Interface_Subinterface_Ipv6_AddressPath) VrrpGroupAny() *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
	return ps
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group"
func (n *Interface_Subinterface_Ipv6_AddressPathAny) VrrpGroupAny() *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
	return ps
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group"
//
//	VirtualRouterId: uint8
func (n *Interface_Subinterface_Ipv6_AddressPath) VrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv6_Address_VrrpGroupPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
	return ps
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group"
//
//	VirtualRouterId: uint8
func (n *Interface_Subinterface_Ipv6_AddressPathAny) VrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
	return ps
}

// VrrpGroupMap (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group"
func (n *Interface_Subinterface_Ipv6_AddressPath) VrrpGroupMap() *Interface_Subinterface_Ipv6_Address_VrrpGroupPathMap {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// VrrpGroupMap (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group"
func (n *Interface_Subinterface_Ipv6_AddressPathAny) VrrpGroupMap() *Interface_Subinterface_Ipv6_Address_VrrpGroupPathMapAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_AddressPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6_Address] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6_Address](
		"Interface_Subinterface_Ipv6_Address",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_AddressPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Address] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Address](
		"Interface_Subinterface_Ipv6_Address",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_AddressPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv6_Address] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv6_Address](
		"Interface_Subinterface_Ipv6_Address",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_AddressPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Address] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Address](
		"Interface_Subinterface_Ipv6_Address",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_AddressPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Interface_Subinterface_Ipv6_Address] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Interface_Subinterface_Ipv6_Address](
		"Interface_Subinterface_Ipv6",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv6_Address, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_AddressPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Interface_Subinterface_Ipv6_Address] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_Subinterface_Ipv6_Address](
		"Interface_Subinterface_Ipv6",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv6_Address, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_AddressPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Interface_Subinterface_Ipv6_Address] {
	return ygnmi.NewConfigQuery[map[string]*oc.Interface_Subinterface_Ipv6_Address](
		"Interface_Subinterface_Ipv6",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv6_Address, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_AddressPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Interface_Subinterface_Ipv6_Address] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_Subinterface_Ipv6_Address](
		"Interface_Subinterface_Ipv6",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv6_Address, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/accept-mode YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/accept-mode YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/accept-mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/accept-mode"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "accept-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).AcceptMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/accept-mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/accept-mode"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "accept-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).AcceptMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/accept-mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "accept-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).AcceptMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/accept-mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "accept-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).AcceptMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/advertisement-interval YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/advertisement-interval YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/advertisement-interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/advertisement-interval"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).AdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/advertisement-interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/advertisement-interval"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).AdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/advertisement-interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).AdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/advertisement-interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).AdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).CurrentPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).CurrentPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/preempt YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/preempt YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/preempt"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).Preempt
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/preempt"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).Preempt
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).Preempt
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).Preempt
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/preempt-delay YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/preempt-delay YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt-delay"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/preempt-delay"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt-delay"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/preempt-delay"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt-delay"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt-delay"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/priority YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/priority YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-address YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-address YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-address"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-address"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-link-local YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-link-local YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-link-local"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-link-local"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-link-local"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualLinkLocal
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-link-local"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-link-local"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-link-local"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualLinkLocal
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-link-local"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-link-local"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualLinkLocal
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-link-local"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-link-local"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualLinkLocal
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-router-id YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-router-id YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-router-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-router-id"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-router-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-router-id"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-router-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-router-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroupPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroupPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroupPathMap represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroupPathMap struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroupPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroupPathMapAny struct {
	*ygnmi.NodePath
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/accept-mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/accept-mode"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) AcceptMode() *Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "accept-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/accept-mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/accept-mode"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) AcceptMode() *Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "accept-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/advertisement-interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/advertisement-interval"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) AdvertisementInterval() *Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/advertisement-interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/advertisement-interval"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) AdvertisementInterval() *Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) CurrentPriority() *Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) CurrentPriority() *Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-tracking"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) InterfaceTracking() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-tracking"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) InterfaceTracking() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/preempt"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) Preempt() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/preempt"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) Preempt() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt-delay"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/preempt-delay"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) PreemptDelay() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt-delay"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/preempt-delay"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) PreemptDelay() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) Priority() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) Priority() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/virtual-address"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) VirtualAddress() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/virtual-address"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) VirtualAddress() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualLinkLocal (leaf): For VRRP on IPv6 interfaces, sets the virtual link local
// address
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-link-local"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/virtual-link-local"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) VirtualLinkLocal() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-link-local"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualLinkLocal (leaf): For VRRP on IPv6 interfaces, sets the virtual link local
// address
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-link-local"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/virtual-link-local"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) VirtualLinkLocal() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-link-local"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-router-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/virtual-router-id"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) VirtualRouterId() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-router-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/virtual-router-id"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) VirtualRouterId() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup](
		"Interface_Subinterface_Ipv6_Address",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup](
		"Interface_Subinterface_Ipv6_Address",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathMap) Config() ygnmi.ConfigQuery[map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewConfigQuery[map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup](
		"Interface_Subinterface_Ipv6_Address",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathMapAny) Config() ygnmi.WildcardQuery[map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup](
		"Interface_Subinterface_Ipv6_Address",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority-decrement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority-decrement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority-decrement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority-decrement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/track-interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/track-interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/track-interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/track-interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny struct {
	*ygnmi.NodePath
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority-decrement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/*/priority-decrement"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) PriorityDecrement() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority-decrement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/*/priority-decrement"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) PriorityDecrement() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/track-interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/*/track-interface"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) TrackInterface() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "track-interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/track-interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/*/track-interface"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) TrackInterface() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "track-interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-global-addresses YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-global-addresses YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "state/create-global-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-global-addresses"
func (n *Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_Autoconf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "create-global-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).CreateGlobalAddresses
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "state/create-global-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-global-addresses"
func (n *Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Autoconf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "create-global-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).CreateGlobalAddresses
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "config/create-global-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-global-addresses"
func (n *Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_Autoconf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "create-global-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).CreateGlobalAddresses
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "config/create-global-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-global-addresses"
func (n *Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Autoconf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "create-global-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).CreateGlobalAddresses
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-temporary-addresses YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-temporary-addresses YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "state/create-temporary-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-temporary-addresses"
func (n *Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_Autoconf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "create-temporary-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).CreateTemporaryAddresses
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "state/create-temporary-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-temporary-addresses"
func (n *Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Autoconf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "create-temporary-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).CreateTemporaryAddresses
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "config/create-temporary-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-temporary-addresses"
func (n *Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_Autoconf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "create-temporary-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).CreateTemporaryAddresses
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "config/create-temporary-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-temporary-addresses"
func (n *Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Autoconf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "create-temporary-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).CreateTemporaryAddresses
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-preferred-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-preferred-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "state/temporary-preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface_Ipv6_Autoconf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "temporary-preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).TemporaryPreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "state/temporary-preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_Autoconf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "temporary-preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).TemporaryPreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "config/temporary-preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_Subinterface_Ipv6_Autoconf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "temporary-preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).TemporaryPreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "config/temporary-preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_Autoconf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "temporary-preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).TemporaryPreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-valid-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-valid-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "state/temporary-valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-valid-lifetime"
func (n *Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface_Ipv6_Autoconf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "temporary-valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).TemporaryValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "state/temporary-valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-valid-lifetime"
func (n *Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_Autoconf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "temporary-valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).TemporaryValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "config/temporary-valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-valid-lifetime"
func (n *Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_Subinterface_Ipv6_Autoconf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "temporary-valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).TemporaryValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "config/temporary-valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-valid-lifetime"
func (n *Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_Autoconf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "temporary-valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).TemporaryValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_AutoconfPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf YANG schema element.
type Interface_Subinterface_Ipv6_AutoconfPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_AutoconfPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf YANG schema element.
type Interface_Subinterface_Ipv6_AutoconfPathAny struct {
	*ygnmi.NodePath
}

// CreateGlobalAddresses (leaf): [adapted from IETF IP model RFC 7277]
//
// If enabled, the host creates global addresses as
// described in RFC 4862.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/create-global-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/*/create-global-addresses"
func (n *Interface_Subinterface_Ipv6_AutoconfPath) CreateGlobalAddresses() *Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath {
	ps := &Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "create-global-addresses"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CreateGlobalAddresses (leaf): [adapted from IETF IP model RFC 7277]
//
// If enabled, the host creates global addresses as
// described in RFC 4862.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/create-global-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/*/create-global-addresses"
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) CreateGlobalAddresses() *Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny {
	ps := &Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "create-global-addresses"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CreateTemporaryAddresses (leaf): [adapted from IETF IP model RFC 7277]
//
// If enabled, the host creates temporary addresses as
// described in RFC 4941.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/create-temporary-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/*/create-temporary-addresses"
func (n *Interface_Subinterface_Ipv6_AutoconfPath) CreateTemporaryAddresses() *Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath {
	ps := &Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "create-temporary-addresses"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CreateTemporaryAddresses (leaf): [adapted from IETF IP model RFC 7277]
//
// If enabled, the host creates temporary addresses as
// described in RFC 4941.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/create-temporary-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/*/create-temporary-addresses"
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) CreateTemporaryAddresses() *Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny {
	ps := &Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "create-temporary-addresses"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TemporaryPreferredLifetime (leaf): [adapted from IETF IP model RFC 7277]
//
// The time period during which the temporary address is
// preferred.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/temporary-preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/*/temporary-preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_AutoconfPath) TemporaryPreferredLifetime() *Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath {
	ps := &Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "temporary-preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TemporaryPreferredLifetime (leaf): [adapted from IETF IP model RFC 7277]
//
// The time period during which the temporary address is
// preferred.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/temporary-preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/*/temporary-preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) TemporaryPreferredLifetime() *Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny {
	ps := &Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "temporary-preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TemporaryValidLifetime (leaf): [adapted from IETF IP model RFC 7277]
//
// The time period during which the temporary address
// is valid.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/temporary-valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/*/temporary-valid-lifetime"
func (n *Interface_Subinterface_Ipv6_AutoconfPath) TemporaryValidLifetime() *Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath {
	ps := &Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "temporary-valid-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TemporaryValidLifetime (leaf): [adapted from IETF IP model RFC 7277]
//
// The time period during which the temporary address
// is valid.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/temporary-valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/*/temporary-valid-lifetime"
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) TemporaryValidLifetime() *Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny {
	ps := &Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "temporary-valid-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_AutoconfPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6_Autoconf] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6_Autoconf](
		"Interface_Subinterface_Ipv6_Autoconf",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Autoconf] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Autoconf](
		"Interface_Subinterface_Ipv6_Autoconf",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_AutoconfPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv6_Autoconf] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv6_Autoconf](
		"Interface_Subinterface_Ipv6_Autoconf",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Autoconf] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Autoconf](
		"Interface_Subinterface_Ipv6_Autoconf",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_InErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InErrorPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_InErrorPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-octets"
func (n *Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-octets"
func (n *Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_InMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_InMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_InMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_InMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv6_Counters_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv6_Counters_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-octets"
func (n *Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-octets"
func (n *Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv6_Counters_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_UrpfDropBytesPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/urpf-drop-bytes YANG schema element.
type Interface_Subinterface_Ipv6_Counters_UrpfDropBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_UrpfDropBytesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/urpf-drop-bytes YANG schema element.
type Interface_Subinterface_Ipv6_Counters_UrpfDropBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "urpf-drop-bytes"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/urpf-drop-bytes"
func (n *Interface_Subinterface_Ipv6_Counters_UrpfDropBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"urpf-drop-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).UrpfDropBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "urpf-drop-bytes"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/urpf-drop-bytes"
func (n *Interface_Subinterface_Ipv6_Counters_UrpfDropBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"urpf-drop-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).UrpfDropBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_UrpfDropPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/urpf-drop-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_UrpfDropPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_UrpfDropPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/urpf-drop-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_UrpfDropPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "urpf-drop-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/urpf-drop-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_UrpfDropPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"urpf-drop-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).UrpfDropPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "urpf-drop-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/urpf-drop-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_UrpfDropPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"urpf-drop-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).UrpfDropPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_CountersPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters YANG schema element.
type Interface_Subinterface_Ipv6_CountersPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters YANG schema element.
type Interface_Subinterface_Ipv6_CountersPathAny struct {
	*ygnmi.NodePath
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InDiscardedPkts() *Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InDiscardedPkts() *Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InErrorPkts() *Interface_Subinterface_Ipv6_Counters_InErrorPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_InErrorPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InErrorPkts() *Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) InForwardedOctets() *Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InForwardedOctets() *Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InForwardedPkts() *Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InForwardedPkts() *Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastOctets (leaf): The total number of octets received in input IP
// multicast packets for the specified address
// family, including those received in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) InMulticastOctets() *Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastOctets (leaf): The total number of octets received in input IP
// multicast packets for the specified address
// family, including those received in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InMulticastOctets() *Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastPkts (leaf): The number of IP packets received for the specified
// address family that are multicast packets.
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InMulticastPkts() *Interface_Subinterface_Ipv6_Counters_InMulticastPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_InMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastPkts (leaf): The number of IP packets received for the specified
// address family that are multicast packets.
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InMulticastPkts() *Interface_Subinterface_Ipv6_Counters_InMulticastPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_InMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) InOctets() *Interface_Subinterface_Ipv6_Counters_InOctetsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InOctets() *Interface_Subinterface_Ipv6_Counters_InOctetsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including all IP unicast, multicast,
// broadcast and error packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InPkts() *Interface_Subinterface_Ipv6_Counters_InPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including all IP unicast, multicast,
// broadcast and error packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InPkts() *Interface_Subinterface_Ipv6_Counters_InPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutDiscardedPkts() *Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutDiscardedPkts() *Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutErrorPkts() *Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutErrorPkts() *Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutForwardedOctets() *Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutForwardedOctets() *Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutForwardedPkts() *Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutForwardedPkts() *Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastOctets (leaf): The total number of IP multicast octets transmitted.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutMulticastOctets() *Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastOctets (leaf): The total number of IP multicast octets transmitted.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutMulticastOctets() *Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastPkts (leaf): The total number of IP multicast packets transmitted.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutMulticastPkts() *Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastPkts (leaf): The total number of IP multicast packets transmitted.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutMulticastPkts() *Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutOctets() *Interface_Subinterface_Ipv6_Counters_OutOctetsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutOctets() *Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device as well as unicast, multicast and broadcast
// packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutPkts() *Interface_Subinterface_Ipv6_Counters_OutPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device as well as unicast, multicast and broadcast
// packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutPkts() *Interface_Subinterface_Ipv6_Counters_OutPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UrpfDropBytes (leaf): This counter counts bytes/octets discarded as result of
// Unicast Reverse Path Forwarding verification.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf-drop-bytes"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/urpf-drop-bytes"
func (n *Interface_Subinterface_Ipv6_CountersPath) UrpfDropBytes() *Interface_Subinterface_Ipv6_Counters_UrpfDropBytesPath {
	ps := &Interface_Subinterface_Ipv6_Counters_UrpfDropBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf-drop-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UrpfDropBytes (leaf): This counter counts bytes/octets discarded as result of
// Unicast Reverse Path Forwarding verification.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf-drop-bytes"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/urpf-drop-bytes"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) UrpfDropBytes() *Interface_Subinterface_Ipv6_Counters_UrpfDropBytesPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_UrpfDropBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf-drop-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UrpfDropPkts (leaf): This counter counts packet discarded as result of Unicast
// Reverse Path Forwarding verification.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf-drop-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/urpf-drop-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) UrpfDropPkts() *Interface_Subinterface_Ipv6_Counters_UrpfDropPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_UrpfDropPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf-drop-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UrpfDropPkts (leaf): This counter counts packet discarded as result of Unicast
// Reverse Path Forwarding verification.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "urpf-drop-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/urpf-drop-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) UrpfDropPkts() *Interface_Subinterface_Ipv6_Counters_UrpfDropPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_UrpfDropPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"urpf-drop-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_CountersPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6_Counters](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Counters](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Neighbor_IpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/ip YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_IpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Neighbor_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/ip YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_IpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/ip"
func (n *Interface_Subinterface_Ipv6_Neighbor_IpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/ip"
func (n *Interface_Subinterface_Ipv6_Neighbor_IpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/ip"
func (n *Interface_Subinterface_Ipv6_Neighbor_IpPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Subinterface_Ipv6_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/ip"
func (n *Interface_Subinterface_Ipv6_Neighbor_IpPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Neighbor_IsRouterPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_IsRouterPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/is-router"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_Subinterface_Ipv6_Neighbor_IsRouterPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "is-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).IsRouter
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/is-router"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "is-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).IsRouter
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/link-layer-address YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/link-layer-address YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/link-layer-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/link-layer-address"
func (n *Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/link-layer-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/link-layer-address"
func (n *Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/link-layer-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/link-layer-address"
func (n *Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Subinterface_Ipv6_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/link-layer-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/link-layer-address"
func (n *Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/neighbor-state"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath) State() ygnmi.SingletonQuery[oc.E_Neighbor_NeighborState] {
	return ygnmi.NewSingletonQuery[oc.E_Neighbor_NeighborState](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Neighbor_NeighborState, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).NeighborState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/neighbor-state"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny) State() ygnmi.WildcardQuery[oc.E_Neighbor_NeighborState] {
	return ygnmi.NewWildcardQuery[oc.E_Neighbor_NeighborState](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Neighbor_NeighborState, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).NeighborState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Neighbor_OriginPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_OriginPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Neighbor_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_OriginPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv6_Neighbor_OriginPath) State() ygnmi.SingletonQuery[oc.E_IfIp_NeighborOrigin] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_NeighborOrigin](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_NeighborOrigin, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv6_Neighbor_OriginPathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_NeighborOrigin] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_NeighborOrigin](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_NeighborOrigin, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_NeighborPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv6_NeighborPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_NeighborPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv6_NeighborPathAny struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_NeighborPathMap represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv6_NeighborPathMap struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_NeighborPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv6_NeighborPathMapAny struct {
	*ygnmi.NodePath
}

// Ip (leaf): The IPv6 address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/*/ip"
func (n *Interface_Subinterface_Ipv6_NeighborPath) Ip() *Interface_Subinterface_Ipv6_Neighbor_IpPath {
	ps := &Interface_Subinterface_Ipv6_Neighbor_IpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ip (leaf): The IPv6 address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/*/ip"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) Ip() *Interface_Subinterface_Ipv6_Neighbor_IpPathAny {
	ps := &Interface_Subinterface_Ipv6_Neighbor_IpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IsRouter (leaf): Indicates that the neighbor node acts as a router.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/is-router"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_Subinterface_Ipv6_NeighborPath) IsRouter() *Interface_Subinterface_Ipv6_Neighbor_IsRouterPath {
	ps := &Interface_Subinterface_Ipv6_Neighbor_IsRouterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "is-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IsRouter (leaf): Indicates that the neighbor node acts as a router.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/is-router"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) IsRouter() *Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny {
	ps := &Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "is-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/link-layer-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/*/link-layer-address"
func (n *Interface_Subinterface_Ipv6_NeighborPath) LinkLayerAddress() *Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath {
	ps := &Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/link-layer-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/*/link-layer-address"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) LinkLayerAddress() *Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny {
	ps := &Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborState (leaf): The Neighbor Unreachability Detection state of this
// entry.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/neighbor-state"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_Subinterface_Ipv6_NeighborPath) NeighborState() *Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath {
	ps := &Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborState (leaf): The Neighbor Unreachability Detection state of this
// entry.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/neighbor-state"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) NeighborState() *Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny {
	ps := &Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this neighbor entry.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv6_NeighborPath) Origin() *Interface_Subinterface_Ipv6_Neighbor_OriginPath {
	ps := &Interface_Subinterface_Ipv6_Neighbor_OriginPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this neighbor entry.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) Origin() *Interface_Subinterface_Ipv6_Neighbor_OriginPathAny {
	ps := &Interface_Subinterface_Ipv6_Neighbor_OriginPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_NeighborPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6_Neighbor] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6_Neighbor](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Neighbor](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_NeighborPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv6_Neighbor] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv6_Neighbor](
		"Interface_Subinterface_Ipv6_Neighbor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Neighbor](
		"Interface_Subinterface_Ipv6_Neighbor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_NeighborPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Interface_Subinterface_Ipv6_Neighbor] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Interface_Subinterface_Ipv6_Neighbor](
		"Interface_Subinterface_Ipv6",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv6_Neighbor, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_NeighborPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Interface_Subinterface_Ipv6_Neighbor] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_Subinterface_Ipv6_Neighbor](
		"Interface_Subinterface_Ipv6",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv6_Neighbor, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_NeighborPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Interface_Subinterface_Ipv6_Neighbor] {
	return ygnmi.NewConfigQuery[map[string]*oc.Interface_Subinterface_Ipv6_Neighbor](
		"Interface_Subinterface_Ipv6",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv6_Neighbor, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_NeighborPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Interface_Subinterface_Ipv6_Neighbor] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_Subinterface_Ipv6_Neighbor](
		"Interface_Subinterface_Ipv6",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv6_Neighbor, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/enable YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/enable YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enable"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/enable"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enable"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/enable"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enable"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/enable"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enable"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/enable"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/interval YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/interval YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/interval"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Interval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/interval"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Interval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/interval"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Interval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/interval"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Interval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Lifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Lifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Lifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Lifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/managed YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/managed YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/managed"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/managed"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "managed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Managed
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/managed"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/managed"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "managed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Managed
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/managed"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/managed"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "managed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Managed
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/managed"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/managed"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "managed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Managed
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_ModePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/mode YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_ModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_ModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/mode YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_ModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/mode"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_ModePath) State() ygnmi.SingletonQuery[oc.E_RouterAdvertisement_Mode] {
	return ygnmi.NewSingletonQuery[oc.E_RouterAdvertisement_Mode](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RouterAdvertisement_Mode, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/mode"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_ModePathAny) State() ygnmi.WildcardQuery[oc.E_RouterAdvertisement_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_RouterAdvertisement_Mode](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RouterAdvertisement_Mode, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/mode"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_ModePath) Config() ygnmi.ConfigQuery[oc.E_RouterAdvertisement_Mode] {
	return ygnmi.NewConfigQuery[oc.E_RouterAdvertisement_Mode](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RouterAdvertisement_Mode, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/mode"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_ModePathAny) Config() ygnmi.WildcardQuery[oc.E_RouterAdvertisement_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_RouterAdvertisement_Mode](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RouterAdvertisement_Mode, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/other-config YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/other-config YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/other-config"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/other-config"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "other-config"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).OtherConfig
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/other-config"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/other-config"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "other-config"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).OtherConfig
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/other-config"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/other-config"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "other-config"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).OtherConfig
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/other-config"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/other-config"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "other-config"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).OtherConfig
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/suppress YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/suppress YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/suppress"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/suppress"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "suppress"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Suppress
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/suppress"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/suppress"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "suppress"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Suppress
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/suppress"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/suppress"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "suppress"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Suppress
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/suppress"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/suppress"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "suppress"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Suppress
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisementPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisementPathAny struct {
	*ygnmi.NodePath
}

// Enable (leaf): If set to false, all IPv6 router advertisement functions are
// disabled.  The local system will not transmit router advertisement
// messages and will not respond to router solicitation messages.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enable"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/enable"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Enable() *Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): If set to false, all IPv6 router advertisement functions are
// disabled.  The local system will not transmit router advertisement
// messages and will not respond to router solicitation messages.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enable"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/enable"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Enable() *Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): The interval between periodic router advertisement neighbor
// discovery messages sent on this interface expressed in
// seconds.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/interval"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Interval() *Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): The interval between periodic router advertisement neighbor
// discovery messages sent on this interface expressed in
// seconds.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/interval"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Interval() *Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Lifetime (leaf): The lifetime advertised in the router advertisement neighbor
// discovery message on this interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Lifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Lifetime (leaf): The lifetime advertised in the router advertisement neighbor
// discovery message on this interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Lifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Managed (leaf): When set to true, the managed address configuration (M) flag is set in
// the advertised router advertisement. The M flag indicates that there are
// addresses available via DHCPv6.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/managed"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/managed"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Managed() *Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "managed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Managed (leaf): When set to true, the managed address configuration (M) flag is set in
// the advertised router advertisement. The M flag indicates that there are
// addresses available via DHCPv6.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/managed"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/managed"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Managed() *Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "managed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): Mode controls which set of behaviors the local system should perform
// to support IPv6 router advertisements.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/mode"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Mode() *Interface_Subinterface_Ipv6_RouterAdvertisement_ModePath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_ModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): Mode controls which set of behaviors the local system should perform
// to support IPv6 router advertisements.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/mode"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Mode() *Interface_Subinterface_Ipv6_RouterAdvertisement_ModePathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_ModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OtherConfig (leaf): When set to true, the other configuration (O) flag is set in the
// advertised router advertisement. The O flag indicates that there is
// other configuration available via DHCPv6 (e.g., DNS servers).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/other-config"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/other-config"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) OtherConfig() *Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "other-config"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OtherConfig (leaf): When set to true, the other configuration (O) flag is set in the
// advertised router advertisement. The O flag indicates that there is
// other configuration available via DHCPv6 (e.g., DNS servers).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/other-config"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/other-config"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) OtherConfig() *Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "other-config"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixAny (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) PrefixAny() *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// PrefixAny (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) PrefixAny() *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// Prefix (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix"
//
//	Prefix: string
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Prefix(Prefix string) *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// Prefix (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix"
//
//	Prefix: string
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Prefix(Prefix string) *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// PrefixMap (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) PrefixMap() *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMap {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixMap (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) PrefixMap() *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMapAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Suppress (leaf): When set to true, router advertisement neighbor discovery
// messages are not transmitted on this interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/suppress"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/suppress"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Suppress() *Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "suppress"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Suppress (leaf): When set to true, router advertisement neighbor discovery
// messages are not transmitted on this interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/suppress"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/suppress"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Suppress() *Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "suppress"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/disable-advertisement YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/disable-advertisement YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/disable-advertisement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/disable-advertisement"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-advertisement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).DisableAdvertisement
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/disable-advertisement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/disable-advertisement"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-advertisement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).DisableAdvertisement
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/disable-advertisement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/disable-advertisement"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-advertisement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).DisableAdvertisement
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/disable-advertisement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/disable-advertisement"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-advertisement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).DisableAdvertisement
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/disable-autoconfiguration YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/disable-autoconfiguration YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/disable-autoconfiguration"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-autoconfiguration"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).DisableAutoconfiguration
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/disable-autoconfiguration"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-autoconfiguration"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).DisableAutoconfiguration
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/disable-autoconfiguration"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-autoconfiguration"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).DisableAutoconfiguration
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/disable-autoconfiguration"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-autoconfiguration"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).DisableAutoconfiguration
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/enable-onlink YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/enable-onlink YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enable-onlink"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/enable-onlink"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-onlink"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).EnableOnlink
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enable-onlink"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/enable-onlink"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-onlink"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).EnableOnlink
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enable-onlink"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/enable-onlink"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-onlink"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).EnableOnlink
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enable-onlink"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/enable-onlink"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-onlink"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).EnableOnlink
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/preferred-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/preferred-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).PreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).PreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).PreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).PreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/prefix YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/prefix YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/valid-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/valid-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/valid-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).ValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/valid-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).ValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/valid-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).ValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/valid-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).ValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMap represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMap struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMapAny struct {
	*ygnmi.NodePath
}

// DisableAdvertisement (leaf): When set to true, the prefix is not advertised within
// router advertisement messages that are sent as a result of
// router soliciation messages.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/disable-advertisement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/disable-advertisement"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) DisableAdvertisement() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-advertisement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisableAdvertisement (leaf): When set to true, the prefix is not advertised within
// router advertisement messages that are sent as a result of
// router soliciation messages.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/disable-advertisement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/disable-advertisement"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) DisableAdvertisement() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-advertisement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisableAutoconfiguration (leaf): When set to true, the prefix is marked as not to be used for stateless
// address configuration. This is achieved by setting the autonomous address
// configuration bit for the prefix.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/disable-autoconfiguration"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) DisableAutoconfiguration() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-autoconfiguration"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisableAutoconfiguration (leaf): When set to true, the prefix is marked as not to be used for stateless
// address configuration. This is achieved by setting the autonomous address
// configuration bit for the prefix.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/disable-autoconfiguration"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) DisableAutoconfiguration() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-autoconfiguration"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableOnlink (leaf): When set to true, the prefix is marked as being on link by setting the
// L-bit for the prefix within a router advertisement.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enable-onlink"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/enable-onlink"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) EnableOnlink() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-onlink"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableOnlink (leaf): When set to true, the prefix is marked as being on link by setting the
// L-bit for the prefix within a router advertisement.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enable-onlink"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/enable-onlink"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) EnableOnlink() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-onlink"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreferredLifetime (leaf): The length of time that the address within the prefix remains
// in the preferred state, i.e., unrestricted use is allowed by
// upper-layer protocols. See RFC4862 for a complete definition
// of preferred behaviours.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) PreferredLifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreferredLifetime (leaf): The length of time that the address within the prefix remains
// in the preferred state, i.e., unrestricted use is allowed by
// upper-layer protocols. See RFC4862 for a complete definition
// of preferred behaviours.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) PreferredLifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv6 prefix to be advertised within the router advertisement
// message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) Prefix() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv6 prefix to be advertised within the router advertisement
// message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) Prefix() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ValidLifetime (leaf): The length of time that the prefix is valid relative to the time
// the packet was sent.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/valid-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) ValidLifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "valid-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ValidLifetime (leaf): The length of time that the prefix is valid relative to the time
// the packet was sent.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/valid-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) ValidLifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "valid-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:prefixes"},
			PostRelPath: []string{"openconfig-if-ip:prefix"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:prefixes"},
			PostRelPath: []string{"openconfig-if-ip:prefix"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewConfigQuery[map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:prefixes"},
			PostRelPath: []string{"openconfig-if-ip:prefix"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:prefixes"},
			PostRelPath: []string{"openconfig-if-ip:prefix"},
		},
	)
}

// Interface_Subinterface_Ipv6_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/state/enabled YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/state/enabled YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/state/enabled"
func (n *Interface_Subinterface_Ipv6_Unnumbered_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_Unnumbered",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/state/enabled"
func (n *Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Unnumbered",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/config/enabled"
func (n *Interface_Subinterface_Ipv6_Unnumbered_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_Unnumbered",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/config/enabled"
func (n *Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Unnumbered",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered YANG schema element.
type Interface_Subinterface_Ipv6_UnnumberedPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered YANG schema element.
type Interface_Subinterface_Ipv6_UnnumberedPathAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/*/enabled"
func (n *Interface_Subinterface_Ipv6_UnnumberedPath) Enabled() *Interface_Subinterface_Ipv6_Unnumbered_EnabledPath {
	ps := &Interface_Subinterface_Ipv6_Unnumbered_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/*/enabled"
func (n *Interface_Subinterface_Ipv6_UnnumberedPathAny) Enabled() *Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny {
	ps := &Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-ref"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref"
func (n *Interface_Subinterface_Ipv6_UnnumberedPath) InterfaceRef() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath {
	ps := &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-ref"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref"
func (n *Interface_Subinterface_Ipv6_UnnumberedPathAny) InterfaceRef() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny {
	ps := &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_UnnumberedPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered](
		"Interface_Subinterface_Ipv6_Unnumbered",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_UnnumberedPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered](
		"Interface_Subinterface_Ipv6_Unnumbered",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_UnnumberedPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered](
		"Interface_Subinterface_Ipv6_Unnumbered",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_UnnumberedPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered](
		"Interface_Subinterface_Ipv6_Unnumbered",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/interface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/interface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/interface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/interface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/subinterface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/subinterface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/subinterface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/subinterface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/*/interface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath) Interface() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath {
	ps := &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/*/interface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny) Interface() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny {
	ps := &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is required, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/*/subinterface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath) Subinterface() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath {
	ps := &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is required, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/*/subinterface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny {
	ps := &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Urpf_AllowDefaultRoutePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/state/allow-default-route YANG schema element.
type Interface_Subinterface_Ipv6_Urpf_AllowDefaultRoutePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Urpf_AllowDefaultRoutePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/state/allow-default-route YANG schema element.
type Interface_Subinterface_Ipv6_Urpf_AllowDefaultRoutePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-default-route"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/state/allow-default-route"
func (n *Interface_Subinterface_Ipv6_Urpf_AllowDefaultRoutePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-default-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Urpf).AllowDefaultRoute
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-default-route"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/state/allow-default-route"
func (n *Interface_Subinterface_Ipv6_Urpf_AllowDefaultRoutePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-default-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Urpf).AllowDefaultRoute
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-default-route"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/config/allow-default-route"
func (n *Interface_Subinterface_Ipv6_Urpf_AllowDefaultRoutePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-default-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Urpf).AllowDefaultRoute
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-default-route"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/config/allow-default-route"
func (n *Interface_Subinterface_Ipv6_Urpf_AllowDefaultRoutePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-default-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Urpf).AllowDefaultRoute
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Urpf_AllowDropNextHopPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/state/allow-drop-next-hop YANG schema element.
type Interface_Subinterface_Ipv6_Urpf_AllowDropNextHopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Urpf_AllowDropNextHopPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/state/allow-drop-next-hop YANG schema element.
type Interface_Subinterface_Ipv6_Urpf_AllowDropNextHopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/state/allow-drop-next-hop"
func (n *Interface_Subinterface_Ipv6_Urpf_AllowDropNextHopPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-drop-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Urpf).AllowDropNextHop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/state/allow-drop-next-hop"
func (n *Interface_Subinterface_Ipv6_Urpf_AllowDropNextHopPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-drop-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Urpf).AllowDropNextHop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/config/allow-drop-next-hop"
func (n *Interface_Subinterface_Ipv6_Urpf_AllowDropNextHopPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-drop-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Urpf).AllowDropNextHop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/config/allow-drop-next-hop"
func (n *Interface_Subinterface_Ipv6_Urpf_AllowDropNextHopPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-drop-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Urpf).AllowDropNextHop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Urpf_AllowFeasiblePathPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/state/allow-feasible-path YANG schema element.
type Interface_Subinterface_Ipv6_Urpf_AllowFeasiblePathPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Urpf_AllowFeasiblePathPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/state/allow-feasible-path YANG schema element.
type Interface_Subinterface_Ipv6_Urpf_AllowFeasiblePathPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-feasible-path"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/state/allow-feasible-path"
func (n *Interface_Subinterface_Ipv6_Urpf_AllowFeasiblePathPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-feasible-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Urpf).AllowFeasiblePath
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/allow-feasible-path"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/state/allow-feasible-path"
func (n *Interface_Subinterface_Ipv6_Urpf_AllowFeasiblePathPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-feasible-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Urpf).AllowFeasiblePath
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-feasible-path"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/config/allow-feasible-path"
func (n *Interface_Subinterface_Ipv6_Urpf_AllowFeasiblePathPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-feasible-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Urpf).AllowFeasiblePath
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/allow-feasible-path"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/config/allow-feasible-path"
func (n *Interface_Subinterface_Ipv6_Urpf_AllowFeasiblePathPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-feasible-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Urpf).AllowFeasiblePath
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Urpf_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/state/enabled YANG schema element.
type Interface_Subinterface_Ipv6_Urpf_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Urpf_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/state/enabled YANG schema element.
type Interface_Subinterface_Ipv6_Urpf_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/state/enabled"
func (n *Interface_Subinterface_Ipv6_Urpf_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Urpf).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/state/enabled"
func (n *Interface_Subinterface_Ipv6_Urpf_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Urpf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Urpf).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/config/enabled"
func (n *Interface_Subinterface_Ipv6_Urpf_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Urpf).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/config/enabled"
func (n *Interface_Subinterface_Ipv6_Urpf_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Urpf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Urpf).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Urpf_ModePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/state/mode YANG schema element.
type Interface_Subinterface_Ipv6_Urpf_ModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Urpf_ModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/state/mode YANG schema element.
type Interface_Subinterface_Ipv6_Urpf_ModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/state/mode"
func (n *Interface_Subinterface_Ipv6_Urpf_ModePath) State() ygnmi.SingletonQuery[oc.E_IfIp_UrpfMode] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_UrpfMode](
		"Interface_Subinterface_Ipv6_Urpf",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_UrpfMode, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Urpf).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/state/mode"
func (n *Interface_Subinterface_Ipv6_Urpf_ModePathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_UrpfMode] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_UrpfMode](
		"Interface_Subinterface_Ipv6_Urpf",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_UrpfMode, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Urpf).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/config/mode"
func (n *Interface_Subinterface_Ipv6_Urpf_ModePath) Config() ygnmi.ConfigQuery[oc.E_IfIp_UrpfMode] {
	return ygnmi.NewConfigQuery[oc.E_IfIp_UrpfMode](
		"Interface_Subinterface_Ipv6_Urpf",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_UrpfMode, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Urpf).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/config/mode"
func (n *Interface_Subinterface_Ipv6_Urpf_ModePathAny) Config() ygnmi.WildcardQuery[oc.E_IfIp_UrpfMode] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_UrpfMode](
		"Interface_Subinterface_Ipv6_Urpf",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_UrpfMode, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Urpf).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Urpf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_UrpfPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/urpf YANG schema element.
type Interface_Subinterface_Ipv6_UrpfPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_UrpfPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/urpf YANG schema element.
type Interface_Subinterface_Ipv6_UrpfPathAny struct {
	*ygnmi.NodePath
}

// AllowDefaultRoute (leaf): If set to false, and the packet's source address LPMs to the
// default route (0.0.0.0/0 or ::/0) then the URPF check fails and the
// packet is discarded.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-default-route"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/*/allow-default-route"
func (n *Interface_Subinterface_Ipv6_UrpfPath) AllowDefaultRoute() *Interface_Subinterface_Ipv6_Urpf_AllowDefaultRoutePath {
	ps := &Interface_Subinterface_Ipv6_Urpf_AllowDefaultRoutePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-default-route"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowDefaultRoute (leaf): If set to false, and the packet's source address LPMs to the
// default route (0.0.0.0/0 or ::/0) then the URPF check fails and the
// packet is discarded.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-default-route"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/*/allow-default-route"
func (n *Interface_Subinterface_Ipv6_UrpfPathAny) AllowDefaultRoute() *Interface_Subinterface_Ipv6_Urpf_AllowDefaultRoutePathAny {
	ps := &Interface_Subinterface_Ipv6_Urpf_AllowDefaultRoutePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-default-route"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowDropNextHop (leaf): If set to false, and the packet's source address LPMs to a route
// with DROP as the next-hop, then the URPF check fails and the packet
// is discarded.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/*/allow-drop-next-hop"
func (n *Interface_Subinterface_Ipv6_UrpfPath) AllowDropNextHop() *Interface_Subinterface_Ipv6_Urpf_AllowDropNextHopPath {
	ps := &Interface_Subinterface_Ipv6_Urpf_AllowDropNextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-drop-next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowDropNextHop (leaf): If set to false, and the packet's source address LPMs to a route
// with DROP as the next-hop, then the URPF check fails and the packet
// is discarded.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-drop-next-hop"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/*/allow-drop-next-hop"
func (n *Interface_Subinterface_Ipv6_UrpfPathAny) AllowDropNextHop() *Interface_Subinterface_Ipv6_Urpf_AllowDropNextHopPathAny {
	ps := &Interface_Subinterface_Ipv6_Urpf_AllowDropNextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-drop-next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowFeasiblePath (leaf): The routing system may select subset of all learned paths.  For example,
// BGP without multi-path enabled will install only one of many possible ECMP
// paths into the FIB or ECMP multipath limits may select only a subset of all
// available paths. If set to true, the URPF check passes if the source address
// LPMs to any path in the RIB, even if it is not selected for forwarding in the
// FIB.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-feasible-path"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/*/allow-feasible-path"
func (n *Interface_Subinterface_Ipv6_UrpfPath) AllowFeasiblePath() *Interface_Subinterface_Ipv6_Urpf_AllowFeasiblePathPath {
	ps := &Interface_Subinterface_Ipv6_Urpf_AllowFeasiblePathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-feasible-path"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowFeasiblePath (leaf): The routing system may select subset of all learned paths.  For example,
// BGP without multi-path enabled will install only one of many possible ECMP
// paths into the FIB or ECMP multipath limits may select only a subset of all
// available paths. If set to true, the URPF check passes if the source address
// LPMs to any path in the RIB, even if it is not selected for forwarding in the
// FIB.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/allow-feasible-path"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/*/allow-feasible-path"
func (n *Interface_Subinterface_Ipv6_UrpfPathAny) AllowFeasiblePath() *Interface_Subinterface_Ipv6_Urpf_AllowFeasiblePathPathAny {
	ps := &Interface_Subinterface_Ipv6_Urpf_AllowFeasiblePathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-feasible-path"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Turns ON/OFF packet's source address verification against content of
// FIB. This is one of anti-spoofing protection techniques.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/*/enabled"
func (n *Interface_Subinterface_Ipv6_UrpfPath) Enabled() *Interface_Subinterface_Ipv6_Urpf_EnabledPath {
	ps := &Interface_Subinterface_Ipv6_Urpf_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Turns ON/OFF packet's source address verification against content of
// FIB. This is one of anti-spoofing protection techniques.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/*/enabled"
func (n *Interface_Subinterface_Ipv6_UrpfPathAny) Enabled() *Interface_Subinterface_Ipv6_Urpf_EnabledPathAny {
	ps := &Interface_Subinterface_Ipv6_Urpf_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): The URPF in STRICT mode requires the ingress packet source address
// to have a longest prefix match (LPM) for a route in the forwarding table
// with a next-hop of the interface the packet was received on.
// The URPF in LOOSE mode requires the ingress packet source address to
// LPM a route in the forwarding table, but may have any next-hop.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/*/mode"
func (n *Interface_Subinterface_Ipv6_UrpfPath) Mode() *Interface_Subinterface_Ipv6_Urpf_ModePath {
	ps := &Interface_Subinterface_Ipv6_Urpf_ModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): The URPF in STRICT mode requires the ingress packet source address
// to have a longest prefix match (LPM) for a route in the forwarding table
// with a next-hop of the interface the packet was received on.
// The URPF in LOOSE mode requires the ingress packet source address to
// LPM a route in the forwarding table, but may have any next-hop.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/urpf/*/mode"
func (n *Interface_Subinterface_Ipv6_UrpfPathAny) Mode() *Interface_Subinterface_Ipv6_Urpf_ModePathAny {
	ps := &Interface_Subinterface_Ipv6_Urpf_ModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_UrpfPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6_Urpf] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6_Urpf](
		"Interface_Subinterface_Ipv6_Urpf",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_UrpfPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Urpf] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Urpf](
		"Interface_Subinterface_Ipv6_Urpf",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_UrpfPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv6_Urpf] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv6_Urpf](
		"Interface_Subinterface_Ipv6_Urpf",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_UrpfPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Urpf] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Urpf](
		"Interface_Subinterface_Ipv6_Urpf",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_VlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_VlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_VlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_VlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/state/vlan-id"
func (n *Interface_Subinterface_Vlan_VlanIdPath) State() ygnmi.SingletonQuery[oc.Interface_Subinterface_Vlan_VlanId_Union] {
	return ygnmi.NewSingletonQuery[oc.Interface_Subinterface_Vlan_VlanId_Union](
		"Interface_Subinterface_Vlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Interface_Subinterface_Vlan_VlanId_Union, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan).VlanId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/state/vlan-id"
func (n *Interface_Subinterface_Vlan_VlanIdPathAny) State() ygnmi.WildcardQuery[oc.Interface_Subinterface_Vlan_VlanId_Union] {
	return ygnmi.NewWildcardQuery[oc.Interface_Subinterface_Vlan_VlanId_Union](
		"Interface_Subinterface_Vlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Interface_Subinterface_Vlan_VlanId_Union, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan).VlanId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/config/vlan-id"
func (n *Interface_Subinterface_Vlan_VlanIdPath) Config() ygnmi.ConfigQuery[oc.Interface_Subinterface_Vlan_VlanId_Union] {
	return ygnmi.NewConfigQuery[oc.Interface_Subinterface_Vlan_VlanId_Union](
		"Interface_Subinterface_Vlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Interface_Subinterface_Vlan_VlanId_Union, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan).VlanId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/config/vlan-id"
func (n *Interface_Subinterface_Vlan_VlanIdPathAny) Config() ygnmi.WildcardQuery[oc.Interface_Subinterface_Vlan_VlanId_Union] {
	return ygnmi.NewWildcardQuery[oc.Interface_Subinterface_Vlan_VlanId_Union](
		"Interface_Subinterface_Vlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Interface_Subinterface_Vlan_VlanId_Union, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan).VlanId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_VlanPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan YANG schema element.
type Interface_Subinterface_VlanPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_VlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan YANG schema element.
type Interface_Subinterface_VlanPathAny struct {
	*ygnmi.NodePath
}

// EgressMapping (container): Egress VLAN and label behaviors for packets that are
// destined for output via this subinterface.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "egress-mapping"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping"
func (n *Interface_Subinterface_VlanPath) EgressMapping() *Interface_Subinterface_Vlan_EgressMappingPath {
	ps := &Interface_Subinterface_Vlan_EgressMappingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-mapping"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EgressMapping (container): Egress VLAN and label behaviors for packets that are
// destined for output via this subinterface.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "egress-mapping"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping"
func (n *Interface_Subinterface_VlanPathAny) EgressMapping() *Interface_Subinterface_Vlan_EgressMappingPathAny {
	ps := &Interface_Subinterface_Vlan_EgressMappingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-mapping"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IngressMapping (container): Ingress VLAN stack behaviors for packets that arrive on
// this subinterface after their VLAN idenitifer(s) have been
// matched.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "ingress-mapping"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping"
func (n *Interface_Subinterface_VlanPath) IngressMapping() *Interface_Subinterface_Vlan_IngressMappingPath {
	ps := &Interface_Subinterface_Vlan_IngressMappingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-mapping"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IngressMapping (container): Ingress VLAN stack behaviors for packets that arrive on
// this subinterface after their VLAN idenitifer(s) have been
// matched.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "ingress-mapping"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping"
func (n *Interface_Subinterface_VlanPathAny) IngressMapping() *Interface_Subinterface_Vlan_IngressMappingPathAny {
	ps := &Interface_Subinterface_Vlan_IngressMappingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-mapping"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Match (container): Configuration for various VLAN tag matching schemes,
// including single-tagged 802.1q packets and double-tagged
// 802.1ad 'Q-in-Q' packets. Typically only one of the subordinate
// containers should be specified.
//
// Wildcards may be matched by specifying range values of 2-4094.
// If implementations have a more efficient way to match Wildcards
// then they should recognize this pattern and translate accordingly.
//
// Implementations are expected to return errors for combinations
// that they do not support, or provide deviations to the same effect.
//
// For simple VLAN configurations without an 'egress-mapping' then
// using the 'single-tagged' and 'double-tagged' VLAN matches that
// resolve to specific values, these specify the VLAN identifiers
// applied to packets on egress.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "match"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match"
func (n *Interface_Subinterface_VlanPath) Match() *Interface_Subinterface_Vlan_MatchPath {
	ps := &Interface_Subinterface_Vlan_MatchPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"match"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Match (container): Configuration for various VLAN tag matching schemes,
// including single-tagged 802.1q packets and double-tagged
// 802.1ad 'Q-in-Q' packets. Typically only one of the subordinate
// containers should be specified.
//
// Wildcards may be matched by specifying range values of 2-4094.
// If implementations have a more efficient way to match Wildcards
// then they should recognize this pattern and translate accordingly.
//
// Implementations are expected to return errors for combinations
// that they do not support, or provide deviations to the same effect.
//
// For simple VLAN configurations without an 'egress-mapping' then
// using the 'single-tagged' and 'double-tagged' VLAN matches that
// resolve to specific values, these specify the VLAN identifiers
// applied to packets on egress.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "match"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match"
func (n *Interface_Subinterface_VlanPathAny) Match() *Interface_Subinterface_Vlan_MatchPathAny {
	ps := &Interface_Subinterface_Vlan_MatchPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"match"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// VlanId (leaf): VLAN id for the subinterface -- specified inline for the
// case of a local VLAN.  The id is scoped to the
// subinterface, and could be repeated on different
// subinterfaces.
// Deprecation note: See adjacent elements in the 'vlan' container for
// making more expressive VLAN matches.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/*/vlan-id"
func (n *Interface_Subinterface_VlanPath) VlanId() *Interface_Subinterface_Vlan_VlanIdPath {
	ps := &Interface_Subinterface_Vlan_VlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanId (leaf): VLAN id for the subinterface -- specified inline for the
// case of a local VLAN.  The id is scoped to the
// subinterface, and could be repeated on different
// subinterfaces.
// Deprecation note: See adjacent elements in the 'vlan' container for
// making more expressive VLAN matches.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/*/vlan-id"
func (n *Interface_Subinterface_VlanPathAny) VlanId() *Interface_Subinterface_Vlan_VlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_VlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_VlanPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan](
		"Interface_Subinterface_Vlan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_VlanPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan](
		"Interface_Subinterface_Vlan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_VlanPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan](
		"Interface_Subinterface_Vlan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_VlanPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan](
		"Interface_Subinterface_Vlan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_EgressMapping_TpidPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/tpid YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_TpidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_EgressMapping_TpidPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/tpid YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_TpidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/tpid"
func (n *Interface_Subinterface_Vlan_EgressMapping_TpidPath) State() ygnmi.SingletonQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewSingletonQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface_Subinterface_Vlan_EgressMapping",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/tpid"
func (n *Interface_Subinterface_Vlan_EgressMapping_TpidPathAny) State() ygnmi.WildcardQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewWildcardQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface_Subinterface_Vlan_EgressMapping",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/tpid"
func (n *Interface_Subinterface_Vlan_EgressMapping_TpidPath) Config() ygnmi.ConfigQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewConfigQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface_Subinterface_Vlan_EgressMapping",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/tpid"
func (n *Interface_Subinterface_Vlan_EgressMapping_TpidPathAny) Config() ygnmi.WildcardQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewWildcardQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface_Subinterface_Vlan_EgressMapping",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_EgressMapping_VlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_VlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-id"
func (n *Interface_Subinterface_Vlan_EgressMapping_VlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_EgressMapping",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-id"
func (n *Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_EgressMapping",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-id"
func (n *Interface_Subinterface_Vlan_EgressMapping_VlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_EgressMapping",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-id"
func (n *Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_EgressMapping",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-stack-action YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-stack-action YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath) State() ygnmi.SingletonQuery[oc.E_Vlan_VlanStackAction] {
	return ygnmi.NewSingletonQuery[oc.E_Vlan_VlanStackAction](
		"Interface_Subinterface_Vlan_EgressMapping",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-stack-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Vlan_VlanStackAction, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).VlanStackAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny) State() ygnmi.WildcardQuery[oc.E_Vlan_VlanStackAction] {
	return ygnmi.NewWildcardQuery[oc.E_Vlan_VlanStackAction](
		"Interface_Subinterface_Vlan_EgressMapping",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-stack-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Vlan_VlanStackAction, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).VlanStackAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath) Config() ygnmi.ConfigQuery[oc.E_Vlan_VlanStackAction] {
	return ygnmi.NewConfigQuery[oc.E_Vlan_VlanStackAction](
		"Interface_Subinterface_Vlan_EgressMapping",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-stack-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Vlan_VlanStackAction, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).VlanStackAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny) Config() ygnmi.WildcardQuery[oc.E_Vlan_VlanStackAction] {
	return ygnmi.NewWildcardQuery[oc.E_Vlan_VlanStackAction](
		"Interface_Subinterface_Vlan_EgressMapping",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-stack-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Vlan_VlanStackAction, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).VlanStackAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_EgressMappingPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping YANG schema element.
type Interface_Subinterface_Vlan_EgressMappingPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_EgressMappingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping YANG schema element.
type Interface_Subinterface_Vlan_EgressMappingPathAny struct {
	*ygnmi.NodePath
}

// Tpid (leaf): Optionally override the tag protocol identifier field (TPID) that
// is used by the action configured by 'vlan-stack-action' when
// modifying the VLAN stack.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/*/tpid"
func (n *Interface_Subinterface_Vlan_EgressMappingPath) Tpid() *Interface_Subinterface_Vlan_EgressMapping_TpidPath {
	ps := &Interface_Subinterface_Vlan_EgressMapping_TpidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tpid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Tpid (leaf): Optionally override the tag protocol identifier field (TPID) that
// is used by the action configured by 'vlan-stack-action' when
// modifying the VLAN stack.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/*/tpid"
func (n *Interface_Subinterface_Vlan_EgressMappingPathAny) Tpid() *Interface_Subinterface_Vlan_EgressMapping_TpidPathAny {
	ps := &Interface_Subinterface_Vlan_EgressMapping_TpidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tpid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanId (leaf): Optionally specifies a fixed VLAN identifier that is used by the
// action configured in 'vlan-stack-action'. For example, if the action
// is 'POP' then a VLAN identifier is removed from the stack but the
// value of this leaf is used instead. This value must be non-zero if
// the 'vlan-stack-action' is one of 'PUSH' or 'SWAP'.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/*/vlan-id"
func (n *Interface_Subinterface_Vlan_EgressMappingPath) VlanId() *Interface_Subinterface_Vlan_EgressMapping_VlanIdPath {
	ps := &Interface_Subinterface_Vlan_EgressMapping_VlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanId (leaf): Optionally specifies a fixed VLAN identifier that is used by the
// action configured in 'vlan-stack-action'. For example, if the action
// is 'POP' then a VLAN identifier is removed from the stack but the
// value of this leaf is used instead. This value must be non-zero if
// the 'vlan-stack-action' is one of 'PUSH' or 'SWAP'.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/*/vlan-id"
func (n *Interface_Subinterface_Vlan_EgressMappingPathAny) VlanId() *Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanStackAction (leaf): The action to take on the VLAN stack of a packet. This is
// optionally used in conjunction with adjacent leaves to override
// the values of the action.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/*/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_EgressMappingPath) VlanStackAction() *Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath {
	ps := &Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-stack-action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanStackAction (leaf): The action to take on the VLAN stack of a packet. This is
// optionally used in conjunction with adjacent leaves to override
// the values of the action.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/*/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_EgressMappingPathAny) VlanStackAction() *Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny {
	ps := &Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-stack-action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_EgressMappingPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_EgressMapping] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_EgressMapping](
		"Interface_Subinterface_Vlan_EgressMapping",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_EgressMappingPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_EgressMapping] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_EgressMapping](
		"Interface_Subinterface_Vlan_EgressMapping",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_EgressMappingPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_EgressMapping] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_EgressMapping](
		"Interface_Subinterface_Vlan_EgressMapping",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_EgressMappingPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_EgressMapping] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_EgressMapping](
		"Interface_Subinterface_Vlan_EgressMapping",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_IngressMapping_TpidPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/tpid YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_TpidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_IngressMapping_TpidPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/tpid YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_TpidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/tpid"
func (n *Interface_Subinterface_Vlan_IngressMapping_TpidPath) State() ygnmi.SingletonQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewSingletonQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface_Subinterface_Vlan_IngressMapping",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/tpid"
func (n *Interface_Subinterface_Vlan_IngressMapping_TpidPathAny) State() ygnmi.WildcardQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewWildcardQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface_Subinterface_Vlan_IngressMapping",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/tpid"
func (n *Interface_Subinterface_Vlan_IngressMapping_TpidPath) Config() ygnmi.ConfigQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewConfigQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface_Subinterface_Vlan_IngressMapping",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/tpid"
func (n *Interface_Subinterface_Vlan_IngressMapping_TpidPathAny) Config() ygnmi.WildcardQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewWildcardQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface_Subinterface_Vlan_IngressMapping",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_IngressMapping_VlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_VlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-id"
func (n *Interface_Subinterface_Vlan_IngressMapping_VlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_IngressMapping",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-id"
func (n *Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_IngressMapping",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-id"
func (n *Interface_Subinterface_Vlan_IngressMapping_VlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_IngressMapping",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-id"
func (n *Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_IngressMapping",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-stack-action YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-stack-action YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath) State() ygnmi.SingletonQuery[oc.E_Vlan_VlanStackAction] {
	return ygnmi.NewSingletonQuery[oc.E_Vlan_VlanStackAction](
		"Interface_Subinterface_Vlan_IngressMapping",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-stack-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Vlan_VlanStackAction, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).VlanStackAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny) State() ygnmi.WildcardQuery[oc.E_Vlan_VlanStackAction] {
	return ygnmi.NewWildcardQuery[oc.E_Vlan_VlanStackAction](
		"Interface_Subinterface_Vlan_IngressMapping",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-stack-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Vlan_VlanStackAction, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).VlanStackAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath) Config() ygnmi.ConfigQuery[oc.E_Vlan_VlanStackAction] {
	return ygnmi.NewConfigQuery[oc.E_Vlan_VlanStackAction](
		"Interface_Subinterface_Vlan_IngressMapping",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-stack-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Vlan_VlanStackAction, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).VlanStackAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny) Config() ygnmi.WildcardQuery[oc.E_Vlan_VlanStackAction] {
	return ygnmi.NewWildcardQuery[oc.E_Vlan_VlanStackAction](
		"Interface_Subinterface_Vlan_IngressMapping",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-stack-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Vlan_VlanStackAction, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).VlanStackAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_IngressMappingPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping YANG schema element.
type Interface_Subinterface_Vlan_IngressMappingPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_IngressMappingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping YANG schema element.
type Interface_Subinterface_Vlan_IngressMappingPathAny struct {
	*ygnmi.NodePath
}

// Tpid (leaf): Optionally override the tag protocol identifier field (TPID) that
// is used by the action configured by 'vlan-stack-action' when
// modifying the VLAN stack.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/*/tpid"
func (n *Interface_Subinterface_Vlan_IngressMappingPath) Tpid() *Interface_Subinterface_Vlan_IngressMapping_TpidPath {
	ps := &Interface_Subinterface_Vlan_IngressMapping_TpidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tpid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Tpid (leaf): Optionally override the tag protocol identifier field (TPID) that
// is used by the action configured by 'vlan-stack-action' when
// modifying the VLAN stack.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/*/tpid"
func (n *Interface_Subinterface_Vlan_IngressMappingPathAny) Tpid() *Interface_Subinterface_Vlan_IngressMapping_TpidPathAny {
	ps := &Interface_Subinterface_Vlan_IngressMapping_TpidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tpid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanId (leaf): Optionally specifies a fixed VLAN identifier that is used by the
// action configured in 'vlan-stack-action'. For example, if the action
// is 'PUSH' then this VLAN identifier is added to the the stack.
// This value must be non-zero if the 'vlan-stack-action' is one of
// 'PUSH' or 'SWAP'.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/*/vlan-id"
func (n *Interface_Subinterface_Vlan_IngressMappingPath) VlanId() *Interface_Subinterface_Vlan_IngressMapping_VlanIdPath {
	ps := &Interface_Subinterface_Vlan_IngressMapping_VlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanId (leaf): Optionally specifies a fixed VLAN identifier that is used by the
// action configured in 'vlan-stack-action'. For example, if the action
// is 'PUSH' then this VLAN identifier is added to the the stack.
// This value must be non-zero if the 'vlan-stack-action' is one of
// 'PUSH' or 'SWAP'.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/*/vlan-id"
func (n *Interface_Subinterface_Vlan_IngressMappingPathAny) VlanId() *Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanStackAction (leaf): The action to take on the VLAN stack of a packet. This is
// optionally used in conjunction with adjacent leaves to override
// the values of the action.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/*/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_IngressMappingPath) VlanStackAction() *Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath {
	ps := &Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-stack-action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanStackAction (leaf): The action to take on the VLAN stack of a packet. This is
// optionally used in conjunction with adjacent leaves to override
// the values of the action.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/*/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_IngressMappingPathAny) VlanStackAction() *Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny {
	ps := &Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-stack-action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_IngressMappingPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_IngressMapping] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_IngressMapping](
		"Interface_Subinterface_Vlan_IngressMapping",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_IngressMappingPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_IngressMapping] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_IngressMapping](
		"Interface_Subinterface_Vlan_IngressMapping",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_IngressMappingPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_IngressMapping] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_IngressMapping](
		"Interface_Subinterface_Vlan_IngressMapping",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_IngressMappingPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_IngressMapping] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_IngressMapping](
		"Interface_Subinterface_Vlan_IngressMapping",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_MatchPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match YANG schema element.
type Interface_Subinterface_Vlan_MatchPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_MatchPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match YANG schema element.
type Interface_Subinterface_Vlan_MatchPathAny struct {
	*ygnmi.NodePath
}

// DoubleTagged (container): Match double-tagged packets against inner exact and outer exact
// VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTagged() *Interface_Subinterface_Vlan_Match_DoubleTaggedPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTagged (container): Match double-tagged packets against inner exact and outer exact
// VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTagged() *Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTaggedInnerList (container): Match double-tagged packets against an inner list and outer exact
// VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged-inner-list"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedInnerList() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged-inner-list"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTaggedInnerList (container): Match double-tagged packets against an inner list and outer exact
// VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged-inner-list"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedInnerList() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged-inner-list"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTaggedInnerOuterRange (container): Match double-tagged packets against an inner range and an outer
// range of VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged-inner-outer-range"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedInnerOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged-inner-outer-range"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTaggedInnerOuterRange (container): Match double-tagged packets against an inner range and an outer
// range of VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged-inner-outer-range"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedInnerOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged-inner-outer-range"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTaggedInnerRange (container): Match double-tagged packets against an inner range and outer
// exact VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged-inner-range"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedInnerRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged-inner-range"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTaggedInnerRange (container): Match double-tagged packets against an inner range and outer
// exact VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged-inner-range"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedInnerRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged-inner-range"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTaggedOuterList (container): Match double-tagged packets against an inner exact and outer list
// of VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged-outer-list"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedOuterList() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged-outer-list"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTaggedOuterList (container): Match double-tagged packets against an inner exact and outer list
// of VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged-outer-list"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedOuterList() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged-outer-list"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTaggedOuterRange (container): Match double-tagged packets against an inner exact and an outer
// range of VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged-outer-range"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged-outer-range"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTaggedOuterRange (container): Match double-tagged packets against an inner exact and an outer
// range of VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged-outer-range"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged-outer-range"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleTagged (container): Match single-tagged packets with an exact VLAN identifier.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "single-tagged"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged"
func (n *Interface_Subinterface_Vlan_MatchPath) SingleTagged() *Interface_Subinterface_Vlan_Match_SingleTaggedPath {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-tagged"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleTagged (container): Match single-tagged packets with an exact VLAN identifier.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "single-tagged"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged"
func (n *Interface_Subinterface_Vlan_MatchPathAny) SingleTagged() *Interface_Subinterface_Vlan_Match_SingleTaggedPathAny {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-tagged"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleTaggedList (container): Match single-tagged packets with a list of VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "single-tagged-list"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list"
func (n *Interface_Subinterface_Vlan_MatchPath) SingleTaggedList() *Interface_Subinterface_Vlan_Match_SingleTaggedListPath {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedListPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-tagged-list"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleTaggedList (container): Match single-tagged packets with a list of VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "single-tagged-list"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list"
func (n *Interface_Subinterface_Vlan_MatchPathAny) SingleTaggedList() *Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-tagged-list"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleTaggedRange (container): Match single-tagged packets with a range of VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "single-tagged-range"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range"
func (n *Interface_Subinterface_Vlan_MatchPath) SingleTaggedRange() *Interface_Subinterface_Vlan_Match_SingleTaggedRangePath {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedRangePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-tagged-range"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleTaggedRange (container): Match single-tagged packets with a range of VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "single-tagged-range"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range"
func (n *Interface_Subinterface_Vlan_MatchPathAny) SingleTaggedRange() *Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-tagged-range"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_MatchPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_Match] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_Match](
		"Interface_Subinterface_Vlan_Match",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_MatchPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match](
		"Interface_Subinterface_Vlan_Match",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_MatchPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_Match] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_Match](
		"Interface_Subinterface_Vlan_Match",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_MatchPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match](
		"Interface_Subinterface_Vlan_Match",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTagged).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTagged).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTagged).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTagged).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTagged).OuterVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTagged).OuterVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTagged).OuterVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTagged).OuterVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny struct {
	*ygnmi.NodePath
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/*/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPath) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/*/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterVlanId (leaf): Outer VLAN identifier for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/*/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPath) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterVlanId (leaf): Outer VLAN identifier for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/*/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTagged] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTagged](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTagged] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTagged](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTagged] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTagged](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTagged] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTagged](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/inner-vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/inner-vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/inner-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath) State() ygnmi.SingletonQuery[[]uint16] {
	return ygnmi.NewSingletonQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList).InnerVlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/inner-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny) State() ygnmi.WildcardQuery[[]uint16] {
	return ygnmi.NewWildcardQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList).InnerVlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/inner-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath) Config() ygnmi.ConfigQuery[[]uint16] {
	return ygnmi.NewConfigQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList).InnerVlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/inner-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny) Config() ygnmi.WildcardQuery[[]uint16] {
	return ygnmi.NewWildcardQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList).InnerVlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList).OuterVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList).OuterVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList).OuterVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList).OuterVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny struct {
	*ygnmi.NodePath
}

// InnerVlanIds (leaf-list): Inner VLAN identifiers for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/*/inner-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath) InnerVlanIds() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-vlan-ids"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InnerVlanIds (leaf-list): Inner VLAN identifiers for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/*/inner-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny) InnerVlanIds() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-vlan-ids"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterVlanId (leaf): Outer VLAN identifier for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/*/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterVlanId (leaf): Outer VLAN identifier for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/*/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).InnerHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).InnerHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).InnerHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).InnerHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).InnerLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).InnerLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).InnerLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).InnerLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).OuterHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).OuterHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).OuterHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).OuterHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).OuterLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).OuterLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).OuterLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).OuterLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny struct {
	*ygnmi.NodePath
}

// InnerHighVlanId (leaf): The high-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/*/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) InnerHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InnerHighVlanId (leaf): The high-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/*/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) InnerHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InnerLowVlanId (leaf): The low-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/*/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) InnerLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InnerLowVlanId (leaf): The low-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/*/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) InnerLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterHighVlanId (leaf): The high-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/*/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) OuterHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterHighVlanId (leaf): The high-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/*/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) OuterHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterLowVlanId (leaf): The low-value outer VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/*/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) OuterLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterLowVlanId (leaf): The low-value outer VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/*/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) OuterLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).InnerHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).InnerHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).InnerHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).InnerHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).InnerLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).InnerLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).InnerLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).InnerLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath) State() ygnmi.SingletonQuery[[]uint16] {
	return ygnmi.NewSingletonQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).OuterVlanId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny) State() ygnmi.WildcardQuery[[]uint16] {
	return ygnmi.NewWildcardQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).OuterVlanId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath) Config() ygnmi.ConfigQuery[[]uint16] {
	return ygnmi.NewConfigQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).OuterVlanId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny) Config() ygnmi.WildcardQuery[[]uint16] {
	return ygnmi.NewWildcardQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).OuterVlanId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny struct {
	*ygnmi.NodePath
}

// InnerHighVlanId (leaf): The high-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/*/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath) InnerHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InnerHighVlanId (leaf): The high-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/*/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny) InnerHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InnerLowVlanId (leaf): The low-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/*/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath) InnerLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InnerLowVlanId (leaf): The low-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/*/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny) InnerLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterVlanId (leaf-list): Outer VLAN identifier of double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/*/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterVlanId (leaf-list): Outer VLAN identifier of double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/*/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/outer-vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/outer-vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/outer-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath) State() ygnmi.SingletonQuery[[]uint16] {
	return ygnmi.NewSingletonQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList).OuterVlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/outer-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny) State() ygnmi.WildcardQuery[[]uint16] {
	return ygnmi.NewWildcardQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList).OuterVlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/outer-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath) Config() ygnmi.ConfigQuery[[]uint16] {
	return ygnmi.NewConfigQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList).OuterVlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/outer-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny) Config() ygnmi.WildcardQuery[[]uint16] {
	return ygnmi.NewWildcardQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList).OuterVlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny struct {
	*ygnmi.NodePath
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/*/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/*/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterVlanIds (leaf-list): Outer VLAN identifiers for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/*/outer-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath) OuterVlanIds() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-vlan-ids"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterVlanIds (leaf-list): Outer VLAN identifiers for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/*/outer-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny) OuterVlanIds() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-vlan-ids"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).OuterHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).OuterHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).OuterHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).OuterHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).OuterLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).OuterLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).OuterLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).OuterLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny struct {
	*ygnmi.NodePath
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/*/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/*/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterHighVlanId (leaf): The high-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/*/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath) OuterHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterHighVlanId (leaf): The high-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/*/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny) OuterHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterLowVlanId (leaf): The low-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/*/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath) OuterLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterLowVlanId (leaf): The low-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/*/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny) OuterLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/state/vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTagged",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTagged).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/state/vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTagged",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTagged).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/config/vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTagged",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTagged).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/config/vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTagged",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTagged).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_SingleTaggedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedPathAny struct {
	*ygnmi.NodePath
}

// VlanId (leaf): VLAN identifier for single-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/*/vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedPath) VlanId() *Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanId (leaf): VLAN identifier for single-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/*/vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedPathAny) VlanId() *Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTagged] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTagged](
		"Interface_Subinterface_Vlan_Match_SingleTagged",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTagged] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTagged](
		"Interface_Subinterface_Vlan_Match_SingleTagged",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTagged] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTagged](
		"Interface_Subinterface_Vlan_Match_SingleTagged",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTagged] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTagged](
		"Interface_Subinterface_Vlan_Match_SingleTagged",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/state/vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/state/vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/state/vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath) State() ygnmi.SingletonQuery[[]uint16] {
	return ygnmi.NewSingletonQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedList",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList).VlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/state/vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny) State() ygnmi.WildcardQuery[[]uint16] {
	return ygnmi.NewWildcardQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedList",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList).VlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/config/vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath) Config() ygnmi.ConfigQuery[[]uint16] {
	return ygnmi.NewConfigQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedList",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList).VlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/config/vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny) Config() ygnmi.WildcardQuery[[]uint16] {
	return ygnmi.NewWildcardQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedList",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList).VlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_SingleTaggedListPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedListPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny struct {
	*ygnmi.NodePath
}

// VlanIds (leaf-list): VLAN identifiers for single-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/*/vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedListPath) VlanIds() *Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-ids"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanIds (leaf-list): VLAN identifiers for single-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/*/vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny) VlanIds() *Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-ids"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedListPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList](
		"Interface_Subinterface_Vlan_Match_SingleTaggedList",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList](
		"Interface_Subinterface_Vlan_Match_SingleTaggedList",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedListPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList](
		"Interface_Subinterface_Vlan_Match_SingleTaggedList",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList](
		"Interface_Subinterface_Vlan_Match_SingleTaggedList",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange).HighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange).HighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange).HighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange).HighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange).LowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange).LowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange).LowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange).LowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRangePath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny struct {
	*ygnmi.NodePath
}

// HighVlanId (leaf): The high-value VLAN identifier in a range for single-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/*/high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePath) HighVlanId() *Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "high-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HighVlanId (leaf): The high-value VLAN identifier in a range for single-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/*/high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny) HighVlanId() *Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "high-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LowVlanId (leaf): The low-value VLAN identifier in a range for single-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/*/low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePath) LowVlanId() *Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "low-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LowVlanId (leaf): The low-value VLAN identifier in a range for single-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/*/low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny) LowVlanId() *Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "low-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

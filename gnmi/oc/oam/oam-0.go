/*
Package oam is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-common.yang
  - public/release/models/aft/openconfig-aft-ethernet.yang
  - public/release/models/aft/openconfig-aft-ipv4.yang
  - public/release/models/aft/openconfig-aft-ipv6.yang
  - public/release/models/aft/openconfig-aft-mpls.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-pf.yang
  - public/release/models/aft/openconfig-aft-state-synced.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft-types.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-rates.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/local-routing/openconfig-local-routing-network-instance.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/network-instance/openconfig-network-instance-l2.yang
  - public/release/models/network-instance/openconfig-network-instance-static.yang
  - public/release/models/oam/openconfig-cfm-types.yang
  - public/release/models/oam/openconfig-oam.yang
  - public/release/models/oam/openconfig-oam-cfm.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-area.yang
  - public/release/models/ospf/openconfig-ospf-common.yang
  - public/release/models/ospf/openconfig-ospf-global.yang
  - public/release/models/ospf/openconfig-ospf-types.yang
  - public/release/models/ospf/openconfig-ospf.yang
  - public/release/models/ospf/openconfig-ospfv3-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
  - public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
  - public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package oam

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// OamPath represents the /openconfig-oam/oam YANG schema element.
type OamPath struct {
	*ygnmi.NodePath
}

// OamPathAny represents the wildcard version of the /openconfig-oam/oam YANG schema element.
type OamPathAny struct {
	*ygnmi.NodePath
}

// Cfm (container): Container for CFM configuration, state and perfomance measurement policies
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "cfm"
//	Path from root:       "/oam/cfm"
func (n *OamPath) Cfm() *Oam_CfmPath {
	ps := &Oam_CfmPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"cfm"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Cfm (container): Container for CFM configuration, state and perfomance measurement policies
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "cfm"
//	Path from root:       "/oam/cfm"
func (n *OamPathAny) Cfm() *Oam_CfmPathAny {
	ps := &Oam_CfmPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"cfm"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *OamPath) State() ygnmi.SingletonQuery[*oc.Oam] {
	return ygnmi.NewSingletonQuery[*oc.Oam](
		"Oam",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *OamPathAny) State() ygnmi.WildcardQuery[*oc.Oam] {
	return ygnmi.NewWildcardQuery[*oc.Oam](
		"Oam",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *OamPath) Config() ygnmi.ConfigQuery[*oc.Oam] {
	return ygnmi.NewConfigQuery[*oc.Oam](
		"Oam",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *OamPathAny) Config() ygnmi.WildcardQuery[*oc.Oam] {
	return ygnmi.NewWildcardQuery[*oc.Oam](
		"Oam",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_CfmDomainsPath represents the /openconfig-oam/oam/cfm/state/cfm-domains YANG schema element.
type Oam_Cfm_CfmDomainsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_CfmDomainsPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/state/cfm-domains YANG schema element.
type Oam_Cfm_CfmDomainsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/cfm-domains"
//	Path from root:       "/oam/cfm/state/cfm-domains"
func (n *Oam_Cfm_CfmDomainsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cfm-domains"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).CfmDomains
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/cfm-domains"
//	Path from root:       "/oam/cfm/state/cfm-domains"
func (n *Oam_Cfm_CfmDomainsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cfm-domains"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).CfmDomains
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_CfmServicesPath represents the /openconfig-oam/oam/cfm/state/cfm-services YANG schema element.
type Oam_Cfm_CfmServicesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_CfmServicesPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/state/cfm-services YANG schema element.
type Oam_Cfm_CfmServicesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/cfm-services"
//	Path from root:       "/oam/cfm/state/cfm-services"
func (n *Oam_Cfm_CfmServicesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cfm-services"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).CfmServices
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/cfm-services"
//	Path from root:       "/oam/cfm/state/cfm-services"
func (n *Oam_Cfm_CfmServicesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cfm-services"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).CfmServices
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_DisabledMisconfiguredPath represents the /openconfig-oam/oam/cfm/state/disabled-misconfigured YANG schema element.
type Oam_Cfm_DisabledMisconfiguredPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_DisabledMisconfiguredPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/state/disabled-misconfigured YANG schema element.
type Oam_Cfm_DisabledMisconfiguredPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/disabled-misconfigured"
//	Path from root:       "/oam/cfm/state/disabled-misconfigured"
func (n *Oam_Cfm_DisabledMisconfiguredPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disabled-misconfigured"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).DisabledMisconfigured
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/disabled-misconfigured"
//	Path from root:       "/oam/cfm/state/disabled-misconfigured"
func (n *Oam_Cfm_DisabledMisconfiguredPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disabled-misconfigured"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).DisabledMisconfigured
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_DisabledOperationalErrorsPath represents the /openconfig-oam/oam/cfm/state/disabled-operational-errors YANG schema element.
type Oam_Cfm_DisabledOperationalErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_DisabledOperationalErrorsPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/state/disabled-operational-errors YANG schema element.
type Oam_Cfm_DisabledOperationalErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/disabled-operational-errors"
//	Path from root:       "/oam/cfm/state/disabled-operational-errors"
func (n *Oam_Cfm_DisabledOperationalErrorsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disabled-operational-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).DisabledOperationalErrors
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/disabled-operational-errors"
//	Path from root:       "/oam/cfm/state/disabled-operational-errors"
func (n *Oam_Cfm_DisabledOperationalErrorsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disabled-operational-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).DisabledOperationalErrors
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_DisabledOutOfResourcesPath represents the /openconfig-oam/oam/cfm/state/disabled-out-of-resources YANG schema element.
type Oam_Cfm_DisabledOutOfResourcesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_DisabledOutOfResourcesPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/state/disabled-out-of-resources YANG schema element.
type Oam_Cfm_DisabledOutOfResourcesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/disabled-out-of-resources"
//	Path from root:       "/oam/cfm/state/disabled-out-of-resources"
func (n *Oam_Cfm_DisabledOutOfResourcesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disabled-out-of-resources"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).DisabledOutOfResources
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/disabled-out-of-resources"
//	Path from root:       "/oam/cfm/state/disabled-out-of-resources"
func (n *Oam_Cfm_DisabledOutOfResourcesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disabled-out-of-resources"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).DisabledOutOfResources
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_DownMepsPath represents the /openconfig-oam/oam/cfm/state/down-meps YANG schema element.
type Oam_Cfm_DownMepsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_DownMepsPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/state/down-meps YANG schema element.
type Oam_Cfm_DownMepsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/down-meps"
//	Path from root:       "/oam/cfm/state/down-meps"
func (n *Oam_Cfm_DownMepsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "down-meps"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).DownMeps
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/down-meps"
//	Path from root:       "/oam/cfm/state/down-meps"
func (n *Oam_Cfm_DownMepsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "down-meps"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).DownMeps
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_LocalMepsPath represents the /openconfig-oam/oam/cfm/state/local-meps YANG schema element.
type Oam_Cfm_LocalMepsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_LocalMepsPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/state/local-meps YANG schema element.
type Oam_Cfm_LocalMepsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/local-meps"
//	Path from root:       "/oam/cfm/state/local-meps"
func (n *Oam_Cfm_LocalMepsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-meps"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).LocalMeps
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/local-meps"
//	Path from root:       "/oam/cfm/state/local-meps"
func (n *Oam_Cfm_LocalMepsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-meps"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).LocalMeps
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_LocalMepsOperationalPath represents the /openconfig-oam/oam/cfm/state/local-meps-operational YANG schema element.
type Oam_Cfm_LocalMepsOperationalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_LocalMepsOperationalPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/state/local-meps-operational YANG schema element.
type Oam_Cfm_LocalMepsOperationalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/local-meps-operational"
//	Path from root:       "/oam/cfm/state/local-meps-operational"
func (n *Oam_Cfm_LocalMepsOperationalPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-meps-operational"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).LocalMepsOperational
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/local-meps-operational"
//	Path from root:       "/oam/cfm/state/local-meps-operational"
func (n *Oam_Cfm_LocalMepsOperationalPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-meps-operational"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).LocalMepsOperational
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_OperationalPeerMepsPath represents the /openconfig-oam/oam/cfm/state/operational-peer-meps YANG schema element.
type Oam_Cfm_OperationalPeerMepsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_OperationalPeerMepsPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/state/operational-peer-meps YANG schema element.
type Oam_Cfm_OperationalPeerMepsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/operational-peer-meps"
//	Path from root:       "/oam/cfm/state/operational-peer-meps"
func (n *Oam_Cfm_OperationalPeerMepsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "operational-peer-meps"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).OperationalPeerMeps
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/operational-peer-meps"
//	Path from root:       "/oam/cfm/state/operational-peer-meps"
func (n *Oam_Cfm_OperationalPeerMepsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "operational-peer-meps"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).OperationalPeerMeps
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PeerMepsPath represents the /openconfig-oam/oam/cfm/state/peer-meps YANG schema element.
type Oam_Cfm_PeerMepsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PeerMepsPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/state/peer-meps YANG schema element.
type Oam_Cfm_PeerMepsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/peer-meps"
//	Path from root:       "/oam/cfm/state/peer-meps"
func (n *Oam_Cfm_PeerMepsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-meps"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).PeerMeps
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/peer-meps"
//	Path from root:       "/oam/cfm/state/peer-meps"
func (n *Oam_Cfm_PeerMepsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-meps"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).PeerMeps
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PeerMepsTimedOutPath represents the /openconfig-oam/oam/cfm/state/peer-meps-timed-out YANG schema element.
type Oam_Cfm_PeerMepsTimedOutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PeerMepsTimedOutPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/state/peer-meps-timed-out YANG schema element.
type Oam_Cfm_PeerMepsTimedOutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/peer-meps-timed-out"
//	Path from root:       "/oam/cfm/state/peer-meps-timed-out"
func (n *Oam_Cfm_PeerMepsTimedOutPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-meps-timed-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).PeerMepsTimedOut
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/peer-meps-timed-out"
//	Path from root:       "/oam/cfm/state/peer-meps-timed-out"
func (n *Oam_Cfm_PeerMepsTimedOutPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-meps-timed-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).PeerMepsTimedOut
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PeerMepsWithDefectsPath represents the /openconfig-oam/oam/cfm/state/peer-meps-with-defects YANG schema element.
type Oam_Cfm_PeerMepsWithDefectsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PeerMepsWithDefectsPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/state/peer-meps-with-defects YANG schema element.
type Oam_Cfm_PeerMepsWithDefectsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/peer-meps-with-defects"
//	Path from root:       "/oam/cfm/state/peer-meps-with-defects"
func (n *Oam_Cfm_PeerMepsWithDefectsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-meps-with-defects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).PeerMepsWithDefects
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/peer-meps-with-defects"
//	Path from root:       "/oam/cfm/state/peer-meps-with-defects"
func (n *Oam_Cfm_PeerMepsWithDefectsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-meps-with-defects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).PeerMepsWithDefects
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_UpMepsPath represents the /openconfig-oam/oam/cfm/state/up-meps YANG schema element.
type Oam_Cfm_UpMepsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_UpMepsPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/state/up-meps YANG schema element.
type Oam_Cfm_UpMepsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/up-meps"
//	Path from root:       "/oam/cfm/state/up-meps"
func (n *Oam_Cfm_UpMepsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up-meps"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).UpMeps
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/up-meps"
//	Path from root:       "/oam/cfm/state/up-meps"
func (n *Oam_Cfm_UpMepsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up-meps"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm).UpMeps
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_CfmPath represents the /openconfig-oam/oam/cfm YANG schema element.
type Oam_CfmPath struct {
	*ygnmi.NodePath
}

// Oam_CfmPathAny represents the wildcard version of the /openconfig-oam/oam/cfm YANG schema element.
type Oam_CfmPathAny struct {
	*ygnmi.NodePath
}

// CfmDomains (leaf): The total number cfm domains configured on the local system.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/cfm-domains"
//	Path from root:       "/oam/cfm/state/cfm-domains"
func (n *Oam_CfmPath) CfmDomains() *Oam_Cfm_CfmDomainsPath {
	ps := &Oam_Cfm_CfmDomainsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cfm-domains"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CfmDomains (leaf): The total number cfm domains configured on the local system.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/cfm-domains"
//	Path from root:       "/oam/cfm/state/cfm-domains"
func (n *Oam_CfmPathAny) CfmDomains() *Oam_Cfm_CfmDomainsPathAny {
	ps := &Oam_Cfm_CfmDomainsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cfm-domains"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CfmServices (leaf): The total number cfm services configured on the local system.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/cfm-services"
//	Path from root:       "/oam/cfm/state/cfm-services"
func (n *Oam_CfmPath) CfmServices() *Oam_Cfm_CfmServicesPath {
	ps := &Oam_Cfm_CfmServicesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cfm-services"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CfmServices (leaf): The total number cfm services configured on the local system.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/cfm-services"
//	Path from root:       "/oam/cfm/state/cfm-services"
func (n *Oam_CfmPathAny) CfmServices() *Oam_Cfm_CfmServicesPathAny {
	ps := &Oam_Cfm_CfmServicesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cfm-services"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisabledMisconfigured (leaf): The total number of disabled cfm  down meps configured on the local system.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/disabled-misconfigured"
//	Path from root:       "/oam/cfm/state/disabled-misconfigured"
func (n *Oam_CfmPath) DisabledMisconfigured() *Oam_Cfm_DisabledMisconfiguredPath {
	ps := &Oam_Cfm_DisabledMisconfiguredPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "disabled-misconfigured"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisabledMisconfigured (leaf): The total number of disabled cfm  down meps configured on the local system.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/disabled-misconfigured"
//	Path from root:       "/oam/cfm/state/disabled-misconfigured"
func (n *Oam_CfmPathAny) DisabledMisconfigured() *Oam_Cfm_DisabledMisconfiguredPathAny {
	ps := &Oam_Cfm_DisabledMisconfiguredPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "disabled-misconfigured"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisabledOperationalErrors (leaf): The total number cfm operational errors on the local system.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/disabled-operational-errors"
//	Path from root:       "/oam/cfm/state/disabled-operational-errors"
func (n *Oam_CfmPath) DisabledOperationalErrors() *Oam_Cfm_DisabledOperationalErrorsPath {
	ps := &Oam_Cfm_DisabledOperationalErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "disabled-operational-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisabledOperationalErrors (leaf): The total number cfm operational errors on the local system.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/disabled-operational-errors"
//	Path from root:       "/oam/cfm/state/disabled-operational-errors"
func (n *Oam_CfmPathAny) DisabledOperationalErrors() *Oam_Cfm_DisabledOperationalErrorsPathAny {
	ps := &Oam_Cfm_DisabledOperationalErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "disabled-operational-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisabledOutOfResources (leaf): The total number cfm endpoints disabled due to lack of resources on the local system.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/disabled-out-of-resources"
//	Path from root:       "/oam/cfm/state/disabled-out-of-resources"
func (n *Oam_CfmPath) DisabledOutOfResources() *Oam_Cfm_DisabledOutOfResourcesPath {
	ps := &Oam_Cfm_DisabledOutOfResourcesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "disabled-out-of-resources"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisabledOutOfResources (leaf): The total number cfm endpoints disabled due to lack of resources on the local system.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/disabled-out-of-resources"
//	Path from root:       "/oam/cfm/state/disabled-out-of-resources"
func (n *Oam_CfmPathAny) DisabledOutOfResources() *Oam_Cfm_DisabledOutOfResourcesPathAny {
	ps := &Oam_Cfm_DisabledOutOfResourcesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "disabled-out-of-resources"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DownMeps (leaf): The total number cfm down meps configured on the local system.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/down-meps"
//	Path from root:       "/oam/cfm/state/down-meps"
func (n *Oam_CfmPath) DownMeps() *Oam_Cfm_DownMepsPath {
	ps := &Oam_Cfm_DownMepsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "down-meps"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DownMeps (leaf): The total number cfm down meps configured on the local system.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/down-meps"
//	Path from root:       "/oam/cfm/state/down-meps"
func (n *Oam_CfmPathAny) DownMeps() *Oam_Cfm_DownMepsPathAny {
	ps := &Oam_Cfm_DownMepsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "down-meps"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalMeps (leaf): The total number of local-meps configured on the local system.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/local-meps"
//	Path from root:       "/oam/cfm/state/local-meps"
func (n *Oam_CfmPath) LocalMeps() *Oam_Cfm_LocalMepsPath {
	ps := &Oam_Cfm_LocalMepsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "local-meps"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalMeps (leaf): The total number of local-meps configured on the local system.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/local-meps"
//	Path from root:       "/oam/cfm/state/local-meps"
func (n *Oam_CfmPathAny) LocalMeps() *Oam_Cfm_LocalMepsPathAny {
	ps := &Oam_Cfm_LocalMepsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "local-meps"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalMepsOperational (leaf): The total number of local-meps operational on the local system.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/local-meps-operational"
//	Path from root:       "/oam/cfm/state/local-meps-operational"
func (n *Oam_CfmPath) LocalMepsOperational() *Oam_Cfm_LocalMepsOperationalPath {
	ps := &Oam_Cfm_LocalMepsOperationalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "local-meps-operational"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalMepsOperational (leaf): The total number of local-meps operational on the local system.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/local-meps-operational"
//	Path from root:       "/oam/cfm/state/local-meps-operational"
func (n *Oam_CfmPathAny) LocalMepsOperational() *Oam_Cfm_LocalMepsOperationalPathAny {
	ps := &Oam_Cfm_LocalMepsOperationalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "local-meps-operational"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaintenanceDomainAny (list): A Maintenance Domain managed object is required in order to create
// an MA with a MAID that includes that Maintenance Domain’s Name. From
// this Maintenance Domain managed object, all Maintenance
// Association managed objects associated with that Maintenance
// Domain managed object can be accessed, and thus controlled.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "domains/maintenance-domain"
//	Path from root:       "/oam/cfm/domains/maintenance-domain"
func (n *Oam_CfmPath) MaintenanceDomainAny() *Oam_Cfm_MaintenanceDomainPathAny {
	ps := &Oam_Cfm_MaintenanceDomainPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"domains", "maintenance-domain"},
			map[string]interface{}{"md-id": "*"},
			n,
		),
	}
	return ps
}

// MaintenanceDomainAny (list): A Maintenance Domain managed object is required in order to create
// an MA with a MAID that includes that Maintenance Domain’s Name. From
// this Maintenance Domain managed object, all Maintenance
// Association managed objects associated with that Maintenance
// Domain managed object can be accessed, and thus controlled.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "domains/maintenance-domain"
//	Path from root:       "/oam/cfm/domains/maintenance-domain"
func (n *Oam_CfmPathAny) MaintenanceDomainAny() *Oam_Cfm_MaintenanceDomainPathAny {
	ps := &Oam_Cfm_MaintenanceDomainPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"domains", "maintenance-domain"},
			map[string]interface{}{"md-id": "*"},
			n,
		),
	}
	return ps
}

// MaintenanceDomain (list): A Maintenance Domain managed object is required in order to create
// an MA with a MAID that includes that Maintenance Domain’s Name. From
// this Maintenance Domain managed object, all Maintenance
// Association managed objects associated with that Maintenance
// Domain managed object can be accessed, and thus controlled.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "domains/maintenance-domain"
//	Path from root:       "/oam/cfm/domains/maintenance-domain"
//
//	MdId: string
func (n *Oam_CfmPath) MaintenanceDomain(MdId string) *Oam_Cfm_MaintenanceDomainPath {
	ps := &Oam_Cfm_MaintenanceDomainPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"domains", "maintenance-domain"},
			map[string]interface{}{"md-id": MdId},
			n,
		),
	}
	return ps
}

// MaintenanceDomain (list): A Maintenance Domain managed object is required in order to create
// an MA with a MAID that includes that Maintenance Domain’s Name. From
// this Maintenance Domain managed object, all Maintenance
// Association managed objects associated with that Maintenance
// Domain managed object can be accessed, and thus controlled.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "domains/maintenance-domain"
//	Path from root:       "/oam/cfm/domains/maintenance-domain"
//
//	MdId: string
func (n *Oam_CfmPathAny) MaintenanceDomain(MdId string) *Oam_Cfm_MaintenanceDomainPathAny {
	ps := &Oam_Cfm_MaintenanceDomainPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"domains", "maintenance-domain"},
			map[string]interface{}{"md-id": MdId},
			n,
		),
	}
	return ps
}

// MaintenanceDomainMap (list): A Maintenance Domain managed object is required in order to create
// an MA with a MAID that includes that Maintenance Domain’s Name. From
// this Maintenance Domain managed object, all Maintenance
// Association managed objects associated with that Maintenance
// Domain managed object can be accessed, and thus controlled.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "domains/maintenance-domain"
//	Path from root:       "/oam/cfm/domains/maintenance-domain"
func (n *Oam_CfmPath) MaintenanceDomainMap() *Oam_Cfm_MaintenanceDomainPathMap {
	ps := &Oam_Cfm_MaintenanceDomainPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"domains"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MaintenanceDomainMap (list): A Maintenance Domain managed object is required in order to create
// an MA with a MAID that includes that Maintenance Domain’s Name. From
// this Maintenance Domain managed object, all Maintenance
// Association managed objects associated with that Maintenance
// Domain managed object can be accessed, and thus controlled.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "domains/maintenance-domain"
//	Path from root:       "/oam/cfm/domains/maintenance-domain"
func (n *Oam_CfmPathAny) MaintenanceDomainMap() *Oam_Cfm_MaintenanceDomainPathMapAny {
	ps := &Oam_Cfm_MaintenanceDomainPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"domains"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OperationalPeerMeps (leaf): The total number cfm peer meps operational.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/operational-peer-meps"
//	Path from root:       "/oam/cfm/state/operational-peer-meps"
func (n *Oam_CfmPath) OperationalPeerMeps() *Oam_Cfm_OperationalPeerMepsPath {
	ps := &Oam_Cfm_OperationalPeerMepsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "operational-peer-meps"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperationalPeerMeps (leaf): The total number cfm peer meps operational.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/operational-peer-meps"
//	Path from root:       "/oam/cfm/state/operational-peer-meps"
func (n *Oam_CfmPathAny) OperationalPeerMeps() *Oam_Cfm_OperationalPeerMepsPathAny {
	ps := &Oam_Cfm_OperationalPeerMepsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "operational-peer-meps"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerMeps (leaf): The total number cfm peer meps configured.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/peer-meps"
//	Path from root:       "/oam/cfm/state/peer-meps"
func (n *Oam_CfmPath) PeerMeps() *Oam_Cfm_PeerMepsPath {
	ps := &Oam_Cfm_PeerMepsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-meps"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerMeps (leaf): The total number cfm peer meps configured.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/peer-meps"
//	Path from root:       "/oam/cfm/state/peer-meps"
func (n *Oam_CfmPathAny) PeerMeps() *Oam_Cfm_PeerMepsPathAny {
	ps := &Oam_Cfm_PeerMepsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-meps"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerMepsTimedOut (leaf): The total number cfm peer meps timed out.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/peer-meps-timed-out"
//	Path from root:       "/oam/cfm/state/peer-meps-timed-out"
func (n *Oam_CfmPath) PeerMepsTimedOut() *Oam_Cfm_PeerMepsTimedOutPath {
	ps := &Oam_Cfm_PeerMepsTimedOutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-meps-timed-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerMepsTimedOut (leaf): The total number cfm peer meps timed out.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/peer-meps-timed-out"
//	Path from root:       "/oam/cfm/state/peer-meps-timed-out"
func (n *Oam_CfmPathAny) PeerMepsTimedOut() *Oam_Cfm_PeerMepsTimedOutPathAny {
	ps := &Oam_Cfm_PeerMepsTimedOutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-meps-timed-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerMepsWithDefects (leaf): The total number cfm peer meps with defects.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/peer-meps-with-defects"
//	Path from root:       "/oam/cfm/state/peer-meps-with-defects"
func (n *Oam_CfmPath) PeerMepsWithDefects() *Oam_Cfm_PeerMepsWithDefectsPath {
	ps := &Oam_Cfm_PeerMepsWithDefectsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-meps-with-defects"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerMepsWithDefects (leaf): The total number cfm peer meps with defects.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/peer-meps-with-defects"
//	Path from root:       "/oam/cfm/state/peer-meps-with-defects"
func (n *Oam_CfmPathAny) PeerMepsWithDefects() *Oam_Cfm_PeerMepsWithDefectsPathAny {
	ps := &Oam_Cfm_PeerMepsWithDefectsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-meps-with-defects"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PerformanceMeasurementProfileAny (list): Performance measurement configuration and state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "performance-measurement-profiles-global/performance-measurement-profile"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile"
func (n *Oam_CfmPath) PerformanceMeasurementProfileAny() *Oam_Cfm_PerformanceMeasurementProfilePathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"performance-measurement-profiles-global", "performance-measurement-profile"},
			map[string]interface{}{"profile-name": "*"},
			n,
		),
	}
	return ps
}

// PerformanceMeasurementProfileAny (list): Performance measurement configuration and state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "performance-measurement-profiles-global/performance-measurement-profile"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile"
func (n *Oam_CfmPathAny) PerformanceMeasurementProfileAny() *Oam_Cfm_PerformanceMeasurementProfilePathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"performance-measurement-profiles-global", "performance-measurement-profile"},
			map[string]interface{}{"profile-name": "*"},
			n,
		),
	}
	return ps
}

// PerformanceMeasurementProfile (list): Performance measurement configuration and state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "performance-measurement-profiles-global/performance-measurement-profile"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile"
//
//	ProfileName: string
func (n *Oam_CfmPath) PerformanceMeasurementProfile(ProfileName string) *Oam_Cfm_PerformanceMeasurementProfilePath {
	ps := &Oam_Cfm_PerformanceMeasurementProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"performance-measurement-profiles-global", "performance-measurement-profile"},
			map[string]interface{}{"profile-name": ProfileName},
			n,
		),
	}
	return ps
}

// PerformanceMeasurementProfile (list): Performance measurement configuration and state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "performance-measurement-profiles-global/performance-measurement-profile"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile"
//
//	ProfileName: string
func (n *Oam_CfmPathAny) PerformanceMeasurementProfile(ProfileName string) *Oam_Cfm_PerformanceMeasurementProfilePathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"performance-measurement-profiles-global", "performance-measurement-profile"},
			map[string]interface{}{"profile-name": ProfileName},
			n,
		),
	}
	return ps
}

// PerformanceMeasurementProfileMap (list): Performance measurement configuration and state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "performance-measurement-profiles-global/performance-measurement-profile"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile"
func (n *Oam_CfmPath) PerformanceMeasurementProfileMap() *Oam_Cfm_PerformanceMeasurementProfilePathMap {
	ps := &Oam_Cfm_PerformanceMeasurementProfilePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"performance-measurement-profiles-global"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PerformanceMeasurementProfileMap (list): Performance measurement configuration and state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "performance-measurement-profiles-global/performance-measurement-profile"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile"
func (n *Oam_CfmPathAny) PerformanceMeasurementProfileMap() *Oam_Cfm_PerformanceMeasurementProfilePathMapAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfilePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"performance-measurement-profiles-global"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UpMeps (leaf): The total number cfm down meps configured on the local system.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/up-meps"
//	Path from root:       "/oam/cfm/state/up-meps"
func (n *Oam_CfmPath) UpMeps() *Oam_Cfm_UpMepsPath {
	ps := &Oam_Cfm_UpMepsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "up-meps"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpMeps (leaf): The total number cfm down meps configured on the local system.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/up-meps"
//	Path from root:       "/oam/cfm/state/up-meps"
func (n *Oam_CfmPathAny) UpMeps() *Oam_Cfm_UpMepsPathAny {
	ps := &Oam_Cfm_UpMepsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "up-meps"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_CfmPath) State() ygnmi.SingletonQuery[*oc.Oam_Cfm] {
	return ygnmi.NewSingletonQuery[*oc.Oam_Cfm](
		"Oam_Cfm",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_CfmPathAny) State() ygnmi.WildcardQuery[*oc.Oam_Cfm] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm](
		"Oam_Cfm",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_CfmPath) Config() ygnmi.ConfigQuery[*oc.Oam_Cfm] {
	return ygnmi.NewConfigQuery[*oc.Oam_Cfm](
		"Oam_Cfm",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_CfmPathAny) Config() ygnmi.WildcardQuery[*oc.Oam_Cfm] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm](
		"Oam_Cfm",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_AddressPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/state/address YANG schema element.
type Oam_Cfm_MaintenanceDomain_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_AddressPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/state/address YANG schema element.
type Oam_Cfm_MaintenanceDomain_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/address"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/state/address"
func (n *Oam_Cfm_MaintenanceDomain_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Oam_Cfm_MaintenanceDomain",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/address"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/state/address"
func (n *Oam_Cfm_MaintenanceDomain_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_MaintenanceDomain",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/address"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/config/address"
func (n *Oam_Cfm_MaintenanceDomain_AddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Oam_Cfm_MaintenanceDomain",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/address"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/config/address"
func (n *Oam_Cfm_MaintenanceDomain_AddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_MaintenanceDomain",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_CharStringPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/state/char-string YANG schema element.
type Oam_Cfm_MaintenanceDomain_CharStringPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_CharStringPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/state/char-string YANG schema element.
type Oam_Cfm_MaintenanceDomain_CharStringPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/char-string"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/state/char-string"
func (n *Oam_Cfm_MaintenanceDomain_CharStringPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Oam_Cfm_MaintenanceDomain",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "char-string"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).CharString
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/char-string"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/state/char-string"
func (n *Oam_Cfm_MaintenanceDomain_CharStringPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_MaintenanceDomain",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "char-string"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).CharString
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/char-string"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/config/char-string"
func (n *Oam_Cfm_MaintenanceDomain_CharStringPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Oam_Cfm_MaintenanceDomain",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "char-string"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).CharString
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/char-string"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/config/char-string"
func (n *Oam_Cfm_MaintenanceDomain_CharStringPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_MaintenanceDomain",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "char-string"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).CharString
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_DnsLikeNamePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/state/dns-like-name YANG schema element.
type Oam_Cfm_MaintenanceDomain_DnsLikeNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_DnsLikeNamePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/state/dns-like-name YANG schema element.
type Oam_Cfm_MaintenanceDomain_DnsLikeNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/dns-like-name"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/state/dns-like-name"
func (n *Oam_Cfm_MaintenanceDomain_DnsLikeNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Oam_Cfm_MaintenanceDomain",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dns-like-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).DnsLikeName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/dns-like-name"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/state/dns-like-name"
func (n *Oam_Cfm_MaintenanceDomain_DnsLikeNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_MaintenanceDomain",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dns-like-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).DnsLikeName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/dns-like-name"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/config/dns-like-name"
func (n *Oam_Cfm_MaintenanceDomain_DnsLikeNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Oam_Cfm_MaintenanceDomain",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dns-like-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).DnsLikeName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/dns-like-name"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/config/dns-like-name"
func (n *Oam_Cfm_MaintenanceDomain_DnsLikeNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_MaintenanceDomain",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dns-like-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).DnsLikeName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_LevelPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/state/level YANG schema element.
type Oam_Cfm_MaintenanceDomain_LevelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_LevelPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/state/level YANG schema element.
type Oam_Cfm_MaintenanceDomain_LevelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/level"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/state/level"
func (n *Oam_Cfm_MaintenanceDomain_LevelPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Oam_Cfm_MaintenanceDomain",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).Level
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/level"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/state/level"
func (n *Oam_Cfm_MaintenanceDomain_LevelPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Oam_Cfm_MaintenanceDomain",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).Level
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/level"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/config/level"
func (n *Oam_Cfm_MaintenanceDomain_LevelPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Oam_Cfm_MaintenanceDomain",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).Level
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/level"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/config/level"
func (n *Oam_Cfm_MaintenanceDomain_LevelPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Oam_Cfm_MaintenanceDomain",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).Level
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MdIdPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/state/md-id YANG schema element.
type Oam_Cfm_MaintenanceDomain_MdIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MdIdPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/state/md-id YANG schema element.
type Oam_Cfm_MaintenanceDomain_MdIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/md-id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/state/md-id"
func (n *Oam_Cfm_MaintenanceDomain_MdIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Oam_Cfm_MaintenanceDomain",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "md-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).MdId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/md-id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/state/md-id"
func (n *Oam_Cfm_MaintenanceDomain_MdIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_MaintenanceDomain",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "md-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).MdId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/md-id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/config/md-id"
func (n *Oam_Cfm_MaintenanceDomain_MdIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Oam_Cfm_MaintenanceDomain",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "md-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).MdId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/md-id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/config/md-id"
func (n *Oam_Cfm_MaintenanceDomain_MdIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_MaintenanceDomain",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "md-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).MdId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MdNameTypePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/state/md-name-type YANG schema element.
type Oam_Cfm_MaintenanceDomain_MdNameTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MdNameTypePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/state/md-name-type YANG schema element.
type Oam_Cfm_MaintenanceDomain_MdNameTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/md-name-type"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/state/md-name-type"
func (n *Oam_Cfm_MaintenanceDomain_MdNameTypePath) State() ygnmi.SingletonQuery[oc.E_MaintenanceDomain_MdNameType] {
	return ygnmi.NewSingletonQuery[oc.E_MaintenanceDomain_MdNameType](
		"Oam_Cfm_MaintenanceDomain",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "md-name-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MaintenanceDomain_MdNameType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).MdNameType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/md-name-type"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/state/md-name-type"
func (n *Oam_Cfm_MaintenanceDomain_MdNameTypePathAny) State() ygnmi.WildcardQuery[oc.E_MaintenanceDomain_MdNameType] {
	return ygnmi.NewWildcardQuery[oc.E_MaintenanceDomain_MdNameType](
		"Oam_Cfm_MaintenanceDomain",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "md-name-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MaintenanceDomain_MdNameType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).MdNameType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/md-name-type"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/config/md-name-type"
func (n *Oam_Cfm_MaintenanceDomain_MdNameTypePath) Config() ygnmi.ConfigQuery[oc.E_MaintenanceDomain_MdNameType] {
	return ygnmi.NewConfigQuery[oc.E_MaintenanceDomain_MdNameType](
		"Oam_Cfm_MaintenanceDomain",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "md-name-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MaintenanceDomain_MdNameType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).MdNameType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/md-name-type"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/config/md-name-type"
func (n *Oam_Cfm_MaintenanceDomain_MdNameTypePathAny) Config() ygnmi.WildcardQuery[oc.E_MaintenanceDomain_MdNameType] {
	return ygnmi.NewWildcardQuery[oc.E_MaintenanceDomain_MdNameType](
		"Oam_Cfm_MaintenanceDomain",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "md-name-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MaintenanceDomain_MdNameType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).MdNameType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_NonePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/state/none YANG schema element.
type Oam_Cfm_MaintenanceDomain_NonePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_NonePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/state/none YANG schema element.
type Oam_Cfm_MaintenanceDomain_NonePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/none"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/state/none"
func (n *Oam_Cfm_MaintenanceDomain_NonePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Oam_Cfm_MaintenanceDomain",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "none"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).None
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/none"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/state/none"
func (n *Oam_Cfm_MaintenanceDomain_NonePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Oam_Cfm_MaintenanceDomain",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "none"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).None
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/none"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/config/none"
func (n *Oam_Cfm_MaintenanceDomain_NonePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Oam_Cfm_MaintenanceDomain",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "none"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).None
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/none"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/config/none"
func (n *Oam_Cfm_MaintenanceDomain_NonePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Oam_Cfm_MaintenanceDomain",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "none"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).None
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_UnsignedIntPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/state/unsigned-int YANG schema element.
type Oam_Cfm_MaintenanceDomain_UnsignedIntPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_UnsignedIntPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/state/unsigned-int YANG schema element.
type Oam_Cfm_MaintenanceDomain_UnsignedIntPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/unsigned-int"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/state/unsigned-int"
func (n *Oam_Cfm_MaintenanceDomain_UnsignedIntPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Oam_Cfm_MaintenanceDomain",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "unsigned-int"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).UnsignedInt
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/unsigned-int"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/state/unsigned-int"
func (n *Oam_Cfm_MaintenanceDomain_UnsignedIntPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_MaintenanceDomain",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "unsigned-int"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).UnsignedInt
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/unsigned-int"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/config/unsigned-int"
func (n *Oam_Cfm_MaintenanceDomain_UnsignedIntPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Oam_Cfm_MaintenanceDomain",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "unsigned-int"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).UnsignedInt
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/unsigned-int"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/config/unsigned-int"
func (n *Oam_Cfm_MaintenanceDomain_UnsignedIntPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_MaintenanceDomain",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "unsigned-int"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).UnsignedInt
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomainPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain YANG schema element.
type Oam_Cfm_MaintenanceDomainPath struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomainPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain YANG schema element.
type Oam_Cfm_MaintenanceDomainPathAny struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomainPathMap represents the /openconfig-oam/oam/cfm/domains/maintenance-domain YANG schema element.
type Oam_Cfm_MaintenanceDomainPathMap struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomainPathMapAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain YANG schema element.
type Oam_Cfm_MaintenanceDomainPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf): The MAC address.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/address"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/*/address"
func (n *Oam_Cfm_MaintenanceDomainPath) Address() *Oam_Cfm_MaintenanceDomain_AddressPath {
	ps := &Oam_Cfm_MaintenanceDomain_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): The MAC address.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/address"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/*/address"
func (n *Oam_Cfm_MaintenanceDomainPathAny) Address() *Oam_Cfm_MaintenanceDomain_AddressPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CharString (leaf): The character string name of the Maintenance Domain.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/char-string"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/*/char-string"
func (n *Oam_Cfm_MaintenanceDomainPath) CharString() *Oam_Cfm_MaintenanceDomain_CharStringPath {
	ps := &Oam_Cfm_MaintenanceDomain_CharStringPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "char-string"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CharString (leaf): The character string name of the Maintenance Domain.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/char-string"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/*/char-string"
func (n *Oam_Cfm_MaintenanceDomainPathAny) CharString() *Oam_Cfm_MaintenanceDomain_CharStringPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_CharStringPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "char-string"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DnsLikeName (leaf): Domain name like string, globally unique text string
//
//	 derived from a DNS name.
//		Defining module:      "openconfig-oam-cfm"
//		Instantiating module: "openconfig-oam"
//		Path from parent:     "*/dns-like-name"
//		Path from root:       "/oam/cfm/domains/maintenance-domain/*/dns-like-name"
func (n *Oam_Cfm_MaintenanceDomainPath) DnsLikeName() *Oam_Cfm_MaintenanceDomain_DnsLikeNamePath {
	ps := &Oam_Cfm_MaintenanceDomain_DnsLikeNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dns-like-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DnsLikeName (leaf): Domain name like string, globally unique text string
//
//	 derived from a DNS name.
//		Defining module:      "openconfig-oam-cfm"
//		Instantiating module: "openconfig-oam"
//		Path from parent:     "*/dns-like-name"
//		Path from root:       "/oam/cfm/domains/maintenance-domain/*/dns-like-name"
func (n *Oam_Cfm_MaintenanceDomainPathAny) DnsLikeName() *Oam_Cfm_MaintenanceDomain_DnsLikeNamePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_DnsLikeNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dns-like-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): Level of the maintenance domain.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/level"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/*/level"
func (n *Oam_Cfm_MaintenanceDomainPath) Level() *Oam_Cfm_MaintenanceDomain_LevelPath {
	ps := &Oam_Cfm_MaintenanceDomain_LevelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): Level of the maintenance domain.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/level"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/*/level"
func (n *Oam_Cfm_MaintenanceDomainPathAny) Level() *Oam_Cfm_MaintenanceDomain_LevelPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_LevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaintenanceAssociationAny (list): Collection of maintenance associations within a maintenance domain.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "maintenance-associations/maintenance-association"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association"
func (n *Oam_Cfm_MaintenanceDomainPath) MaintenanceAssociationAny() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"maintenance-associations", "maintenance-association"},
			map[string]interface{}{"ma-id": "*"},
			n,
		),
	}
	return ps
}

// MaintenanceAssociationAny (list): Collection of maintenance associations within a maintenance domain.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "maintenance-associations/maintenance-association"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association"
func (n *Oam_Cfm_MaintenanceDomainPathAny) MaintenanceAssociationAny() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"maintenance-associations", "maintenance-association"},
			map[string]interface{}{"ma-id": "*"},
			n,
		),
	}
	return ps
}

// MaintenanceAssociation (list): Collection of maintenance associations within a maintenance domain.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "maintenance-associations/maintenance-association"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association"
//
//	MaId: string
func (n *Oam_Cfm_MaintenanceDomainPath) MaintenanceAssociation(MaId string) *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"maintenance-associations", "maintenance-association"},
			map[string]interface{}{"ma-id": MaId},
			n,
		),
	}
	return ps
}

// MaintenanceAssociation (list): Collection of maintenance associations within a maintenance domain.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "maintenance-associations/maintenance-association"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association"
//
//	MaId: string
func (n *Oam_Cfm_MaintenanceDomainPathAny) MaintenanceAssociation(MaId string) *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"maintenance-associations", "maintenance-association"},
			map[string]interface{}{"ma-id": MaId},
			n,
		),
	}
	return ps
}

// MaintenanceAssociationMap (list): Collection of maintenance associations within a maintenance domain.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "maintenance-associations/maintenance-association"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association"
func (n *Oam_Cfm_MaintenanceDomainPath) MaintenanceAssociationMap() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathMap {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"maintenance-associations"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MaintenanceAssociationMap (list): Collection of maintenance associations within a maintenance domain.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "maintenance-associations/maintenance-association"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association"
func (n *Oam_Cfm_MaintenanceDomainPathAny) MaintenanceAssociationMap() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathMapAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"maintenance-associations"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MdId (leaf): The unique identifier for a Maintenance Domain.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/md-id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/*/md-id"
func (n *Oam_Cfm_MaintenanceDomainPath) MdId() *Oam_Cfm_MaintenanceDomain_MdIdPath {
	ps := &Oam_Cfm_MaintenanceDomain_MdIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "md-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MdId (leaf): The unique identifier for a Maintenance Domain.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/md-id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/*/md-id"
func (n *Oam_Cfm_MaintenanceDomainPathAny) MdId() *Oam_Cfm_MaintenanceDomain_MdIdPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MdIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "md-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MdNameType (leaf): Type discriminator for the value  described in the md 'name' leaf.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/md-name-type"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/*/md-name-type"
func (n *Oam_Cfm_MaintenanceDomainPath) MdNameType() *Oam_Cfm_MaintenanceDomain_MdNameTypePath {
	ps := &Oam_Cfm_MaintenanceDomain_MdNameTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "md-name-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MdNameType (leaf): Type discriminator for the value  described in the md 'name' leaf.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/md-name-type"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/*/md-name-type"
func (n *Oam_Cfm_MaintenanceDomainPathAny) MdNameType() *Oam_Cfm_MaintenanceDomain_MdNameTypePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MdNameTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "md-name-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// None (leaf): No format specified, usually because there is not a
// Maintenance Domain Name. The Maintenance Domain name
// inserted in CFM protocol messages will be a zero length
// OCTET string.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/none"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/*/none"
func (n *Oam_Cfm_MaintenanceDomainPath) None() *Oam_Cfm_MaintenanceDomain_NonePath {
	ps := &Oam_Cfm_MaintenanceDomain_NonePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "none"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// None (leaf): No format specified, usually because there is not a
// Maintenance Domain Name. The Maintenance Domain name
// inserted in CFM protocol messages will be a zero length
// OCTET string.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/none"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/*/none"
func (n *Oam_Cfm_MaintenanceDomainPathAny) None() *Oam_Cfm_MaintenanceDomain_NonePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_NonePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "none"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnsignedInt (leaf): The additional 2-octet (unsigned) integer.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/unsigned-int"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/*/unsigned-int"
func (n *Oam_Cfm_MaintenanceDomainPath) UnsignedInt() *Oam_Cfm_MaintenanceDomain_UnsignedIntPath {
	ps := &Oam_Cfm_MaintenanceDomain_UnsignedIntPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "unsigned-int"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnsignedInt (leaf): The additional 2-octet (unsigned) integer.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/unsigned-int"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/*/unsigned-int"
func (n *Oam_Cfm_MaintenanceDomainPathAny) UnsignedInt() *Oam_Cfm_MaintenanceDomain_UnsignedIntPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_UnsignedIntPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "unsigned-int"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomainPath) State() ygnmi.SingletonQuery[*oc.Oam_Cfm_MaintenanceDomain] {
	return ygnmi.NewSingletonQuery[*oc.Oam_Cfm_MaintenanceDomain](
		"Oam_Cfm_MaintenanceDomain",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomainPathAny) State() ygnmi.WildcardQuery[*oc.Oam_Cfm_MaintenanceDomain] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_MaintenanceDomain](
		"Oam_Cfm_MaintenanceDomain",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomainPath) Config() ygnmi.ConfigQuery[*oc.Oam_Cfm_MaintenanceDomain] {
	return ygnmi.NewConfigQuery[*oc.Oam_Cfm_MaintenanceDomain](
		"Oam_Cfm_MaintenanceDomain",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomainPathAny) Config() ygnmi.WildcardQuery[*oc.Oam_Cfm_MaintenanceDomain] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_MaintenanceDomain](
		"Oam_Cfm_MaintenanceDomain",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomainPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain](
		"Oam_Cfm",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Oam_Cfm_MaintenanceDomain, bool) {
			ret := gs.(*oc.Oam_Cfm).MaintenanceDomain
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:domains"},
			PostRelPath: []string{"openconfig-oam-cfm:maintenance-domain"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomainPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain](
		"Oam_Cfm",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Oam_Cfm_MaintenanceDomain, bool) {
			ret := gs.(*oc.Oam_Cfm).MaintenanceDomain
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:domains"},
			PostRelPath: []string{"openconfig-oam-cfm:maintenance-domain"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomainPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain] {
	return ygnmi.NewConfigQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain](
		"Oam_Cfm",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Oam_Cfm_MaintenanceDomain, bool) {
			ret := gs.(*oc.Oam_Cfm).MaintenanceDomain
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:domains"},
			PostRelPath: []string{"openconfig-oam-cfm:maintenance-domain"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomainPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain](
		"Oam_Cfm",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Oam_Cfm_MaintenanceDomain, bool) {
			ret := gs.(*oc.Oam_Cfm).MaintenanceDomain
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:domains"},
			PostRelPath: []string{"openconfig-oam-cfm:maintenance-domain"},
		},
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CcmIntervalPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/ccm-interval YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CcmIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CcmIntervalPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/ccm-interval YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CcmIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/ccm-interval"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/ccm-interval"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CcmIntervalPath) State() ygnmi.SingletonQuery[oc.E_MaintenanceAssociation_CcmInterval] {
	return ygnmi.NewSingletonQuery[oc.E_MaintenanceAssociation_CcmInterval](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ccm-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MaintenanceAssociation_CcmInterval, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).CcmInterval
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/ccm-interval"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/ccm-interval"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CcmIntervalPathAny) State() ygnmi.WildcardQuery[oc.E_MaintenanceAssociation_CcmInterval] {
	return ygnmi.NewWildcardQuery[oc.E_MaintenanceAssociation_CcmInterval](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ccm-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MaintenanceAssociation_CcmInterval, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).CcmInterval
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/ccm-interval"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config/ccm-interval"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CcmIntervalPath) Config() ygnmi.ConfigQuery[oc.E_MaintenanceAssociation_CcmInterval] {
	return ygnmi.NewConfigQuery[oc.E_MaintenanceAssociation_CcmInterval](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ccm-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MaintenanceAssociation_CcmInterval, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).CcmInterval
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/ccm-interval"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config/ccm-interval"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CcmIntervalPathAny) Config() ygnmi.WildcardQuery[oc.E_MaintenanceAssociation_CcmInterval] {
	return ygnmi.NewWildcardQuery[oc.E_MaintenanceAssociation_CcmInterval](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ccm-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MaintenanceAssociation_CcmInterval, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).CcmInterval
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CharStringPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/char-string YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CharStringPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CharStringPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/char-string YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CharStringPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/char-string"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/char-string"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CharStringPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "char-string"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).CharString
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/char-string"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/char-string"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CharStringPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "char-string"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).CharString
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/char-string"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config/char-string"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CharStringPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "char-string"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).CharString
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/char-string"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config/char-string"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CharStringPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "char-string"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).CharString
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_GroupNamePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/group-name YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_GroupNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_GroupNamePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/group-name YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_GroupNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/group-name"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/group-name"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_GroupNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "group-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).GroupName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/group-name"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/group-name"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_GroupNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "group-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).GroupName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/group-name"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config/group-name"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_GroupNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "group-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).GroupName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/group-name"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config/group-name"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_GroupNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "group-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).GroupName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_LossThresholdPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/loss-threshold YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_LossThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_LossThresholdPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/loss-threshold YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_LossThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/loss-threshold"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/loss-threshold"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_LossThresholdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loss-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).LossThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/loss-threshold"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/loss-threshold"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_LossThresholdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loss-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).LossThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/loss-threshold"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config/loss-threshold"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_LossThresholdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "loss-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).LossThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/loss-threshold"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config/loss-threshold"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_LossThresholdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "loss-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).LossThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaIdPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/ma-id YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaIdPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/ma-id YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/ma-id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/ma-id"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ma-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).MaId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/ma-id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/ma-id"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ma-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).MaId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/ma-id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config/ma-id"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ma-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).MaId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/ma-id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config/ma-id"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ma-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).MaId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaNameTypePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/ma-name-type YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaNameTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaNameTypePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/ma-name-type YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaNameTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/ma-name-type"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/ma-name-type"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaNameTypePath) State() ygnmi.SingletonQuery[oc.E_MaintenanceAssociation_MaNameType] {
	return ygnmi.NewSingletonQuery[oc.E_MaintenanceAssociation_MaNameType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ma-name-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MaintenanceAssociation_MaNameType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).MaNameType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/ma-name-type"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/ma-name-type"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaNameTypePathAny) State() ygnmi.WildcardQuery[oc.E_MaintenanceAssociation_MaNameType] {
	return ygnmi.NewWildcardQuery[oc.E_MaintenanceAssociation_MaNameType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ma-name-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MaintenanceAssociation_MaNameType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).MaNameType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/ma-name-type"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config/ma-name-type"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaNameTypePath) Config() ygnmi.ConfigQuery[oc.E_MaintenanceAssociation_MaNameType] {
	return ygnmi.NewConfigQuery[oc.E_MaintenanceAssociation_MaNameType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ma-name-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MaintenanceAssociation_MaNameType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).MaNameType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/ma-name-type"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config/ma-name-type"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaNameTypePathAny) Config() ygnmi.WildcardQuery[oc.E_MaintenanceAssociation_MaNameType] {
	return ygnmi.NewWildcardQuery[oc.E_MaintenanceAssociation_MaNameType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ma-name-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MaintenanceAssociation_MaNameType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).MaNameType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_PrimaryVidPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/primary-vid YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_PrimaryVidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_PrimaryVidPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/primary-vid YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_PrimaryVidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/primary-vid"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/primary-vid"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_PrimaryVidPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "primary-vid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).PrimaryVid
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/primary-vid"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/primary-vid"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_PrimaryVidPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "primary-vid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).PrimaryVid
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/primary-vid"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config/primary-vid"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_PrimaryVidPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "primary-vid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).PrimaryVid
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/primary-vid"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config/primary-vid"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_PrimaryVidPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "primary-vid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).PrimaryVid
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_UnsignedInt16Path represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/unsigned-int16 YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_UnsignedInt16Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_UnsignedInt16PathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/unsigned-int16 YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_UnsignedInt16PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/unsigned-int16"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/unsigned-int16"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_UnsignedInt16Path) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "unsigned-int16"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).UnsignedInt16
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/unsigned-int16"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/unsigned-int16"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_UnsignedInt16PathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "unsigned-int16"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).UnsignedInt16
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/unsigned-int16"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config/unsigned-int16"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_UnsignedInt16Path) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "unsigned-int16"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).UnsignedInt16
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/unsigned-int16"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config/unsigned-int16"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_UnsignedInt16PathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "unsigned-int16"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).UnsignedInt16
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnIndexPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/vpn-index YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnIndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnIndexPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/vpn-index YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnIndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/vpn-index"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/vpn-index"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnIndexPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vpn-index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).VpnIndex
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/vpn-index"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/vpn-index"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnIndexPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vpn-index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).VpnIndex
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/vpn-index"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config/vpn-index"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnIndexPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vpn-index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).VpnIndex
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/vpn-index"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config/vpn-index"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnIndexPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vpn-index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).VpnIndex
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnOuiPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/vpn-oui YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnOuiPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnOuiPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/vpn-oui YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnOuiPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/vpn-oui"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/vpn-oui"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnOuiPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vpn-oui"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).VpnOui
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/vpn-oui"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/state/vpn-oui"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnOuiPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vpn-oui"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).VpnOui
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/vpn-oui"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config/vpn-oui"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnOuiPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vpn-oui"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).VpnOui
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/vpn-oui"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config/vpn-oui"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnOuiPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vpn-oui"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).VpnOui
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPath struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathMap represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathMap struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathMapAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathMapAny struct {
	*ygnmi.NodePath
}

// CcmInterval (leaf): CCM transmission interval.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/ccm-interval"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/*/ccm-interval"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPath) CcmInterval() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CcmIntervalPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CcmIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ccm-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CcmInterval (leaf): CCM transmission interval.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/ccm-interval"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/*/ccm-interval"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny) CcmInterval() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CcmIntervalPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CcmIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ccm-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CharString (leaf): RFC2579 DisplayString, except that the character codes 0-31
// (decimal) are not used.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/char-string"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/*/char-string"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPath) CharString() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CharStringPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CharStringPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "char-string"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CharString (leaf): RFC2579 DisplayString, except that the character codes 0-31
// (decimal) are not used.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/char-string"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/*/char-string"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny) CharString() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CharStringPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_CharStringPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "char-string"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GroupName (leaf): Optional Bridge Group or Cross-connect Group name, if
// Service Type is BridgeDomain or
// CrossConnect
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/group-name"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/*/group-name"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPath) GroupName() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_GroupNamePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_GroupNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "group-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GroupName (leaf): Optional Bridge Group or Cross-connect Group name, if
// Service Type is BridgeDomain or
// CrossConnect
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/group-name"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/*/group-name"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny) GroupName() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_GroupNamePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_GroupNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "group-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LossThreshold (leaf): number of consecutive loss frames to trigger a loss event.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/loss-threshold"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/*/loss-threshold"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPath) LossThreshold() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_LossThresholdPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_LossThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "loss-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LossThreshold (leaf): number of consecutive loss frames to trigger a loss event.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/loss-threshold"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/*/loss-threshold"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny) LossThreshold() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_LossThresholdPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_LossThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "loss-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaId (leaf): Key of the Maintenance Association list of entries.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/ma-id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/*/ma-id"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPath) MaId() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaIdPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ma-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaId (leaf): Key of the Maintenance Association list of entries.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/ma-id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/*/ma-id"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny) MaId() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaIdPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ma-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaNameType (leaf): Name type discriminator for the 'name' leaf.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/ma-name-type"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/*/ma-name-type"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPath) MaNameType() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaNameTypePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaNameTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ma-name-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaNameType (leaf): Name type discriminator for the 'name' leaf.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/ma-name-type"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/*/ma-name-type"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny) MaNameType() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaNameTypePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MaNameTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ma-name-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MepEndpointAny (list): collection of full mesh MEPs under the maintenance association.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "mep-endpoints/mep-endpoint"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPath) MepEndpointAny() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mep-endpoints", "mep-endpoint"},
			map[string]interface{}{"local-mep-id": "*"},
			n,
		),
	}
	return ps
}

// MepEndpointAny (list): collection of full mesh MEPs under the maintenance association.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "mep-endpoints/mep-endpoint"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny) MepEndpointAny() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mep-endpoints", "mep-endpoint"},
			map[string]interface{}{"local-mep-id": "*"},
			n,
		),
	}
	return ps
}

// MepEndpoint (list): collection of full mesh MEPs under the maintenance association.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "mep-endpoints/mep-endpoint"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint"
//
//	LocalMepId: uint16
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPath) MepEndpoint(LocalMepId uint16) *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mep-endpoints", "mep-endpoint"},
			map[string]interface{}{"local-mep-id": LocalMepId},
			n,
		),
	}
	return ps
}

// MepEndpoint (list): collection of full mesh MEPs under the maintenance association.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "mep-endpoints/mep-endpoint"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint"
//
//	LocalMepId: uint16
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny) MepEndpoint(LocalMepId uint16) *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mep-endpoints", "mep-endpoint"},
			map[string]interface{}{"local-mep-id": LocalMepId},
			n,
		),
	}
	return ps
}

// MepEndpointMap (list): collection of full mesh MEPs under the maintenance association.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "mep-endpoints/mep-endpoint"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPath) MepEndpointMap() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathMap {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"mep-endpoints"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MepEndpointMap (list): collection of full mesh MEPs under the maintenance association.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "mep-endpoints/mep-endpoint"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny) MepEndpointMap() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathMapAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mep-endpoints"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrimaryVid (leaf): Primary VLAN ID. 12 bits represented in a 2-octet integer.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/primary-vid"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/*/primary-vid"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPath) PrimaryVid() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_PrimaryVidPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_PrimaryVidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "primary-vid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrimaryVid (leaf): Primary VLAN ID. 12 bits represented in a 2-octet integer.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/primary-vid"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/*/primary-vid"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny) PrimaryVid() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_PrimaryVidPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_PrimaryVidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "primary-vid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnsignedInt16 (leaf): 2-octet integer.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/unsigned-int16"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/*/unsigned-int16"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPath) UnsignedInt16() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_UnsignedInt16Path {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_UnsignedInt16Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "unsigned-int16"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnsignedInt16 (leaf): 2-octet integer.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/unsigned-int16"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/*/unsigned-int16"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny) UnsignedInt16() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_UnsignedInt16PathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_UnsignedInt16PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "unsigned-int16"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VpnIndex (leaf): RFC2685 VPN ID. 3 octet VPN authority Organizationally
// Unique Identifier followed by 4 octet VPN index identifying
// VPN according to the OUI.
// vpn-index is a 4 octet index identifying VPNaccording to the OUI.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/vpn-index"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/*/vpn-index"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPath) VpnIndex() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnIndexPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnIndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vpn-index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VpnIndex (leaf): RFC2685 VPN ID. 3 octet VPN authority Organizationally
// Unique Identifier followed by 4 octet VPN index identifying
// VPN according to the OUI.
// vpn-index is a 4 octet index identifying VPNaccording to the OUI.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/vpn-index"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/*/vpn-index"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny) VpnIndex() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnIndexPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnIndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vpn-index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VpnOui (leaf): RFC2685 VPN ID. 3 octet VPN authority Organizationally
//
//	 Unique Identifier followed by 4 octet VPN index identifying
//	 VPN according to the OUI. 3 octet VPN authority
//	 Organizationally Unique Identifier.
//		Defining module:      "openconfig-oam-cfm"
//		Instantiating module: "openconfig-oam"
//		Path from parent:     "*/vpn-oui"
//		Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/*/vpn-oui"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPath) VpnOui() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnOuiPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnOuiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vpn-oui"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VpnOui (leaf): RFC2685 VPN ID. 3 octet VPN authority Organizationally
//
//	 Unique Identifier followed by 4 octet VPN index identifying
//	 VPN according to the OUI. 3 octet VPN authority
//	 Organizationally Unique Identifier.
//		Defining module:      "openconfig-oam-cfm"
//		Instantiating module: "openconfig-oam"
//		Path from parent:     "*/vpn-oui"
//		Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/*/vpn-oui"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny) VpnOui() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnOuiPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_VpnOuiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vpn-oui"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPath) State() ygnmi.SingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation] {
	return ygnmi.NewSingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny) State() ygnmi.WildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPath) Config() ygnmi.ConfigQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation] {
	return ygnmi.NewConfigQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathAny) Config() ygnmi.WildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation](
		"Oam_Cfm_MaintenanceDomain",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).MaintenanceAssociation
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:maintenance-associations"},
			PostRelPath: []string{"openconfig-oam-cfm:maintenance-association"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation](
		"Oam_Cfm_MaintenanceDomain",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).MaintenanceAssociation
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:maintenance-associations"},
			PostRelPath: []string{"openconfig-oam-cfm:maintenance-association"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation] {
	return ygnmi.NewConfigQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation](
		"Oam_Cfm_MaintenanceDomain",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).MaintenanceAssociation
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:maintenance-associations"},
			PostRelPath: []string{"openconfig-oam-cfm:maintenance-association"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociationPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation](
		"Oam_Cfm_MaintenanceDomain",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain).MaintenanceAssociation
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:maintenance-associations"},
			PostRelPath: []string{"openconfig-oam-cfm:maintenance-association"},
		},
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_AutoDiscoveryPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/auto-discovery YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_AutoDiscoveryPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_AutoDiscoveryPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/auto-discovery YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_AutoDiscoveryPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/auto-discovery"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/auto-discovery"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_AutoDiscoveryPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auto-discovery"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).AutoDiscovery
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/auto-discovery"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/auto-discovery"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_AutoDiscoveryPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auto-discovery"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).AutoDiscovery
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/auto-discovery"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/config/auto-discovery"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_AutoDiscoveryPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auto-discovery"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).AutoDiscovery
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/auto-discovery"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/config/auto-discovery"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_AutoDiscoveryPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auto-discovery"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).AutoDiscovery
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CcmEnabledPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/ccm-enabled YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CcmEnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CcmEnabledPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/ccm-enabled YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CcmEnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/ccm-enabled"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/ccm-enabled"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CcmEnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ccm-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).CcmEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/ccm-enabled"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/ccm-enabled"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CcmEnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ccm-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).CcmEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/ccm-enabled"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/config/ccm-enabled"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CcmEnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ccm-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).CcmEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/ccm-enabled"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/config/ccm-enabled"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CcmEnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ccm-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).CcmEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_ConfigErrorsDetectedPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/config-errors-detected YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_ConfigErrorsDetectedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_ConfigErrorsDetectedPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/config-errors-detected YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_ConfigErrorsDetectedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/config-errors-detected"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/config-errors-detected"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_ConfigErrorsDetectedPath) State() ygnmi.SingletonQuery[[]oc.E_OamCfm_ConfigErrorType] {
	return ygnmi.NewSingletonQuery[[]oc.E_OamCfm_ConfigErrorType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "config-errors-detected"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_OamCfm_ConfigErrorType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).ConfigErrorsDetected
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/config-errors-detected"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/config-errors-detected"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_ConfigErrorsDetectedPathAny) State() ygnmi.WildcardQuery[[]oc.E_OamCfm_ConfigErrorType] {
	return ygnmi.NewWildcardQuery[[]oc.E_OamCfm_ConfigErrorType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "config-errors-detected"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_OamCfm_ConfigErrorType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).ConfigErrorsDetected
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_DirectionPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/direction YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_DirectionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_DirectionPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/direction YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_DirectionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/direction"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/direction"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_DirectionPath) State() ygnmi.SingletonQuery[oc.E_MepEndpoint_Direction] {
	return ygnmi.NewSingletonQuery[oc.E_MepEndpoint_Direction](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "direction"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MepEndpoint_Direction, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).Direction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/direction"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/direction"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_DirectionPathAny) State() ygnmi.WildcardQuery[oc.E_MepEndpoint_Direction] {
	return ygnmi.NewWildcardQuery[oc.E_MepEndpoint_Direction](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "direction"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MepEndpoint_Direction, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).Direction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/direction"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/config/direction"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_DirectionPath) Config() ygnmi.ConfigQuery[oc.E_MepEndpoint_Direction] {
	return ygnmi.NewConfigQuery[oc.E_MepEndpoint_Direction](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "direction"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MepEndpoint_Direction, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).Direction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/direction"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/config/direction"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_DirectionPathAny) Config() ygnmi.WildcardQuery[oc.E_MepEndpoint_Direction] {
	return ygnmi.NewWildcardQuery[oc.E_MepEndpoint_Direction](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "direction"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MepEndpoint_Direction, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).Direction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_ErrorCcmLastFailurePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/error-ccm-last-failure YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_ErrorCcmLastFailurePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_ErrorCcmLastFailurePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/error-ccm-last-failure YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_ErrorCcmLastFailurePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/error-ccm-last-failure"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/error-ccm-last-failure"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_ErrorCcmLastFailurePath) State() ygnmi.SingletonQuery[oc.Binary] {
	return ygnmi.NewSingletonQuery[oc.Binary](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "error-ccm-last-failure"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).ErrorCcmLastFailure
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/error-ccm-last-failure"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/error-ccm-last-failure"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_ErrorCcmLastFailurePathAny) State() ygnmi.WildcardQuery[oc.Binary] {
	return ygnmi.NewWildcardQuery[oc.Binary](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "error-ccm-last-failure"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).ErrorCcmLastFailure
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngAlarmTimePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/fng-alarm-time YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngAlarmTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngAlarmTimePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/fng-alarm-time YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngAlarmTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/fng-alarm-time"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/fng-alarm-time"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngAlarmTimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fng-alarm-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).FngAlarmTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/fng-alarm-time"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/fng-alarm-time"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngAlarmTimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fng-alarm-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).FngAlarmTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/fng-alarm-time"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/config/fng-alarm-time"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngAlarmTimePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fng-alarm-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).FngAlarmTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/fng-alarm-time"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/config/fng-alarm-time"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngAlarmTimePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fng-alarm-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).FngAlarmTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngResetTimePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/fng-reset-time YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngResetTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngResetTimePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/fng-reset-time YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngResetTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/fng-reset-time"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/fng-reset-time"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngResetTimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fng-reset-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).FngResetTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/fng-reset-time"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/fng-reset-time"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngResetTimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fng-reset-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).FngResetTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/fng-reset-time"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/config/fng-reset-time"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngResetTimePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fng-reset-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).FngResetTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/fng-reset-time"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/config/fng-reset-time"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngResetTimePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fng-reset-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).FngResetTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngStatePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/fng-state YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngStatePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/fng-state YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/fng-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/fng-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngStatePath) State() ygnmi.SingletonQuery[oc.E_OamCfm_FngStateType] {
	return ygnmi.NewSingletonQuery[oc.E_OamCfm_FngStateType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fng-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OamCfm_FngStateType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).FngState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/fng-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/fng-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngStatePathAny) State() ygnmi.WildcardQuery[oc.E_OamCfm_FngStateType] {
	return ygnmi.NewWildcardQuery[oc.E_OamCfm_FngStateType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fng-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OamCfm_FngStateType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).FngState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_HighestPriorityDefectPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/highest-priority-defect YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_HighestPriorityDefectPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_HighestPriorityDefectPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/highest-priority-defect YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_HighestPriorityDefectPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/highest-priority-defect"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/highest-priority-defect"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_HighestPriorityDefectPath) State() ygnmi.SingletonQuery[oc.E_OamCfm_HighestDefectPriorityType] {
	return ygnmi.NewSingletonQuery[oc.E_OamCfm_HighestDefectPriorityType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "highest-priority-defect"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OamCfm_HighestDefectPriorityType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).HighestPriorityDefect
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/highest-priority-defect"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/highest-priority-defect"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_HighestPriorityDefectPathAny) State() ygnmi.WildcardQuery[oc.E_OamCfm_HighestDefectPriorityType] {
	return ygnmi.NewWildcardQuery[oc.E_OamCfm_HighestDefectPriorityType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "highest-priority-defect"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OamCfm_HighestDefectPriorityType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).HighestPriorityDefect
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepInterfaceStatusInTlvPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/include-mep-interface-status-in-tlv YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepInterfaceStatusInTlvPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepInterfaceStatusInTlvPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/include-mep-interface-status-in-tlv YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepInterfaceStatusInTlvPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/include-mep-interface-status-in-tlv"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/include-mep-interface-status-in-tlv"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepInterfaceStatusInTlvPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-mep-interface-status-in-tlv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).IncludeMepInterfaceStatusInTlv
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/include-mep-interface-status-in-tlv"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/include-mep-interface-status-in-tlv"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepInterfaceStatusInTlvPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-mep-interface-status-in-tlv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).IncludeMepInterfaceStatusInTlv
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/include-mep-interface-status-in-tlv"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/config/include-mep-interface-status-in-tlv"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepInterfaceStatusInTlvPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-mep-interface-status-in-tlv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).IncludeMepInterfaceStatusInTlv
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/include-mep-interface-status-in-tlv"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/config/include-mep-interface-status-in-tlv"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepInterfaceStatusInTlvPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-mep-interface-status-in-tlv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).IncludeMepInterfaceStatusInTlv
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepPortStatusInTlvPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/include-mep-port-status-in-tlv YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepPortStatusInTlvPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepPortStatusInTlvPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/include-mep-port-status-in-tlv YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepPortStatusInTlvPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/include-mep-port-status-in-tlv"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/include-mep-port-status-in-tlv"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepPortStatusInTlvPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-mep-port-status-in-tlv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).IncludeMepPortStatusInTlv
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/include-mep-port-status-in-tlv"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/include-mep-port-status-in-tlv"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepPortStatusInTlvPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-mep-port-status-in-tlv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).IncludeMepPortStatusInTlv
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/include-mep-port-status-in-tlv"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/config/include-mep-port-status-in-tlv"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepPortStatusInTlvPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-mep-port-status-in-tlv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).IncludeMepPortStatusInTlv
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/include-mep-port-status-in-tlv"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/config/include-mep-port-status-in-tlv"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepPortStatusInTlvPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-mep-port-status-in-tlv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).IncludeMepPortStatusInTlv
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfacePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/interface YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfacePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/interface YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/interface"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/interface"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/interface"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/interface"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/interface"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/config/interface"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/interface"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/config/interface"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfaceStatePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/interface-state YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfaceStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfaceStatePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/interface-state YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfaceStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/interface-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/interface-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfaceStatePath) State() ygnmi.SingletonQuery[oc.E_OamCfm_InterfaceStatusType] {
	return ygnmi.NewSingletonQuery[oc.E_OamCfm_InterfaceStatusType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OamCfm_InterfaceStatusType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).InterfaceState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/interface-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/interface-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfaceStatePathAny) State() ygnmi.WildcardQuery[oc.E_OamCfm_InterfaceStatusType] {
	return ygnmi.NewWildcardQuery[oc.E_OamCfm_InterfaceStatusType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OamCfm_InterfaceStatusType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).InterfaceState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LocalMepIdPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/local-mep-id YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LocalMepIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LocalMepIdPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/local-mep-id YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LocalMepIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/local-mep-id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/local-mep-id"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LocalMepIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-mep-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).LocalMepId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/local-mep-id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/local-mep-id"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LocalMepIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-mep-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).LocalMepId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/local-mep-id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/config/local-mep-id"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LocalMepIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "local-mep-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).LocalMepId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/local-mep-id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/config/local-mep-id"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LocalMepIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "local-mep-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).LocalMepId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LowestPriorityDefectPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/lowest-priority-defect YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LowestPriorityDefectPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LowestPriorityDefectPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/lowest-priority-defect YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LowestPriorityDefectPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/lowest-priority-defect"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/lowest-priority-defect"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LowestPriorityDefectPath) State() ygnmi.SingletonQuery[oc.E_OamCfm_LowestAlarmPriorityType] {
	return ygnmi.NewSingletonQuery[oc.E_OamCfm_LowestAlarmPriorityType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lowest-priority-defect"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OamCfm_LowestAlarmPriorityType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).LowestPriorityDefect
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/lowest-priority-defect"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/lowest-priority-defect"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LowestPriorityDefectPathAny) State() ygnmi.WildcardQuery[oc.E_OamCfm_LowestAlarmPriorityType] {
	return ygnmi.NewWildcardQuery[oc.E_OamCfm_LowestAlarmPriorityType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lowest-priority-defect"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OamCfm_LowestAlarmPriorityType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).LowestPriorityDefect
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/lowest-priority-defect"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/config/lowest-priority-defect"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LowestPriorityDefectPath) Config() ygnmi.ConfigQuery[oc.E_OamCfm_LowestAlarmPriorityType] {
	return ygnmi.NewConfigQuery[oc.E_OamCfm_LowestAlarmPriorityType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lowest-priority-defect"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OamCfm_LowestAlarmPriorityType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).LowestPriorityDefect
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/lowest-priority-defect"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/config/lowest-priority-defect"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LowestPriorityDefectPathAny) Config() ygnmi.WildcardQuery[oc.E_OamCfm_LowestAlarmPriorityType] {
	return ygnmi.NewWildcardQuery[oc.E_OamCfm_LowestAlarmPriorityType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lowest-priority-defect"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OamCfm_LowestAlarmPriorityType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).LowestPriorityDefect
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_MepDefectsPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/mep-defects YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_MepDefectsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_MepDefectsPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/mep-defects YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_MepDefectsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/mep-defects"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/mep-defects"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_MepDefectsPath) State() ygnmi.SingletonQuery[[]oc.E_OamCfm_MepDefectsType] {
	return ygnmi.NewSingletonQuery[[]oc.E_OamCfm_MepDefectsType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mep-defects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_OamCfm_MepDefectsType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).MepDefects
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/mep-defects"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/mep-defects"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_MepDefectsPathAny) State() ygnmi.WildcardQuery[[]oc.E_OamCfm_MepDefectsType] {
	return ygnmi.NewWildcardQuery[[]oc.E_OamCfm_MepDefectsType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mep-defects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_OamCfm_MepDefectsType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).MepDefects
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_OperStatePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/oper-state YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_OperStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_OperStatePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/oper-state YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_OperStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/oper-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/oper-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_OperStatePath) State() ygnmi.SingletonQuery[oc.E_OamCfm_OperationalStateType] {
	return ygnmi.NewSingletonQuery[oc.E_OamCfm_OperationalStateType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OamCfm_OperationalStateType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).OperState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/oper-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/oper-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_OperStatePathAny) State() ygnmi.WildcardQuery[oc.E_OamCfm_OperationalStateType] {
	return ygnmi.NewWildcardQuery[oc.E_OamCfm_OperationalStateType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OamCfm_OperationalStateType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).OperState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PresentRdiPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/present-rdi YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PresentRdiPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PresentRdiPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/present-rdi YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PresentRdiPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/present-rdi"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/present-rdi"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PresentRdiPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "present-rdi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).PresentRdi
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/present-rdi"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/present-rdi"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PresentRdiPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "present-rdi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).PresentRdi
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathMap represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathMap struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathMapAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathMapAny struct {
	*ygnmi.NodePath
}

// AutoDiscovery (leaf): A boolean value to enable or disable auto-discovery.
// users must configure explicitly true or false.
// If unset, then it’s implementation specific.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/auto-discovery"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/*/auto-discovery"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) AutoDiscovery() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_AutoDiscoveryPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_AutoDiscoveryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auto-discovery"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AutoDiscovery (leaf): A boolean value to enable or disable auto-discovery.
// users must configure explicitly true or false.
// If unset, then it’s implementation specific.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/auto-discovery"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/*/auto-discovery"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) AutoDiscovery() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_AutoDiscoveryPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_AutoDiscoveryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auto-discovery"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CcmEnabled (leaf): Indicates whether the MEP can generate CCMs. If TRUE, the
// MEP will generate CCM PDUs.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/ccm-enabled"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/*/ccm-enabled"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) CcmEnabled() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CcmEnabledPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CcmEnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ccm-enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CcmEnabled (leaf): Indicates whether the MEP can generate CCMs. If TRUE, the
// MEP will generate CCM PDUs.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/ccm-enabled"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/*/ccm-enabled"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) CcmEnabled() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CcmEnabledPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CcmEnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ccm-enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConfigErrorsDetected (leaf-list): Vector of enums of config error detected. i.e. [cfm-leak]
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/config-errors-detected"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/config-errors-detected"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) ConfigErrorsDetected() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_ConfigErrorsDetectedPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_ConfigErrorsDetectedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "config-errors-detected"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConfigErrorsDetected (leaf-list): Vector of enums of config error detected. i.e. [cfm-leak]
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/config-errors-detected"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/config-errors-detected"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) ConfigErrorsDetected() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_ConfigErrorsDetectedPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_ConfigErrorsDetectedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "config-errors-detected"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (container): A collection of mep-related statistics objects.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/counters"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/counters"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) Counters() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CountersPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of mep-related statistics objects.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/counters"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/counters"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) Counters() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CountersPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Direction (leaf): The direction in which the MEP faces on the Bridge/Xconnect
// Port. Example, up or down.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/direction"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/*/direction"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) Direction() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_DirectionPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_DirectionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "direction"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Direction (leaf): The direction in which the MEP faces on the Bridge/Xconnect
// Port. Example, up or down.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/direction"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/*/direction"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) Direction() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_DirectionPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_DirectionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "direction"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ErrorCcmLastFailure (leaf): The last received CCM that triggered a def-error-ccm
//
//	 fault.
//		Defining module:      "openconfig-oam-cfm"
//		Instantiating module: "openconfig-oam"
//		Path from parent:     "state/error-ccm-last-failure"
//		Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/error-ccm-last-failure"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) ErrorCcmLastFailure() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_ErrorCcmLastFailurePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_ErrorCcmLastFailurePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "error-ccm-last-failure"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ErrorCcmLastFailure (leaf): The last received CCM that triggered a def-error-ccm
//
//	 fault.
//		Defining module:      "openconfig-oam-cfm"
//		Instantiating module: "openconfig-oam"
//		Path from parent:     "state/error-ccm-last-failure"
//		Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/error-ccm-last-failure"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) ErrorCcmLastFailure() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_ErrorCcmLastFailurePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_ErrorCcmLastFailurePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "error-ccm-last-failure"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FngAlarmTime (leaf): The time that defect must be present before a Fault Alarm
// is issued.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/fng-alarm-time"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/*/fng-alarm-time"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) FngAlarmTime() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngAlarmTimePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngAlarmTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fng-alarm-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FngAlarmTime (leaf): The time that defect must be present before a Fault Alarm
// is issued.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/fng-alarm-time"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/*/fng-alarm-time"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) FngAlarmTime() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngAlarmTimePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngAlarmTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fng-alarm-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FngResetTime (leaf): The time that defects must be absent before resetting a
// Fault Alarm.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/fng-reset-time"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/*/fng-reset-time"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) FngResetTime() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngResetTimePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngResetTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fng-reset-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FngResetTime (leaf): The time that defects must be absent before resetting a
// Fault Alarm.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/fng-reset-time"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/*/fng-reset-time"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) FngResetTime() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngResetTimePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngResetTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fng-reset-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FngState (leaf): The current state of the MEP Fault Notification Generator
// state machine.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/fng-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/fng-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) FngState() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngStatePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fng-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FngState (leaf): The current state of the MEP Fault Notification Generator
// state machine.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/fng-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/fng-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) FngState() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngStatePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_FngStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fng-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HighestPriorityDefect (leaf): The highest priority defect that has been present since
// the MEPs Fault Notification Generator state machine was
// last in the FNG_RESET state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/highest-priority-defect"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/highest-priority-defect"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) HighestPriorityDefect() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_HighestPriorityDefectPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_HighestPriorityDefectPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "highest-priority-defect"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HighestPriorityDefect (leaf): The highest priority defect that has been present since
// the MEPs Fault Notification Generator state machine was
// last in the FNG_RESET state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/highest-priority-defect"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/highest-priority-defect"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) HighestPriorityDefect() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_HighestPriorityDefectPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_HighestPriorityDefectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "highest-priority-defect"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeMepInterfaceStatusInTlv (leaf): Indicates whether a Interface Status TLV is included in CCM frame
// transmission. A value of 'true' indicates that the Interface Status TLV
// is to be included. A value of 'false' indicates that the Interface
// Status TLV is not to be included.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/include-mep-interface-status-in-tlv"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/*/include-mep-interface-status-in-tlv"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) IncludeMepInterfaceStatusInTlv() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepInterfaceStatusInTlvPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepInterfaceStatusInTlvPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-mep-interface-status-in-tlv"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeMepInterfaceStatusInTlv (leaf): Indicates whether a Interface Status TLV is included in CCM frame
// transmission. A value of 'true' indicates that the Interface Status TLV
// is to be included. A value of 'false' indicates that the Interface
// Status TLV is not to be included.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/include-mep-interface-status-in-tlv"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/*/include-mep-interface-status-in-tlv"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) IncludeMepInterfaceStatusInTlv() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepInterfaceStatusInTlvPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepInterfaceStatusInTlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-mep-interface-status-in-tlv"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeMepPortStatusInTlv (leaf): Indicates whether a Port Status TLV is included in CCM frame
// transmission. A value of 'true' indicates that the Port Status
// TLV is to be included. A value of 'false' indicates that the
// Port Status TLV is not to be included.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/include-mep-port-status-in-tlv"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/*/include-mep-port-status-in-tlv"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) IncludeMepPortStatusInTlv() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepPortStatusInTlvPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepPortStatusInTlvPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-mep-port-status-in-tlv"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeMepPortStatusInTlv (leaf): Indicates whether a Port Status TLV is included in CCM frame
// transmission. A value of 'true' indicates that the Port Status
// TLV is to be included. A value of 'false' indicates that the
// Port Status TLV is not to be included.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/include-mep-port-status-in-tlv"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/*/include-mep-port-status-in-tlv"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) IncludeMepPortStatusInTlv() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepPortStatusInTlvPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_IncludeMepPortStatusInTlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-mep-port-status-in-tlv"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Interface directly associated with the MEP id.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/interface"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/*/interface"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) Interface() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfacePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Interface directly associated with the MEP id.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/interface"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/*/interface"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) Interface() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfacePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceState (leaf): The state of the interface last reported by the local MEP in the TLV.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/interface-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/interface-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) InterfaceState() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfaceStatePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfaceStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceState (leaf): The state of the interface last reported by the local MEP in the TLV.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/interface-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/interface-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) InterfaceState() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfaceStatePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_InterfaceStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkLossForwarding (container): link loss forwarding config for a mep.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "link-loss-forwarding"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) LinkLossForwarding() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwardingPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwardingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-loss-forwarding"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LinkLossForwarding (container): link loss forwarding config for a mep.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "link-loss-forwarding"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) LinkLossForwarding() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwardingPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwardingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-loss-forwarding"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LocalMepId (leaf): The identifier of a Local MEP.  Unique per given  MA
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/local-mep-id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/*/local-mep-id"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) LocalMepId() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LocalMepIdPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LocalMepIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-mep-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalMepId (leaf): The identifier of a Local MEP.  Unique per given  MA
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/local-mep-id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/*/local-mep-id"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) LocalMepId() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LocalMepIdPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LocalMepIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-mep-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LowestPriorityDefect (leaf): The lowest priority defect that is allowed to generate
// fault alarms.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/lowest-priority-defect"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/*/lowest-priority-defect"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) LowestPriorityDefect() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LowestPriorityDefectPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LowestPriorityDefectPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lowest-priority-defect"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LowestPriorityDefect (leaf): The lowest priority defect that is allowed to generate
// fault alarms.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/lowest-priority-defect"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/*/lowest-priority-defect"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) LowestPriorityDefect() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LowestPriorityDefectPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LowestPriorityDefectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lowest-priority-defect"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MepDefects (leaf-list): Vector of boolean error conditions.
// Multiple defects can be present at the same time.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/mep-defects"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/mep-defects"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) MepDefects() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_MepDefectsPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_MepDefectsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mep-defects"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MepDefects (leaf-list): Vector of boolean error conditions.
// Multiple defects can be present at the same time.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/mep-defects"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/mep-defects"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) MepDefects() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_MepDefectsPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_MepDefectsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mep-defects"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperState (leaf): Operational state of the MEP.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/oper-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/oper-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) OperState() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_OperStatePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_OperStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperState (leaf): Operational state of the MEP.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/oper-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/oper-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) OperState() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_OperStatePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_OperStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PmProfileAny (list):  Measurement profile name and state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "pm-profiles/pm-profile"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) PmProfileAny() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"pm-profiles", "pm-profile"},
			map[string]interface{}{"profile-name": "*"},
			n,
		),
	}
	return ps
}

// PmProfileAny (list):  Measurement profile name and state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "pm-profiles/pm-profile"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) PmProfileAny() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"pm-profiles", "pm-profile"},
			map[string]interface{}{"profile-name": "*"},
			n,
		),
	}
	return ps
}

// PmProfile (list):  Measurement profile name and state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "pm-profiles/pm-profile"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile"
//
//	ProfileName: string
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) PmProfile(ProfileName string) *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"pm-profiles", "pm-profile"},
			map[string]interface{}{"profile-name": ProfileName},
			n,
		),
	}
	return ps
}

// PmProfile (list):  Measurement profile name and state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "pm-profiles/pm-profile"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile"
//
//	ProfileName: string
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) PmProfile(ProfileName string) *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"pm-profiles", "pm-profile"},
			map[string]interface{}{"profile-name": ProfileName},
			n,
		),
	}
	return ps
}

// PmProfileMap (list):  Measurement profile name and state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "pm-profiles/pm-profile"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) PmProfileMap() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathMap {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"pm-profiles"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PmProfileMap (list):  Measurement profile name and state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "pm-profiles/pm-profile"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) PmProfileMap() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathMapAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"pm-profiles"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PresentRdi (leaf): A boolean value indicating the state of the RDI bit in CCMs
// transmitted by this MEP. present-rdi is true if and only if one or more
// of the variables someRMEPCCMdefect, someMACstatusDefect, errorCCMdefect,
// or xconCCMdefect is true, and if the corresponding priority of that
// variable, from mep-defects above, is greater than or equal to the
// value of the variable lowestAlarmPri.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/present-rdi"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/present-rdi"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) PresentRdi() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PresentRdiPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PresentRdiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "present-rdi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PresentRdi (leaf): A boolean value indicating the state of the RDI bit in CCMs
// transmitted by this MEP. present-rdi is true if and only if one or more
// of the variables someRMEPCCMdefect, someMACstatusDefect, errorCCMdefect,
// or xconCCMdefect is true, and if the corresponding priority of that
// variable, from mep-defects above, is greater than or equal to the
// value of the variable lowestAlarmPri.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/present-rdi"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/present-rdi"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) PresentRdi() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PresentRdiPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PresentRdiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "present-rdi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Rdi (container): rdi config for a mep.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "rdi"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/rdi"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) Rdi() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RdiPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RdiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"rdi"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Rdi (container): rdi config for a mep.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "rdi"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/rdi"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) Rdi() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RdiPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RdiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rdi"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RemoteMepAny (list): Remote meps associated to a local mep
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "remote-meps/remote-mep"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) RemoteMepAny() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-meps", "remote-mep"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// RemoteMepAny (list): Remote meps associated to a local mep
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "remote-meps/remote-mep"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) RemoteMepAny() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-meps", "remote-mep"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// RemoteMep (list): Remote meps associated to a local mep
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "remote-meps/remote-mep"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep"
//
//	Id: uint16
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) RemoteMep(Id uint16) *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-meps", "remote-mep"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// RemoteMep (list): Remote meps associated to a local mep
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "remote-meps/remote-mep"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep"
//
//	Id: uint16
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) RemoteMep(Id uint16) *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-meps", "remote-mep"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// RemoteMepMap (list): Remote meps associated to a local mep
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "remote-meps/remote-mep"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) RemoteMepMap() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathMap {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-meps"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RemoteMepMap (list): Remote meps associated to a local mep
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "remote-meps/remote-mep"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) RemoteMepMap() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathMapAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-meps"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) State() ygnmi.SingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint] {
	return ygnmi.NewSingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) State() ygnmi.WildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPath) Config() ygnmi.ConfigQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint] {
	return ygnmi.NewConfigQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathAny) Config() ygnmi.WildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathMap) State() ygnmi.SingletonQuery[map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint] {
	return ygnmi.NewSingletonQuery[map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).MepEndpoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:mep-endpoints"},
			PostRelPath: []string{"openconfig-oam-cfm:mep-endpoint"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathMapAny) State() ygnmi.WildcardQuery[map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint] {
	return ygnmi.NewWildcardQuery[map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).MepEndpoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:mep-endpoints"},
			PostRelPath: []string{"openconfig-oam-cfm:mep-endpoint"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathMap) Config() ygnmi.ConfigQuery[map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint] {
	return ygnmi.NewConfigQuery[map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).MepEndpoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:mep-endpoints"},
			PostRelPath: []string{"openconfig-oam-cfm:mep-endpoint"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpointPathMapAny) Config() ygnmi.WildcardQuery[map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint] {
	return ygnmi.NewWildcardQuery[map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation).MepEndpoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:mep-endpoints"},
			PostRelPath: []string{"openconfig-oam-cfm:mep-endpoint"},
		},
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters_MepCcmSequenceErrorsPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/counters/mep-ccm-sequence-errors YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters_MepCcmSequenceErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters_MepCcmSequenceErrorsPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/counters/mep-ccm-sequence-errors YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters_MepCcmSequenceErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "mep-ccm-sequence-errors"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/counters/mep-ccm-sequence-errors"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters_MepCcmSequenceErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mep-ccm-sequence-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters).MepCcmSequenceErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "mep-ccm-sequence-errors"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/counters/mep-ccm-sequence-errors"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters_MepCcmSequenceErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mep-ccm-sequence-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters).MepCcmSequenceErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters_MepCcmsSentPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/counters/mep-ccms-sent YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters_MepCcmsSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters_MepCcmsSentPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/counters/mep-ccms-sent YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters_MepCcmsSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "mep-ccms-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/counters/mep-ccms-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters_MepCcmsSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mep-ccms-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters).MepCcmsSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "mep-ccms-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/counters/mep-ccms-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters_MepCcmsSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mep-ccms-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters).MepCcmsSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CountersPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/counters YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CountersPath struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CountersPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/counters YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CountersPathAny struct {
	*ygnmi.NodePath
}

// MepCcmSequenceErrors (leaf): The total number of out-of-sequence CCMs received from
// all remote MEPs.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "mep-ccm-sequence-errors"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/counters/mep-ccm-sequence-errors"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CountersPath) MepCcmSequenceErrors() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters_MepCcmSequenceErrorsPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters_MepCcmSequenceErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mep-ccm-sequence-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MepCcmSequenceErrors (leaf): The total number of out-of-sequence CCMs received from
// all remote MEPs.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "mep-ccm-sequence-errors"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/counters/mep-ccm-sequence-errors"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CountersPathAny) MepCcmSequenceErrors() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters_MepCcmSequenceErrorsPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters_MepCcmSequenceErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mep-ccm-sequence-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MepCcmsSent (leaf): Total number of CCMs transmitted by the local MEP
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "mep-ccms-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/counters/mep-ccms-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CountersPath) MepCcmsSent() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters_MepCcmsSentPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters_MepCcmsSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mep-ccms-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MepCcmsSent (leaf): Total number of CCMs transmitted by the local MEP
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "mep-ccms-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/counters/mep-ccms-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CountersPathAny) MepCcmsSent() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters_MepCcmsSentPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters_MepCcmsSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mep-ccms-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CountersPath) State() ygnmi.SingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_ActionPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/state/action YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_ActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_ActionPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/state/action YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_ActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/action"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/state/action"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_ActionPath) State() ygnmi.SingletonQuery[oc.E_LinkLossForwarding_Action] {
	return ygnmi.NewSingletonQuery[oc.E_LinkLossForwarding_Action](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_LinkLossForwarding_Action, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/action"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/state/action"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_ActionPathAny) State() ygnmi.WildcardQuery[oc.E_LinkLossForwarding_Action] {
	return ygnmi.NewWildcardQuery[oc.E_LinkLossForwarding_Action](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_LinkLossForwarding_Action, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/action"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/config/action"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_ActionPath) Config() ygnmi.ConfigQuery[oc.E_LinkLossForwarding_Action] {
	return ygnmi.NewConfigQuery[oc.E_LinkLossForwarding_Action](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_LinkLossForwarding_Action, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/action"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/config/action"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_ActionPathAny) Config() ygnmi.WildcardQuery[oc.E_LinkLossForwarding_Action] {
	return ygnmi.NewWildcardQuery[oc.E_LinkLossForwarding_Action](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_LinkLossForwarding_Action, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_DampingTimerPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/state/damping-timer YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_DampingTimerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_DampingTimerPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/state/damping-timer YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_DampingTimerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/damping-timer"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/state/damping-timer"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_DampingTimerPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "damping-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding).DampingTimer
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/damping-timer"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/state/damping-timer"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_DampingTimerPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "damping-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding).DampingTimer
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/damping-timer"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/config/damping-timer"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_DampingTimerPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "damping-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding).DampingTimer
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/damping-timer"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/config/damping-timer"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_DampingTimerPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "damping-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding).DampingTimer
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_EnablePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/state/enable YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_EnablePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/state/enable YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/enable"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/state/enable"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/enable"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/state/enable"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/enable"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/config/enable"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/enable"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/config/enable"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwardingPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwardingPath struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwardingPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwardingPathAny struct {
	*ygnmi.NodePath
}

// Action (leaf): Action to take on link loss.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/action"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/*/action"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwardingPath) Action() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_ActionPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_ActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Action (leaf): Action to take on link loss.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/action"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/*/action"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwardingPathAny) Action() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_ActionPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_ActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DampingTimer (leaf): The damping timer is the amount of time that the local
// attachment-circuit link state will be held in the down state
// after the remote attachment-circuit link state has been
// detected to be up. The damping timer is used to prevent
// flapping of the local attachment-circuit link state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/damping-timer"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/*/damping-timer"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwardingPath) DampingTimer() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_DampingTimerPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_DampingTimerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "damping-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DampingTimer (leaf): The damping timer is the amount of time that the local
// attachment-circuit link state will be held in the down state
// after the remote attachment-circuit link state has been
// detected to be up. The damping timer is used to prevent
// flapping of the local attachment-circuit link state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/damping-timer"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/*/damping-timer"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwardingPathAny) DampingTimer() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_DampingTimerPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_DampingTimerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "damping-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enable propagation of the remote
// attachment-circuit link state to the
// local attachment-circuit link state
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/enable"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/*/enable"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwardingPath) Enable() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_EnablePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enable propagation of the remote
// attachment-circuit link state to the
// local attachment-circuit link state
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/enable"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/link-loss-forwarding/*/enable"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwardingPathAny) Enable() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_EnablePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwardingPath) State() ygnmi.SingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding] {
	return ygnmi.NewSingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwardingPathAny) State() ygnmi.WildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwardingPath) Config() ygnmi.ConfigQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding] {
	return ygnmi.NewConfigQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwardingPathAny) Config() ygnmi.WildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_LinkLossForwarding",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_BurstIntervalPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/burst-interval YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_BurstIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_BurstIntervalPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/burst-interval YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_BurstIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/burst-interval"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/burst-interval"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_BurstIntervalPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "burst-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).BurstInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/burst-interval"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/burst-interval"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_BurstIntervalPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "burst-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).BurstInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_EnablePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/enable YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_EnablePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/enable YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/enable"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/enable"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/enable"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/enable"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_FrameSizePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/frame-size YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_FrameSizePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_FrameSizePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/frame-size YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_FrameSizePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/frame-size"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/frame-size"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_FrameSizePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "frame-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).FrameSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/frame-size"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/frame-size"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_FrameSizePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "frame-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).FrameSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_IntervalsArchivedPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/intervals-archived YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_IntervalsArchivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_IntervalsArchivedPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/intervals-archived YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_IntervalsArchivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/intervals-archived"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/intervals-archived"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_IntervalsArchivedPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "intervals-archived"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).IntervalsArchived
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/intervals-archived"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/intervals-archived"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_IntervalsArchivedPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "intervals-archived"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).IntervalsArchived
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_MeasurementIntervalPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/measurement-interval YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_MeasurementIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_MeasurementIntervalPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/measurement-interval YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_MeasurementIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/measurement-interval"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/measurement-interval"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_MeasurementIntervalPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "measurement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).MeasurementInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/measurement-interval"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/measurement-interval"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_MeasurementIntervalPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "measurement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).MeasurementInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_MeasurementTypePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/measurement-type YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_MeasurementTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_MeasurementTypePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/measurement-type YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_MeasurementTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/measurement-type"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/measurement-type"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_MeasurementTypePath) State() ygnmi.SingletonQuery[oc.E_PmProfile_MeasurementType] {
	return ygnmi.NewSingletonQuery[oc.E_PmProfile_MeasurementType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "measurement-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PmProfile_MeasurementType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).MeasurementType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/measurement-type"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/measurement-type"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_MeasurementTypePathAny) State() ygnmi.WildcardQuery[oc.E_PmProfile_MeasurementType] {
	return ygnmi.NewWildcardQuery[oc.E_PmProfile_MeasurementType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "measurement-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PmProfile_MeasurementType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).MeasurementType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_PacketPerBurstPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/packet-per-burst YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_PacketPerBurstPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_PacketPerBurstPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/packet-per-burst YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_PacketPerBurstPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/packet-per-burst"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/packet-per-burst"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_PacketPerBurstPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "packet-per-burst"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).PacketPerBurst
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/packet-per-burst"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/packet-per-burst"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_PacketPerBurstPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "packet-per-burst"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).PacketPerBurst
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_PacketsPerMeaurementPeriodPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/packets-per-meaurement-period YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_PacketsPerMeaurementPeriodPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_PacketsPerMeaurementPeriodPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/packets-per-meaurement-period YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_PacketsPerMeaurementPeriodPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/packets-per-meaurement-period"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/packets-per-meaurement-period"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_PacketsPerMeaurementPeriodPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "packets-per-meaurement-period"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).PacketsPerMeaurementPeriod
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/packets-per-meaurement-period"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/packets-per-meaurement-period"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_PacketsPerMeaurementPeriodPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "packets-per-meaurement-period"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).PacketsPerMeaurementPeriod
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProfileNamePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/profile-name YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProfileNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProfileNamePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/profile-name YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProfileNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/profile-name"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/profile-name"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProfileNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "profile-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).ProfileName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/profile-name"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/profile-name"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProfileNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "profile-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).ProfileName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/profile-name"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/config/profile-name"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProfileNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "profile-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).ProfileName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/profile-name"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/config/profile-name"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProfileNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "profile-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).ProfileName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProtocolTypePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/protocol-type YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProtocolTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProtocolTypePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/protocol-type YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProtocolTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/protocol-type"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/protocol-type"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProtocolTypePath) State() ygnmi.SingletonQuery[oc.E_PmProfile_ProtocolType] {
	return ygnmi.NewSingletonQuery[oc.E_PmProfile_ProtocolType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PmProfile_ProtocolType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).ProtocolType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/protocol-type"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/protocol-type"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProtocolTypePathAny) State() ygnmi.WildcardQuery[oc.E_PmProfile_ProtocolType] {
	return ygnmi.NewWildcardQuery[oc.E_PmProfile_ProtocolType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PmProfile_ProtocolType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).ProtocolType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_RepetitionPeriodPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/repetition-period YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_RepetitionPeriodPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_RepetitionPeriodPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/repetition-period YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_RepetitionPeriodPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/repetition-period"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/repetition-period"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_RepetitionPeriodPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "repetition-period"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).RepetitionPeriod
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/repetition-period"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/repetition-period"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_RepetitionPeriodPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "repetition-period"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile).RepetitionPeriod
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePath struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathMap represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathMap struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathMapAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathMapAny struct {
	*ygnmi.NodePath
}

// BurstInterval (leaf): Interval between bursts within a measurement interval.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/burst-interval"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/burst-interval"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePath) BurstInterval() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_BurstIntervalPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_BurstIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "burst-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BurstInterval (leaf): Interval between bursts within a measurement interval.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/burst-interval"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/burst-interval"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny) BurstInterval() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_BurstIntervalPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_BurstIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "burst-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DelayMeasurementState (container): Delay measurement state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/delay-measurement-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePath) DelayMeasurementState() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementStatePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "delay-measurement-state"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DelayMeasurementState (container): Delay measurement state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/delay-measurement-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny) DelayMeasurementState() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementStatePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "delay-measurement-state"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enable (leaf): Enable or disable measurement.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/enable"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/enable"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePath) Enable() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_EnablePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enable or disable measurement.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/enable"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/enable"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny) Enable() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_EnablePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameSize (leaf): Probe Frame size for measurement.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/frame-size"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/frame-size"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePath) FrameSize() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_FrameSizePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_FrameSizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "frame-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameSize (leaf): Probe Frame size for measurement.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/frame-size"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/frame-size"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny) FrameSize() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_FrameSizePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_FrameSizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "frame-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IntervalsArchived (leaf): This object specifies the number of completed measurement intervals to
// store in the history statistic table.
//
// At least 32 completed measurement intervals are to be
// stored. 96 measurement intervals are recommended to be stored.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/intervals-archived"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/intervals-archived"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePath) IntervalsArchived() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_IntervalsArchivedPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_IntervalsArchivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "intervals-archived"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IntervalsArchived (leaf): This object specifies the number of completed measurement intervals to
// store in the history statistic table.
//
// At least 32 completed measurement intervals are to be
// stored. 96 measurement intervals are recommended to be stored.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/intervals-archived"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/intervals-archived"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny) IntervalsArchived() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_IntervalsArchivedPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_IntervalsArchivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "intervals-archived"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LossMeasurementState (container): Loss measurement state container.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/loss-measurement-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePath) LossMeasurementState() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loss-measurement-state"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LossMeasurementState (container): Loss measurement state container.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/loss-measurement-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny) LossMeasurementState() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loss-measurement-state"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MeasurementInterval (leaf): This object specifies the Measurement Interval for FLR statistics, in
// minutes.
// A Measurement Interval of 15 minutes needs to be supported,
// other intervals may be supported.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/measurement-interval"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/measurement-interval"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePath) MeasurementInterval() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_MeasurementIntervalPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_MeasurementIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "measurement-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MeasurementInterval (leaf): This object specifies the Measurement Interval for FLR statistics, in
// minutes.
// A Measurement Interval of 15 minutes needs to be supported,
// other intervals may be supported.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/measurement-interval"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/measurement-interval"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny) MeasurementInterval() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_MeasurementIntervalPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_MeasurementIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "measurement-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MeasurementType (leaf): This object specifies what type of Performance Measurement will be
// performed.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/measurement-type"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/measurement-type"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePath) MeasurementType() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_MeasurementTypePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_MeasurementTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "measurement-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MeasurementType (leaf): This object specifies what type of Performance Measurement will be
// performed.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/measurement-type"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/measurement-type"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny) MeasurementType() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_MeasurementTypePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_MeasurementTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "measurement-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketPerBurst (leaf): if burst enabled. The leaf defines the number of packet per burst of probes.
// packets-per-measurement-period / burst-interval
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/packet-per-burst"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/packet-per-burst"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePath) PacketPerBurst() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_PacketPerBurstPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_PacketPerBurstPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "packet-per-burst"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketPerBurst (leaf): if burst enabled. The leaf defines the number of packet per burst of probes.
// packets-per-measurement-period / burst-interval
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/packet-per-burst"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/packet-per-burst"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny) PacketPerBurst() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_PacketPerBurstPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_PacketPerBurstPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "packet-per-burst"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsPerMeaurementPeriod (leaf): Number of probe packets to send within a measurement interval.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/packets-per-meaurement-period"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/packets-per-meaurement-period"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePath) PacketsPerMeaurementPeriod() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_PacketsPerMeaurementPeriodPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_PacketsPerMeaurementPeriodPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "packets-per-meaurement-period"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsPerMeaurementPeriod (leaf): Number of probe packets to send within a measurement interval.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/packets-per-meaurement-period"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/packets-per-meaurement-period"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny) PacketsPerMeaurementPeriod() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_PacketsPerMeaurementPeriodPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_PacketsPerMeaurementPeriodPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "packets-per-meaurement-period"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProfileName (leaf): Name of the measurement profile.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/profile-name"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/*/profile-name"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePath) ProfileName() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProfileNamePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProfileNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "profile-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProfileName (leaf): Name of the measurement profile.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/profile-name"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/*/profile-name"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny) ProfileName() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProfileNamePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProfileNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "profile-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProtocolType (leaf): protocol type.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/protocol-type"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/protocol-type"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePath) ProtocolType() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProtocolTypePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProtocolTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "protocol-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProtocolType (leaf): protocol type.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/protocol-type"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/protocol-type"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny) ProtocolType() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProtocolTypePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_ProtocolTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "protocol-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RepetitionPeriod (leaf): This object specifies a configurable repetition time between
// Measurement Intervals in a Measurement session in hundredths of a
// second.
//
// If the value is less than or equal to one Measurement Interval
// there is no time gap between the end of one Measurement
// Interval and the start of a new Measurement Interval. This is
// the normal usage case.
//
// If the value is greater than one Measurement Interval there is
// time gap between the end of one Measurement Interval and the
// start of the next Measurement Interval.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/repetition-period"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/repetition-period"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePath) RepetitionPeriod() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_RepetitionPeriodPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_RepetitionPeriodPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "repetition-period"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RepetitionPeriod (leaf): This object specifies a configurable repetition time between
// Measurement Intervals in a Measurement session in hundredths of a
// second.
//
// If the value is less than or equal to one Measurement Interval
// there is no time gap between the end of one Measurement
// Interval and the start of a new Measurement Interval. This is
// the normal usage case.
//
// If the value is greater than one Measurement Interval there is
// time gap between the end of one Measurement Interval and the
// start of the next Measurement Interval.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/repetition-period"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/repetition-period"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny) RepetitionPeriod() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_RepetitionPeriodPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_RepetitionPeriodPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "repetition-period"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePath) State() ygnmi.SingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile] {
	return ygnmi.NewSingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny) State() ygnmi.WildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePath) Config() ygnmi.ConfigQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile] {
	return ygnmi.NewConfigQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathAny) Config() ygnmi.WildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).PmProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:pm-profiles"},
			PostRelPath: []string{"openconfig-oam-cfm:pm-profile"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).PmProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:pm-profiles"},
			PostRelPath: []string{"openconfig-oam-cfm:pm-profile"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile] {
	return ygnmi.NewConfigQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).PmProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:pm-profiles"},
			PostRelPath: []string{"openconfig-oam-cfm:pm-profile"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfilePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).PmProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:pm-profiles"},
			PostRelPath: []string{"openconfig-oam-cfm:pm-profile"},
		},
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayAveragePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-average YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayAveragePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayAveragePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-average YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayAveragePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "frame-delay-two-way-average"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-average"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayAveragePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-average"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState).FrameDelayTwoWayAverage
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "frame-delay-two-way-average"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-average"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayAveragePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-average"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState).FrameDelayTwoWayAverage
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayMaxPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-max YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayMaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayMaxPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-max YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayMaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "frame-delay-two-way-max"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-max"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayMaxPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState).FrameDelayTwoWayMax
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "frame-delay-two-way-max"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-max"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayMaxPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState).FrameDelayTwoWayMax
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayMinPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-min YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayMinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayMinPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-min YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayMinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "frame-delay-two-way-min"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-min"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayMinPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState).FrameDelayTwoWayMin
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "frame-delay-two-way-min"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-min"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayMinPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState).FrameDelayTwoWayMin
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayStddevPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-stddev YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayStddevPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayStddevPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-stddev YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayStddevPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "frame-delay-two-way-stddev"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-stddev"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayStddevPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-stddev"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState).FrameDelayTwoWayStddev
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "frame-delay-two-way-stddev"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-stddev"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayStddevPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-stddev"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState).FrameDelayTwoWayStddev
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementStatePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementStatePath struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementStatePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementStatePathAny struct {
	*ygnmi.NodePath
}

// Counters (container): A collection of delay-measurement-related statistics objects.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "counters"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementStatePath) Counters() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_CountersPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of delay-measurement-related statistics objects.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "counters"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementStatePathAny) Counters() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_CountersPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FrameDelayTwoWayAverage (leaf): This object contains the average two-way frame delay calculated by this
// MEP for this Measurement Interval.
//
// This object is undefined if measurement-type is dm1-transmitted or
// dm1-received.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "frame-delay-two-way-average"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-average"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementStatePath) FrameDelayTwoWayAverage() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayAveragePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayAveragePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-average"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDelayTwoWayAverage (leaf): This object contains the average two-way frame delay calculated by this
// MEP for this Measurement Interval.
//
// This object is undefined if measurement-type is dm1-transmitted or
// dm1-received.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "frame-delay-two-way-average"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-average"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementStatePathAny) FrameDelayTwoWayAverage() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayAveragePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayAveragePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-average"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDelayTwoWayMax (leaf): This object contains the maximum two-way frame delay calculated by this
// MEP for this Measurement Interval.
//
// This object is undefined if measurement-type is dm1DmTx or
// dm1-received.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "frame-delay-two-way-max"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-max"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementStatePath) FrameDelayTwoWayMax() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayMaxPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayMaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDelayTwoWayMax (leaf): This object contains the maximum two-way frame delay calculated by this
// MEP for this Measurement Interval.
//
// This object is undefined if measurement-type is dm1DmTx or
// dm1-received.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "frame-delay-two-way-max"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-max"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementStatePathAny) FrameDelayTwoWayMax() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayMaxPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayMaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDelayTwoWayMin (leaf): This object contains the minimum two-way frame delay calculated by this
// MEP for this Measurement Interval.
//
// This object is undefined if measurement-type is dm1-transmitted
// or dm1-received.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "frame-delay-two-way-min"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-min"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementStatePath) FrameDelayTwoWayMin() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayMinPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayMinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDelayTwoWayMin (leaf): This object contains the minimum two-way frame delay calculated by this
// MEP for this Measurement Interval.
//
// This object is undefined if measurement-type is dm1-transmitted
// or dm1-received.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "frame-delay-two-way-min"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-min"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementStatePathAny) FrameDelayTwoWayMin() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayMinPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayMinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDelayTwoWayStddev (leaf): This object contains the standard deviation of two-way frame delay calculated by this
// MEP for this Measurement Interval.
//
// This object is undefined if measurement-type is dm1DmTx or
// dm1-received.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "frame-delay-two-way-stddev"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-stddev"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementStatePath) FrameDelayTwoWayStddev() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayStddevPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayStddevPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-stddev"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDelayTwoWayStddev (leaf): This object contains the standard deviation of two-way frame delay calculated by this
// MEP for this Measurement Interval.
//
// This object is undefined if measurement-type is dm1DmTx or
// dm1-received.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "frame-delay-two-way-stddev"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/frame-delay-two-way-stddev"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementStatePathAny) FrameDelayTwoWayStddev() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayStddevPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_FrameDelayTwoWayStddevPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-stddev"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementStatePath) State() ygnmi.SingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState] {
	return ygnmi.NewSingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementStatePathAny) State() ygnmi.WildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmmReceivedPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmm-received YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmmReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmmReceivedPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmm-received YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmmReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "dmm-received"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmm-received"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmmReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dmm-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters).DmmReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "dmm-received"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmm-received"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmmReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dmm-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters).DmmReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmmSentPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmm-sent YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmmSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmmSentPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmm-sent YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmmSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "dmm-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmm-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmmSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dmm-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters).DmmSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "dmm-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmm-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmmSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dmm-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters).DmmSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmrReceivedPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmr-received YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmrReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmrReceivedPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmr-received YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmrReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "dmr-received"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmr-received"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmrReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dmr-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters).DmrReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "dmr-received"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmr-received"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmrReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dmr-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters).DmrReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmrSentPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmr-sent YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmrSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmrSentPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmr-sent YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmrSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "dmr-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmr-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmrSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dmr-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters).DmrSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "dmr-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmr-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmrSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dmr-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters).DmrSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_CountersPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_CountersPath struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_CountersPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_CountersPathAny struct {
	*ygnmi.NodePath
}

// DmmReceived (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "dmm-received"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmm-received"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_CountersPath) DmmReceived() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmmReceivedPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmmReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dmm-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DmmReceived (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "dmm-received"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmm-received"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_CountersPathAny) DmmReceived() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmmReceivedPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmmReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dmm-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DmmSent (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "dmm-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmm-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_CountersPath) DmmSent() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmmSentPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmmSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dmm-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DmmSent (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "dmm-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmm-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_CountersPathAny) DmmSent() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmmSentPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmmSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dmm-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DmrReceived (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "dmr-received"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmr-received"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_CountersPath) DmrReceived() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmrReceivedPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmrReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dmr-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DmrReceived (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "dmr-received"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmr-received"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_CountersPathAny) DmrReceived() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmrReceivedPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmrReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dmr-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DmrSent (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "dmr-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmr-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_CountersPath) DmrSent() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmrSentPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmrSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dmr-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DmrSent (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "dmr-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state/counters/dmr-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_CountersPathAny) DmrSent() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmrSentPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters_DmrSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dmr-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_CountersPath) State() ygnmi.SingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_DelayMeasurementState_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndAverageFrameLossRatioPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/far-end-average-frame-loss-ratio YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndAverageFrameLossRatioPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndAverageFrameLossRatioPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/far-end-average-frame-loss-ratio YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndAverageFrameLossRatioPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "far-end-average-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/far-end-average-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndAverageFrameLossRatioPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"far-end-average-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState).FarEndAverageFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "far-end-average-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/far-end-average-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndAverageFrameLossRatioPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"far-end-average-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState).FarEndAverageFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndMaxFrameLossRatioPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/far-end-max-frame-loss-ratio YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndMaxFrameLossRatioPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndMaxFrameLossRatioPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/far-end-max-frame-loss-ratio YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndMaxFrameLossRatioPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "far-end-max-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/far-end-max-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndMaxFrameLossRatioPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"far-end-max-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState).FarEndMaxFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "far-end-max-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/far-end-max-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndMaxFrameLossRatioPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"far-end-max-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState).FarEndMaxFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndMinFrameLossRatioPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/far-end-min-frame-loss-ratio YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndMinFrameLossRatioPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndMinFrameLossRatioPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/far-end-min-frame-loss-ratio YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndMinFrameLossRatioPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "far-end-min-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/far-end-min-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndMinFrameLossRatioPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"far-end-min-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState).FarEndMinFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "far-end-min-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/far-end-min-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndMinFrameLossRatioPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"far-end-min-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState).FarEndMinFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndAverageFrameLossRatioPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/near-end-average-frame-loss-ratio YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndAverageFrameLossRatioPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndAverageFrameLossRatioPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/near-end-average-frame-loss-ratio YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndAverageFrameLossRatioPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "near-end-average-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/near-end-average-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndAverageFrameLossRatioPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"near-end-average-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState).NearEndAverageFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "near-end-average-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/near-end-average-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndAverageFrameLossRatioPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"near-end-average-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState).NearEndAverageFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndMaxFrameLossRatioPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/near-end-max-frame-loss-ratio YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndMaxFrameLossRatioPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndMaxFrameLossRatioPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/near-end-max-frame-loss-ratio YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndMaxFrameLossRatioPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "near-end-max-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/near-end-max-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndMaxFrameLossRatioPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"near-end-max-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState).NearEndMaxFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "near-end-max-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/near-end-max-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndMaxFrameLossRatioPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"near-end-max-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState).NearEndMaxFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndMinFrameLossRatioPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/near-end-min-frame-loss-ratio YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndMinFrameLossRatioPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndMinFrameLossRatioPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/near-end-min-frame-loss-ratio YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndMinFrameLossRatioPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "near-end-min-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/near-end-min-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndMinFrameLossRatioPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"near-end-min-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState).NearEndMinFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "near-end-min-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/near-end-min-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndMinFrameLossRatioPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"near-end-min-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState).NearEndMinFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePath struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePathAny struct {
	*ygnmi.NodePath
}

// Counters (container): A collection of loss-measurement-related statistics objects.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "counters"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePath) Counters() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_CountersPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of loss-measurement-related statistics objects.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "counters"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePathAny) Counters() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_CountersPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FarEndAverageFrameLossRatio (leaf): This object contains the average one-way availability flr in the
// forward direction, from among the set of availability flr
// values calculated by the MEP in this Measurement Interval.
// There is one availability flr value for each 'delta_t' time
// period within the Measurement Interval, as specified in MEF
// 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "far-end-average-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/far-end-average-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePath) FarEndAverageFrameLossRatio() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndAverageFrameLossRatioPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndAverageFrameLossRatioPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"far-end-average-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FarEndAverageFrameLossRatio (leaf): This object contains the average one-way availability flr in the
// forward direction, from among the set of availability flr
// values calculated by the MEP in this Measurement Interval.
// There is one availability flr value for each 'delta_t' time
// period within the Measurement Interval, as specified in MEF
// 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "far-end-average-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/far-end-average-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePathAny) FarEndAverageFrameLossRatio() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndAverageFrameLossRatioPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndAverageFrameLossRatioPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"far-end-average-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FarEndMaxFrameLossRatio (leaf): This object contains the maximum one-way availability flr in the
// forward direction (source --> destination),
// from among the set of availability flr
// values calculated by the MEP in this Measurement Interval.
// There is one availability flr value for each 'delta_t' time
// period within the Measurement Interval, as specified in MEF
// 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "far-end-max-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/far-end-max-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePath) FarEndMaxFrameLossRatio() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndMaxFrameLossRatioPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndMaxFrameLossRatioPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"far-end-max-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FarEndMaxFrameLossRatio (leaf): This object contains the maximum one-way availability flr in the
// forward direction (source --> destination),
// from among the set of availability flr
// values calculated by the MEP in this Measurement Interval.
// There is one availability flr value for each 'delta_t' time
// period within the Measurement Interval, as specified in MEF
// 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "far-end-max-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/far-end-max-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePathAny) FarEndMaxFrameLossRatio() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndMaxFrameLossRatioPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndMaxFrameLossRatioPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"far-end-max-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FarEndMinFrameLossRatio (leaf): This object contains the minimum one-way availability flr in the
// egress direction (source --> destination),
// from among the set of availability flr values
// calculated by the MEP in this Measurement Interval. There is
// one availability flr value for each 'delta_t' time period
// within the Measurement Interval, as specified in MEF 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "far-end-min-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/far-end-min-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePath) FarEndMinFrameLossRatio() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndMinFrameLossRatioPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndMinFrameLossRatioPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"far-end-min-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FarEndMinFrameLossRatio (leaf): This object contains the minimum one-way availability flr in the
// egress direction (source --> destination),
// from among the set of availability flr values
// calculated by the MEP in this Measurement Interval. There is
// one availability flr value for each 'delta_t' time period
// within the Measurement Interval, as specified in MEF 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "far-end-min-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/far-end-min-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePathAny) FarEndMinFrameLossRatio() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndMinFrameLossRatioPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_FarEndMinFrameLossRatioPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"far-end-min-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NearEndAverageFrameLossRatio (leaf): This object contains the average one-way availability flr in the
// backward direction, from among the set of availability flr
// values calculated by the MEP in this Measurement Interval.
// There is one availability flr value for each 'delta_t' time
// period within the Measurement Interval, as specified in MEF
// 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "near-end-average-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/near-end-average-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePath) NearEndAverageFrameLossRatio() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndAverageFrameLossRatioPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndAverageFrameLossRatioPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"near-end-average-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NearEndAverageFrameLossRatio (leaf): This object contains the average one-way availability flr in the
// backward direction, from among the set of availability flr
// values calculated by the MEP in this Measurement Interval.
// There is one availability flr value for each 'delta_t' time
// period within the Measurement Interval, as specified in MEF
// 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "near-end-average-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/near-end-average-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePathAny) NearEndAverageFrameLossRatio() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndAverageFrameLossRatioPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndAverageFrameLossRatioPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"near-end-average-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NearEndMaxFrameLossRatio (leaf): This object contains the maximum one-way availability flr in the
// backward direction, from among the set of availability flr
// values calculated by the MEP in this Measurement Interval.
// There is one availability flr value for each 'delta_t' time
// period within the Measurement Interval, as specified in MEF
// 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
// Service OAM Performance Monitoring YANG Module
// MEF 39
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "near-end-max-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/near-end-max-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePath) NearEndMaxFrameLossRatio() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndMaxFrameLossRatioPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndMaxFrameLossRatioPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"near-end-max-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NearEndMaxFrameLossRatio (leaf): This object contains the maximum one-way availability flr in the
// backward direction, from among the set of availability flr
// values calculated by the MEP in this Measurement Interval.
// There is one availability flr value for each 'delta_t' time
// period within the Measurement Interval, as specified in MEF
// 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
// Service OAM Performance Monitoring YANG Module
// MEF 39
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "near-end-max-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/near-end-max-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePathAny) NearEndMaxFrameLossRatio() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndMaxFrameLossRatioPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndMaxFrameLossRatioPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"near-end-max-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NearEndMinFrameLossRatio (leaf): This object contains the minimum one-way availability flr in the
// backward direction (destination --> source),
// from among the set of availability flr
// values calculated by the MEP in this Measurement Interval.
// There is one availability flr value for each 'delta_t' time
// period within the Measurement Interval, as specified in MEF
// 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "near-end-min-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/near-end-min-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePath) NearEndMinFrameLossRatio() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndMinFrameLossRatioPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndMinFrameLossRatioPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"near-end-min-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NearEndMinFrameLossRatio (leaf): This object contains the minimum one-way availability flr in the
// backward direction (destination --> source),
// from among the set of availability flr
// values calculated by the MEP in this Measurement Interval.
// There is one availability flr value for each 'delta_t' time
// period within the Measurement Interval, as specified in MEF
// 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "near-end-min-frame-loss-ratio"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/near-end-min-frame-loss-ratio"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePathAny) NearEndMinFrameLossRatio() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndMinFrameLossRatioPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_NearEndMinFrameLossRatioPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"near-end-min-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePath) State() ygnmi.SingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState] {
	return ygnmi.NewSingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementStatePathAny) State() ygnmi.WildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlmReceivedPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slm-received YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlmReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlmReceivedPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slm-received YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlmReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "slm-received"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slm-received"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlmReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"slm-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters).SlmReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "slm-received"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slm-received"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlmReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"slm-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters).SlmReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlmSentPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slm-sent YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlmSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlmSentPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slm-sent YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlmSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "slm-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slm-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlmSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"slm-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters).SlmSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "slm-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slm-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlmSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"slm-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters).SlmSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlrReceivedPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slr-received YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlrReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlrReceivedPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slr-received YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlrReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "slr-received"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slr-received"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlrReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"slr-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters).SlrReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "slr-received"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slr-received"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlrReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"slr-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters).SlrReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlrSentPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slr-sent YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlrSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlrSentPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slr-sent YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlrSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "slr-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slr-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlrSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"slr-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters).SlrSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "slr-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slr-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlrSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"slr-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters).SlrSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_CountersPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_CountersPath struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_CountersPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_CountersPathAny struct {
	*ygnmi.NodePath
}

// SlmReceived (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "slm-received"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slm-received"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_CountersPath) SlmReceived() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlmReceivedPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlmReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"slm-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SlmReceived (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "slm-received"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slm-received"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_CountersPathAny) SlmReceived() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlmReceivedPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlmReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"slm-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SlmSent (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "slm-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slm-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_CountersPath) SlmSent() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlmSentPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlmSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"slm-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SlmSent (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "slm-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slm-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_CountersPathAny) SlmSent() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlmSentPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlmSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"slm-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SlrReceived (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "slr-received"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slr-received"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_CountersPath) SlrReceived() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlrReceivedPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlrReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"slr-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SlrReceived (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "slr-received"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slr-received"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_CountersPathAny) SlrReceived() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlrReceivedPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlrReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"slr-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SlrSent (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "slr-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slr-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_CountersPath) SlrSent() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlrSentPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlrSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"slr-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SlrSent (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "slr-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/loss-measurement-state/counters/slr-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_CountersPathAny) SlrSent() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlrSentPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters_SlrSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"slr-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_CountersPath) State() ygnmi.SingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_PmProfile_LossMeasurementState_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi_TransmitOnDefectPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/rdi/state/transmit-on-defect YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi_TransmitOnDefectPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi_TransmitOnDefectPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/rdi/state/transmit-on-defect YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi_TransmitOnDefectPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/transmit-on-defect"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/rdi/state/transmit-on-defect"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi_TransmitOnDefectPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-on-defect"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi).TransmitOnDefect
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/transmit-on-defect"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/rdi/state/transmit-on-defect"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi_TransmitOnDefectPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-on-defect"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi).TransmitOnDefect
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/transmit-on-defect"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/rdi/config/transmit-on-defect"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi_TransmitOnDefectPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "transmit-on-defect"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi).TransmitOnDefect
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/transmit-on-defect"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/rdi/config/transmit-on-defect"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi_TransmitOnDefectPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "transmit-on-defect"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi).TransmitOnDefect
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RdiPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/rdi YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RdiPath struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RdiPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/rdi YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RdiPathAny struct {
	*ygnmi.NodePath
}

// TransmitOnDefect (leaf): Transmit RDI when a defect is detected.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/transmit-on-defect"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/rdi/*/transmit-on-defect"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RdiPath) TransmitOnDefect() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi_TransmitOnDefectPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi_TransmitOnDefectPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "transmit-on-defect"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitOnDefect (leaf): Transmit RDI when a defect is detected.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/transmit-on-defect"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/rdi/*/transmit-on-defect"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RdiPathAny) TransmitOnDefect() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi_TransmitOnDefectPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi_TransmitOnDefectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "transmit-on-defect"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RdiPath) State() ygnmi.SingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi] {
	return ygnmi.NewSingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RdiPathAny) State() ygnmi.WildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RdiPath) Config() ygnmi.ConfigQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi] {
	return ygnmi.NewConfigQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RdiPathAny) Config() ygnmi.WildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_Rdi",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_ConfigErrorsDetectedPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/config-errors-detected YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_ConfigErrorsDetectedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_ConfigErrorsDetectedPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/config-errors-detected YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_ConfigErrorsDetectedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/config-errors-detected"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/config-errors-detected"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_ConfigErrorsDetectedPath) State() ygnmi.SingletonQuery[[]oc.E_OamCfm_ConfigErrorType] {
	return ygnmi.NewSingletonQuery[[]oc.E_OamCfm_ConfigErrorType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "config-errors-detected"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_OamCfm_ConfigErrorType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).ConfigErrorsDetected
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/config-errors-detected"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/config-errors-detected"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_ConfigErrorsDetectedPathAny) State() ygnmi.WildcardQuery[[]oc.E_OamCfm_ConfigErrorType] {
	return ygnmi.NewWildcardQuery[[]oc.E_OamCfm_ConfigErrorType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "config-errors-detected"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_OamCfm_ConfigErrorType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).ConfigErrorsDetected
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_ErrorCcmLastFailurePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/error-ccm-last-failure YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_ErrorCcmLastFailurePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_ErrorCcmLastFailurePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/error-ccm-last-failure YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_ErrorCcmLastFailurePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/error-ccm-last-failure"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/error-ccm-last-failure"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_ErrorCcmLastFailurePath) State() ygnmi.SingletonQuery[oc.Binary] {
	return ygnmi.NewSingletonQuery[oc.Binary](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "error-ccm-last-failure"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).ErrorCcmLastFailure
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/error-ccm-last-failure"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/error-ccm-last-failure"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_ErrorCcmLastFailurePathAny) State() ygnmi.WildcardQuery[oc.Binary] {
	return ygnmi.NewWildcardQuery[oc.Binary](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "error-ccm-last-failure"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).ErrorCcmLastFailure
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_FngStatePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/fng-state YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_FngStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_FngStatePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/fng-state YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_FngStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/fng-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/fng-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_FngStatePath) State() ygnmi.SingletonQuery[oc.E_OamCfm_FngStateType] {
	return ygnmi.NewSingletonQuery[oc.E_OamCfm_FngStateType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fng-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OamCfm_FngStateType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).FngState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/fng-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/fng-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_FngStatePathAny) State() ygnmi.WildcardQuery[oc.E_OamCfm_FngStateType] {
	return ygnmi.NewWildcardQuery[oc.E_OamCfm_FngStateType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fng-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OamCfm_FngStateType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).FngState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_HighestPriorityDefectPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/highest-priority-defect YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_HighestPriorityDefectPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_HighestPriorityDefectPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/highest-priority-defect YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_HighestPriorityDefectPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/highest-priority-defect"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/highest-priority-defect"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_HighestPriorityDefectPath) State() ygnmi.SingletonQuery[oc.E_OamCfm_HighestDefectPriorityType] {
	return ygnmi.NewSingletonQuery[oc.E_OamCfm_HighestDefectPriorityType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "highest-priority-defect"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OamCfm_HighestDefectPriorityType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).HighestPriorityDefect
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/highest-priority-defect"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/highest-priority-defect"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_HighestPriorityDefectPathAny) State() ygnmi.WildcardQuery[oc.E_OamCfm_HighestDefectPriorityType] {
	return ygnmi.NewWildcardQuery[oc.E_OamCfm_HighestDefectPriorityType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "highest-priority-defect"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OamCfm_HighestDefectPriorityType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).HighestPriorityDefect
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_IdPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/id YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_IdPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/id YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/id"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_IdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).Id
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/id"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_IdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).Id
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/config/id"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_IdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).Id
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/config/id"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_IdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).Id
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_InterfaceStatePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/interface-state YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_InterfaceStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_InterfaceStatePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/interface-state YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_InterfaceStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/interface-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/interface-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_InterfaceStatePath) State() ygnmi.SingletonQuery[oc.E_OamCfm_InterfaceStatusType] {
	return ygnmi.NewSingletonQuery[oc.E_OamCfm_InterfaceStatusType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OamCfm_InterfaceStatusType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).InterfaceState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/interface-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/interface-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_InterfaceStatePathAny) State() ygnmi.WildcardQuery[oc.E_OamCfm_InterfaceStatusType] {
	return ygnmi.NewWildcardQuery[oc.E_OamCfm_InterfaceStatusType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OamCfm_InterfaceStatusType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).InterfaceState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MacAddressPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/mac-address YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MacAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MacAddressPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/mac-address YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MacAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/mac-address"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/mac-address"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MacAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/mac-address"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/mac-address"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MacAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/mac-address"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/config/mac-address"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MacAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/mac-address"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/config/mac-address"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MacAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MepDefectsPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/mep-defects YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MepDefectsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MepDefectsPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/mep-defects YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MepDefectsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/mep-defects"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/mep-defects"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MepDefectsPath) State() ygnmi.SingletonQuery[[]oc.E_OamCfm_MepDefectsType] {
	return ygnmi.NewSingletonQuery[[]oc.E_OamCfm_MepDefectsType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mep-defects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_OamCfm_MepDefectsType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).MepDefects
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/mep-defects"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/mep-defects"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MepDefectsPathAny) State() ygnmi.WildcardQuery[[]oc.E_OamCfm_MepDefectsType] {
	return ygnmi.NewWildcardQuery[[]oc.E_OamCfm_MepDefectsType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mep-defects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_OamCfm_MepDefectsType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).MepDefects
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_OperStatePath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/oper-state YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_OperStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_OperStatePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/oper-state YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_OperStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/oper-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/oper-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_OperStatePath) State() ygnmi.SingletonQuery[oc.E_OamCfm_OperationalStateType] {
	return ygnmi.NewSingletonQuery[oc.E_OamCfm_OperationalStateType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OamCfm_OperationalStateType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).OperState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/oper-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/oper-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_OperStatePathAny) State() ygnmi.WildcardQuery[oc.E_OamCfm_OperationalStateType] {
	return ygnmi.NewWildcardQuery[oc.E_OamCfm_OperationalStateType](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_OamCfm_OperationalStateType, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).OperState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_PresentRdiPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/present-rdi YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_PresentRdiPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_PresentRdiPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/present-rdi YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_PresentRdiPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/present-rdi"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/present-rdi"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_PresentRdiPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "present-rdi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).PresentRdi
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/present-rdi"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/present-rdi"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_PresentRdiPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "present-rdi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep).PresentRdi
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPath struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathMap represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathMap struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathMapAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathMapAny struct {
	*ygnmi.NodePath
}

// ConfigErrorsDetected (leaf-list): Vector of enums of config error detected. i.e. [cfm-leak]
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/config-errors-detected"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/config-errors-detected"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPath) ConfigErrorsDetected() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_ConfigErrorsDetectedPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_ConfigErrorsDetectedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "config-errors-detected"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConfigErrorsDetected (leaf-list): Vector of enums of config error detected. i.e. [cfm-leak]
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/config-errors-detected"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/config-errors-detected"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny) ConfigErrorsDetected() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_ConfigErrorsDetectedPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_ConfigErrorsDetectedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "config-errors-detected"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (container): A collection of mep-related statistics objects.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/counters"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/counters"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPath) Counters() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_CountersPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of mep-related statistics objects.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/counters"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/counters"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny) Counters() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_CountersPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ErrorCcmLastFailure (leaf): The last received CCM that triggered a def-error-ccm
//
//	 fault.
//		Defining module:      "openconfig-oam-cfm"
//		Instantiating module: "openconfig-oam"
//		Path from parent:     "state/error-ccm-last-failure"
//		Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/error-ccm-last-failure"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPath) ErrorCcmLastFailure() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_ErrorCcmLastFailurePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_ErrorCcmLastFailurePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "error-ccm-last-failure"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ErrorCcmLastFailure (leaf): The last received CCM that triggered a def-error-ccm
//
//	 fault.
//		Defining module:      "openconfig-oam-cfm"
//		Instantiating module: "openconfig-oam"
//		Path from parent:     "state/error-ccm-last-failure"
//		Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/error-ccm-last-failure"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny) ErrorCcmLastFailure() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_ErrorCcmLastFailurePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_ErrorCcmLastFailurePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "error-ccm-last-failure"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FngState (leaf): The current state of the MEP Fault Notification Generator
// state machine.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/fng-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/fng-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPath) FngState() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_FngStatePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_FngStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fng-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FngState (leaf): The current state of the MEP Fault Notification Generator
// state machine.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/fng-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/fng-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny) FngState() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_FngStatePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_FngStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fng-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HighestPriorityDefect (leaf): The highest priority defect that has been present since
// the MEPs Fault Notification Generator state machine was
// last in the FNG_RESET state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/highest-priority-defect"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/highest-priority-defect"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPath) HighestPriorityDefect() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_HighestPriorityDefectPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_HighestPriorityDefectPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "highest-priority-defect"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HighestPriorityDefect (leaf): The highest priority defect that has been present since
// the MEPs Fault Notification Generator state machine was
// last in the FNG_RESET state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/highest-priority-defect"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/highest-priority-defect"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny) HighestPriorityDefect() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_HighestPriorityDefectPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_HighestPriorityDefectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "highest-priority-defect"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Remote MEP IDs in full mesh.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/*/id"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPath) Id() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_IdPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Remote MEP IDs in full mesh.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/id"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/*/id"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny) Id() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_IdPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceState (leaf): The state of the interface last reported by the local MEP in the TLV.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/interface-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/interface-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPath) InterfaceState() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_InterfaceStatePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_InterfaceStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceState (leaf): The state of the interface last reported by the local MEP in the TLV.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/interface-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/interface-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny) InterfaceState() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_InterfaceStatePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_InterfaceStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacAddress (leaf): Remote MEP IDs in full mesh.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/mac-address"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/*/mac-address"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPath) MacAddress() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MacAddressPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MacAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacAddress (leaf): Remote MEP IDs in full mesh.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/mac-address"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/*/mac-address"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny) MacAddress() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MacAddressPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MacAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MepDefects (leaf-list): Vector of boolean error conditions.
// Multiple defects can be present at the same time.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/mep-defects"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/mep-defects"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPath) MepDefects() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MepDefectsPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MepDefectsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mep-defects"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MepDefects (leaf-list): Vector of boolean error conditions.
// Multiple defects can be present at the same time.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/mep-defects"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/mep-defects"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny) MepDefects() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MepDefectsPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_MepDefectsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mep-defects"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperState (leaf): Operational state of the MEP.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/oper-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/oper-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPath) OperState() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_OperStatePath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_OperStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperState (leaf): Operational state of the MEP.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/oper-state"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/oper-state"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny) OperState() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_OperStatePathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_OperStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PresentRdi (leaf): A boolean value indicating the state of the RDI bit in CCMs
// transmitted by this MEP. present-rdi is true if and only if one or more
// of the variables someRMEPCCMdefect, someMACstatusDefect, errorCCMdefect,
// or xconCCMdefect is true, and if the corresponding priority of that
// variable, from mep-defects above, is greater than or equal to the
// value of the variable lowestAlarmPri.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/present-rdi"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/present-rdi"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPath) PresentRdi() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_PresentRdiPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_PresentRdiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "present-rdi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PresentRdi (leaf): A boolean value indicating the state of the RDI bit in CCMs
// transmitted by this MEP. present-rdi is true if and only if one or more
// of the variables someRMEPCCMdefect, someMACstatusDefect, errorCCMdefect,
// or xconCCMdefect is true, and if the corresponding priority of that
// variable, from mep-defects above, is greater than or equal to the
// value of the variable lowestAlarmPri.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/present-rdi"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/present-rdi"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny) PresentRdi() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_PresentRdiPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_PresentRdiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "present-rdi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPath) State() ygnmi.SingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep] {
	return ygnmi.NewSingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny) State() ygnmi.WildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPath) Config() ygnmi.ConfigQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep] {
	return ygnmi.NewConfigQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathAny) Config() ygnmi.WildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathMap) State() ygnmi.SingletonQuery[map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep] {
	return ygnmi.NewSingletonQuery[map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).RemoteMep
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:remote-meps"},
			PostRelPath: []string{"openconfig-oam-cfm:remote-mep"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathMapAny) State() ygnmi.WildcardQuery[map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep] {
	return ygnmi.NewWildcardQuery[map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).RemoteMep
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:remote-meps"},
			PostRelPath: []string{"openconfig-oam-cfm:remote-mep"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathMap) Config() ygnmi.ConfigQuery[map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep] {
	return ygnmi.NewConfigQuery[map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).RemoteMep
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:remote-meps"},
			PostRelPath: []string{"openconfig-oam-cfm:remote-mep"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMepPathMapAny) Config() ygnmi.WildcardQuery[map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep] {
	return ygnmi.NewWildcardQuery[map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint).RemoteMep
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:remote-meps"},
			PostRelPath: []string{"openconfig-oam-cfm:remote-mep"},
		},
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters_MepCcmSequenceErrorsPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/counters/mep-ccm-sequence-errors YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters_MepCcmSequenceErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters_MepCcmSequenceErrorsPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/counters/mep-ccm-sequence-errors YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters_MepCcmSequenceErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "mep-ccm-sequence-errors"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/counters/mep-ccm-sequence-errors"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters_MepCcmSequenceErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mep-ccm-sequence-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters).MepCcmSequenceErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "mep-ccm-sequence-errors"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/counters/mep-ccm-sequence-errors"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters_MepCcmSequenceErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mep-ccm-sequence-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters).MepCcmSequenceErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters_MepCcmsSentPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/counters/mep-ccms-sent YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters_MepCcmsSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters_MepCcmsSentPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/counters/mep-ccms-sent YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters_MepCcmsSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "mep-ccms-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/counters/mep-ccms-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters_MepCcmsSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mep-ccms-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters).MepCcmsSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "mep-ccms-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/counters/mep-ccms-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters_MepCcmsSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mep-ccms-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters).MepCcmsSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_CountersPath represents the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/counters YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_CountersPath struct {
	*ygnmi.NodePath
}

// Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_CountersPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/counters YANG schema element.
type Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_CountersPathAny struct {
	*ygnmi.NodePath
}

// MepCcmSequenceErrors (leaf): The total number of out-of-sequence CCMs received from
// all remote MEPs.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "mep-ccm-sequence-errors"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/counters/mep-ccm-sequence-errors"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_CountersPath) MepCcmSequenceErrors() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters_MepCcmSequenceErrorsPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters_MepCcmSequenceErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mep-ccm-sequence-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MepCcmSequenceErrors (leaf): The total number of out-of-sequence CCMs received from
// all remote MEPs.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "mep-ccm-sequence-errors"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/counters/mep-ccm-sequence-errors"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_CountersPathAny) MepCcmSequenceErrors() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters_MepCcmSequenceErrorsPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters_MepCcmSequenceErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mep-ccm-sequence-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MepCcmsSent (leaf): Total number of CCMs transmitted by the local MEP
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "mep-ccms-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/counters/mep-ccms-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_CountersPath) MepCcmsSent() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters_MepCcmsSentPath {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters_MepCcmsSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mep-ccms-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MepCcmsSent (leaf): Total number of CCMs transmitted by the local MEP
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "mep-ccms-sent"
//	Path from root:       "/oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state/counters/mep-ccms-sent"
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_CountersPathAny) MepCcmsSent() *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters_MepCcmsSentPathAny {
	ps := &Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters_MepCcmsSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mep-ccms-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_CountersPath) State() ygnmi.SingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters](
		"Oam_Cfm_MaintenanceDomain_MaintenanceAssociation_MepEndpoint_RemoteMep_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_BurstIntervalPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/burst-interval YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_BurstIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_BurstIntervalPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/burst-interval YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_BurstIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/burst-interval"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/burst-interval"
func (n *Oam_Cfm_PerformanceMeasurementProfile_BurstIntervalPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "burst-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).BurstInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/burst-interval"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/burst-interval"
func (n *Oam_Cfm_PerformanceMeasurementProfile_BurstIntervalPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "burst-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).BurstInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/burst-interval"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/burst-interval"
func (n *Oam_Cfm_PerformanceMeasurementProfile_BurstIntervalPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "burst-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).BurstInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/burst-interval"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/burst-interval"
func (n *Oam_Cfm_PerformanceMeasurementProfile_BurstIntervalPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "burst-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).BurstInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_EnablePath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/enable YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_EnablePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/enable YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/enable"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/enable"
func (n *Oam_Cfm_PerformanceMeasurementProfile_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/enable"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/enable"
func (n *Oam_Cfm_PerformanceMeasurementProfile_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/enable"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/enable"
func (n *Oam_Cfm_PerformanceMeasurementProfile_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/enable"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/enable"
func (n *Oam_Cfm_PerformanceMeasurementProfile_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_FrameSizePath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/frame-size YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_FrameSizePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_FrameSizePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/frame-size YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_FrameSizePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/frame-size"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/frame-size"
func (n *Oam_Cfm_PerformanceMeasurementProfile_FrameSizePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "frame-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).FrameSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/frame-size"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/frame-size"
func (n *Oam_Cfm_PerformanceMeasurementProfile_FrameSizePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "frame-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).FrameSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/frame-size"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/frame-size"
func (n *Oam_Cfm_PerformanceMeasurementProfile_FrameSizePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "frame-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).FrameSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/frame-size"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/frame-size"
func (n *Oam_Cfm_PerformanceMeasurementProfile_FrameSizePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "frame-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).FrameSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_IntervalsArchivedPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/intervals-archived YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_IntervalsArchivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_IntervalsArchivedPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/intervals-archived YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_IntervalsArchivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/intervals-archived"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/intervals-archived"
func (n *Oam_Cfm_PerformanceMeasurementProfile_IntervalsArchivedPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "intervals-archived"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).IntervalsArchived
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/intervals-archived"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/intervals-archived"
func (n *Oam_Cfm_PerformanceMeasurementProfile_IntervalsArchivedPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "intervals-archived"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).IntervalsArchived
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/intervals-archived"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/intervals-archived"
func (n *Oam_Cfm_PerformanceMeasurementProfile_IntervalsArchivedPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "intervals-archived"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).IntervalsArchived
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/intervals-archived"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/intervals-archived"
func (n *Oam_Cfm_PerformanceMeasurementProfile_IntervalsArchivedPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "intervals-archived"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).IntervalsArchived
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_MeasurementIntervalPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/measurement-interval YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_MeasurementIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_MeasurementIntervalPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/measurement-interval YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_MeasurementIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/measurement-interval"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/measurement-interval"
func (n *Oam_Cfm_PerformanceMeasurementProfile_MeasurementIntervalPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "measurement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).MeasurementInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/measurement-interval"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/measurement-interval"
func (n *Oam_Cfm_PerformanceMeasurementProfile_MeasurementIntervalPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "measurement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).MeasurementInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/measurement-interval"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/measurement-interval"
func (n *Oam_Cfm_PerformanceMeasurementProfile_MeasurementIntervalPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "measurement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).MeasurementInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/measurement-interval"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/measurement-interval"
func (n *Oam_Cfm_PerformanceMeasurementProfile_MeasurementIntervalPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "measurement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).MeasurementInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_MeasurementTypePath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/measurement-type YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_MeasurementTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_MeasurementTypePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/measurement-type YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_MeasurementTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/measurement-type"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/measurement-type"
func (n *Oam_Cfm_PerformanceMeasurementProfile_MeasurementTypePath) State() ygnmi.SingletonQuery[oc.E_PmProfile_MeasurementType] {
	return ygnmi.NewSingletonQuery[oc.E_PmProfile_MeasurementType](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "measurement-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PmProfile_MeasurementType, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).MeasurementType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/measurement-type"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/measurement-type"
func (n *Oam_Cfm_PerformanceMeasurementProfile_MeasurementTypePathAny) State() ygnmi.WildcardQuery[oc.E_PmProfile_MeasurementType] {
	return ygnmi.NewWildcardQuery[oc.E_PmProfile_MeasurementType](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "measurement-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PmProfile_MeasurementType, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).MeasurementType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/measurement-type"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/measurement-type"
func (n *Oam_Cfm_PerformanceMeasurementProfile_MeasurementTypePath) Config() ygnmi.ConfigQuery[oc.E_PmProfile_MeasurementType] {
	return ygnmi.NewConfigQuery[oc.E_PmProfile_MeasurementType](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "measurement-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PmProfile_MeasurementType, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).MeasurementType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/measurement-type"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/measurement-type"
func (n *Oam_Cfm_PerformanceMeasurementProfile_MeasurementTypePathAny) Config() ygnmi.WildcardQuery[oc.E_PmProfile_MeasurementType] {
	return ygnmi.NewWildcardQuery[oc.E_PmProfile_MeasurementType](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "measurement-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PmProfile_MeasurementType, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).MeasurementType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_PacketPerBurstPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/packet-per-burst YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_PacketPerBurstPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_PacketPerBurstPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/packet-per-burst YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_PacketPerBurstPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/packet-per-burst"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/packet-per-burst"
func (n *Oam_Cfm_PerformanceMeasurementProfile_PacketPerBurstPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "packet-per-burst"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).PacketPerBurst
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/packet-per-burst"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/packet-per-burst"
func (n *Oam_Cfm_PerformanceMeasurementProfile_PacketPerBurstPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "packet-per-burst"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).PacketPerBurst
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/packet-per-burst"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/packet-per-burst"
func (n *Oam_Cfm_PerformanceMeasurementProfile_PacketPerBurstPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "packet-per-burst"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).PacketPerBurst
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/packet-per-burst"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/packet-per-burst"
func (n *Oam_Cfm_PerformanceMeasurementProfile_PacketPerBurstPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "packet-per-burst"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).PacketPerBurst
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_PacketsPerMeaurementPeriodPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/packets-per-meaurement-period YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_PacketsPerMeaurementPeriodPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_PacketsPerMeaurementPeriodPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/packets-per-meaurement-period YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_PacketsPerMeaurementPeriodPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/packets-per-meaurement-period"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/packets-per-meaurement-period"
func (n *Oam_Cfm_PerformanceMeasurementProfile_PacketsPerMeaurementPeriodPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "packets-per-meaurement-period"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).PacketsPerMeaurementPeriod
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/packets-per-meaurement-period"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/packets-per-meaurement-period"
func (n *Oam_Cfm_PerformanceMeasurementProfile_PacketsPerMeaurementPeriodPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "packets-per-meaurement-period"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).PacketsPerMeaurementPeriod
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/packets-per-meaurement-period"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/packets-per-meaurement-period"
func (n *Oam_Cfm_PerformanceMeasurementProfile_PacketsPerMeaurementPeriodPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "packets-per-meaurement-period"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).PacketsPerMeaurementPeriod
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/packets-per-meaurement-period"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/packets-per-meaurement-period"
func (n *Oam_Cfm_PerformanceMeasurementProfile_PacketsPerMeaurementPeriodPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "packets-per-meaurement-period"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).PacketsPerMeaurementPeriod
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_ProfileNamePath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/profile-name YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_ProfileNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_ProfileNamePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/profile-name YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_ProfileNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/profile-name"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/profile-name"
func (n *Oam_Cfm_PerformanceMeasurementProfile_ProfileNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "profile-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).ProfileName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/profile-name"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/profile-name"
func (n *Oam_Cfm_PerformanceMeasurementProfile_ProfileNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "profile-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).ProfileName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/profile-name"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/profile-name"
func (n *Oam_Cfm_PerformanceMeasurementProfile_ProfileNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "profile-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).ProfileName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/profile-name"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/profile-name"
func (n *Oam_Cfm_PerformanceMeasurementProfile_ProfileNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "profile-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).ProfileName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_ProtocolTypePath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/protocol-type YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_ProtocolTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_ProtocolTypePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/protocol-type YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_ProtocolTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/protocol-type"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/protocol-type"
func (n *Oam_Cfm_PerformanceMeasurementProfile_ProtocolTypePath) State() ygnmi.SingletonQuery[oc.E_PmProfile_ProtocolType] {
	return ygnmi.NewSingletonQuery[oc.E_PmProfile_ProtocolType](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PmProfile_ProtocolType, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).ProtocolType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/protocol-type"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/protocol-type"
func (n *Oam_Cfm_PerformanceMeasurementProfile_ProtocolTypePathAny) State() ygnmi.WildcardQuery[oc.E_PmProfile_ProtocolType] {
	return ygnmi.NewWildcardQuery[oc.E_PmProfile_ProtocolType](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PmProfile_ProtocolType, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).ProtocolType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/protocol-type"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/protocol-type"
func (n *Oam_Cfm_PerformanceMeasurementProfile_ProtocolTypePath) Config() ygnmi.ConfigQuery[oc.E_PmProfile_ProtocolType] {
	return ygnmi.NewConfigQuery[oc.E_PmProfile_ProtocolType](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PmProfile_ProtocolType, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).ProtocolType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/protocol-type"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/protocol-type"
func (n *Oam_Cfm_PerformanceMeasurementProfile_ProtocolTypePathAny) Config() ygnmi.WildcardQuery[oc.E_PmProfile_ProtocolType] {
	return ygnmi.NewWildcardQuery[oc.E_PmProfile_ProtocolType](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PmProfile_ProtocolType, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).ProtocolType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_RepetitionPeriodPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/repetition-period YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_RepetitionPeriodPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_RepetitionPeriodPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/repetition-period YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_RepetitionPeriodPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/repetition-period"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/repetition-period"
func (n *Oam_Cfm_PerformanceMeasurementProfile_RepetitionPeriodPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "repetition-period"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).RepetitionPeriod
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "state/repetition-period"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/repetition-period"
func (n *Oam_Cfm_PerformanceMeasurementProfile_RepetitionPeriodPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "repetition-period"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).RepetitionPeriod
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/repetition-period"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/repetition-period"
func (n *Oam_Cfm_PerformanceMeasurementProfile_RepetitionPeriodPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "repetition-period"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).RepetitionPeriod
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "config/repetition-period"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config/repetition-period"
func (n *Oam_Cfm_PerformanceMeasurementProfile_RepetitionPeriodPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "repetition-period"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile).RepetitionPeriod
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm_PerformanceMeasurementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfilePath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfilePath struct {
	*ygnmi.NodePath
}

// Oam_Cfm_PerformanceMeasurementProfilePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfilePathAny struct {
	*ygnmi.NodePath
}

// Oam_Cfm_PerformanceMeasurementProfilePathMap represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfilePathMap struct {
	*ygnmi.NodePath
}

// Oam_Cfm_PerformanceMeasurementProfilePathMapAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfilePathMapAny struct {
	*ygnmi.NodePath
}

// BurstInterval (leaf): Interval between bursts within a measurement interval.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/burst-interval"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/burst-interval"
func (n *Oam_Cfm_PerformanceMeasurementProfilePath) BurstInterval() *Oam_Cfm_PerformanceMeasurementProfile_BurstIntervalPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_BurstIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "burst-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BurstInterval (leaf): Interval between bursts within a measurement interval.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/burst-interval"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/burst-interval"
func (n *Oam_Cfm_PerformanceMeasurementProfilePathAny) BurstInterval() *Oam_Cfm_PerformanceMeasurementProfile_BurstIntervalPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_BurstIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "burst-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DelayMeasurementState (container): Delay measurement state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/delay-measurement-state"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state"
func (n *Oam_Cfm_PerformanceMeasurementProfilePath) DelayMeasurementState() *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementStatePath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "delay-measurement-state"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DelayMeasurementState (container): Delay measurement state.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/delay-measurement-state"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state"
func (n *Oam_Cfm_PerformanceMeasurementProfilePathAny) DelayMeasurementState() *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementStatePathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "delay-measurement-state"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enable (leaf): Enable or disable measurement.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/enable"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/enable"
func (n *Oam_Cfm_PerformanceMeasurementProfilePath) Enable() *Oam_Cfm_PerformanceMeasurementProfile_EnablePath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enable or disable measurement.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/enable"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/enable"
func (n *Oam_Cfm_PerformanceMeasurementProfilePathAny) Enable() *Oam_Cfm_PerformanceMeasurementProfile_EnablePathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameSize (leaf): Probe Frame size for measurement.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/frame-size"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/frame-size"
func (n *Oam_Cfm_PerformanceMeasurementProfilePath) FrameSize() *Oam_Cfm_PerformanceMeasurementProfile_FrameSizePath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_FrameSizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "frame-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameSize (leaf): Probe Frame size for measurement.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/frame-size"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/frame-size"
func (n *Oam_Cfm_PerformanceMeasurementProfilePathAny) FrameSize() *Oam_Cfm_PerformanceMeasurementProfile_FrameSizePathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_FrameSizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "frame-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IntervalsArchived (leaf): This object specifies the number of completed measurement intervals to
// store in the history statistic table.
//
// At least 32 completed measurement intervals are to be
// stored. 96 measurement intervals are recommended to be stored.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/intervals-archived"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/intervals-archived"
func (n *Oam_Cfm_PerformanceMeasurementProfilePath) IntervalsArchived() *Oam_Cfm_PerformanceMeasurementProfile_IntervalsArchivedPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_IntervalsArchivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "intervals-archived"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IntervalsArchived (leaf): This object specifies the number of completed measurement intervals to
// store in the history statistic table.
//
// At least 32 completed measurement intervals are to be
// stored. 96 measurement intervals are recommended to be stored.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/intervals-archived"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/intervals-archived"
func (n *Oam_Cfm_PerformanceMeasurementProfilePathAny) IntervalsArchived() *Oam_Cfm_PerformanceMeasurementProfile_IntervalsArchivedPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_IntervalsArchivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "intervals-archived"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LossMeasurementState (container): Loss measurement state container.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/loss-measurement-state"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state"
func (n *Oam_Cfm_PerformanceMeasurementProfilePath) LossMeasurementState() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loss-measurement-state"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LossMeasurementState (container): Loss measurement state container.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "state/loss-measurement-state"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state"
func (n *Oam_Cfm_PerformanceMeasurementProfilePathAny) LossMeasurementState() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loss-measurement-state"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MeasurementInterval (leaf): This object specifies the Measurement Interval for FLR statistics, in
// minutes.
// A Measurement Interval of 15 minutes needs to be supported,
// other intervals may be supported.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/measurement-interval"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/measurement-interval"
func (n *Oam_Cfm_PerformanceMeasurementProfilePath) MeasurementInterval() *Oam_Cfm_PerformanceMeasurementProfile_MeasurementIntervalPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_MeasurementIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "measurement-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MeasurementInterval (leaf): This object specifies the Measurement Interval for FLR statistics, in
// minutes.
// A Measurement Interval of 15 minutes needs to be supported,
// other intervals may be supported.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/measurement-interval"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/measurement-interval"
func (n *Oam_Cfm_PerformanceMeasurementProfilePathAny) MeasurementInterval() *Oam_Cfm_PerformanceMeasurementProfile_MeasurementIntervalPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_MeasurementIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "measurement-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MeasurementType (leaf): This object specifies what type of Performance Measurement will be
// performed.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/measurement-type"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/measurement-type"
func (n *Oam_Cfm_PerformanceMeasurementProfilePath) MeasurementType() *Oam_Cfm_PerformanceMeasurementProfile_MeasurementTypePath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_MeasurementTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "measurement-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MeasurementType (leaf): This object specifies what type of Performance Measurement will be
// performed.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/measurement-type"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/measurement-type"
func (n *Oam_Cfm_PerformanceMeasurementProfilePathAny) MeasurementType() *Oam_Cfm_PerformanceMeasurementProfile_MeasurementTypePathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_MeasurementTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "measurement-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketPerBurst (leaf): if burst enabled. The leaf defines the number of packet per burst of probes.
// packets-per-measurement-period / burst-interval
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/packet-per-burst"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/packet-per-burst"
func (n *Oam_Cfm_PerformanceMeasurementProfilePath) PacketPerBurst() *Oam_Cfm_PerformanceMeasurementProfile_PacketPerBurstPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_PacketPerBurstPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "packet-per-burst"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketPerBurst (leaf): if burst enabled. The leaf defines the number of packet per burst of probes.
// packets-per-measurement-period / burst-interval
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/packet-per-burst"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/packet-per-burst"
func (n *Oam_Cfm_PerformanceMeasurementProfilePathAny) PacketPerBurst() *Oam_Cfm_PerformanceMeasurementProfile_PacketPerBurstPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_PacketPerBurstPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "packet-per-burst"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsPerMeaurementPeriod (leaf): Number of probe packets to send within a measurement interval.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/packets-per-meaurement-period"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/packets-per-meaurement-period"
func (n *Oam_Cfm_PerformanceMeasurementProfilePath) PacketsPerMeaurementPeriod() *Oam_Cfm_PerformanceMeasurementProfile_PacketsPerMeaurementPeriodPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_PacketsPerMeaurementPeriodPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "packets-per-meaurement-period"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsPerMeaurementPeriod (leaf): Number of probe packets to send within a measurement interval.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/packets-per-meaurement-period"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/packets-per-meaurement-period"
func (n *Oam_Cfm_PerformanceMeasurementProfilePathAny) PacketsPerMeaurementPeriod() *Oam_Cfm_PerformanceMeasurementProfile_PacketsPerMeaurementPeriodPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_PacketsPerMeaurementPeriodPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "packets-per-meaurement-period"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProfileName (leaf): Name of the measurement profile.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/profile-name"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/profile-name"
func (n *Oam_Cfm_PerformanceMeasurementProfilePath) ProfileName() *Oam_Cfm_PerformanceMeasurementProfile_ProfileNamePath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_ProfileNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "profile-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProfileName (leaf): Name of the measurement profile.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/profile-name"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/profile-name"
func (n *Oam_Cfm_PerformanceMeasurementProfilePathAny) ProfileName() *Oam_Cfm_PerformanceMeasurementProfile_ProfileNamePathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_ProfileNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "profile-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProtocolType (leaf): protocol type.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/protocol-type"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/protocol-type"
func (n *Oam_Cfm_PerformanceMeasurementProfilePath) ProtocolType() *Oam_Cfm_PerformanceMeasurementProfile_ProtocolTypePath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_ProtocolTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProtocolType (leaf): protocol type.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/protocol-type"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/protocol-type"
func (n *Oam_Cfm_PerformanceMeasurementProfilePathAny) ProtocolType() *Oam_Cfm_PerformanceMeasurementProfile_ProtocolTypePathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_ProtocolTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RepetitionPeriod (leaf): This object specifies a configurable repetition time between
// Measurement Intervals in a Measurement session in hundredths of a
// second.
//
// If the value is less than or equal to one Measurement Interval
// there is no time gap between the end of one Measurement
// Interval and the start of a new Measurement Interval. This is
// the normal usage case.
//
// If the value is greater than one Measurement Interval there is
// time gap between the end of one Measurement Interval and the
// start of the next Measurement Interval.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/repetition-period"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/repetition-period"
func (n *Oam_Cfm_PerformanceMeasurementProfilePath) RepetitionPeriod() *Oam_Cfm_PerformanceMeasurementProfile_RepetitionPeriodPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_RepetitionPeriodPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "repetition-period"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RepetitionPeriod (leaf): This object specifies a configurable repetition time between
// Measurement Intervals in a Measurement session in hundredths of a
// second.
//
// If the value is less than or equal to one Measurement Interval
// there is no time gap between the end of one Measurement
// Interval and the start of a new Measurement Interval. This is
// the normal usage case.
//
// If the value is greater than one Measurement Interval there is
// time gap between the end of one Measurement Interval and the
// start of the next Measurement Interval.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "*/repetition-period"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/*/repetition-period"
func (n *Oam_Cfm_PerformanceMeasurementProfilePathAny) RepetitionPeriod() *Oam_Cfm_PerformanceMeasurementProfile_RepetitionPeriodPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_RepetitionPeriodPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "repetition-period"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_PerformanceMeasurementProfilePath) State() ygnmi.SingletonQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile] {
	return ygnmi.NewSingletonQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_PerformanceMeasurementProfilePathAny) State() ygnmi.WildcardQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile](
		"Oam_Cfm_PerformanceMeasurementProfile",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_PerformanceMeasurementProfilePath) Config() ygnmi.ConfigQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile] {
	return ygnmi.NewConfigQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_PerformanceMeasurementProfilePathAny) Config() ygnmi.WildcardQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile](
		"Oam_Cfm_PerformanceMeasurementProfile",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_PerformanceMeasurementProfilePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Oam_Cfm_PerformanceMeasurementProfile] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Oam_Cfm_PerformanceMeasurementProfile](
		"Oam_Cfm",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Oam_Cfm_PerformanceMeasurementProfile, bool) {
			ret := gs.(*oc.Oam_Cfm).PerformanceMeasurementProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:performance-measurement-profiles-global"},
			PostRelPath: []string{"openconfig-oam-cfm:performance-measurement-profile"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_PerformanceMeasurementProfilePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Oam_Cfm_PerformanceMeasurementProfile] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Oam_Cfm_PerformanceMeasurementProfile](
		"Oam_Cfm",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Oam_Cfm_PerformanceMeasurementProfile, bool) {
			ret := gs.(*oc.Oam_Cfm).PerformanceMeasurementProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:performance-measurement-profiles-global"},
			PostRelPath: []string{"openconfig-oam-cfm:performance-measurement-profile"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_PerformanceMeasurementProfilePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Oam_Cfm_PerformanceMeasurementProfile] {
	return ygnmi.NewConfigQuery[map[string]*oc.Oam_Cfm_PerformanceMeasurementProfile](
		"Oam_Cfm",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Oam_Cfm_PerformanceMeasurementProfile, bool) {
			ret := gs.(*oc.Oam_Cfm).PerformanceMeasurementProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:performance-measurement-profiles-global"},
			PostRelPath: []string{"openconfig-oam-cfm:performance-measurement-profile"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_PerformanceMeasurementProfilePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Oam_Cfm_PerformanceMeasurementProfile] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Oam_Cfm_PerformanceMeasurementProfile](
		"Oam_Cfm",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Oam_Cfm_PerformanceMeasurementProfile, bool) {
			ret := gs.(*oc.Oam_Cfm).PerformanceMeasurementProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Oam_Cfm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-oam-cfm:performance-measurement-profiles-global"},
			PostRelPath: []string{"openconfig-oam-cfm:performance-measurement-profile"},
		},
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayAveragePath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-average YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayAveragePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayAveragePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-average YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayAveragePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "frame-delay-two-way-average"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-average"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayAveragePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-average"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState).FrameDelayTwoWayAverage
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "frame-delay-two-way-average"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-average"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayAveragePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-average"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState).FrameDelayTwoWayAverage
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayMaxPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-max YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayMaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayMaxPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-max YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayMaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "frame-delay-two-way-max"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-max"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayMaxPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState).FrameDelayTwoWayMax
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "frame-delay-two-way-max"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-max"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayMaxPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState).FrameDelayTwoWayMax
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayMinPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-min YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayMinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayMinPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-min YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayMinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "frame-delay-two-way-min"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-min"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayMinPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState).FrameDelayTwoWayMin
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "frame-delay-two-way-min"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-min"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayMinPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState).FrameDelayTwoWayMin
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayStddevPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-stddev YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayStddevPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayStddevPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-stddev YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayStddevPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "frame-delay-two-way-stddev"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-stddev"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayStddevPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-stddev"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState).FrameDelayTwoWayStddev
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "frame-delay-two-way-stddev"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-stddev"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayStddevPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-stddev"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState).FrameDelayTwoWayStddev
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementStatePath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementStatePath struct {
	*ygnmi.NodePath
}

// Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementStatePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementStatePathAny struct {
	*ygnmi.NodePath
}

// Counters (container): A collection of delay-measurement-related statistics objects.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "counters"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementStatePath) Counters() *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_CountersPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of delay-measurement-related statistics objects.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "counters"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementStatePathAny) Counters() *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_CountersPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FrameDelayTwoWayAverage (leaf): This object contains the average two-way frame delay calculated by this
// MEP for this Measurement Interval.
//
// This object is undefined if measurement-type is dm1-transmitted or
// dm1-received.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "frame-delay-two-way-average"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-average"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementStatePath) FrameDelayTwoWayAverage() *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayAveragePath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayAveragePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-average"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDelayTwoWayAverage (leaf): This object contains the average two-way frame delay calculated by this
// MEP for this Measurement Interval.
//
// This object is undefined if measurement-type is dm1-transmitted or
// dm1-received.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "frame-delay-two-way-average"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-average"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementStatePathAny) FrameDelayTwoWayAverage() *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayAveragePathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayAveragePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-average"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDelayTwoWayMax (leaf): This object contains the maximum two-way frame delay calculated by this
// MEP for this Measurement Interval.
//
// This object is undefined if measurement-type is dm1DmTx or
// dm1-received.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "frame-delay-two-way-max"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-max"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementStatePath) FrameDelayTwoWayMax() *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayMaxPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayMaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDelayTwoWayMax (leaf): This object contains the maximum two-way frame delay calculated by this
// MEP for this Measurement Interval.
//
// This object is undefined if measurement-type is dm1DmTx or
// dm1-received.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "frame-delay-two-way-max"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-max"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementStatePathAny) FrameDelayTwoWayMax() *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayMaxPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayMaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDelayTwoWayMin (leaf): This object contains the minimum two-way frame delay calculated by this
// MEP for this Measurement Interval.
//
// This object is undefined if measurement-type is dm1-transmitted
// or dm1-received.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "frame-delay-two-way-min"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-min"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementStatePath) FrameDelayTwoWayMin() *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayMinPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayMinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDelayTwoWayMin (leaf): This object contains the minimum two-way frame delay calculated by this
// MEP for this Measurement Interval.
//
// This object is undefined if measurement-type is dm1-transmitted
// or dm1-received.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "frame-delay-two-way-min"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-min"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementStatePathAny) FrameDelayTwoWayMin() *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayMinPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayMinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDelayTwoWayStddev (leaf): This object contains the standard deviation of two-way frame delay calculated by this
// MEP for this Measurement Interval.
//
// This object is undefined if measurement-type is dm1DmTx or
// dm1-received.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "frame-delay-two-way-stddev"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-stddev"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementStatePath) FrameDelayTwoWayStddev() *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayStddevPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayStddevPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-stddev"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDelayTwoWayStddev (leaf): This object contains the standard deviation of two-way frame delay calculated by this
// MEP for this Measurement Interval.
//
// This object is undefined if measurement-type is dm1DmTx or
// dm1-received.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "frame-delay-two-way-stddev"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/frame-delay-two-way-stddev"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementStatePathAny) FrameDelayTwoWayStddev() *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayStddevPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_FrameDelayTwoWayStddevPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-delay-two-way-stddev"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementStatePath) State() ygnmi.SingletonQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState] {
	return ygnmi.NewSingletonQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState](
		"Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementStatePathAny) State() ygnmi.WildcardQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState](
		"Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmmReceivedPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmm-received YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmmReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmmReceivedPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmm-received YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmmReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "dmm-received"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmm-received"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmmReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dmm-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters).DmmReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "dmm-received"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmm-received"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmmReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dmm-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters).DmmReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmmSentPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmm-sent YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmmSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmmSentPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmm-sent YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmmSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "dmm-sent"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmm-sent"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmmSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dmm-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters).DmmSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "dmm-sent"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmm-sent"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmmSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dmm-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters).DmmSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmrReceivedPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmr-received YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmrReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmrReceivedPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmr-received YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmrReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "dmr-received"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmr-received"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmrReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dmr-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters).DmrReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "dmr-received"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmr-received"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmrReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dmr-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters).DmrReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmrSentPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmr-sent YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmrSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmrSentPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmr-sent YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmrSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "dmr-sent"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmr-sent"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmrSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dmr-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters).DmrSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "dmr-sent"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmr-sent"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmrSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dmr-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters).DmrSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_CountersPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_CountersPath struct {
	*ygnmi.NodePath
}

// Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_CountersPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_CountersPathAny struct {
	*ygnmi.NodePath
}

// DmmReceived (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "dmm-received"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmm-received"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_CountersPath) DmmReceived() *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmmReceivedPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmmReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dmm-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DmmReceived (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "dmm-received"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmm-received"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_CountersPathAny) DmmReceived() *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmmReceivedPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmmReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dmm-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DmmSent (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "dmm-sent"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmm-sent"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_CountersPath) DmmSent() *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmmSentPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmmSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dmm-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DmmSent (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "dmm-sent"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmm-sent"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_CountersPathAny) DmmSent() *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmmSentPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmmSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dmm-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DmrReceived (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "dmr-received"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmr-received"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_CountersPath) DmrReceived() *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmrReceivedPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmrReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dmr-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DmrReceived (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "dmr-received"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmr-received"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_CountersPathAny) DmrReceived() *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmrReceivedPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmrReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dmr-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DmrSent (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "dmr-sent"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmr-sent"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_CountersPath) DmrSent() *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmrSentPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmrSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dmr-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DmrSent (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "dmr-sent"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/delay-measurement-state/counters/dmr-sent"
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_CountersPathAny) DmrSent() *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmrSentPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters_DmrSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dmr-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_CountersPath) State() ygnmi.SingletonQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters](
		"Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters](
		"Oam_Cfm_PerformanceMeasurementProfile_DelayMeasurementState_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndAverageFrameLossRatioPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/far-end-average-frame-loss-ratio YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndAverageFrameLossRatioPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndAverageFrameLossRatioPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/far-end-average-frame-loss-ratio YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndAverageFrameLossRatioPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "far-end-average-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/far-end-average-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndAverageFrameLossRatioPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"far-end-average-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState).FarEndAverageFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "far-end-average-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/far-end-average-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndAverageFrameLossRatioPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"far-end-average-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState).FarEndAverageFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndMaxFrameLossRatioPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/far-end-max-frame-loss-ratio YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndMaxFrameLossRatioPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndMaxFrameLossRatioPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/far-end-max-frame-loss-ratio YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndMaxFrameLossRatioPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "far-end-max-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/far-end-max-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndMaxFrameLossRatioPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"far-end-max-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState).FarEndMaxFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "far-end-max-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/far-end-max-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndMaxFrameLossRatioPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"far-end-max-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState).FarEndMaxFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndMinFrameLossRatioPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/far-end-min-frame-loss-ratio YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndMinFrameLossRatioPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndMinFrameLossRatioPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/far-end-min-frame-loss-ratio YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndMinFrameLossRatioPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "far-end-min-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/far-end-min-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndMinFrameLossRatioPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"far-end-min-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState).FarEndMinFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "far-end-min-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/far-end-min-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndMinFrameLossRatioPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"far-end-min-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState).FarEndMinFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndAverageFrameLossRatioPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/near-end-average-frame-loss-ratio YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndAverageFrameLossRatioPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndAverageFrameLossRatioPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/near-end-average-frame-loss-ratio YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndAverageFrameLossRatioPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "near-end-average-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/near-end-average-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndAverageFrameLossRatioPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"near-end-average-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState).NearEndAverageFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "near-end-average-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/near-end-average-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndAverageFrameLossRatioPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"near-end-average-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState).NearEndAverageFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndMaxFrameLossRatioPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/near-end-max-frame-loss-ratio YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndMaxFrameLossRatioPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndMaxFrameLossRatioPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/near-end-max-frame-loss-ratio YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndMaxFrameLossRatioPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "near-end-max-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/near-end-max-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndMaxFrameLossRatioPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"near-end-max-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState).NearEndMaxFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "near-end-max-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/near-end-max-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndMaxFrameLossRatioPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"near-end-max-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState).NearEndMaxFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndMinFrameLossRatioPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/near-end-min-frame-loss-ratio YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndMinFrameLossRatioPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndMinFrameLossRatioPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/near-end-min-frame-loss-ratio YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndMinFrameLossRatioPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "near-end-min-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/near-end-min-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndMinFrameLossRatioPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"near-end-min-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState).NearEndMinFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "near-end-min-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/near-end-min-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndMinFrameLossRatioPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"near-end-min-frame-loss-ratio"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState).NearEndMinFrameLossRatio
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePath struct {
	*ygnmi.NodePath
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePathAny struct {
	*ygnmi.NodePath
}

// Counters (container): A collection of loss-measurement-related statistics objects.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "counters"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePath) Counters() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_CountersPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of loss-measurement-related statistics objects.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "counters"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePathAny) Counters() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_CountersPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FarEndAverageFrameLossRatio (leaf): This object contains the average one-way availability flr in the
// forward direction, from among the set of availability flr
// values calculated by the MEP in this Measurement Interval.
// There is one availability flr value for each 'delta_t' time
// period within the Measurement Interval, as specified in MEF
// 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "far-end-average-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/far-end-average-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePath) FarEndAverageFrameLossRatio() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndAverageFrameLossRatioPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndAverageFrameLossRatioPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"far-end-average-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FarEndAverageFrameLossRatio (leaf): This object contains the average one-way availability flr in the
// forward direction, from among the set of availability flr
// values calculated by the MEP in this Measurement Interval.
// There is one availability flr value for each 'delta_t' time
// period within the Measurement Interval, as specified in MEF
// 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "far-end-average-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/far-end-average-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePathAny) FarEndAverageFrameLossRatio() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndAverageFrameLossRatioPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndAverageFrameLossRatioPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"far-end-average-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FarEndMaxFrameLossRatio (leaf): This object contains the maximum one-way availability flr in the
// forward direction (source --> destination),
// from among the set of availability flr
// values calculated by the MEP in this Measurement Interval.
// There is one availability flr value for each 'delta_t' time
// period within the Measurement Interval, as specified in MEF
// 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "far-end-max-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/far-end-max-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePath) FarEndMaxFrameLossRatio() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndMaxFrameLossRatioPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndMaxFrameLossRatioPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"far-end-max-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FarEndMaxFrameLossRatio (leaf): This object contains the maximum one-way availability flr in the
// forward direction (source --> destination),
// from among the set of availability flr
// values calculated by the MEP in this Measurement Interval.
// There is one availability flr value for each 'delta_t' time
// period within the Measurement Interval, as specified in MEF
// 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "far-end-max-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/far-end-max-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePathAny) FarEndMaxFrameLossRatio() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndMaxFrameLossRatioPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndMaxFrameLossRatioPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"far-end-max-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FarEndMinFrameLossRatio (leaf): This object contains the minimum one-way availability flr in the
// egress direction (source --> destination),
// from among the set of availability flr values
// calculated by the MEP in this Measurement Interval. There is
// one availability flr value for each 'delta_t' time period
// within the Measurement Interval, as specified in MEF 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "far-end-min-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/far-end-min-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePath) FarEndMinFrameLossRatio() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndMinFrameLossRatioPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndMinFrameLossRatioPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"far-end-min-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FarEndMinFrameLossRatio (leaf): This object contains the minimum one-way availability flr in the
// egress direction (source --> destination),
// from among the set of availability flr values
// calculated by the MEP in this Measurement Interval. There is
// one availability flr value for each 'delta_t' time period
// within the Measurement Interval, as specified in MEF 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "far-end-min-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/far-end-min-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePathAny) FarEndMinFrameLossRatio() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndMinFrameLossRatioPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_FarEndMinFrameLossRatioPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"far-end-min-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NearEndAverageFrameLossRatio (leaf): This object contains the average one-way availability flr in the
// backward direction, from among the set of availability flr
// values calculated by the MEP in this Measurement Interval.
// There is one availability flr value for each 'delta_t' time
// period within the Measurement Interval, as specified in MEF
// 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "near-end-average-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/near-end-average-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePath) NearEndAverageFrameLossRatio() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndAverageFrameLossRatioPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndAverageFrameLossRatioPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"near-end-average-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NearEndAverageFrameLossRatio (leaf): This object contains the average one-way availability flr in the
// backward direction, from among the set of availability flr
// values calculated by the MEP in this Measurement Interval.
// There is one availability flr value for each 'delta_t' time
// period within the Measurement Interval, as specified in MEF
// 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "near-end-average-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/near-end-average-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePathAny) NearEndAverageFrameLossRatio() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndAverageFrameLossRatioPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndAverageFrameLossRatioPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"near-end-average-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NearEndMaxFrameLossRatio (leaf): This object contains the maximum one-way availability flr in the
// backward direction, from among the set of availability flr
// values calculated by the MEP in this Measurement Interval.
// There is one availability flr value for each 'delta_t' time
// period within the Measurement Interval, as specified in MEF
// 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
// Service OAM Performance Monitoring YANG Module
// MEF 39
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "near-end-max-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/near-end-max-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePath) NearEndMaxFrameLossRatio() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndMaxFrameLossRatioPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndMaxFrameLossRatioPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"near-end-max-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NearEndMaxFrameLossRatio (leaf): This object contains the maximum one-way availability flr in the
// backward direction, from among the set of availability flr
// values calculated by the MEP in this Measurement Interval.
// There is one availability flr value for each 'delta_t' time
// period within the Measurement Interval, as specified in MEF
// 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
// Service OAM Performance Monitoring YANG Module
// MEF 39
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "near-end-max-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/near-end-max-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePathAny) NearEndMaxFrameLossRatio() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndMaxFrameLossRatioPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndMaxFrameLossRatioPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"near-end-max-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NearEndMinFrameLossRatio (leaf): This object contains the minimum one-way availability flr in the
// backward direction (destination --> source),
// from among the set of availability flr
// values calculated by the MEP in this Measurement Interval.
// There is one availability flr value for each 'delta_t' time
// period within the Measurement Interval, as specified in MEF
// 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "near-end-min-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/near-end-min-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePath) NearEndMinFrameLossRatio() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndMinFrameLossRatioPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndMinFrameLossRatioPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"near-end-min-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NearEndMinFrameLossRatio (leaf): This object contains the minimum one-way availability flr in the
// backward direction (destination --> source),
// from among the set of availability flr
// values calculated by the MEP in this Measurement Interval.
// There is one availability flr value for each 'delta_t' time
// period within the Measurement Interval, as specified in MEF
// 10.2.1.
//
// The flr value is a ratio that is expressed as a percent with a
// value of 0 (ratio 0.00) through 100000 (ratio 1.00).
//
// Units are in milli-percent, where 1 indicates 0.001 percent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "near-end-min-frame-loss-ratio"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/near-end-min-frame-loss-ratio"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePathAny) NearEndMinFrameLossRatio() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndMinFrameLossRatioPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_NearEndMinFrameLossRatioPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"near-end-min-frame-loss-ratio"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePath) State() ygnmi.SingletonQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState] {
	return ygnmi.NewSingletonQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementStatePathAny) State() ygnmi.WildcardQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlmReceivedPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slm-received YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlmReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlmReceivedPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slm-received YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlmReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "slm-received"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slm-received"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlmReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"slm-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters).SlmReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "slm-received"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slm-received"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlmReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"slm-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters).SlmReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlmSentPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slm-sent YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlmSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlmSentPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slm-sent YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlmSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "slm-sent"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slm-sent"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlmSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"slm-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters).SlmSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "slm-sent"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slm-sent"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlmSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"slm-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters).SlmSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlrReceivedPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slr-received YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlrReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlrReceivedPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slr-received YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlrReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "slr-received"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slr-received"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlrReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"slr-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters).SlrReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "slr-received"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slr-received"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlrReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"slr-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters).SlrReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlrSentPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slr-sent YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlrSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlrSentPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slr-sent YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlrSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "slr-sent"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slr-sent"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlrSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"slr-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters).SlrSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam-cfm"
//	Path from parent:     "slr-sent"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slr-sent"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlrSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"slr-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters).SlrSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_CountersPath represents the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_CountersPath struct {
	*ygnmi.NodePath
}

// Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_CountersPathAny represents the wildcard version of the /openconfig-oam/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters YANG schema element.
type Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_CountersPathAny struct {
	*ygnmi.NodePath
}

// SlmReceived (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "slm-received"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slm-received"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_CountersPath) SlmReceived() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlmReceivedPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlmReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"slm-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SlmReceived (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "slm-received"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slm-received"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_CountersPathAny) SlmReceived() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlmReceivedPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlmReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"slm-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SlmSent (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "slm-sent"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slm-sent"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_CountersPath) SlmSent() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlmSentPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlmSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"slm-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SlmSent (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "slm-sent"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slm-sent"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_CountersPathAny) SlmSent() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlmSentPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlmSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"slm-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SlrReceived (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "slr-received"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slr-received"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_CountersPath) SlrReceived() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlrReceivedPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlrReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"slr-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SlrReceived (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "slr-received"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slr-received"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_CountersPathAny) SlrReceived() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlrReceivedPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlrReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"slr-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SlrSent (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "slr-sent"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slr-sent"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_CountersPath) SlrSent() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlrSentPath {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlrSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"slr-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SlrSent (leaf): slm Probes sent.
//
//	Defining module:      "openconfig-oam-cfm"
//	Instantiating module: "openconfig-oam"
//	Path from parent:     "slr-sent"
//	Path from root:       "/oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state/counters/slr-sent"
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_CountersPathAny) SlrSent() *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlrSentPathAny {
	ps := &Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters_SlrSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"slr-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_CountersPath) State() ygnmi.SingletonQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters](
		"Oam_Cfm_PerformanceMeasurementProfile_LossMeasurementState_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

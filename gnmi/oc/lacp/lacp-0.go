/*
Package lacp is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-common.yang
  - public/release/models/aft/openconfig-aft-ethernet.yang
  - public/release/models/aft/openconfig-aft-ipv4.yang
  - public/release/models/aft/openconfig-aft-ipv6.yang
  - public/release/models/aft/openconfig-aft-mpls.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-pf.yang
  - public/release/models/aft/openconfig-aft-state-synced.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft-types.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-rates.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/local-routing/openconfig-local-routing-network-instance.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/network-instance/openconfig-network-instance-l2.yang
  - public/release/models/network-instance/openconfig-network-instance-static.yang
  - public/release/models/oam/openconfig-cfm-types.yang
  - public/release/models/oam/openconfig-oam.yang
  - public/release/models/oam/openconfig-oam-cfm.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-area.yang
  - public/release/models/ospf/openconfig-ospf-common.yang
  - public/release/models/ospf/openconfig-ospf-global.yang
  - public/release/models/ospf/openconfig-ospf-types.yang
  - public/release/models/ospf/openconfig-ospf.yang
  - public/release/models/ospf/openconfig-ospfv3-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
  - public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
  - public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package lacp

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Lacp_SystemPriorityPath represents the /openconfig-lacp/lacp/state/system-priority YANG schema element.
type Lacp_SystemPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_SystemPriorityPathAny represents the wildcard version of the /openconfig-lacp/lacp/state/system-priority YANG schema element.
type Lacp_SystemPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/system-priority"
//	Path from root:       "/lacp/state/system-priority"
func (n *Lacp_SystemPriorityPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Lacp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp).SystemPriority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/system-priority"
//	Path from root:       "/lacp/state/system-priority"
func (n *Lacp_SystemPriorityPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Lacp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp).SystemPriority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "config/system-priority"
//	Path from root:       "/lacp/config/system-priority"
func (n *Lacp_SystemPriorityPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Lacp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "system-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp).SystemPriority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "config/system-priority"
//	Path from root:       "/lacp/config/system-priority"
func (n *Lacp_SystemPriorityPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Lacp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "system-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp).SystemPriority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LacpPath represents the /openconfig-lacp/lacp YANG schema element.
type LacpPath struct {
	*ygnmi.NodePath
}

// LacpPathAny represents the wildcard version of the /openconfig-lacp/lacp YANG schema element.
type LacpPathAny struct {
	*ygnmi.NodePath
}

// InterfaceAny (list): List of aggregate interfaces managed by LACP
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/lacp/interfaces/interface"
func (n *LacpPath) InterfaceAny() *Lacp_InterfacePathAny {
	ps := &Lacp_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of aggregate interfaces managed by LACP
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/lacp/interfaces/interface"
func (n *LacpPathAny) InterfaceAny() *Lacp_InterfacePathAny {
	ps := &Lacp_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): List of aggregate interfaces managed by LACP
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/lacp/interfaces/interface"
//
//	Name: string
func (n *LacpPath) Interface(Name string) *Lacp_InterfacePath {
	ps := &Lacp_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Interface (list): List of aggregate interfaces managed by LACP
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/lacp/interfaces/interface"
//
//	Name: string
func (n *LacpPathAny) Interface(Name string) *Lacp_InterfacePathAny {
	ps := &Lacp_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of aggregate interfaces managed by LACP
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/lacp/interfaces/interface"
func (n *LacpPath) InterfaceMap() *Lacp_InterfacePathMap {
	ps := &Lacp_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of aggregate interfaces managed by LACP
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/lacp/interfaces/interface"
func (n *LacpPathAny) InterfaceMap() *Lacp_InterfacePathMapAny {
	ps := &Lacp_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SystemPriority (leaf): Sytem priority used by the node on this LAG interface.
// Lower value is higher priority for determining which node
// is the controlling system.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "*/system-priority"
//	Path from root:       "/lacp/*/system-priority"
func (n *LacpPath) SystemPriority() *Lacp_SystemPriorityPath {
	ps := &Lacp_SystemPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemPriority (leaf): Sytem priority used by the node on this LAG interface.
// Lower value is higher priority for determining which node
// is the controlling system.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "*/system-priority"
//	Path from root:       "/lacp/*/system-priority"
func (n *LacpPathAny) SystemPriority() *Lacp_SystemPriorityPathAny {
	ps := &Lacp_SystemPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *LacpPath) State() ygnmi.SingletonQuery[*oc.Lacp] {
	return ygnmi.NewSingletonQuery[*oc.Lacp](
		"Lacp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *LacpPathAny) State() ygnmi.WildcardQuery[*oc.Lacp] {
	return ygnmi.NewWildcardQuery[*oc.Lacp](
		"Lacp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *LacpPath) Config() ygnmi.ConfigQuery[*oc.Lacp] {
	return ygnmi.NewConfigQuery[*oc.Lacp](
		"Lacp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *LacpPathAny) Config() ygnmi.WildcardQuery[*oc.Lacp] {
	return ygnmi.NewWildcardQuery[*oc.Lacp](
		"Lacp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_FallbackPath represents the /openconfig-lacp/lacp/interfaces/interface/state/fallback YANG schema element.
type Lacp_Interface_FallbackPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_FallbackPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/state/fallback YANG schema element.
type Lacp_Interface_FallbackPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/fallback"
//	Path from root:       "/lacp/interfaces/interface/state/fallback"
func (n *Lacp_Interface_FallbackPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Lacp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fallback"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lacp_Interface).Fallback
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/fallback"
//	Path from root:       "/lacp/interfaces/interface/state/fallback"
func (n *Lacp_Interface_FallbackPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Lacp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fallback"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lacp_Interface).Fallback
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "config/fallback"
//	Path from root:       "/lacp/interfaces/interface/config/fallback"
func (n *Lacp_Interface_FallbackPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Lacp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fallback"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lacp_Interface).Fallback
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "config/fallback"
//	Path from root:       "/lacp/interfaces/interface/config/fallback"
func (n *Lacp_Interface_FallbackPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Lacp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fallback"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lacp_Interface).Fallback
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_IntervalPath represents the /openconfig-lacp/lacp/interfaces/interface/state/interval YANG schema element.
type Lacp_Interface_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_IntervalPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/state/interval YANG schema element.
type Lacp_Interface_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/interval"
//	Path from root:       "/lacp/interfaces/interface/state/interval"
func (n *Lacp_Interface_IntervalPath) State() ygnmi.SingletonQuery[oc.E_Lacp_LacpPeriodType] {
	return ygnmi.NewSingletonQuery[oc.E_Lacp_LacpPeriodType](
		"Lacp_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lacp_LacpPeriodType, bool) {
			ret := gs.(*oc.Lacp_Interface).Interval
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/interval"
//	Path from root:       "/lacp/interfaces/interface/state/interval"
func (n *Lacp_Interface_IntervalPathAny) State() ygnmi.WildcardQuery[oc.E_Lacp_LacpPeriodType] {
	return ygnmi.NewWildcardQuery[oc.E_Lacp_LacpPeriodType](
		"Lacp_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lacp_LacpPeriodType, bool) {
			ret := gs.(*oc.Lacp_Interface).Interval
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "config/interval"
//	Path from root:       "/lacp/interfaces/interface/config/interval"
func (n *Lacp_Interface_IntervalPath) Config() ygnmi.ConfigQuery[oc.E_Lacp_LacpPeriodType] {
	return ygnmi.NewConfigQuery[oc.E_Lacp_LacpPeriodType](
		"Lacp_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lacp_LacpPeriodType, bool) {
			ret := gs.(*oc.Lacp_Interface).Interval
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "config/interval"
//	Path from root:       "/lacp/interfaces/interface/config/interval"
func (n *Lacp_Interface_IntervalPathAny) Config() ygnmi.WildcardQuery[oc.E_Lacp_LacpPeriodType] {
	return ygnmi.NewWildcardQuery[oc.E_Lacp_LacpPeriodType](
		"Lacp_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lacp_LacpPeriodType, bool) {
			ret := gs.(*oc.Lacp_Interface).Interval
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_LacpModePath represents the /openconfig-lacp/lacp/interfaces/interface/state/lacp-mode YANG schema element.
type Lacp_Interface_LacpModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_LacpModePathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/state/lacp-mode YANG schema element.
type Lacp_Interface_LacpModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/lacp-mode"
//	Path from root:       "/lacp/interfaces/interface/state/lacp-mode"
func (n *Lacp_Interface_LacpModePath) State() ygnmi.SingletonQuery[oc.E_Lacp_LacpActivityType] {
	return ygnmi.NewSingletonQuery[oc.E_Lacp_LacpActivityType](
		"Lacp_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lacp-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lacp_LacpActivityType, bool) {
			ret := gs.(*oc.Lacp_Interface).LacpMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/lacp-mode"
//	Path from root:       "/lacp/interfaces/interface/state/lacp-mode"
func (n *Lacp_Interface_LacpModePathAny) State() ygnmi.WildcardQuery[oc.E_Lacp_LacpActivityType] {
	return ygnmi.NewWildcardQuery[oc.E_Lacp_LacpActivityType](
		"Lacp_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lacp-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lacp_LacpActivityType, bool) {
			ret := gs.(*oc.Lacp_Interface).LacpMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "config/lacp-mode"
//	Path from root:       "/lacp/interfaces/interface/config/lacp-mode"
func (n *Lacp_Interface_LacpModePath) Config() ygnmi.ConfigQuery[oc.E_Lacp_LacpActivityType] {
	return ygnmi.NewConfigQuery[oc.E_Lacp_LacpActivityType](
		"Lacp_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lacp-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lacp_LacpActivityType, bool) {
			ret := gs.(*oc.Lacp_Interface).LacpMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "config/lacp-mode"
//	Path from root:       "/lacp/interfaces/interface/config/lacp-mode"
func (n *Lacp_Interface_LacpModePathAny) Config() ygnmi.WildcardQuery[oc.E_Lacp_LacpActivityType] {
	return ygnmi.NewWildcardQuery[oc.E_Lacp_LacpActivityType](
		"Lacp_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lacp-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lacp_LacpActivityType, bool) {
			ret := gs.(*oc.Lacp_Interface).LacpMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_NamePath represents the /openconfig-lacp/lacp/interfaces/interface/state/name YANG schema element.
type Lacp_Interface_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_NamePathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/state/name YANG schema element.
type Lacp_Interface_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/name"
//	Path from root:       "/lacp/interfaces/interface/state/name"
func (n *Lacp_Interface_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lacp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/name"
//	Path from root:       "/lacp/interfaces/interface/state/name"
func (n *Lacp_Interface_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lacp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "config/name"
//	Path from root:       "/lacp/interfaces/interface/config/name"
func (n *Lacp_Interface_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Lacp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "config/name"
//	Path from root:       "/lacp/interfaces/interface/config/name"
func (n *Lacp_Interface_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lacp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_SystemIdMacPath represents the /openconfig-lacp/lacp/interfaces/interface/state/system-id-mac YANG schema element.
type Lacp_Interface_SystemIdMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_SystemIdMacPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/state/system-id-mac YANG schema element.
type Lacp_Interface_SystemIdMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/system-id-mac"
//	Path from root:       "/lacp/interfaces/interface/state/system-id-mac"
func (n *Lacp_Interface_SystemIdMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lacp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-id-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_Interface).SystemIdMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/system-id-mac"
//	Path from root:       "/lacp/interfaces/interface/state/system-id-mac"
func (n *Lacp_Interface_SystemIdMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lacp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-id-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_Interface).SystemIdMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "config/system-id-mac"
//	Path from root:       "/lacp/interfaces/interface/config/system-id-mac"
func (n *Lacp_Interface_SystemIdMacPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Lacp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "system-id-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_Interface).SystemIdMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "config/system-id-mac"
//	Path from root:       "/lacp/interfaces/interface/config/system-id-mac"
func (n *Lacp_Interface_SystemIdMacPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lacp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "system-id-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_Interface).SystemIdMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_SystemPriorityPath represents the /openconfig-lacp/lacp/interfaces/interface/state/system-priority YANG schema element.
type Lacp_Interface_SystemPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_SystemPriorityPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/state/system-priority YANG schema element.
type Lacp_Interface_SystemPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/system-priority"
//	Path from root:       "/lacp/interfaces/interface/state/system-priority"
func (n *Lacp_Interface_SystemPriorityPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Lacp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_Interface).SystemPriority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/system-priority"
//	Path from root:       "/lacp/interfaces/interface/state/system-priority"
func (n *Lacp_Interface_SystemPriorityPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Lacp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_Interface).SystemPriority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "config/system-priority"
//	Path from root:       "/lacp/interfaces/interface/config/system-priority"
func (n *Lacp_Interface_SystemPriorityPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Lacp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "system-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_Interface).SystemPriority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "config/system-priority"
//	Path from root:       "/lacp/interfaces/interface/config/system-priority"
func (n *Lacp_Interface_SystemPriorityPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Lacp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "system-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_Interface).SystemPriority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_InterfacePath represents the /openconfig-lacp/lacp/interfaces/interface YANG schema element.
type Lacp_InterfacePath struct {
	*ygnmi.NodePath
}

// Lacp_InterfacePathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface YANG schema element.
type Lacp_InterfacePathAny struct {
	*ygnmi.NodePath
}

// Lacp_InterfacePathMap represents the /openconfig-lacp/lacp/interfaces/interface YANG schema element.
type Lacp_InterfacePathMap struct {
	*ygnmi.NodePath
}

// Lacp_InterfacePathMapAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface YANG schema element.
type Lacp_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// Fallback (leaf): If the fallback is set to true, current LACP interface is
// able to establish a Link Aggregation (LAG) before it receives
// LACP PDUs from its peer, and fallback to a single port active
// after the expiry of the timeout period.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "*/fallback"
//	Path from root:       "/lacp/interfaces/interface/*/fallback"
func (n *Lacp_InterfacePath) Fallback() *Lacp_Interface_FallbackPath {
	ps := &Lacp_Interface_FallbackPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fallback"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Fallback (leaf): If the fallback is set to true, current LACP interface is
// able to establish a Link Aggregation (LAG) before it receives
// LACP PDUs from its peer, and fallback to a single port active
// after the expiry of the timeout period.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "*/fallback"
//	Path from root:       "/lacp/interfaces/interface/*/fallback"
func (n *Lacp_InterfacePathAny) Fallback() *Lacp_Interface_FallbackPathAny {
	ps := &Lacp_Interface_FallbackPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fallback"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): Set the period between LACP messages -- uses
// the lacp-period-type enumeration.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "*/interval"
//	Path from root:       "/lacp/interfaces/interface/*/interval"
func (n *Lacp_InterfacePath) Interval() *Lacp_Interface_IntervalPath {
	ps := &Lacp_Interface_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): Set the period between LACP messages -- uses
// the lacp-period-type enumeration.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "*/interval"
//	Path from root:       "/lacp/interfaces/interface/*/interval"
func (n *Lacp_InterfacePathAny) Interval() *Lacp_Interface_IntervalPathAny {
	ps := &Lacp_Interface_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LacpMode (leaf): ACTIVE is to initiate the transmission of LACP packets.
// PASSIVE is to wait for peer to initiate the transmission of
// LACP packets.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "*/lacp-mode"
//	Path from root:       "/lacp/interfaces/interface/*/lacp-mode"
func (n *Lacp_InterfacePath) LacpMode() *Lacp_Interface_LacpModePath {
	ps := &Lacp_Interface_LacpModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lacp-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LacpMode (leaf): ACTIVE is to initiate the transmission of LACP packets.
// PASSIVE is to wait for peer to initiate the transmission of
// LACP packets.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "*/lacp-mode"
//	Path from root:       "/lacp/interfaces/interface/*/lacp-mode"
func (n *Lacp_InterfacePathAny) LacpMode() *Lacp_Interface_LacpModePathAny {
	ps := &Lacp_Interface_LacpModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lacp-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MemberAny (list): List of member interfaces and their associated status for
// a LACP-controlled aggregate interface
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "members/member"
//	Path from root:       "/lacp/interfaces/interface/members/member"
func (n *Lacp_InterfacePath) MemberAny() *Lacp_Interface_MemberPathAny {
	ps := &Lacp_Interface_MemberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"members", "member"},
			map[string]interface{}{"interface": "*"},
			n,
		),
	}
	return ps
}

// MemberAny (list): List of member interfaces and their associated status for
// a LACP-controlled aggregate interface
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "members/member"
//	Path from root:       "/lacp/interfaces/interface/members/member"
func (n *Lacp_InterfacePathAny) MemberAny() *Lacp_Interface_MemberPathAny {
	ps := &Lacp_Interface_MemberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"members", "member"},
			map[string]interface{}{"interface": "*"},
			n,
		),
	}
	return ps
}

// Member (list): List of member interfaces and their associated status for
// a LACP-controlled aggregate interface
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "members/member"
//	Path from root:       "/lacp/interfaces/interface/members/member"
//
//	Interface: string
func (n *Lacp_InterfacePath) Member(Interface string) *Lacp_Interface_MemberPath {
	ps := &Lacp_Interface_MemberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"members", "member"},
			map[string]interface{}{"interface": Interface},
			n,
		),
	}
	return ps
}

// Member (list): List of member interfaces and their associated status for
// a LACP-controlled aggregate interface
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "members/member"
//	Path from root:       "/lacp/interfaces/interface/members/member"
//
//	Interface: string
func (n *Lacp_InterfacePathAny) Member(Interface string) *Lacp_Interface_MemberPathAny {
	ps := &Lacp_Interface_MemberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"members", "member"},
			map[string]interface{}{"interface": Interface},
			n,
		),
	}
	return ps
}

// MemberMap (list): List of member interfaces and their associated status for
// a LACP-controlled aggregate interface
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "members/member"
//	Path from root:       "/lacp/interfaces/interface/members/member"
func (n *Lacp_InterfacePath) MemberMap() *Lacp_Interface_MemberPathMap {
	ps := &Lacp_Interface_MemberPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"members"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MemberMap (list): List of member interfaces and their associated status for
// a LACP-controlled aggregate interface
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "members/member"
//	Path from root:       "/lacp/interfaces/interface/members/member"
func (n *Lacp_InterfacePathAny) MemberMap() *Lacp_Interface_MemberPathMapAny {
	ps := &Lacp_Interface_MemberPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"members"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): Reference to the interface on which LACP should be
// configured.   The type of the target interface must be
// ieee8023adLag
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "*/name"
//	Path from root:       "/lacp/interfaces/interface/*/name"
func (n *Lacp_InterfacePath) Name() *Lacp_Interface_NamePath {
	ps := &Lacp_Interface_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the interface on which LACP should be
// configured.   The type of the target interface must be
// ieee8023adLag
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "*/name"
//	Path from root:       "/lacp/interfaces/interface/*/name"
func (n *Lacp_InterfacePathAny) Name() *Lacp_Interface_NamePathAny {
	ps := &Lacp_Interface_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemIdMac (leaf): The MAC address portion of the node's System ID. This is
// combined with the system priority to construct the 8-octet
// system-id
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "*/system-id-mac"
//	Path from root:       "/lacp/interfaces/interface/*/system-id-mac"
func (n *Lacp_InterfacePath) SystemIdMac() *Lacp_Interface_SystemIdMacPath {
	ps := &Lacp_Interface_SystemIdMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-id-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemIdMac (leaf): The MAC address portion of the node's System ID. This is
// combined with the system priority to construct the 8-octet
// system-id
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "*/system-id-mac"
//	Path from root:       "/lacp/interfaces/interface/*/system-id-mac"
func (n *Lacp_InterfacePathAny) SystemIdMac() *Lacp_Interface_SystemIdMacPathAny {
	ps := &Lacp_Interface_SystemIdMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-id-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemPriority (leaf): Sytem priority used by the node on this LAG interface.
// Lower value is higher priority for determining which node
// is the controlling system.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "*/system-priority"
//	Path from root:       "/lacp/interfaces/interface/*/system-priority"
func (n *Lacp_InterfacePath) SystemPriority() *Lacp_Interface_SystemPriorityPath {
	ps := &Lacp_Interface_SystemPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemPriority (leaf): Sytem priority used by the node on this LAG interface.
// Lower value is higher priority for determining which node
// is the controlling system.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "*/system-priority"
//	Path from root:       "/lacp/interfaces/interface/*/system-priority"
func (n *Lacp_InterfacePathAny) SystemPriority() *Lacp_Interface_SystemPriorityPathAny {
	ps := &Lacp_Interface_SystemPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Lacp_InterfacePath) State() ygnmi.SingletonQuery[*oc.Lacp_Interface] {
	return ygnmi.NewSingletonQuery[*oc.Lacp_Interface](
		"Lacp_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lacp_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.Lacp_Interface] {
	return ygnmi.NewWildcardQuery[*oc.Lacp_Interface](
		"Lacp_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Lacp_InterfacePath) Config() ygnmi.ConfigQuery[*oc.Lacp_Interface] {
	return ygnmi.NewConfigQuery[*oc.Lacp_Interface](
		"Lacp_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Lacp_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.Lacp_Interface] {
	return ygnmi.NewWildcardQuery[*oc.Lacp_Interface](
		"Lacp_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lacp_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Lacp_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Lacp_Interface](
		"Lacp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Lacp_Interface, bool) {
			ret := gs.(*oc.Lacp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lacp:interfaces"},
			PostRelPath: []string{"openconfig-lacp:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lacp_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Lacp_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Lacp_Interface](
		"Lacp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Lacp_Interface, bool) {
			ret := gs.(*oc.Lacp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lacp:interfaces"},
			PostRelPath: []string{"openconfig-lacp:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Lacp_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Lacp_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.Lacp_Interface](
		"Lacp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Lacp_Interface, bool) {
			ret := gs.(*oc.Lacp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lacp:interfaces"},
			PostRelPath: []string{"openconfig-lacp:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Lacp_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Lacp_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Lacp_Interface](
		"Lacp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Lacp_Interface, bool) {
			ret := gs.(*oc.Lacp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lacp:interfaces"},
			PostRelPath: []string{"openconfig-lacp:interface"},
		},
	)
}

// Lacp_Interface_Member_ActivityPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/activity YANG schema element.
type Lacp_Interface_Member_ActivityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_ActivityPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/activity YANG schema element.
type Lacp_Interface_Member_ActivityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/activity"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/activity"
func (n *Lacp_Interface_Member_ActivityPath) State() ygnmi.SingletonQuery[oc.E_Lacp_LacpActivityType] {
	return ygnmi.NewSingletonQuery[oc.E_Lacp_LacpActivityType](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "activity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lacp_LacpActivityType, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).Activity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/activity"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/activity"
func (n *Lacp_Interface_Member_ActivityPathAny) State() ygnmi.WildcardQuery[oc.E_Lacp_LacpActivityType] {
	return ygnmi.NewWildcardQuery[oc.E_Lacp_LacpActivityType](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "activity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lacp_LacpActivityType, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).Activity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_AggregatablePath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/aggregatable YANG schema element.
type Lacp_Interface_Member_AggregatablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_AggregatablePathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/aggregatable YANG schema element.
type Lacp_Interface_Member_AggregatablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/aggregatable"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/aggregatable"
func (n *Lacp_Interface_Member_AggregatablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "aggregatable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).Aggregatable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/aggregatable"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/aggregatable"
func (n *Lacp_Interface_Member_AggregatablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "aggregatable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).Aggregatable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_CollectingPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/collecting YANG schema element.
type Lacp_Interface_Member_CollectingPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_CollectingPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/collecting YANG schema element.
type Lacp_Interface_Member_CollectingPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/collecting"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/collecting"
func (n *Lacp_Interface_Member_CollectingPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "collecting"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).Collecting
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/collecting"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/collecting"
func (n *Lacp_Interface_Member_CollectingPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "collecting"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).Collecting
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_DistributingPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/distributing YANG schema element.
type Lacp_Interface_Member_DistributingPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_DistributingPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/distributing YANG schema element.
type Lacp_Interface_Member_DistributingPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/distributing"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/distributing"
func (n *Lacp_Interface_Member_DistributingPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "distributing"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).Distributing
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/distributing"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/distributing"
func (n *Lacp_Interface_Member_DistributingPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "distributing"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).Distributing
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_InterfacePath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/interface YANG schema element.
type Lacp_Interface_Member_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_InterfacePathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/interface YANG schema element.
type Lacp_Interface_Member_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/interface"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/interface"
func (n *Lacp_Interface_Member_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/interface"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/interface"
func (n *Lacp_Interface_Member_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "config/interface"
//	Path from root:       "/lacp/interfaces/interface/members/member/config/interface"
func (n *Lacp_Interface_Member_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Lacp_Interface_Member",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "config/interface"
//	Path from root:       "/lacp/interfaces/interface/members/member/config/interface"
func (n *Lacp_Interface_Member_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lacp_Interface_Member",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_LastChangePath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/last-change YANG schema element.
type Lacp_Interface_Member_LastChangePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_LastChangePathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/last-change YANG schema element.
type Lacp_Interface_Member_LastChangePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/last-change"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/last-change"
func (n *Lacp_Interface_Member_LastChangePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-change"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).LastChange
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/last-change"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/last-change"
func (n *Lacp_Interface_Member_LastChangePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-change"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).LastChange
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_OperKeyPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/oper-key YANG schema element.
type Lacp_Interface_Member_OperKeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_OperKeyPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/oper-key YANG schema element.
type Lacp_Interface_Member_OperKeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/oper-key"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/oper-key"
func (n *Lacp_Interface_Member_OperKeyPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).OperKey
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/oper-key"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/oper-key"
func (n *Lacp_Interface_Member_OperKeyPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).OperKey
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_PartnerIdPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/partner-id YANG schema element.
type Lacp_Interface_Member_PartnerIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_PartnerIdPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/partner-id YANG schema element.
type Lacp_Interface_Member_PartnerIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/partner-id"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/partner-id"
func (n *Lacp_Interface_Member_PartnerIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "partner-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).PartnerId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/partner-id"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/partner-id"
func (n *Lacp_Interface_Member_PartnerIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "partner-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).PartnerId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_PartnerKeyPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/partner-key YANG schema element.
type Lacp_Interface_Member_PartnerKeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_PartnerKeyPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/partner-key YANG schema element.
type Lacp_Interface_Member_PartnerKeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/partner-key"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/partner-key"
func (n *Lacp_Interface_Member_PartnerKeyPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "partner-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).PartnerKey
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/partner-key"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/partner-key"
func (n *Lacp_Interface_Member_PartnerKeyPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "partner-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).PartnerKey
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_PartnerPortNumPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/partner-port-num YANG schema element.
type Lacp_Interface_Member_PartnerPortNumPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_PartnerPortNumPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/partner-port-num YANG schema element.
type Lacp_Interface_Member_PartnerPortNumPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/partner-port-num"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/partner-port-num"
func (n *Lacp_Interface_Member_PartnerPortNumPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "partner-port-num"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).PartnerPortNum
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/partner-port-num"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/partner-port-num"
func (n *Lacp_Interface_Member_PartnerPortNumPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "partner-port-num"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).PartnerPortNum
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_PartnerPortPriorityPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/partner-port-priority YANG schema element.
type Lacp_Interface_Member_PartnerPortPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_PartnerPortPriorityPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/partner-port-priority YANG schema element.
type Lacp_Interface_Member_PartnerPortPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/partner-port-priority"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/partner-port-priority"
func (n *Lacp_Interface_Member_PartnerPortPriorityPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "partner-port-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).PartnerPortPriority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/partner-port-priority"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/partner-port-priority"
func (n *Lacp_Interface_Member_PartnerPortPriorityPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "partner-port-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).PartnerPortPriority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_PortNumPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/port-num YANG schema element.
type Lacp_Interface_Member_PortNumPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_PortNumPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/port-num YANG schema element.
type Lacp_Interface_Member_PortNumPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/port-num"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/port-num"
func (n *Lacp_Interface_Member_PortNumPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-num"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).PortNum
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/port-num"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/port-num"
func (n *Lacp_Interface_Member_PortNumPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-num"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).PortNum
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_PortPriorityPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/port-priority YANG schema element.
type Lacp_Interface_Member_PortPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_PortPriorityPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/port-priority YANG schema element.
type Lacp_Interface_Member_PortPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/port-priority"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/port-priority"
func (n *Lacp_Interface_Member_PortPriorityPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).PortPriority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/port-priority"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/port-priority"
func (n *Lacp_Interface_Member_PortPriorityPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).PortPriority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "config/port-priority"
//	Path from root:       "/lacp/interfaces/interface/members/member/config/port-priority"
func (n *Lacp_Interface_Member_PortPriorityPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Lacp_Interface_Member",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "port-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).PortPriority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "config/port-priority"
//	Path from root:       "/lacp/interfaces/interface/members/member/config/port-priority"
func (n *Lacp_Interface_Member_PortPriorityPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Lacp_Interface_Member",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "port-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).PortPriority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_SynchronizationPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/synchronization YANG schema element.
type Lacp_Interface_Member_SynchronizationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_SynchronizationPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/synchronization YANG schema element.
type Lacp_Interface_Member_SynchronizationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/synchronization"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/synchronization"
func (n *Lacp_Interface_Member_SynchronizationPath) State() ygnmi.SingletonQuery[oc.E_Lacp_LacpSynchronizationType] {
	return ygnmi.NewSingletonQuery[oc.E_Lacp_LacpSynchronizationType](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "synchronization"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lacp_LacpSynchronizationType, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).Synchronization
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/synchronization"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/synchronization"
func (n *Lacp_Interface_Member_SynchronizationPathAny) State() ygnmi.WildcardQuery[oc.E_Lacp_LacpSynchronizationType] {
	return ygnmi.NewWildcardQuery[oc.E_Lacp_LacpSynchronizationType](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "synchronization"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lacp_LacpSynchronizationType, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).Synchronization
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_SystemIdPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/system-id YANG schema element.
type Lacp_Interface_Member_SystemIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_SystemIdPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/system-id YANG schema element.
type Lacp_Interface_Member_SystemIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/system-id"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/system-id"
func (n *Lacp_Interface_Member_SystemIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/system-id"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/system-id"
func (n *Lacp_Interface_Member_SystemIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_TimeoutPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/timeout YANG schema element.
type Lacp_Interface_Member_TimeoutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_TimeoutPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/timeout YANG schema element.
type Lacp_Interface_Member_TimeoutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/timeout"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/timeout"
func (n *Lacp_Interface_Member_TimeoutPath) State() ygnmi.SingletonQuery[oc.E_Lacp_LacpTimeoutType] {
	return ygnmi.NewSingletonQuery[oc.E_Lacp_LacpTimeoutType](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lacp_LacpTimeoutType, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).Timeout
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/timeout"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/timeout"
func (n *Lacp_Interface_Member_TimeoutPathAny) State() ygnmi.WildcardQuery[oc.E_Lacp_LacpTimeoutType] {
	return ygnmi.NewWildcardQuery[oc.E_Lacp_LacpTimeoutType](
		"Lacp_Interface_Member",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lacp_LacpTimeoutType, bool) {
			ret := gs.(*oc.Lacp_Interface_Member).Timeout
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_MemberPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member YANG schema element.
type Lacp_Interface_MemberPath struct {
	*ygnmi.NodePath
}

// Lacp_Interface_MemberPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member YANG schema element.
type Lacp_Interface_MemberPathAny struct {
	*ygnmi.NodePath
}

// Lacp_Interface_MemberPathMap represents the /openconfig-lacp/lacp/interfaces/interface/members/member YANG schema element.
type Lacp_Interface_MemberPathMap struct {
	*ygnmi.NodePath
}

// Lacp_Interface_MemberPathMapAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member YANG schema element.
type Lacp_Interface_MemberPathMapAny struct {
	*ygnmi.NodePath
}

// Activity (leaf): Indicates participant is active or passive
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/activity"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/activity"
func (n *Lacp_Interface_MemberPath) Activity() *Lacp_Interface_Member_ActivityPath {
	ps := &Lacp_Interface_Member_ActivityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "activity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Activity (leaf): Indicates participant is active or passive
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/activity"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/activity"
func (n *Lacp_Interface_MemberPathAny) Activity() *Lacp_Interface_Member_ActivityPathAny {
	ps := &Lacp_Interface_Member_ActivityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "activity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Aggregatable (leaf): A true value indicates that the participant will allow
// the link to be used as part of the aggregate. A false
// value indicates the link should be used as an individual
// link
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/aggregatable"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/aggregatable"
func (n *Lacp_Interface_MemberPath) Aggregatable() *Lacp_Interface_Member_AggregatablePath {
	ps := &Lacp_Interface_Member_AggregatablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "aggregatable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Aggregatable (leaf): A true value indicates that the participant will allow
// the link to be used as part of the aggregate. A false
// value indicates the link should be used as an individual
// link
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/aggregatable"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/aggregatable"
func (n *Lacp_Interface_MemberPathAny) Aggregatable() *Lacp_Interface_Member_AggregatablePathAny {
	ps := &Lacp_Interface_Member_AggregatablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "aggregatable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Collecting (leaf): If true, the participant is collecting incoming frames
// on the link, otherwise false
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/collecting"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/collecting"
func (n *Lacp_Interface_MemberPath) Collecting() *Lacp_Interface_Member_CollectingPath {
	ps := &Lacp_Interface_Member_CollectingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "collecting"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Collecting (leaf): If true, the participant is collecting incoming frames
// on the link, otherwise false
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/collecting"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/collecting"
func (n *Lacp_Interface_MemberPathAny) Collecting() *Lacp_Interface_Member_CollectingPathAny {
	ps := &Lacp_Interface_Member_CollectingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "collecting"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (container): LACP protocol counters
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/counters"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters"
func (n *Lacp_Interface_MemberPath) Counters() *Lacp_Interface_Member_CountersPath {
	ps := &Lacp_Interface_Member_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): LACP protocol counters
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/counters"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters"
func (n *Lacp_Interface_MemberPathAny) Counters() *Lacp_Interface_Member_CountersPathAny {
	ps := &Lacp_Interface_Member_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Distributing (leaf): When true, the participant is distributing outgoing
// frames; when false, distribution is disabled
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/distributing"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/distributing"
func (n *Lacp_Interface_MemberPath) Distributing() *Lacp_Interface_Member_DistributingPath {
	ps := &Lacp_Interface_Member_DistributingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "distributing"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Distributing (leaf): When true, the participant is distributing outgoing
// frames; when false, distribution is disabled
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/distributing"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/distributing"
func (n *Lacp_Interface_MemberPathAny) Distributing() *Lacp_Interface_Member_DistributingPathAny {
	ps := &Lacp_Interface_Member_DistributingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "distributing"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to interface member of the LACP aggregate
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "*/interface"
//	Path from root:       "/lacp/interfaces/interface/members/member/*/interface"
func (n *Lacp_Interface_MemberPath) Interface() *Lacp_Interface_Member_InterfacePath {
	ps := &Lacp_Interface_Member_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to interface member of the LACP aggregate
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "*/interface"
//	Path from root:       "/lacp/interfaces/interface/members/member/*/interface"
func (n *Lacp_Interface_MemberPathAny) Interface() *Lacp_Interface_Member_InterfacePathAny {
	ps := &Lacp_Interface_Member_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastChange (leaf): The timestamp indicates the absolute time of the last state
// change of a LACP timeout. The last state change of the LACP
// timeout is defined as what is reported as the operating state
// to the system. The state change is both a timeout event and
// when the timeout event is no longer active. The value is the
// timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/last-change"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/last-change"
func (n *Lacp_Interface_MemberPath) LastChange() *Lacp_Interface_Member_LastChangePath {
	ps := &Lacp_Interface_Member_LastChangePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastChange (leaf): The timestamp indicates the absolute time of the last state
// change of a LACP timeout. The last state change of the LACP
// timeout is defined as what is reported as the operating state
// to the system. The state change is both a timeout event and
// when the timeout event is no longer active. The value is the
// timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/last-change"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/last-change"
func (n *Lacp_Interface_MemberPathAny) LastChange() *Lacp_Interface_Member_LastChangePathAny {
	ps := &Lacp_Interface_Member_LastChangePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperKey (leaf): Current operational value of the key for the aggregate
// interface
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/oper-key"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/oper-key"
func (n *Lacp_Interface_MemberPath) OperKey() *Lacp_Interface_Member_OperKeyPath {
	ps := &Lacp_Interface_Member_OperKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperKey (leaf): Current operational value of the key for the aggregate
// interface
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/oper-key"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/oper-key"
func (n *Lacp_Interface_MemberPathAny) OperKey() *Lacp_Interface_Member_OperKeyPathAny {
	ps := &Lacp_Interface_Member_OperKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PartnerId (leaf): MAC address representing the protocol partner's interface
// system ID
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/partner-id"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/partner-id"
func (n *Lacp_Interface_MemberPath) PartnerId() *Lacp_Interface_Member_PartnerIdPath {
	ps := &Lacp_Interface_Member_PartnerIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "partner-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PartnerId (leaf): MAC address representing the protocol partner's interface
// system ID
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/partner-id"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/partner-id"
func (n *Lacp_Interface_MemberPathAny) PartnerId() *Lacp_Interface_Member_PartnerIdPathAny {
	ps := &Lacp_Interface_Member_PartnerIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "partner-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PartnerKey (leaf): Operational value of the protocol partner's key
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/partner-key"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/partner-key"
func (n *Lacp_Interface_MemberPath) PartnerKey() *Lacp_Interface_Member_PartnerKeyPath {
	ps := &Lacp_Interface_Member_PartnerKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "partner-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PartnerKey (leaf): Operational value of the protocol partner's key
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/partner-key"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/partner-key"
func (n *Lacp_Interface_MemberPathAny) PartnerKey() *Lacp_Interface_Member_PartnerKeyPathAny {
	ps := &Lacp_Interface_Member_PartnerKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "partner-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PartnerPortNum (leaf): Port number of the partner (remote) port for this member
// port
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/partner-port-num"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/partner-port-num"
func (n *Lacp_Interface_MemberPath) PartnerPortNum() *Lacp_Interface_Member_PartnerPortNumPath {
	ps := &Lacp_Interface_Member_PartnerPortNumPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "partner-port-num"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PartnerPortNum (leaf): Port number of the partner (remote) port for this member
// port
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/partner-port-num"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/partner-port-num"
func (n *Lacp_Interface_MemberPathAny) PartnerPortNum() *Lacp_Interface_Member_PartnerPortNumPathAny {
	ps := &Lacp_Interface_Member_PartnerPortNumPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "partner-port-num"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PartnerPortPriority (leaf): Member interface partner's priority in its aggregate interface.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/partner-port-priority"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/partner-port-priority"
func (n *Lacp_Interface_MemberPath) PartnerPortPriority() *Lacp_Interface_Member_PartnerPortPriorityPath {
	ps := &Lacp_Interface_Member_PartnerPortPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "partner-port-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PartnerPortPriority (leaf): Member interface partner's priority in its aggregate interface.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/partner-port-priority"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/partner-port-priority"
func (n *Lacp_Interface_MemberPathAny) PartnerPortPriority() *Lacp_Interface_Member_PartnerPortPriorityPathAny {
	ps := &Lacp_Interface_Member_PartnerPortPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "partner-port-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortNum (leaf): Port number of the local (actor) aggregation member
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/port-num"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/port-num"
func (n *Lacp_Interface_MemberPath) PortNum() *Lacp_Interface_Member_PortNumPath {
	ps := &Lacp_Interface_Member_PortNumPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-num"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortNum (leaf): Port number of the local (actor) aggregation member
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/port-num"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/port-num"
func (n *Lacp_Interface_MemberPathAny) PortNum() *Lacp_Interface_Member_PortNumPathAny {
	ps := &Lacp_Interface_Member_PortNumPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-num"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortPriority (leaf): Member interface's priority in its aggregate interface.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "*/port-priority"
//	Path from root:       "/lacp/interfaces/interface/members/member/*/port-priority"
func (n *Lacp_Interface_MemberPath) PortPriority() *Lacp_Interface_Member_PortPriorityPath {
	ps := &Lacp_Interface_Member_PortPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortPriority (leaf): Member interface's priority in its aggregate interface.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "*/port-priority"
//	Path from root:       "/lacp/interfaces/interface/members/member/*/port-priority"
func (n *Lacp_Interface_MemberPathAny) PortPriority() *Lacp_Interface_Member_PortPriorityPathAny {
	ps := &Lacp_Interface_Member_PortPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Synchronization (leaf): Indicates whether the participant is in-sync or
// out-of-sync
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/synchronization"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/synchronization"
func (n *Lacp_Interface_MemberPath) Synchronization() *Lacp_Interface_Member_SynchronizationPath {
	ps := &Lacp_Interface_Member_SynchronizationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "synchronization"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Synchronization (leaf): Indicates whether the participant is in-sync or
// out-of-sync
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/synchronization"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/synchronization"
func (n *Lacp_Interface_MemberPathAny) Synchronization() *Lacp_Interface_Member_SynchronizationPathAny {
	ps := &Lacp_Interface_Member_SynchronizationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "synchronization"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemId (leaf): MAC address that defines the local system ID for the
// aggregate interface
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/system-id"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/system-id"
func (n *Lacp_Interface_MemberPath) SystemId() *Lacp_Interface_Member_SystemIdPath {
	ps := &Lacp_Interface_Member_SystemIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemId (leaf): MAC address that defines the local system ID for the
// aggregate interface
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/system-id"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/system-id"
func (n *Lacp_Interface_MemberPathAny) SystemId() *Lacp_Interface_Member_SystemIdPathAny {
	ps := &Lacp_Interface_Member_SystemIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Timeout (leaf): The timeout type (short or long) used by the
// participant
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/timeout"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/timeout"
func (n *Lacp_Interface_MemberPath) Timeout() *Lacp_Interface_Member_TimeoutPath {
	ps := &Lacp_Interface_Member_TimeoutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "timeout"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Timeout (leaf): The timeout type (short or long) used by the
// participant
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "state/timeout"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/timeout"
func (n *Lacp_Interface_MemberPathAny) Timeout() *Lacp_Interface_Member_TimeoutPathAny {
	ps := &Lacp_Interface_Member_TimeoutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "timeout"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Lacp_Interface_MemberPath) State() ygnmi.SingletonQuery[*oc.Lacp_Interface_Member] {
	return ygnmi.NewSingletonQuery[*oc.Lacp_Interface_Member](
		"Lacp_Interface_Member",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lacp_Interface_MemberPathAny) State() ygnmi.WildcardQuery[*oc.Lacp_Interface_Member] {
	return ygnmi.NewWildcardQuery[*oc.Lacp_Interface_Member](
		"Lacp_Interface_Member",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Lacp_Interface_MemberPath) Config() ygnmi.ConfigQuery[*oc.Lacp_Interface_Member] {
	return ygnmi.NewConfigQuery[*oc.Lacp_Interface_Member](
		"Lacp_Interface_Member",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Lacp_Interface_MemberPathAny) Config() ygnmi.WildcardQuery[*oc.Lacp_Interface_Member] {
	return ygnmi.NewWildcardQuery[*oc.Lacp_Interface_Member](
		"Lacp_Interface_Member",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lacp_Interface_MemberPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Lacp_Interface_Member] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Lacp_Interface_Member](
		"Lacp_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Lacp_Interface_Member, bool) {
			ret := gs.(*oc.Lacp_Interface).Member
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lacp:members"},
			PostRelPath: []string{"openconfig-lacp:member"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lacp_Interface_MemberPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Lacp_Interface_Member] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Lacp_Interface_Member](
		"Lacp_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Lacp_Interface_Member, bool) {
			ret := gs.(*oc.Lacp_Interface).Member
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lacp:members"},
			PostRelPath: []string{"openconfig-lacp:member"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Lacp_Interface_MemberPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Lacp_Interface_Member] {
	return ygnmi.NewConfigQuery[map[string]*oc.Lacp_Interface_Member](
		"Lacp_Interface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Lacp_Interface_Member, bool) {
			ret := gs.(*oc.Lacp_Interface).Member
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lacp:members"},
			PostRelPath: []string{"openconfig-lacp:member"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Lacp_Interface_MemberPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Lacp_Interface_Member] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Lacp_Interface_Member](
		"Lacp_Interface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Lacp_Interface_Member, bool) {
			ret := gs.(*oc.Lacp_Interface).Member
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lacp:members"},
			PostRelPath: []string{"openconfig-lacp:member"},
		},
	)
}

// Lacp_Interface_Member_Counters_LacpErrorsPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-errors YANG schema element.
type Lacp_Interface_Member_Counters_LacpErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_Counters_LacpErrorsPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-errors YANG schema element.
type Lacp_Interface_Member_Counters_LacpErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-errors"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-errors"
func (n *Lacp_Interface_Member_Counters_LacpErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lacp_Interface_Member_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lacp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_Interface_Member_Counters).LacpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-errors"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-errors"
func (n *Lacp_Interface_Member_Counters_LacpErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lacp_Interface_Member_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lacp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_Interface_Member_Counters).LacpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_Counters_LacpInPktsPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-in-pkts YANG schema element.
type Lacp_Interface_Member_Counters_LacpInPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_Counters_LacpInPktsPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-in-pkts YANG schema element.
type Lacp_Interface_Member_Counters_LacpInPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-in-pkts"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-in-pkts"
func (n *Lacp_Interface_Member_Counters_LacpInPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lacp_Interface_Member_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lacp-in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_Interface_Member_Counters).LacpInPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-in-pkts"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-in-pkts"
func (n *Lacp_Interface_Member_Counters_LacpInPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lacp_Interface_Member_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lacp-in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_Interface_Member_Counters).LacpInPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_Counters_LacpOutPktsPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-out-pkts YANG schema element.
type Lacp_Interface_Member_Counters_LacpOutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_Counters_LacpOutPktsPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-out-pkts YANG schema element.
type Lacp_Interface_Member_Counters_LacpOutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-out-pkts"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-out-pkts"
func (n *Lacp_Interface_Member_Counters_LacpOutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lacp_Interface_Member_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lacp-out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_Interface_Member_Counters).LacpOutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-out-pkts"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-out-pkts"
func (n *Lacp_Interface_Member_Counters_LacpOutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lacp_Interface_Member_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lacp-out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_Interface_Member_Counters).LacpOutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_Counters_LacpRxErrorsPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-rx-errors YANG schema element.
type Lacp_Interface_Member_Counters_LacpRxErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_Counters_LacpRxErrorsPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-rx-errors YANG schema element.
type Lacp_Interface_Member_Counters_LacpRxErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-rx-errors"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-rx-errors"
func (n *Lacp_Interface_Member_Counters_LacpRxErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lacp_Interface_Member_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lacp-rx-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_Interface_Member_Counters).LacpRxErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-rx-errors"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-rx-errors"
func (n *Lacp_Interface_Member_Counters_LacpRxErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lacp_Interface_Member_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lacp-rx-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_Interface_Member_Counters).LacpRxErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_Counters_LacpTimeoutTransitionsPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-timeout-transitions YANG schema element.
type Lacp_Interface_Member_Counters_LacpTimeoutTransitionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_Counters_LacpTimeoutTransitionsPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-timeout-transitions YANG schema element.
type Lacp_Interface_Member_Counters_LacpTimeoutTransitionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-timeout-transitions"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-timeout-transitions"
func (n *Lacp_Interface_Member_Counters_LacpTimeoutTransitionsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lacp_Interface_Member_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lacp-timeout-transitions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_Interface_Member_Counters).LacpTimeoutTransitions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-timeout-transitions"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-timeout-transitions"
func (n *Lacp_Interface_Member_Counters_LacpTimeoutTransitionsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lacp_Interface_Member_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lacp-timeout-transitions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_Interface_Member_Counters).LacpTimeoutTransitions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_Counters_LacpTxErrorsPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-tx-errors YANG schema element.
type Lacp_Interface_Member_Counters_LacpTxErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_Counters_LacpTxErrorsPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-tx-errors YANG schema element.
type Lacp_Interface_Member_Counters_LacpTxErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-tx-errors"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-tx-errors"
func (n *Lacp_Interface_Member_Counters_LacpTxErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lacp_Interface_Member_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lacp-tx-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_Interface_Member_Counters).LacpTxErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-tx-errors"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-tx-errors"
func (n *Lacp_Interface_Member_Counters_LacpTxErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lacp_Interface_Member_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lacp-tx-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_Interface_Member_Counters).LacpTxErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_Counters_LacpUnknownErrorsPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-unknown-errors YANG schema element.
type Lacp_Interface_Member_Counters_LacpUnknownErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lacp_Interface_Member_Counters_LacpUnknownErrorsPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-unknown-errors YANG schema element.
type Lacp_Interface_Member_Counters_LacpUnknownErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-unknown-errors"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-unknown-errors"
func (n *Lacp_Interface_Member_Counters_LacpUnknownErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lacp_Interface_Member_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lacp-unknown-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_Interface_Member_Counters).LacpUnknownErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-unknown-errors"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-unknown-errors"
func (n *Lacp_Interface_Member_Counters_LacpUnknownErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lacp_Interface_Member_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lacp-unknown-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lacp_Interface_Member_Counters).LacpUnknownErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lacp_Interface_Member_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lacp_Interface_Member_CountersPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters YANG schema element.
type Lacp_Interface_Member_CountersPath struct {
	*ygnmi.NodePath
}

// Lacp_Interface_Member_CountersPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters YANG schema element.
type Lacp_Interface_Member_CountersPathAny struct {
	*ygnmi.NodePath
}

// LacpErrors (leaf): Number of LACPDU illegal packet errors
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-errors"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-errors"
func (n *Lacp_Interface_Member_CountersPath) LacpErrors() *Lacp_Interface_Member_Counters_LacpErrorsPath {
	ps := &Lacp_Interface_Member_Counters_LacpErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lacp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LacpErrors (leaf): Number of LACPDU illegal packet errors
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-errors"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-errors"
func (n *Lacp_Interface_Member_CountersPathAny) LacpErrors() *Lacp_Interface_Member_Counters_LacpErrorsPathAny {
	ps := &Lacp_Interface_Member_Counters_LacpErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lacp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LacpInPkts (leaf): Number of LACPDUs received
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-in-pkts"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-in-pkts"
func (n *Lacp_Interface_Member_CountersPath) LacpInPkts() *Lacp_Interface_Member_Counters_LacpInPktsPath {
	ps := &Lacp_Interface_Member_Counters_LacpInPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lacp-in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LacpInPkts (leaf): Number of LACPDUs received
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-in-pkts"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-in-pkts"
func (n *Lacp_Interface_Member_CountersPathAny) LacpInPkts() *Lacp_Interface_Member_Counters_LacpInPktsPathAny {
	ps := &Lacp_Interface_Member_Counters_LacpInPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lacp-in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LacpOutPkts (leaf): Number of LACPDUs transmitted
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-out-pkts"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-out-pkts"
func (n *Lacp_Interface_Member_CountersPath) LacpOutPkts() *Lacp_Interface_Member_Counters_LacpOutPktsPath {
	ps := &Lacp_Interface_Member_Counters_LacpOutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lacp-out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LacpOutPkts (leaf): Number of LACPDUs transmitted
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-out-pkts"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-out-pkts"
func (n *Lacp_Interface_Member_CountersPathAny) LacpOutPkts() *Lacp_Interface_Member_Counters_LacpOutPktsPathAny {
	ps := &Lacp_Interface_Member_Counters_LacpOutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lacp-out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LacpRxErrors (leaf): Number of LACPDU receive packet errors
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-rx-errors"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-rx-errors"
func (n *Lacp_Interface_Member_CountersPath) LacpRxErrors() *Lacp_Interface_Member_Counters_LacpRxErrorsPath {
	ps := &Lacp_Interface_Member_Counters_LacpRxErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lacp-rx-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LacpRxErrors (leaf): Number of LACPDU receive packet errors
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-rx-errors"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-rx-errors"
func (n *Lacp_Interface_Member_CountersPathAny) LacpRxErrors() *Lacp_Interface_Member_Counters_LacpRxErrorsPathAny {
	ps := &Lacp_Interface_Member_Counters_LacpRxErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lacp-rx-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LacpTimeoutTransitions (leaf): Number of times the LACP state has transitioned
// with a timeout since the time the device restarted
// or the interface was brought up, whichever is most
// recent. The last state change of the LACP timeout
// is defined as what is reported as the operating state
// to the system. The state change is both a timeout
// event and when the timeout event is no longer active.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-timeout-transitions"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-timeout-transitions"
func (n *Lacp_Interface_Member_CountersPath) LacpTimeoutTransitions() *Lacp_Interface_Member_Counters_LacpTimeoutTransitionsPath {
	ps := &Lacp_Interface_Member_Counters_LacpTimeoutTransitionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lacp-timeout-transitions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LacpTimeoutTransitions (leaf): Number of times the LACP state has transitioned
// with a timeout since the time the device restarted
// or the interface was brought up, whichever is most
// recent. The last state change of the LACP timeout
// is defined as what is reported as the operating state
// to the system. The state change is both a timeout
// event and when the timeout event is no longer active.
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-timeout-transitions"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-timeout-transitions"
func (n *Lacp_Interface_Member_CountersPathAny) LacpTimeoutTransitions() *Lacp_Interface_Member_Counters_LacpTimeoutTransitionsPathAny {
	ps := &Lacp_Interface_Member_Counters_LacpTimeoutTransitionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lacp-timeout-transitions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LacpTxErrors (leaf): Number of LACPDU transmit packet errors
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-tx-errors"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-tx-errors"
func (n *Lacp_Interface_Member_CountersPath) LacpTxErrors() *Lacp_Interface_Member_Counters_LacpTxErrorsPath {
	ps := &Lacp_Interface_Member_Counters_LacpTxErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lacp-tx-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LacpTxErrors (leaf): Number of LACPDU transmit packet errors
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-tx-errors"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-tx-errors"
func (n *Lacp_Interface_Member_CountersPathAny) LacpTxErrors() *Lacp_Interface_Member_Counters_LacpTxErrorsPathAny {
	ps := &Lacp_Interface_Member_Counters_LacpTxErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lacp-tx-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LacpUnknownErrors (leaf): Number of LACPDU unknown packet errors
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-unknown-errors"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-unknown-errors"
func (n *Lacp_Interface_Member_CountersPath) LacpUnknownErrors() *Lacp_Interface_Member_Counters_LacpUnknownErrorsPath {
	ps := &Lacp_Interface_Member_Counters_LacpUnknownErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lacp-unknown-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LacpUnknownErrors (leaf): Number of LACPDU unknown packet errors
//
//	Defining module:      "openconfig-lacp"
//	Instantiating module: "openconfig-lacp"
//	Path from parent:     "lacp-unknown-errors"
//	Path from root:       "/lacp/interfaces/interface/members/member/state/counters/lacp-unknown-errors"
func (n *Lacp_Interface_Member_CountersPathAny) LacpUnknownErrors() *Lacp_Interface_Member_Counters_LacpUnknownErrorsPathAny {
	ps := &Lacp_Interface_Member_Counters_LacpUnknownErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lacp-unknown-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Lacp_Interface_Member_CountersPath) State() ygnmi.SingletonQuery[*oc.Lacp_Interface_Member_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Lacp_Interface_Member_Counters](
		"Lacp_Interface_Member_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lacp_Interface_Member_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Lacp_Interface_Member_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Lacp_Interface_Member_Counters](
		"Lacp_Interface_Member_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

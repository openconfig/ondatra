/*
Package lldp is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-common.yang
  - public/release/models/aft/openconfig-aft-ethernet.yang
  - public/release/models/aft/openconfig-aft-ipv4.yang
  - public/release/models/aft/openconfig-aft-ipv6.yang
  - public/release/models/aft/openconfig-aft-mpls.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-pf.yang
  - public/release/models/aft/openconfig-aft-state-synced.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft-types.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-rates.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/network-instance/openconfig-network-instance-l2.yang
  - public/release/models/network-instance/openconfig-network-instance-static.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-area.yang
  - public/release/models/ospf/openconfig-ospf-common.yang
  - public/release/models/ospf/openconfig-ospf-global.yang
  - public/release/models/ospf/openconfig-ospf-types.yang
  - public/release/models/ospf/openconfig-ospf.yang
  - public/release/models/ospf/openconfig-ospfv3-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
  - public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
  - public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package lldp

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Lldp_ChassisIdPath represents the /openconfig-lldp/lldp/state/chassis-id YANG schema element.
type Lldp_ChassisIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_ChassisIdPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/chassis-id YANG schema element.
type Lldp_ChassisIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/chassis-id"
//	Path from root:       "/lldp/state/chassis-id"
func (n *Lldp_ChassisIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lldp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "chassis-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp).ChassisId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/chassis-id"
//	Path from root:       "/lldp/state/chassis-id"
func (n *Lldp_ChassisIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "chassis-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp).ChassisId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/chassis-id"
//	Path from root:       "/lldp/config/chassis-id"
func (n *Lldp_ChassisIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Lldp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "chassis-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp).ChassisId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/chassis-id"
//	Path from root:       "/lldp/config/chassis-id"
func (n *Lldp_ChassisIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "chassis-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp).ChassisId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_ChassisIdTypePath represents the /openconfig-lldp/lldp/state/chassis-id-type YANG schema element.
type Lldp_ChassisIdTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_ChassisIdTypePathAny represents the wildcard version of the /openconfig-lldp/lldp/state/chassis-id-type YANG schema element.
type Lldp_ChassisIdTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/chassis-id-type"
//	Path from root:       "/lldp/state/chassis-id-type"
func (n *Lldp_ChassisIdTypePath) State() ygnmi.SingletonQuery[oc.E_Lldp_ChassisIdType] {
	return ygnmi.NewSingletonQuery[oc.E_Lldp_ChassisIdType](
		"Lldp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "chassis-id-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lldp_ChassisIdType, bool) {
			ret := gs.(*oc.Lldp).ChassisIdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/chassis-id-type"
//	Path from root:       "/lldp/state/chassis-id-type"
func (n *Lldp_ChassisIdTypePathAny) State() ygnmi.WildcardQuery[oc.E_Lldp_ChassisIdType] {
	return ygnmi.NewWildcardQuery[oc.E_Lldp_ChassisIdType](
		"Lldp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "chassis-id-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lldp_ChassisIdType, bool) {
			ret := gs.(*oc.Lldp).ChassisIdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/chassis-id-type"
//	Path from root:       "/lldp/config/chassis-id-type"
func (n *Lldp_ChassisIdTypePath) Config() ygnmi.ConfigQuery[oc.E_Lldp_ChassisIdType] {
	return ygnmi.NewConfigQuery[oc.E_Lldp_ChassisIdType](
		"Lldp",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "chassis-id-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lldp_ChassisIdType, bool) {
			ret := gs.(*oc.Lldp).ChassisIdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/chassis-id-type"
//	Path from root:       "/lldp/config/chassis-id-type"
func (n *Lldp_ChassisIdTypePathAny) Config() ygnmi.WildcardQuery[oc.E_Lldp_ChassisIdType] {
	return ygnmi.NewWildcardQuery[oc.E_Lldp_ChassisIdType](
		"Lldp",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "chassis-id-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lldp_ChassisIdType, bool) {
			ret := gs.(*oc.Lldp).ChassisIdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_EnabledPath represents the /openconfig-lldp/lldp/state/enabled YANG schema element.
type Lldp_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_EnabledPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/enabled YANG schema element.
type Lldp_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/enabled"
//	Path from root:       "/lldp/state/enabled"
func (n *Lldp_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Lldp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lldp).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/enabled"
//	Path from root:       "/lldp/state/enabled"
func (n *Lldp_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Lldp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lldp).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/enabled"
//	Path from root:       "/lldp/config/enabled"
func (n *Lldp_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Lldp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lldp).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/enabled"
//	Path from root:       "/lldp/config/enabled"
func (n *Lldp_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Lldp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lldp).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_HelloTimerPath represents the /openconfig-lldp/lldp/state/hello-timer YANG schema element.
type Lldp_HelloTimerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_HelloTimerPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/hello-timer YANG schema element.
type Lldp_HelloTimerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/hello-timer"
//	Path from root:       "/lldp/state/hello-timer"
func (n *Lldp_HelloTimerPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp).HelloTimer
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/hello-timer"
//	Path from root:       "/lldp/state/hello-timer"
func (n *Lldp_HelloTimerPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp).HelloTimer
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/hello-timer"
//	Path from root:       "/lldp/config/hello-timer"
func (n *Lldp_HelloTimerPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Lldp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp).HelloTimer
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/hello-timer"
//	Path from root:       "/lldp/config/hello-timer"
func (n *Lldp_HelloTimerPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp).HelloTimer
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_SuppressTlvAdvertisementPath represents the /openconfig-lldp/lldp/state/suppress-tlv-advertisement YANG schema element.
type Lldp_SuppressTlvAdvertisementPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_SuppressTlvAdvertisementPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/suppress-tlv-advertisement YANG schema element.
type Lldp_SuppressTlvAdvertisementPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/suppress-tlv-advertisement"
//	Path from root:       "/lldp/state/suppress-tlv-advertisement"
func (n *Lldp_SuppressTlvAdvertisementPath) State() ygnmi.SingletonQuery[[]oc.E_LldpTypes_LLDP_TLV] {
	return ygnmi.NewSingletonQuery[[]oc.E_LldpTypes_LLDP_TLV](
		"Lldp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "suppress-tlv-advertisement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_LldpTypes_LLDP_TLV, bool) {
			ret := gs.(*oc.Lldp).SuppressTlvAdvertisement
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/suppress-tlv-advertisement"
//	Path from root:       "/lldp/state/suppress-tlv-advertisement"
func (n *Lldp_SuppressTlvAdvertisementPathAny) State() ygnmi.WildcardQuery[[]oc.E_LldpTypes_LLDP_TLV] {
	return ygnmi.NewWildcardQuery[[]oc.E_LldpTypes_LLDP_TLV](
		"Lldp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "suppress-tlv-advertisement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_LldpTypes_LLDP_TLV, bool) {
			ret := gs.(*oc.Lldp).SuppressTlvAdvertisement
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/suppress-tlv-advertisement"
//	Path from root:       "/lldp/config/suppress-tlv-advertisement"
func (n *Lldp_SuppressTlvAdvertisementPath) Config() ygnmi.ConfigQuery[[]oc.E_LldpTypes_LLDP_TLV] {
	return ygnmi.NewConfigQuery[[]oc.E_LldpTypes_LLDP_TLV](
		"Lldp",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "suppress-tlv-advertisement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_LldpTypes_LLDP_TLV, bool) {
			ret := gs.(*oc.Lldp).SuppressTlvAdvertisement
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/suppress-tlv-advertisement"
//	Path from root:       "/lldp/config/suppress-tlv-advertisement"
func (n *Lldp_SuppressTlvAdvertisementPathAny) Config() ygnmi.WildcardQuery[[]oc.E_LldpTypes_LLDP_TLV] {
	return ygnmi.NewWildcardQuery[[]oc.E_LldpTypes_LLDP_TLV](
		"Lldp",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "suppress-tlv-advertisement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_LldpTypes_LLDP_TLV, bool) {
			ret := gs.(*oc.Lldp).SuppressTlvAdvertisement
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_SystemDescriptionPath represents the /openconfig-lldp/lldp/state/system-description YANG schema element.
type Lldp_SystemDescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_SystemDescriptionPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/system-description YANG schema element.
type Lldp_SystemDescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/system-description"
//	Path from root:       "/lldp/state/system-description"
func (n *Lldp_SystemDescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lldp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp).SystemDescription
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/system-description"
//	Path from root:       "/lldp/state/system-description"
func (n *Lldp_SystemDescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp).SystemDescription
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/system-description"
//	Path from root:       "/lldp/config/system-description"
func (n *Lldp_SystemDescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Lldp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "system-description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp).SystemDescription
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/system-description"
//	Path from root:       "/lldp/config/system-description"
func (n *Lldp_SystemDescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "system-description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp).SystemDescription
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_SystemNamePath represents the /openconfig-lldp/lldp/state/system-name YANG schema element.
type Lldp_SystemNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_SystemNamePathAny represents the wildcard version of the /openconfig-lldp/lldp/state/system-name YANG schema element.
type Lldp_SystemNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/system-name"
//	Path from root:       "/lldp/state/system-name"
func (n *Lldp_SystemNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lldp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp).SystemName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/system-name"
//	Path from root:       "/lldp/state/system-name"
func (n *Lldp_SystemNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp).SystemName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/system-name"
//	Path from root:       "/lldp/config/system-name"
func (n *Lldp_SystemNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Lldp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "system-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp).SystemName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/system-name"
//	Path from root:       "/lldp/config/system-name"
func (n *Lldp_SystemNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "system-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp).SystemName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// LldpPath represents the /openconfig-lldp/lldp YANG schema element.
type LldpPath struct {
	*ygnmi.NodePath
}

// LldpPathAny represents the wildcard version of the /openconfig-lldp/lldp YANG schema element.
type LldpPathAny struct {
	*ygnmi.NodePath
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the
// chassis component of the endpoint identifier associated with
// the transmitting LLDP agent
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/chassis-id"
//	Path from root:       "/lldp/*/chassis-id"
func (n *LldpPath) ChassisId() *Lldp_ChassisIdPath {
	ps := &Lldp_ChassisIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "chassis-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the
// chassis component of the endpoint identifier associated with
// the transmitting LLDP agent
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/chassis-id"
//	Path from root:       "/lldp/*/chassis-id"
func (n *LldpPathAny) ChassisId() *Lldp_ChassisIdPathAny {
	ps := &Lldp_ChassisIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "chassis-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis
// identifier string. It is an enumerator defined by the
// LldpChassisIdSubtype object from IEEE 802.1AB MIB.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/chassis-id-type"
//	Path from root:       "/lldp/*/chassis-id-type"
func (n *LldpPath) ChassisIdType() *Lldp_ChassisIdTypePath {
	ps := &Lldp_ChassisIdTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis
// identifier string. It is an enumerator defined by the
// LldpChassisIdSubtype object from IEEE 802.1AB MIB.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/chassis-id-type"
//	Path from root:       "/lldp/*/chassis-id-type"
func (n *LldpPathAny) ChassisIdType() *Lldp_ChassisIdTypePathAny {
	ps := &Lldp_ChassisIdTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (container): Global LLDP counters
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/counters"
//	Path from root:       "/lldp/state/counters"
func (n *LldpPath) Counters() *Lldp_CountersPath {
	ps := &Lldp_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Global LLDP counters
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/counters"
//	Path from root:       "/lldp/state/counters"
func (n *LldpPathAny) Counters() *Lldp_CountersPathAny {
	ps := &Lldp_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enabled (leaf): System level state of the LLDP protocol.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/enabled"
//	Path from root:       "/lldp/*/enabled"
func (n *LldpPath) Enabled() *Lldp_EnabledPath {
	ps := &Lldp_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): System level state of the LLDP protocol.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/enabled"
//	Path from root:       "/lldp/*/enabled"
func (n *LldpPathAny) Enabled() *Lldp_EnabledPathAny {
	ps := &Lldp_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloTimer (leaf): System level hello timer for the LLDP protocol.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/hello-timer"
//	Path from root:       "/lldp/*/hello-timer"
func (n *LldpPath) HelloTimer() *Lldp_HelloTimerPath {
	ps := &Lldp_HelloTimerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloTimer (leaf): System level hello timer for the LLDP protocol.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/hello-timer"
//	Path from root:       "/lldp/*/hello-timer"
func (n *LldpPathAny) HelloTimer() *Lldp_HelloTimerPathAny {
	ps := &Lldp_HelloTimerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceAny (list): List of interfaces on which LLDP is enabled / available
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/lldp/interfaces/interface"
func (n *LldpPath) InterfaceAny() *Lldp_InterfacePathAny {
	ps := &Lldp_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of interfaces on which LLDP is enabled / available
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/lldp/interfaces/interface"
func (n *LldpPathAny) InterfaceAny() *Lldp_InterfacePathAny {
	ps := &Lldp_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces on which LLDP is enabled / available
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/lldp/interfaces/interface"
//
//	Name: string
func (n *LldpPath) Interface(Name string) *Lldp_InterfacePath {
	ps := &Lldp_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces on which LLDP is enabled / available
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/lldp/interfaces/interface"
//
//	Name: string
func (n *LldpPathAny) Interface(Name string) *Lldp_InterfacePathAny {
	ps := &Lldp_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces on which LLDP is enabled / available
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/lldp/interfaces/interface"
func (n *LldpPath) InterfaceMap() *Lldp_InterfacePathMap {
	ps := &Lldp_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces on which LLDP is enabled / available
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/lldp/interfaces/interface"
func (n *LldpPathAny) InterfaceMap() *Lldp_InterfacePathMapAny {
	ps := &Lldp_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SuppressTlvAdvertisement (leaf-list): Indicates whether the local system should suppress the
// advertisement of particular TLVs with the LLDP PDUs that it
// transmits. Where a TLV type is specified within this list, it
// should not be included in any LLDP PDU transmitted by the
// local agent.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/suppress-tlv-advertisement"
//	Path from root:       "/lldp/*/suppress-tlv-advertisement"
func (n *LldpPath) SuppressTlvAdvertisement() *Lldp_SuppressTlvAdvertisementPath {
	ps := &Lldp_SuppressTlvAdvertisementPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "suppress-tlv-advertisement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SuppressTlvAdvertisement (leaf-list): Indicates whether the local system should suppress the
// advertisement of particular TLVs with the LLDP PDUs that it
// transmits. Where a TLV type is specified within this list, it
// should not be included in any LLDP PDU transmitted by the
// local agent.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/suppress-tlv-advertisement"
//	Path from root:       "/lldp/*/suppress-tlv-advertisement"
func (n *LldpPathAny) SuppressTlvAdvertisement() *Lldp_SuppressTlvAdvertisementPathAny {
	ps := &Lldp_SuppressTlvAdvertisementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "suppress-tlv-advertisement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric
// string that is the textual description of the network entity.
// The system description should include the full name and
// version identification of the system's hardware type,
// software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object
// should be used for this field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/system-description"
//	Path from root:       "/lldp/*/system-description"
func (n *LldpPath) SystemDescription() *Lldp_SystemDescriptionPath {
	ps := &Lldp_SystemDescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric
// string that is the textual description of the network entity.
// The system description should include the full name and
// version identification of the system's hardware type,
// software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object
// should be used for this field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/system-description"
//	Path from root:       "/lldp/*/system-description"
func (n *LldpPathAny) SystemDescription() *Lldp_SystemDescriptionPathAny {
	ps := &Lldp_SystemDescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string
// that indicates the system's administratively assigned name.
// The system name should be the system's fully qualified domain
// name. If implementations support IETF RFC 3418, the sysName
// object should be used for this field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/system-name"
//	Path from root:       "/lldp/*/system-name"
func (n *LldpPath) SystemName() *Lldp_SystemNamePath {
	ps := &Lldp_SystemNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string
// that indicates the system's administratively assigned name.
// The system name should be the system's fully qualified domain
// name. If implementations support IETF RFC 3418, the sysName
// object should be used for this field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/system-name"
//	Path from root:       "/lldp/*/system-name"
func (n *LldpPathAny) SystemName() *Lldp_SystemNamePathAny {
	ps := &Lldp_SystemNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *LldpPath) State() ygnmi.SingletonQuery[*oc.Lldp] {
	return ygnmi.NewSingletonQuery[*oc.Lldp](
		"Lldp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *LldpPathAny) State() ygnmi.WildcardQuery[*oc.Lldp] {
	return ygnmi.NewWildcardQuery[*oc.Lldp](
		"Lldp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *LldpPath) Config() ygnmi.ConfigQuery[*oc.Lldp] {
	return ygnmi.NewConfigQuery[*oc.Lldp](
		"Lldp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *LldpPathAny) Config() ygnmi.WildcardQuery[*oc.Lldp] {
	return ygnmi.NewWildcardQuery[*oc.Lldp](
		"Lldp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Counters_EntriesAgedOutPath represents the /openconfig-lldp/lldp/state/counters/entries-aged-out YANG schema element.
type Lldp_Counters_EntriesAgedOutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Counters_EntriesAgedOutPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/entries-aged-out YANG schema element.
type Lldp_Counters_EntriesAgedOutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "entries-aged-out"
//	Path from root:       "/lldp/state/counters/entries-aged-out"
func (n *Lldp_Counters_EntriesAgedOutPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"entries-aged-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).EntriesAgedOut
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "entries-aged-out"
//	Path from root:       "/lldp/state/counters/entries-aged-out"
func (n *Lldp_Counters_EntriesAgedOutPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"entries-aged-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).EntriesAgedOut
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Counters_FrameDiscardPath represents the /openconfig-lldp/lldp/state/counters/frame-discard YANG schema element.
type Lldp_Counters_FrameDiscardPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Counters_FrameDiscardPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/frame-discard YANG schema element.
type Lldp_Counters_FrameDiscardPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-discard"
//	Path from root:       "/lldp/state/counters/frame-discard"
func (n *Lldp_Counters_FrameDiscardPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).FrameDiscard
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-discard"
//	Path from root:       "/lldp/state/counters/frame-discard"
func (n *Lldp_Counters_FrameDiscardPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).FrameDiscard
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Counters_FrameErrorInPath represents the /openconfig-lldp/lldp/state/counters/frame-error-in YANG schema element.
type Lldp_Counters_FrameErrorInPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Counters_FrameErrorInPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/frame-error-in YANG schema element.
type Lldp_Counters_FrameErrorInPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-error-in"
//	Path from root:       "/lldp/state/counters/frame-error-in"
func (n *Lldp_Counters_FrameErrorInPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-error-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).FrameErrorIn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-error-in"
//	Path from root:       "/lldp/state/counters/frame-error-in"
func (n *Lldp_Counters_FrameErrorInPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-error-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).FrameErrorIn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Counters_FrameInPath represents the /openconfig-lldp/lldp/state/counters/frame-in YANG schema element.
type Lldp_Counters_FrameInPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Counters_FrameInPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/frame-in YANG schema element.
type Lldp_Counters_FrameInPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-in"
//	Path from root:       "/lldp/state/counters/frame-in"
func (n *Lldp_Counters_FrameInPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).FrameIn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-in"
//	Path from root:       "/lldp/state/counters/frame-in"
func (n *Lldp_Counters_FrameInPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).FrameIn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Counters_FrameOutPath represents the /openconfig-lldp/lldp/state/counters/frame-out YANG schema element.
type Lldp_Counters_FrameOutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Counters_FrameOutPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/frame-out YANG schema element.
type Lldp_Counters_FrameOutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-out"
//	Path from root:       "/lldp/state/counters/frame-out"
func (n *Lldp_Counters_FrameOutPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).FrameOut
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-out"
//	Path from root:       "/lldp/state/counters/frame-out"
func (n *Lldp_Counters_FrameOutPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).FrameOut
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Counters_LastClearPath represents the /openconfig-lldp/lldp/state/counters/last-clear YANG schema element.
type Lldp_Counters_LastClearPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Counters_LastClearPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/last-clear YANG schema element.
type Lldp_Counters_LastClearPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "last-clear"
//	Path from root:       "/lldp/state/counters/last-clear"
func (n *Lldp_Counters_LastClearPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Counters).LastClear
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "last-clear"
//	Path from root:       "/lldp/state/counters/last-clear"
func (n *Lldp_Counters_LastClearPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Counters).LastClear
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Counters_TlvAcceptedPath represents the /openconfig-lldp/lldp/state/counters/tlv-accepted YANG schema element.
type Lldp_Counters_TlvAcceptedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Counters_TlvAcceptedPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/tlv-accepted YANG schema element.
type Lldp_Counters_TlvAcceptedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-accepted"
//	Path from root:       "/lldp/state/counters/tlv-accepted"
func (n *Lldp_Counters_TlvAcceptedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-accepted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).TlvAccepted
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-accepted"
//	Path from root:       "/lldp/state/counters/tlv-accepted"
func (n *Lldp_Counters_TlvAcceptedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-accepted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).TlvAccepted
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Counters_TlvDiscardPath represents the /openconfig-lldp/lldp/state/counters/tlv-discard YANG schema element.
type Lldp_Counters_TlvDiscardPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Counters_TlvDiscardPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/tlv-discard YANG schema element.
type Lldp_Counters_TlvDiscardPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-discard"
//	Path from root:       "/lldp/state/counters/tlv-discard"
func (n *Lldp_Counters_TlvDiscardPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).TlvDiscard
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-discard"
//	Path from root:       "/lldp/state/counters/tlv-discard"
func (n *Lldp_Counters_TlvDiscardPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).TlvDiscard
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Counters_TlvUnknownPath represents the /openconfig-lldp/lldp/state/counters/tlv-unknown YANG schema element.
type Lldp_Counters_TlvUnknownPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Counters_TlvUnknownPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/tlv-unknown YANG schema element.
type Lldp_Counters_TlvUnknownPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-unknown"
//	Path from root:       "/lldp/state/counters/tlv-unknown"
func (n *Lldp_Counters_TlvUnknownPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-unknown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).TlvUnknown
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-unknown"
//	Path from root:       "/lldp/state/counters/tlv-unknown"
func (n *Lldp_Counters_TlvUnknownPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-unknown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).TlvUnknown
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_CountersPath represents the /openconfig-lldp/lldp/state/counters YANG schema element.
type Lldp_CountersPath struct {
	*ygnmi.NodePath
}

// Lldp_CountersPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters YANG schema element.
type Lldp_CountersPathAny struct {
	*ygnmi.NodePath
}

// EntriesAgedOut (leaf): The number of entries aged out due to timeout.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "entries-aged-out"
//	Path from root:       "/lldp/state/counters/entries-aged-out"
func (n *Lldp_CountersPath) EntriesAgedOut() *Lldp_Counters_EntriesAgedOutPath {
	ps := &Lldp_Counters_EntriesAgedOutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries-aged-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EntriesAgedOut (leaf): The number of entries aged out due to timeout.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "entries-aged-out"
//	Path from root:       "/lldp/state/counters/entries-aged-out"
func (n *Lldp_CountersPathAny) EntriesAgedOut() *Lldp_Counters_EntriesAgedOutPathAny {
	ps := &Lldp_Counters_EntriesAgedOutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries-aged-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDiscard (leaf): The number of LLDP frames received and discarded.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-discard"
//	Path from root:       "/lldp/state/counters/frame-discard"
func (n *Lldp_CountersPath) FrameDiscard() *Lldp_Counters_FrameDiscardPath {
	ps := &Lldp_Counters_FrameDiscardPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDiscard (leaf): The number of LLDP frames received and discarded.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-discard"
//	Path from root:       "/lldp/state/counters/frame-discard"
func (n *Lldp_CountersPathAny) FrameDiscard() *Lldp_Counters_FrameDiscardPathAny {
	ps := &Lldp_Counters_FrameDiscardPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameErrorIn (leaf): The number of LLDP frames received with errors.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-error-in"
//	Path from root:       "/lldp/state/counters/frame-error-in"
func (n *Lldp_CountersPath) FrameErrorIn() *Lldp_Counters_FrameErrorInPath {
	ps := &Lldp_Counters_FrameErrorInPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-error-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameErrorIn (leaf): The number of LLDP frames received with errors.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-error-in"
//	Path from root:       "/lldp/state/counters/frame-error-in"
func (n *Lldp_CountersPathAny) FrameErrorIn() *Lldp_Counters_FrameErrorInPathAny {
	ps := &Lldp_Counters_FrameErrorInPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-error-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameIn (leaf): The number of lldp frames received.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-in"
//	Path from root:       "/lldp/state/counters/frame-in"
func (n *Lldp_CountersPath) FrameIn() *Lldp_Counters_FrameInPath {
	ps := &Lldp_Counters_FrameInPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameIn (leaf): The number of lldp frames received.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-in"
//	Path from root:       "/lldp/state/counters/frame-in"
func (n *Lldp_CountersPathAny) FrameIn() *Lldp_Counters_FrameInPathAny {
	ps := &Lldp_Counters_FrameInPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameOut (leaf): The number of frames transmitted out.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-out"
//	Path from root:       "/lldp/state/counters/frame-out"
func (n *Lldp_CountersPath) FrameOut() *Lldp_Counters_FrameOutPath {
	ps := &Lldp_Counters_FrameOutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameOut (leaf): The number of frames transmitted out.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-out"
//	Path from root:       "/lldp/state/counters/frame-out"
func (n *Lldp_CountersPathAny) FrameOut() *Lldp_Counters_FrameOutPathAny {
	ps := &Lldp_Counters_FrameOutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastClear (leaf): Indicates the last time the counters were
// cleared.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "last-clear"
//	Path from root:       "/lldp/state/counters/last-clear"
func (n *Lldp_CountersPath) LastClear() *Lldp_Counters_LastClearPath {
	ps := &Lldp_Counters_LastClearPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastClear (leaf): Indicates the last time the counters were
// cleared.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "last-clear"
//	Path from root:       "/lldp/state/counters/last-clear"
func (n *Lldp_CountersPathAny) LastClear() *Lldp_Counters_LastClearPathAny {
	ps := &Lldp_Counters_LastClearPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvAccepted (leaf): The number of valid TLVs received.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-accepted"
//	Path from root:       "/lldp/state/counters/tlv-accepted"
func (n *Lldp_CountersPath) TlvAccepted() *Lldp_Counters_TlvAcceptedPath {
	ps := &Lldp_Counters_TlvAcceptedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-accepted"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvAccepted (leaf): The number of valid TLVs received.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-accepted"
//	Path from root:       "/lldp/state/counters/tlv-accepted"
func (n *Lldp_CountersPathAny) TlvAccepted() *Lldp_Counters_TlvAcceptedPathAny {
	ps := &Lldp_Counters_TlvAcceptedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-accepted"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvDiscard (leaf): The number of TLV frames received and discarded.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-discard"
//	Path from root:       "/lldp/state/counters/tlv-discard"
func (n *Lldp_CountersPath) TlvDiscard() *Lldp_Counters_TlvDiscardPath {
	ps := &Lldp_Counters_TlvDiscardPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvDiscard (leaf): The number of TLV frames received and discarded.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-discard"
//	Path from root:       "/lldp/state/counters/tlv-discard"
func (n *Lldp_CountersPathAny) TlvDiscard() *Lldp_Counters_TlvDiscardPathAny {
	ps := &Lldp_Counters_TlvDiscardPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvUnknown (leaf): The number of frames received with unknown TLV.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-unknown"
//	Path from root:       "/lldp/state/counters/tlv-unknown"
func (n *Lldp_CountersPath) TlvUnknown() *Lldp_Counters_TlvUnknownPath {
	ps := &Lldp_Counters_TlvUnknownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-unknown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvUnknown (leaf): The number of frames received with unknown TLV.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-unknown"
//	Path from root:       "/lldp/state/counters/tlv-unknown"
func (n *Lldp_CountersPathAny) TlvUnknown() *Lldp_Counters_TlvUnknownPathAny {
	ps := &Lldp_Counters_TlvUnknownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-unknown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_CountersPath) State() ygnmi.SingletonQuery[*oc.Lldp_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Lldp_Counters](
		"Lldp_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Lldp_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Lldp_Counters](
		"Lldp_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_EnabledPath represents the /openconfig-lldp/lldp/interfaces/interface/state/enabled YANG schema element.
type Lldp_Interface_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_EnabledPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/enabled YANG schema element.
type Lldp_Interface_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/enabled"
//	Path from root:       "/lldp/interfaces/interface/state/enabled"
func (n *Lldp_Interface_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Lldp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lldp_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/enabled"
//	Path from root:       "/lldp/interfaces/interface/state/enabled"
func (n *Lldp_Interface_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Lldp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lldp_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/enabled"
//	Path from root:       "/lldp/interfaces/interface/config/enabled"
func (n *Lldp_Interface_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Lldp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lldp_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/enabled"
//	Path from root:       "/lldp/interfaces/interface/config/enabled"
func (n *Lldp_Interface_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Lldp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lldp_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_NamePath represents the /openconfig-lldp/lldp/interfaces/interface/state/name YANG schema element.
type Lldp_Interface_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_NamePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/name YANG schema element.
type Lldp_Interface_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/name"
//	Path from root:       "/lldp/interfaces/interface/state/name"
func (n *Lldp_Interface_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lldp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/name"
//	Path from root:       "/lldp/interfaces/interface/state/name"
func (n *Lldp_Interface_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/name"
//	Path from root:       "/lldp/interfaces/interface/config/name"
func (n *Lldp_Interface_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Lldp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/name"
//	Path from root:       "/lldp/interfaces/interface/config/name"
func (n *Lldp_Interface_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_InterfacePath represents the /openconfig-lldp/lldp/interfaces/interface YANG schema element.
type Lldp_InterfacePath struct {
	*ygnmi.NodePath
}

// Lldp_InterfacePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface YANG schema element.
type Lldp_InterfacePathAny struct {
	*ygnmi.NodePath
}

// Lldp_InterfacePathMap represents the /openconfig-lldp/lldp/interfaces/interface YANG schema element.
type Lldp_InterfacePathMap struct {
	*ygnmi.NodePath
}

// Lldp_InterfacePathMapAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface YANG schema element.
type Lldp_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): LLDP counters on each interface
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/counters"
//	Path from root:       "/lldp/interfaces/interface/state/counters"
func (n *Lldp_InterfacePath) Counters() *Lldp_Interface_CountersPath {
	ps := &Lldp_Interface_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): LLDP counters on each interface
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/counters"
//	Path from root:       "/lldp/interfaces/interface/state/counters"
func (n *Lldp_InterfacePathAny) Counters() *Lldp_Interface_CountersPathAny {
	ps := &Lldp_Interface_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enabled (leaf): Enable or disable the LLDP protocol on the interface.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/enabled"
//	Path from root:       "/lldp/interfaces/interface/*/enabled"
func (n *Lldp_InterfacePath) Enabled() *Lldp_Interface_EnabledPath {
	ps := &Lldp_Interface_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Enable or disable the LLDP protocol on the interface.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/enabled"
//	Path from root:       "/lldp/interfaces/interface/*/enabled"
func (n *Lldp_InterfacePathAny) Enabled() *Lldp_Interface_EnabledPathAny {
	ps := &Lldp_Interface_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the LLDP Ethernet interface
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/name"
//	Path from root:       "/lldp/interfaces/interface/*/name"
func (n *Lldp_InterfacePath) Name() *Lldp_Interface_NamePath {
	ps := &Lldp_Interface_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the LLDP Ethernet interface
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/name"
//	Path from root:       "/lldp/interfaces/interface/*/name"
func (n *Lldp_InterfacePathAny) Name() *Lldp_Interface_NamePathAny {
	ps := &Lldp_Interface_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborAny (list): List of LLDP neighbors
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor"
func (n *Lldp_InterfacePath) NeighborAny() *Lldp_Interface_NeighborPathAny {
	ps := &Lldp_Interface_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// NeighborAny (list): List of LLDP neighbors
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor"
func (n *Lldp_InterfacePathAny) NeighborAny() *Lldp_Interface_NeighborPathAny {
	ps := &Lldp_Interface_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Neighbor (list): List of LLDP neighbors
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor"
//
//	Id: string
func (n *Lldp_InterfacePath) Neighbor(Id string) *Lldp_Interface_NeighborPath {
	ps := &Lldp_Interface_NeighborPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Neighbor (list): List of LLDP neighbors
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor"
//
//	Id: string
func (n *Lldp_InterfacePathAny) Neighbor(Id string) *Lldp_Interface_NeighborPathAny {
	ps := &Lldp_Interface_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// NeighborMap (list): List of LLDP neighbors
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor"
func (n *Lldp_InterfacePath) NeighborMap() *Lldp_Interface_NeighborPathMap {
	ps := &Lldp_Interface_NeighborPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborMap (list): List of LLDP neighbors
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor"
func (n *Lldp_InterfacePathAny) NeighborMap() *Lldp_Interface_NeighborPathMapAny {
	ps := &Lldp_Interface_NeighborPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_InterfacePath) State() ygnmi.SingletonQuery[*oc.Lldp_Interface] {
	return ygnmi.NewSingletonQuery[*oc.Lldp_Interface](
		"Lldp_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.Lldp_Interface] {
	return ygnmi.NewWildcardQuery[*oc.Lldp_Interface](
		"Lldp_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Lldp_InterfacePath) Config() ygnmi.ConfigQuery[*oc.Lldp_Interface] {
	return ygnmi.NewConfigQuery[*oc.Lldp_Interface](
		"Lldp_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Lldp_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.Lldp_Interface] {
	return ygnmi.NewWildcardQuery[*oc.Lldp_Interface](
		"Lldp_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Lldp_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Lldp_Interface](
		"Lldp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Lldp_Interface, bool) {
			ret := gs.(*oc.Lldp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lldp:interfaces"},
			PostRelPath: []string{"openconfig-lldp:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Lldp_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Lldp_Interface](
		"Lldp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Lldp_Interface, bool) {
			ret := gs.(*oc.Lldp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lldp:interfaces"},
			PostRelPath: []string{"openconfig-lldp:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Lldp_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Lldp_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.Lldp_Interface](
		"Lldp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Lldp_Interface, bool) {
			ret := gs.(*oc.Lldp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lldp:interfaces"},
			PostRelPath: []string{"openconfig-lldp:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Lldp_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Lldp_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Lldp_Interface](
		"Lldp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Lldp_Interface, bool) {
			ret := gs.(*oc.Lldp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lldp:interfaces"},
			PostRelPath: []string{"openconfig-lldp:interface"},
		},
	)
}

// Lldp_Interface_Counters_FrameDiscardPath represents the /openconfig-lldp/lldp/interfaces/interface/state/counters/frame-discard YANG schema element.
type Lldp_Interface_Counters_FrameDiscardPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Counters_FrameDiscardPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/counters/frame-discard YANG schema element.
type Lldp_Interface_Counters_FrameDiscardPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-discard"
//	Path from root:       "/lldp/interfaces/interface/state/counters/frame-discard"
func (n *Lldp_Interface_Counters_FrameDiscardPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Interface_Counters).FrameDiscard
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-discard"
//	Path from root:       "/lldp/interfaces/interface/state/counters/frame-discard"
func (n *Lldp_Interface_Counters_FrameDiscardPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Interface_Counters).FrameDiscard
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Counters_FrameErrorInPath represents the /openconfig-lldp/lldp/interfaces/interface/state/counters/frame-error-in YANG schema element.
type Lldp_Interface_Counters_FrameErrorInPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Counters_FrameErrorInPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/counters/frame-error-in YANG schema element.
type Lldp_Interface_Counters_FrameErrorInPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-error-in"
//	Path from root:       "/lldp/interfaces/interface/state/counters/frame-error-in"
func (n *Lldp_Interface_Counters_FrameErrorInPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-error-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Interface_Counters).FrameErrorIn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-error-in"
//	Path from root:       "/lldp/interfaces/interface/state/counters/frame-error-in"
func (n *Lldp_Interface_Counters_FrameErrorInPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-error-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Interface_Counters).FrameErrorIn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Counters_FrameErrorOutPath represents the /openconfig-lldp/lldp/interfaces/interface/state/counters/frame-error-out YANG schema element.
type Lldp_Interface_Counters_FrameErrorOutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Counters_FrameErrorOutPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/counters/frame-error-out YANG schema element.
type Lldp_Interface_Counters_FrameErrorOutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-error-out"
//	Path from root:       "/lldp/interfaces/interface/state/counters/frame-error-out"
func (n *Lldp_Interface_Counters_FrameErrorOutPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-error-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Interface_Counters).FrameErrorOut
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-error-out"
//	Path from root:       "/lldp/interfaces/interface/state/counters/frame-error-out"
func (n *Lldp_Interface_Counters_FrameErrorOutPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-error-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Interface_Counters).FrameErrorOut
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Counters_FrameInPath represents the /openconfig-lldp/lldp/interfaces/interface/state/counters/frame-in YANG schema element.
type Lldp_Interface_Counters_FrameInPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Counters_FrameInPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/counters/frame-in YANG schema element.
type Lldp_Interface_Counters_FrameInPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-in"
//	Path from root:       "/lldp/interfaces/interface/state/counters/frame-in"
func (n *Lldp_Interface_Counters_FrameInPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Interface_Counters).FrameIn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-in"
//	Path from root:       "/lldp/interfaces/interface/state/counters/frame-in"
func (n *Lldp_Interface_Counters_FrameInPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Interface_Counters).FrameIn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Counters_FrameOutPath represents the /openconfig-lldp/lldp/interfaces/interface/state/counters/frame-out YANG schema element.
type Lldp_Interface_Counters_FrameOutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Counters_FrameOutPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/counters/frame-out YANG schema element.
type Lldp_Interface_Counters_FrameOutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-out"
//	Path from root:       "/lldp/interfaces/interface/state/counters/frame-out"
func (n *Lldp_Interface_Counters_FrameOutPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Interface_Counters).FrameOut
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-out"
//	Path from root:       "/lldp/interfaces/interface/state/counters/frame-out"
func (n *Lldp_Interface_Counters_FrameOutPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Interface_Counters).FrameOut
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Counters_LastClearPath represents the /openconfig-lldp/lldp/interfaces/interface/state/counters/last-clear YANG schema element.
type Lldp_Interface_Counters_LastClearPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Counters_LastClearPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/counters/last-clear YANG schema element.
type Lldp_Interface_Counters_LastClearPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "last-clear"
//	Path from root:       "/lldp/interfaces/interface/state/counters/last-clear"
func (n *Lldp_Interface_Counters_LastClearPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lldp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Counters).LastClear
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "last-clear"
//	Path from root:       "/lldp/interfaces/interface/state/counters/last-clear"
func (n *Lldp_Interface_Counters_LastClearPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Counters).LastClear
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Counters_TlvDiscardPath represents the /openconfig-lldp/lldp/interfaces/interface/state/counters/tlv-discard YANG schema element.
type Lldp_Interface_Counters_TlvDiscardPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Counters_TlvDiscardPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/counters/tlv-discard YANG schema element.
type Lldp_Interface_Counters_TlvDiscardPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-discard"
//	Path from root:       "/lldp/interfaces/interface/state/counters/tlv-discard"
func (n *Lldp_Interface_Counters_TlvDiscardPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Interface_Counters).TlvDiscard
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-discard"
//	Path from root:       "/lldp/interfaces/interface/state/counters/tlv-discard"
func (n *Lldp_Interface_Counters_TlvDiscardPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Interface_Counters).TlvDiscard
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Counters_TlvUnknownPath represents the /openconfig-lldp/lldp/interfaces/interface/state/counters/tlv-unknown YANG schema element.
type Lldp_Interface_Counters_TlvUnknownPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Counters_TlvUnknownPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/counters/tlv-unknown YANG schema element.
type Lldp_Interface_Counters_TlvUnknownPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-unknown"
//	Path from root:       "/lldp/interfaces/interface/state/counters/tlv-unknown"
func (n *Lldp_Interface_Counters_TlvUnknownPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-unknown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Interface_Counters).TlvUnknown
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-unknown"
//	Path from root:       "/lldp/interfaces/interface/state/counters/tlv-unknown"
func (n *Lldp_Interface_Counters_TlvUnknownPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-unknown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Interface_Counters).TlvUnknown
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_CountersPath represents the /openconfig-lldp/lldp/interfaces/interface/state/counters YANG schema element.
type Lldp_Interface_CountersPath struct {
	*ygnmi.NodePath
}

// Lldp_Interface_CountersPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/counters YANG schema element.
type Lldp_Interface_CountersPathAny struct {
	*ygnmi.NodePath
}

// FrameDiscard (leaf): The number of LLDP frames received and discarded.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-discard"
//	Path from root:       "/lldp/interfaces/interface/state/counters/frame-discard"
func (n *Lldp_Interface_CountersPath) FrameDiscard() *Lldp_Interface_Counters_FrameDiscardPath {
	ps := &Lldp_Interface_Counters_FrameDiscardPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDiscard (leaf): The number of LLDP frames received and discarded.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-discard"
//	Path from root:       "/lldp/interfaces/interface/state/counters/frame-discard"
func (n *Lldp_Interface_CountersPathAny) FrameDiscard() *Lldp_Interface_Counters_FrameDiscardPathAny {
	ps := &Lldp_Interface_Counters_FrameDiscardPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameErrorIn (leaf): The number of LLDP frames received with errors.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-error-in"
//	Path from root:       "/lldp/interfaces/interface/state/counters/frame-error-in"
func (n *Lldp_Interface_CountersPath) FrameErrorIn() *Lldp_Interface_Counters_FrameErrorInPath {
	ps := &Lldp_Interface_Counters_FrameErrorInPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-error-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameErrorIn (leaf): The number of LLDP frames received with errors.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-error-in"
//	Path from root:       "/lldp/interfaces/interface/state/counters/frame-error-in"
func (n *Lldp_Interface_CountersPathAny) FrameErrorIn() *Lldp_Interface_Counters_FrameErrorInPathAny {
	ps := &Lldp_Interface_Counters_FrameErrorInPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-error-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameErrorOut (leaf): The number of frame transmit errors on the
// interface.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-error-out"
//	Path from root:       "/lldp/interfaces/interface/state/counters/frame-error-out"
func (n *Lldp_Interface_CountersPath) FrameErrorOut() *Lldp_Interface_Counters_FrameErrorOutPath {
	ps := &Lldp_Interface_Counters_FrameErrorOutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-error-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameErrorOut (leaf): The number of frame transmit errors on the
// interface.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-error-out"
//	Path from root:       "/lldp/interfaces/interface/state/counters/frame-error-out"
func (n *Lldp_Interface_CountersPathAny) FrameErrorOut() *Lldp_Interface_Counters_FrameErrorOutPathAny {
	ps := &Lldp_Interface_Counters_FrameErrorOutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-error-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameIn (leaf): The number of lldp frames received.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-in"
//	Path from root:       "/lldp/interfaces/interface/state/counters/frame-in"
func (n *Lldp_Interface_CountersPath) FrameIn() *Lldp_Interface_Counters_FrameInPath {
	ps := &Lldp_Interface_Counters_FrameInPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameIn (leaf): The number of lldp frames received.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-in"
//	Path from root:       "/lldp/interfaces/interface/state/counters/frame-in"
func (n *Lldp_Interface_CountersPathAny) FrameIn() *Lldp_Interface_Counters_FrameInPathAny {
	ps := &Lldp_Interface_Counters_FrameInPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameOut (leaf): The number of frames transmitted out.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-out"
//	Path from root:       "/lldp/interfaces/interface/state/counters/frame-out"
func (n *Lldp_Interface_CountersPath) FrameOut() *Lldp_Interface_Counters_FrameOutPath {
	ps := &Lldp_Interface_Counters_FrameOutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameOut (leaf): The number of frames transmitted out.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-out"
//	Path from root:       "/lldp/interfaces/interface/state/counters/frame-out"
func (n *Lldp_Interface_CountersPathAny) FrameOut() *Lldp_Interface_Counters_FrameOutPathAny {
	ps := &Lldp_Interface_Counters_FrameOutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastClear (leaf): Indicates the last time the counters were
// cleared.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "last-clear"
//	Path from root:       "/lldp/interfaces/interface/state/counters/last-clear"
func (n *Lldp_Interface_CountersPath) LastClear() *Lldp_Interface_Counters_LastClearPath {
	ps := &Lldp_Interface_Counters_LastClearPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastClear (leaf): Indicates the last time the counters were
// cleared.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "last-clear"
//	Path from root:       "/lldp/interfaces/interface/state/counters/last-clear"
func (n *Lldp_Interface_CountersPathAny) LastClear() *Lldp_Interface_Counters_LastClearPathAny {
	ps := &Lldp_Interface_Counters_LastClearPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvDiscard (leaf): The number of TLV frames received and discarded.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-discard"
//	Path from root:       "/lldp/interfaces/interface/state/counters/tlv-discard"
func (n *Lldp_Interface_CountersPath) TlvDiscard() *Lldp_Interface_Counters_TlvDiscardPath {
	ps := &Lldp_Interface_Counters_TlvDiscardPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvDiscard (leaf): The number of TLV frames received and discarded.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-discard"
//	Path from root:       "/lldp/interfaces/interface/state/counters/tlv-discard"
func (n *Lldp_Interface_CountersPathAny) TlvDiscard() *Lldp_Interface_Counters_TlvDiscardPathAny {
	ps := &Lldp_Interface_Counters_TlvDiscardPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvUnknown (leaf): The number of frames received with unknown TLV.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-unknown"
//	Path from root:       "/lldp/interfaces/interface/state/counters/tlv-unknown"
func (n *Lldp_Interface_CountersPath) TlvUnknown() *Lldp_Interface_Counters_TlvUnknownPath {
	ps := &Lldp_Interface_Counters_TlvUnknownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-unknown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvUnknown (leaf): The number of frames received with unknown TLV.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-unknown"
//	Path from root:       "/lldp/interfaces/interface/state/counters/tlv-unknown"
func (n *Lldp_Interface_CountersPathAny) TlvUnknown() *Lldp_Interface_Counters_TlvUnknownPathAny {
	ps := &Lldp_Interface_Counters_TlvUnknownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-unknown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_CountersPath) State() ygnmi.SingletonQuery[*oc.Lldp_Interface_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Lldp_Interface_Counters](
		"Lldp_Interface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Lldp_Interface_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Lldp_Interface_Counters](
		"Lldp_Interface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_AgePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/age YANG schema element.
type Lldp_Interface_Neighbor_AgePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_AgePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/age YANG schema element.
type Lldp_Interface_Neighbor_AgePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/age"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/age"
func (n *Lldp_Interface_Neighbor_AgePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).Age
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/age"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/age"
func (n *Lldp_Interface_Neighbor_AgePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).Age
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_ChassisIdPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id YANG schema element.
type Lldp_Interface_Neighbor_ChassisIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_ChassisIdPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id YANG schema element.
type Lldp_Interface_Neighbor_ChassisIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/chassis-id"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id"
func (n *Lldp_Interface_Neighbor_ChassisIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "chassis-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).ChassisId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/chassis-id"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id"
func (n *Lldp_Interface_Neighbor_ChassisIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "chassis-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).ChassisId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_ChassisIdTypePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type YANG schema element.
type Lldp_Interface_Neighbor_ChassisIdTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_ChassisIdTypePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type YANG schema element.
type Lldp_Interface_Neighbor_ChassisIdTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/chassis-id-type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type"
func (n *Lldp_Interface_Neighbor_ChassisIdTypePath) State() ygnmi.SingletonQuery[oc.E_Lldp_ChassisIdType] {
	return ygnmi.NewSingletonQuery[oc.E_Lldp_ChassisIdType](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "chassis-id-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lldp_ChassisIdType, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).ChassisIdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/chassis-id-type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type"
func (n *Lldp_Interface_Neighbor_ChassisIdTypePathAny) State() ygnmi.WildcardQuery[oc.E_Lldp_ChassisIdType] {
	return ygnmi.NewWildcardQuery[oc.E_Lldp_ChassisIdType](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "chassis-id-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lldp_ChassisIdType, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).ChassisIdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_IdPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/id YANG schema element.
type Lldp_Interface_Neighbor_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_IdPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/id YANG schema element.
type Lldp_Interface_Neighbor_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/id"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/id"
func (n *Lldp_Interface_Neighbor_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/id"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/id"
func (n *Lldp_Interface_Neighbor_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *Lldp_Interface_Neighbor_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Lldp_Interface_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *Lldp_Interface_Neighbor_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_LastUpdatePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/last-update YANG schema element.
type Lldp_Interface_Neighbor_LastUpdatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_LastUpdatePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/last-update YANG schema element.
type Lldp_Interface_Neighbor_LastUpdatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/last-update"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/last-update"
func (n *Lldp_Interface_Neighbor_LastUpdatePath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-update"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).LastUpdate
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/last-update"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/last-update"
func (n *Lldp_Interface_Neighbor_LastUpdatePathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-update"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).LastUpdate
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_ManagementAddressPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/management-address YANG schema element.
type Lldp_Interface_Neighbor_ManagementAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_ManagementAddressPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/management-address YANG schema element.
type Lldp_Interface_Neighbor_ManagementAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/management-address"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/management-address"
func (n *Lldp_Interface_Neighbor_ManagementAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "management-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).ManagementAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/management-address"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/management-address"
func (n *Lldp_Interface_Neighbor_ManagementAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "management-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).ManagementAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_ManagementAddressTypePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/management-address-type YANG schema element.
type Lldp_Interface_Neighbor_ManagementAddressTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_ManagementAddressTypePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/management-address-type YANG schema element.
type Lldp_Interface_Neighbor_ManagementAddressTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/management-address-type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/management-address-type"
func (n *Lldp_Interface_Neighbor_ManagementAddressTypePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "management-address-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).ManagementAddressType
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/management-address-type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/management-address-type"
func (n *Lldp_Interface_Neighbor_ManagementAddressTypePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "management-address-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).ManagementAddressType
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_PortDescriptionPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/port-description YANG schema element.
type Lldp_Interface_Neighbor_PortDescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_PortDescriptionPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/port-description YANG schema element.
type Lldp_Interface_Neighbor_PortDescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/port-description"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/port-description"
func (n *Lldp_Interface_Neighbor_PortDescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).PortDescription
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/port-description"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/port-description"
func (n *Lldp_Interface_Neighbor_PortDescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).PortDescription
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_PortIdPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/port-id YANG schema element.
type Lldp_Interface_Neighbor_PortIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_PortIdPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/port-id YANG schema element.
type Lldp_Interface_Neighbor_PortIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/port-id"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/port-id"
func (n *Lldp_Interface_Neighbor_PortIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).PortId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/port-id"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/port-id"
func (n *Lldp_Interface_Neighbor_PortIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).PortId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_PortIdTypePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/port-id-type YANG schema element.
type Lldp_Interface_Neighbor_PortIdTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_PortIdTypePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/port-id-type YANG schema element.
type Lldp_Interface_Neighbor_PortIdTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/port-id-type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/port-id-type"
func (n *Lldp_Interface_Neighbor_PortIdTypePath) State() ygnmi.SingletonQuery[oc.E_Lldp_PortIdType] {
	return ygnmi.NewSingletonQuery[oc.E_Lldp_PortIdType](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-id-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lldp_PortIdType, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).PortIdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/port-id-type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/port-id-type"
func (n *Lldp_Interface_Neighbor_PortIdTypePathAny) State() ygnmi.WildcardQuery[oc.E_Lldp_PortIdType] {
	return ygnmi.NewWildcardQuery[oc.E_Lldp_PortIdType](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port-id-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lldp_PortIdType, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).PortIdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_SystemDescriptionPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/system-description YANG schema element.
type Lldp_Interface_Neighbor_SystemDescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_SystemDescriptionPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/system-description YANG schema element.
type Lldp_Interface_Neighbor_SystemDescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/system-description"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/system-description"
func (n *Lldp_Interface_Neighbor_SystemDescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).SystemDescription
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/system-description"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/system-description"
func (n *Lldp_Interface_Neighbor_SystemDescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).SystemDescription
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_SystemNamePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/system-name YANG schema element.
type Lldp_Interface_Neighbor_SystemNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_SystemNamePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/system-name YANG schema element.
type Lldp_Interface_Neighbor_SystemNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/system-name"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/system-name"
func (n *Lldp_Interface_Neighbor_SystemNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).SystemName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/system-name"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/system-name"
func (n *Lldp_Interface_Neighbor_SystemNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).SystemName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_TtlPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/ttl YANG schema element.
type Lldp_Interface_Neighbor_TtlPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_TtlPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/ttl YANG schema element.
type Lldp_Interface_Neighbor_TtlPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/ttl"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/ttl"
func (n *Lldp_Interface_Neighbor_TtlPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).Ttl
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/ttl"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/ttl"
func (n *Lldp_Interface_Neighbor_TtlPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).Ttl
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_NeighborPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor YANG schema element.
type Lldp_Interface_NeighborPath struct {
	*ygnmi.NodePath
}

// Lldp_Interface_NeighborPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor YANG schema element.
type Lldp_Interface_NeighborPathAny struct {
	*ygnmi.NodePath
}

// Lldp_Interface_NeighborPathMap represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor YANG schema element.
type Lldp_Interface_NeighborPathMap struct {
	*ygnmi.NodePath
}

// Lldp_Interface_NeighborPathMapAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor YANG schema element.
type Lldp_Interface_NeighborPathMapAny struct {
	*ygnmi.NodePath
}

// Age (leaf): Age since discovery
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/age"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/age"
func (n *Lldp_Interface_NeighborPath) Age() *Lldp_Interface_Neighbor_AgePath {
	ps := &Lldp_Interface_Neighbor_AgePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Age (leaf): Age since discovery
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/age"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/age"
func (n *Lldp_Interface_NeighborPathAny) Age() *Lldp_Interface_Neighbor_AgePathAny {
	ps := &Lldp_Interface_Neighbor_AgePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CapabilityAny (list): List of LLDP system capabilities advertised by the
// neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "capabilities/capability"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
func (n *Lldp_Interface_NeighborPath) CapabilityAny() *Lldp_Interface_Neighbor_CapabilityPathAny {
	ps := &Lldp_Interface_Neighbor_CapabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"capabilities", "capability"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// CapabilityAny (list): List of LLDP system capabilities advertised by the
// neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "capabilities/capability"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
func (n *Lldp_Interface_NeighborPathAny) CapabilityAny() *Lldp_Interface_Neighbor_CapabilityPathAny {
	ps := &Lldp_Interface_Neighbor_CapabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"capabilities", "capability"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Capability (list): List of LLDP system capabilities advertised by the
// neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "capabilities/capability"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
//
//	Name: oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY
func (n *Lldp_Interface_NeighborPath) Capability(Name oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY) *Lldp_Interface_Neighbor_CapabilityPath {
	ps := &Lldp_Interface_Neighbor_CapabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"capabilities", "capability"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Capability (list): List of LLDP system capabilities advertised by the
// neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "capabilities/capability"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
//
//	Name: oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY
func (n *Lldp_Interface_NeighborPathAny) Capability(Name oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY) *Lldp_Interface_Neighbor_CapabilityPathAny {
	ps := &Lldp_Interface_Neighbor_CapabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"capabilities", "capability"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// CapabilityMap (list): List of LLDP system capabilities advertised by the
// neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "capabilities/capability"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
func (n *Lldp_Interface_NeighborPath) CapabilityMap() *Lldp_Interface_Neighbor_CapabilityPathMap {
	ps := &Lldp_Interface_Neighbor_CapabilityPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"capabilities"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CapabilityMap (list): List of LLDP system capabilities advertised by the
// neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "capabilities/capability"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
func (n *Lldp_Interface_NeighborPathAny) CapabilityMap() *Lldp_Interface_Neighbor_CapabilityPathMapAny {
	ps := &Lldp_Interface_Neighbor_CapabilityPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"capabilities"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the
// chassis component of the endpoint identifier associated with
// the transmitting LLDP agent
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/chassis-id"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id"
func (n *Lldp_Interface_NeighborPath) ChassisId() *Lldp_Interface_Neighbor_ChassisIdPath {
	ps := &Lldp_Interface_Neighbor_ChassisIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "chassis-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the
// chassis component of the endpoint identifier associated with
// the transmitting LLDP agent
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/chassis-id"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id"
func (n *Lldp_Interface_NeighborPathAny) ChassisId() *Lldp_Interface_Neighbor_ChassisIdPathAny {
	ps := &Lldp_Interface_Neighbor_ChassisIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "chassis-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis
// identifier string. It is an enumerator defined by the
// LldpChassisIdSubtype object from IEEE 802.1AB MIB.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/chassis-id-type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type"
func (n *Lldp_Interface_NeighborPath) ChassisIdType() *Lldp_Interface_Neighbor_ChassisIdTypePath {
	ps := &Lldp_Interface_Neighbor_ChassisIdTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis
// identifier string. It is an enumerator defined by the
// LldpChassisIdSubtype object from IEEE 802.1AB MIB.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/chassis-id-type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type"
func (n *Lldp_Interface_NeighborPathAny) ChassisIdType() *Lldp_Interface_Neighbor_ChassisIdTypePathAny {
	ps := &Lldp_Interface_Neighbor_ChassisIdTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): System generated identifier for the neighbor on the
// interface.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/id"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/*/id"
func (n *Lldp_Interface_NeighborPath) Id() *Lldp_Interface_Neighbor_IdPath {
	ps := &Lldp_Interface_Neighbor_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): System generated identifier for the neighbor on the
// interface.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/id"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/*/id"
func (n *Lldp_Interface_NeighborPathAny) Id() *Lldp_Interface_Neighbor_IdPathAny {
	ps := &Lldp_Interface_Neighbor_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastUpdate (leaf): Seconds since last update received.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/last-update"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/last-update"
func (n *Lldp_Interface_NeighborPath) LastUpdate() *Lldp_Interface_Neighbor_LastUpdatePath {
	ps := &Lldp_Interface_Neighbor_LastUpdatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-update"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastUpdate (leaf): Seconds since last update received.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/last-update"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/last-update"
func (n *Lldp_Interface_NeighborPathAny) LastUpdate() *Lldp_Interface_Neighbor_LastUpdatePathAny {
	ps := &Lldp_Interface_Neighbor_LastUpdatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-update"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ManagementAddress (leaf): The Management Address is a mandatory TLV which identifies a
// network address associated with the local LLDP agent, which
// can be used to reach the agent on the port identified in the
// Port ID TLV.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/management-address"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/management-address"
func (n *Lldp_Interface_NeighborPath) ManagementAddress() *Lldp_Interface_Neighbor_ManagementAddressPath {
	ps := &Lldp_Interface_Neighbor_ManagementAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ManagementAddress (leaf): The Management Address is a mandatory TLV which identifies a
// network address associated with the local LLDP agent, which
// can be used to reach the agent on the port identified in the
// Port ID TLV.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/management-address"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/management-address"
func (n *Lldp_Interface_NeighborPathAny) ManagementAddress() *Lldp_Interface_Neighbor_ManagementAddressPathAny {
	ps := &Lldp_Interface_Neighbor_ManagementAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ManagementAddressType (leaf): The enumerated value for the network address type
// identified in this TLV. This enumeration is defined in the
// 'Assigned Numbers' RFC [RFC3232] and the
// ianaAddressFamilyNumbers object.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/management-address-type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/management-address-type"
func (n *Lldp_Interface_NeighborPath) ManagementAddressType() *Lldp_Interface_Neighbor_ManagementAddressTypePath {
	ps := &Lldp_Interface_Neighbor_ManagementAddressTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management-address-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ManagementAddressType (leaf): The enumerated value for the network address type
// identified in this TLV. This enumeration is defined in the
// 'Assigned Numbers' RFC [RFC3232] and the
// ianaAddressFamilyNumbers object.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/management-address-type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/management-address-type"
func (n *Lldp_Interface_NeighborPathAny) ManagementAddressType() *Lldp_Interface_Neighbor_ManagementAddressTypePathAny {
	ps := &Lldp_Interface_Neighbor_ManagementAddressTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management-address-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortDescription (leaf): The binary string containing the actual port identifier for
// the port which this LLDP PDU was transmitted. The source and
// format of this field is defined by PtopoPortId from
// RFC2922.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/port-description"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/port-description"
func (n *Lldp_Interface_NeighborPath) PortDescription() *Lldp_Interface_Neighbor_PortDescriptionPath {
	ps := &Lldp_Interface_Neighbor_PortDescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortDescription (leaf): The binary string containing the actual port identifier for
// the port which this LLDP PDU was transmitted. The source and
// format of this field is defined by PtopoPortId from
// RFC2922.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/port-description"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/port-description"
func (n *Lldp_Interface_NeighborPathAny) PortDescription() *Lldp_Interface_Neighbor_PortDescriptionPathAny {
	ps := &Lldp_Interface_Neighbor_PortDescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortId (leaf): The Port ID is a mandatory TLV which identifies the port
// component of the endpoint identifier associated with the
// transmitting LLDP agent. If the specified port is an IEEE
// 802.3 Repeater port, then this TLV is optional.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/port-id"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/port-id"
func (n *Lldp_Interface_NeighborPath) PortId() *Lldp_Interface_Neighbor_PortIdPath {
	ps := &Lldp_Interface_Neighbor_PortIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortId (leaf): The Port ID is a mandatory TLV which identifies the port
// component of the endpoint identifier associated with the
// transmitting LLDP agent. If the specified port is an IEEE
// 802.3 Repeater port, then this TLV is optional.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/port-id"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/port-id"
func (n *Lldp_Interface_NeighborPathAny) PortId() *Lldp_Interface_Neighbor_PortIdPathAny {
	ps := &Lldp_Interface_Neighbor_PortIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortIdType (leaf): This field identifies the format and source of the port
// identifier string. It is an enumerator defined by the
// PtopoPortIdType object from RFC2922.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/port-id-type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/port-id-type"
func (n *Lldp_Interface_NeighborPath) PortIdType() *Lldp_Interface_Neighbor_PortIdTypePath {
	ps := &Lldp_Interface_Neighbor_PortIdTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-id-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortIdType (leaf): This field identifies the format and source of the port
// identifier string. It is an enumerator defined by the
// PtopoPortIdType object from RFC2922.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/port-id-type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/port-id-type"
func (n *Lldp_Interface_NeighborPathAny) PortIdType() *Lldp_Interface_Neighbor_PortIdTypePathAny {
	ps := &Lldp_Interface_Neighbor_PortIdTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-id-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric
// string that is the textual description of the network entity.
// The system description should include the full name and
// version identification of the system's hardware type,
// software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object
// should be used for this field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/system-description"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/system-description"
func (n *Lldp_Interface_NeighborPath) SystemDescription() *Lldp_Interface_Neighbor_SystemDescriptionPath {
	ps := &Lldp_Interface_Neighbor_SystemDescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric
// string that is the textual description of the network entity.
// The system description should include the full name and
// version identification of the system's hardware type,
// software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object
// should be used for this field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/system-description"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/system-description"
func (n *Lldp_Interface_NeighborPathAny) SystemDescription() *Lldp_Interface_Neighbor_SystemDescriptionPathAny {
	ps := &Lldp_Interface_Neighbor_SystemDescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string
// that indicates the system's administratively assigned name.
// The system name should be the system's fully qualified domain
// name. If implementations support IETF RFC 3418, the sysName
// object should be used for this field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/system-name"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/system-name"
func (n *Lldp_Interface_NeighborPath) SystemName() *Lldp_Interface_Neighbor_SystemNamePath {
	ps := &Lldp_Interface_Neighbor_SystemNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string
// that indicates the system's administratively assigned name.
// The system name should be the system's fully qualified domain
// name. If implementations support IETF RFC 3418, the sysName
// object should be used for this field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/system-name"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/system-name"
func (n *Lldp_Interface_NeighborPathAny) SystemName() *Lldp_Interface_Neighbor_SystemNamePathAny {
	ps := &Lldp_Interface_Neighbor_SystemNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvAny (list): List of custom LLDP TLVs from a neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "custom-tlvs/tlv"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
func (n *Lldp_Interface_NeighborPath) TlvAny() *Lldp_Interface_Neighbor_TlvPathAny {
	ps := &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
	return ps
}

// TlvAny (list): List of custom LLDP TLVs from a neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "custom-tlvs/tlv"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
func (n *Lldp_Interface_NeighborPathAny) TlvAny() *Lldp_Interface_Neighbor_TlvPathAny {
	ps := &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
	return ps
}

// WithType sets Lldp_Interface_Neighbor_TlvPathAny's key "type" to the specified value.
// Type: int32
func (n *Lldp_Interface_Neighbor_TlvPathAny) WithType(Type int32) *Lldp_Interface_Neighbor_TlvPathAny {
	ygnmi.ModifyKey(n.NodePath, "type", Type)
	return n
}

// WithOui sets Lldp_Interface_Neighbor_TlvPathAny's key "oui" to the specified value.
// Oui: string
func (n *Lldp_Interface_Neighbor_TlvPathAny) WithOui(Oui string) *Lldp_Interface_Neighbor_TlvPathAny {
	ygnmi.ModifyKey(n.NodePath, "oui", Oui)
	return n
}

// WithOuiSubtype sets Lldp_Interface_Neighbor_TlvPathAny's key "oui-subtype" to the specified value.
// OuiSubtype: string
func (n *Lldp_Interface_Neighbor_TlvPathAny) WithOuiSubtype(OuiSubtype string) *Lldp_Interface_Neighbor_TlvPathAny {
	ygnmi.ModifyKey(n.NodePath, "oui-subtype", OuiSubtype)
	return n
}

// Tlv (list): List of custom LLDP TLVs from a neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "custom-tlvs/tlv"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
//
//	Type: int32
//	Oui: string
//	OuiSubtype: string
func (n *Lldp_Interface_NeighborPath) Tlv(Type int32, Oui string, OuiSubtype string) *Lldp_Interface_Neighbor_TlvPath {
	ps := &Lldp_Interface_Neighbor_TlvPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": Oui, "oui-subtype": OuiSubtype},
			n,
		),
	}
	return ps
}

// Tlv (list): List of custom LLDP TLVs from a neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "custom-tlvs/tlv"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
//
//	Type: int32
//	Oui: string
//	OuiSubtype: string
func (n *Lldp_Interface_NeighborPathAny) Tlv(Type int32, Oui string, OuiSubtype string) *Lldp_Interface_Neighbor_TlvPathAny {
	ps := &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": Oui, "oui-subtype": OuiSubtype},
			n,
		),
	}
	return ps
}

// TlvMap (list): List of custom LLDP TLVs from a neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "custom-tlvs/tlv"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
func (n *Lldp_Interface_NeighborPath) TlvMap() *Lldp_Interface_Neighbor_TlvPathMap {
	ps := &Lldp_Interface_Neighbor_TlvPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TlvMap (list): List of custom LLDP TLVs from a neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "custom-tlvs/tlv"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
func (n *Lldp_Interface_NeighborPathAny) TlvMap() *Lldp_Interface_Neighbor_TlvPathMapAny {
	ps := &Lldp_Interface_Neighbor_TlvPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ttl (leaf): The time-to-live (TTL) is a mandatory TLV which indicates
// how long information from the neighbor should be considered
// valid.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/ttl"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/ttl"
func (n *Lldp_Interface_NeighborPath) Ttl() *Lldp_Interface_Neighbor_TtlPath {
	ps := &Lldp_Interface_Neighbor_TtlPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ttl (leaf): The time-to-live (TTL) is a mandatory TLV which indicates
// how long information from the neighbor should be considered
// valid.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/ttl"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/ttl"
func (n *Lldp_Interface_NeighborPathAny) Ttl() *Lldp_Interface_Neighbor_TtlPathAny {
	ps := &Lldp_Interface_Neighbor_TtlPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_NeighborPath) State() ygnmi.SingletonQuery[*oc.Lldp_Interface_Neighbor] {
	return ygnmi.NewSingletonQuery[*oc.Lldp_Interface_Neighbor](
		"Lldp_Interface_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_NeighborPathAny) State() ygnmi.WildcardQuery[*oc.Lldp_Interface_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.Lldp_Interface_Neighbor](
		"Lldp_Interface_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_NeighborPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Lldp_Interface_Neighbor] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Lldp_Interface_Neighbor](
		"Lldp_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Lldp_Interface_Neighbor, bool) {
			ret := gs.(*oc.Lldp_Interface).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lldp:neighbors"},
			PostRelPath: []string{"openconfig-lldp:neighbor"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_NeighborPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Lldp_Interface_Neighbor] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Lldp_Interface_Neighbor](
		"Lldp_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Lldp_Interface_Neighbor, bool) {
			ret := gs.(*oc.Lldp_Interface).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lldp:neighbors"},
			PostRelPath: []string{"openconfig-lldp:neighbor"},
		},
	)
}

// Lldp_Interface_Neighbor_Capability_EnabledPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled YANG schema element.
type Lldp_Interface_Neighbor_Capability_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_Capability_EnabledPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled YANG schema element.
type Lldp_Interface_Neighbor_Capability_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/enabled"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled"
func (n *Lldp_Interface_Neighbor_Capability_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Lldp_Interface_Neighbor_Capability",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Capability).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/enabled"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled"
func (n *Lldp_Interface_Neighbor_Capability_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Lldp_Interface_Neighbor_Capability",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Capability).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_Capability_NamePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/name YANG schema element.
type Lldp_Interface_Neighbor_Capability_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_Capability_NamePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/name YANG schema element.
type Lldp_Interface_Neighbor_Capability_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/name"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/name"
func (n *Lldp_Interface_Neighbor_Capability_NamePath) State() ygnmi.SingletonQuery[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY] {
	return ygnmi.NewSingletonQuery[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY](
		"Lldp_Interface_Neighbor_Capability",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Capability).Name
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/name"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/name"
func (n *Lldp_Interface_Neighbor_Capability_NamePathAny) State() ygnmi.WildcardQuery[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY] {
	return ygnmi.NewWildcardQuery[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY](
		"Lldp_Interface_Neighbor_Capability",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Capability).Name
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Lldp_Interface_Neighbor_Capability_NamePath) Config() ygnmi.ConfigQuery[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY] {
	return ygnmi.NewConfigQuery[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY](
		"Lldp_Interface_Neighbor_Capability",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Capability).Name
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Lldp_Interface_Neighbor_Capability_NamePathAny) Config() ygnmi.WildcardQuery[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY] {
	return ygnmi.NewWildcardQuery[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY](
		"Lldp_Interface_Neighbor_Capability",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Capability).Name
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_CapabilityPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability YANG schema element.
type Lldp_Interface_Neighbor_CapabilityPath struct {
	*ygnmi.NodePath
}

// Lldp_Interface_Neighbor_CapabilityPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability YANG schema element.
type Lldp_Interface_Neighbor_CapabilityPathAny struct {
	*ygnmi.NodePath
}

// Lldp_Interface_Neighbor_CapabilityPathMap represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability YANG schema element.
type Lldp_Interface_Neighbor_CapabilityPathMap struct {
	*ygnmi.NodePath
}

// Lldp_Interface_Neighbor_CapabilityPathMapAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability YANG schema element.
type Lldp_Interface_Neighbor_CapabilityPathMapAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): Indicates whether the corresponding system capability is
// enabled on the neighbor.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/enabled"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled"
func (n *Lldp_Interface_Neighbor_CapabilityPath) Enabled() *Lldp_Interface_Neighbor_Capability_EnabledPath {
	ps := &Lldp_Interface_Neighbor_Capability_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Indicates whether the corresponding system capability is
// enabled on the neighbor.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/enabled"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled"
func (n *Lldp_Interface_Neighbor_CapabilityPathAny) Enabled() *Lldp_Interface_Neighbor_Capability_EnabledPathAny {
	ps := &Lldp_Interface_Neighbor_Capability_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the system capability advertised by the neighbor.
// Capabilities are represented in a bitmap that defines the
// primary functions of the system. The capabilities are
// defined in IEEE 802.1AB.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/name"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/*/name"
func (n *Lldp_Interface_Neighbor_CapabilityPath) Name() *Lldp_Interface_Neighbor_Capability_NamePath {
	ps := &Lldp_Interface_Neighbor_Capability_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the system capability advertised by the neighbor.
// Capabilities are represented in a bitmap that defines the
// primary functions of the system. The capabilities are
// defined in IEEE 802.1AB.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/name"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/*/name"
func (n *Lldp_Interface_Neighbor_CapabilityPathAny) Name() *Lldp_Interface_Neighbor_Capability_NamePathAny {
	ps := &Lldp_Interface_Neighbor_Capability_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_Neighbor_CapabilityPath) State() ygnmi.SingletonQuery[*oc.Lldp_Interface_Neighbor_Capability] {
	return ygnmi.NewSingletonQuery[*oc.Lldp_Interface_Neighbor_Capability](
		"Lldp_Interface_Neighbor_Capability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_Neighbor_CapabilityPathAny) State() ygnmi.WildcardQuery[*oc.Lldp_Interface_Neighbor_Capability] {
	return ygnmi.NewWildcardQuery[*oc.Lldp_Interface_Neighbor_Capability](
		"Lldp_Interface_Neighbor_Capability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_Neighbor_CapabilityPathMap) State() ygnmi.SingletonQuery[map[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY]*oc.Lldp_Interface_Neighbor_Capability] {
	return ygnmi.NewSingletonQuery[map[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY]*oc.Lldp_Interface_Neighbor_Capability](
		"Lldp_Interface_Neighbor",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY]*oc.Lldp_Interface_Neighbor_Capability, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).Capability
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lldp:capabilities"},
			PostRelPath: []string{"openconfig-lldp:capability"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_Neighbor_CapabilityPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY]*oc.Lldp_Interface_Neighbor_Capability] {
	return ygnmi.NewWildcardQuery[map[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY]*oc.Lldp_Interface_Neighbor_Capability](
		"Lldp_Interface_Neighbor",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY]*oc.Lldp_Interface_Neighbor_Capability, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).Capability
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lldp:capabilities"},
			PostRelPath: []string{"openconfig-lldp:capability"},
		},
	)
}

// Lldp_Interface_Neighbor_Tlv_OuiPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui YANG schema element.
type Lldp_Interface_Neighbor_Tlv_OuiPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_Tlv_OuiPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui YANG schema element.
type Lldp_Interface_Neighbor_Tlv_OuiPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/oui"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui"
func (n *Lldp_Interface_Neighbor_Tlv_OuiPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lldp_Interface_Neighbor_Tlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oui"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).Oui
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/oui"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui"
func (n *Lldp_Interface_Neighbor_Tlv_OuiPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface_Neighbor_Tlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oui"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).Oui
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "oui"
//	Path from root:       ""
func (n *Lldp_Interface_Neighbor_Tlv_OuiPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Lldp_Interface_Neighbor_Tlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"oui"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).Oui
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "oui"
//	Path from root:       ""
func (n *Lldp_Interface_Neighbor_Tlv_OuiPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface_Neighbor_Tlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"oui"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).Oui
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_Tlv_OuiSubtypePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype YANG schema element.
type Lldp_Interface_Neighbor_Tlv_OuiSubtypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_Tlv_OuiSubtypePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype YANG schema element.
type Lldp_Interface_Neighbor_Tlv_OuiSubtypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/oui-subtype"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype"
func (n *Lldp_Interface_Neighbor_Tlv_OuiSubtypePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lldp_Interface_Neighbor_Tlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oui-subtype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).OuiSubtype
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/oui-subtype"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype"
func (n *Lldp_Interface_Neighbor_Tlv_OuiSubtypePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface_Neighbor_Tlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oui-subtype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).OuiSubtype
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "oui-subtype"
//	Path from root:       ""
func (n *Lldp_Interface_Neighbor_Tlv_OuiSubtypePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Lldp_Interface_Neighbor_Tlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"oui-subtype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).OuiSubtype
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "oui-subtype"
//	Path from root:       ""
func (n *Lldp_Interface_Neighbor_Tlv_OuiSubtypePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface_Neighbor_Tlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"oui-subtype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).OuiSubtype
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_Tlv_TypePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/type YANG schema element.
type Lldp_Interface_Neighbor_Tlv_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_Tlv_TypePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/type YANG schema element.
type Lldp_Interface_Neighbor_Tlv_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/type"
func (n *Lldp_Interface_Neighbor_Tlv_TypePath) State() ygnmi.SingletonQuery[int32] {
	return ygnmi.NewSingletonQuery[int32](
		"Lldp_Interface_Neighbor_Tlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).Type
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/type"
func (n *Lldp_Interface_Neighbor_Tlv_TypePathAny) State() ygnmi.WildcardQuery[int32] {
	return ygnmi.NewWildcardQuery[int32](
		"Lldp_Interface_Neighbor_Tlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).Type
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *Lldp_Interface_Neighbor_Tlv_TypePath) Config() ygnmi.ConfigQuery[int32] {
	return ygnmi.NewConfigQuery[int32](
		"Lldp_Interface_Neighbor_Tlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).Type
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *Lldp_Interface_Neighbor_Tlv_TypePathAny) Config() ygnmi.WildcardQuery[int32] {
	return ygnmi.NewWildcardQuery[int32](
		"Lldp_Interface_Neighbor_Tlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).Type
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_Tlv_ValuePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/value YANG schema element.
type Lldp_Interface_Neighbor_Tlv_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_Tlv_ValuePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/value YANG schema element.
type Lldp_Interface_Neighbor_Tlv_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/value"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/value"
func (n *Lldp_Interface_Neighbor_Tlv_ValuePath) State() ygnmi.SingletonQuery[oc.Binary] {
	return ygnmi.NewSingletonQuery[oc.Binary](
		"Lldp_Interface_Neighbor_Tlv",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).Value
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/value"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/value"
func (n *Lldp_Interface_Neighbor_Tlv_ValuePathAny) State() ygnmi.WildcardQuery[oc.Binary] {
	return ygnmi.NewWildcardQuery[oc.Binary](
		"Lldp_Interface_Neighbor_Tlv",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).Value
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_TlvPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type Lldp_Interface_Neighbor_TlvPath struct {
	*ygnmi.NodePath
}

// Lldp_Interface_Neighbor_TlvPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type Lldp_Interface_Neighbor_TlvPathAny struct {
	*ygnmi.NodePath
}

// Lldp_Interface_Neighbor_TlvPathMap represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type Lldp_Interface_Neighbor_TlvPathMap struct {
	*ygnmi.NodePath
}

// Lldp_Interface_Neighbor_TlvPathMapAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type Lldp_Interface_Neighbor_TlvPathMapAny struct {
	*ygnmi.NodePath
}

// Oui (leaf): The organizationally unique identifier field shall contain
// the organization's OUI as defined in Clause 9 of IEEE Std
// 802. The high-order octet is 0 and the low-order 3 octets
// are the SMI Network Management Private Enterprise Code of
// the Vendor in network byte order, as defined in the
// 'Assigned Numbers' RFC [RFC3232].
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/oui"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/*/oui"
func (n *Lldp_Interface_Neighbor_TlvPath) Oui() *Lldp_Interface_Neighbor_Tlv_OuiPath {
	ps := &Lldp_Interface_Neighbor_Tlv_OuiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "oui"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oui (leaf): The organizationally unique identifier field shall contain
// the organization's OUI as defined in Clause 9 of IEEE Std
// 802. The high-order octet is 0 and the low-order 3 octets
// are the SMI Network Management Private Enterprise Code of
// the Vendor in network byte order, as defined in the
// 'Assigned Numbers' RFC [RFC3232].
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/oui"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/*/oui"
func (n *Lldp_Interface_Neighbor_TlvPathAny) Oui() *Lldp_Interface_Neighbor_Tlv_OuiPathAny {
	ps := &Lldp_Interface_Neighbor_Tlv_OuiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "oui"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuiSubtype (leaf): The organizationally defined subtype field shall contain a
// unique subtype value assigned by the defining organization.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/oui-subtype"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/*/oui-subtype"
func (n *Lldp_Interface_Neighbor_TlvPath) OuiSubtype() *Lldp_Interface_Neighbor_Tlv_OuiSubtypePath {
	ps := &Lldp_Interface_Neighbor_Tlv_OuiSubtypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "oui-subtype"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuiSubtype (leaf): The organizationally defined subtype field shall contain a
// unique subtype value assigned by the defining organization.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/oui-subtype"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/*/oui-subtype"
func (n *Lldp_Interface_Neighbor_TlvPathAny) OuiSubtype() *Lldp_Interface_Neighbor_Tlv_OuiSubtypePathAny {
	ps := &Lldp_Interface_Neighbor_Tlv_OuiSubtypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "oui-subtype"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The integer value identifying the type of information
// contained in the value field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/*/type"
func (n *Lldp_Interface_Neighbor_TlvPath) Type() *Lldp_Interface_Neighbor_Tlv_TypePath {
	ps := &Lldp_Interface_Neighbor_Tlv_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The integer value identifying the type of information
// contained in the value field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/*/type"
func (n *Lldp_Interface_Neighbor_TlvPathAny) Type() *Lldp_Interface_Neighbor_Tlv_TypePathAny {
	ps := &Lldp_Interface_Neighbor_Tlv_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): A variable-length octet-string containing the
// instance-specific information for this TLV.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/value"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/value"
func (n *Lldp_Interface_Neighbor_TlvPath) Value() *Lldp_Interface_Neighbor_Tlv_ValuePath {
	ps := &Lldp_Interface_Neighbor_Tlv_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): A variable-length octet-string containing the
// instance-specific information for this TLV.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/value"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/value"
func (n *Lldp_Interface_Neighbor_TlvPathAny) Value() *Lldp_Interface_Neighbor_Tlv_ValuePathAny {
	ps := &Lldp_Interface_Neighbor_Tlv_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_Neighbor_TlvPath) State() ygnmi.SingletonQuery[*oc.Lldp_Interface_Neighbor_Tlv] {
	return ygnmi.NewSingletonQuery[*oc.Lldp_Interface_Neighbor_Tlv](
		"Lldp_Interface_Neighbor_Tlv",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_Neighbor_TlvPathAny) State() ygnmi.WildcardQuery[*oc.Lldp_Interface_Neighbor_Tlv] {
	return ygnmi.NewWildcardQuery[*oc.Lldp_Interface_Neighbor_Tlv](
		"Lldp_Interface_Neighbor_Tlv",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_Neighbor_TlvPathMap) State() ygnmi.SingletonQuery[map[oc.Lldp_Interface_Neighbor_Tlv_Key]*oc.Lldp_Interface_Neighbor_Tlv] {
	return ygnmi.NewSingletonQuery[map[oc.Lldp_Interface_Neighbor_Tlv_Key]*oc.Lldp_Interface_Neighbor_Tlv](
		"Lldp_Interface_Neighbor",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Lldp_Interface_Neighbor_Tlv_Key]*oc.Lldp_Interface_Neighbor_Tlv, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).Tlv
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lldp:custom-tlvs"},
			PostRelPath: []string{"openconfig-lldp:tlv"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_Neighbor_TlvPathMapAny) State() ygnmi.WildcardQuery[map[oc.Lldp_Interface_Neighbor_Tlv_Key]*oc.Lldp_Interface_Neighbor_Tlv] {
	return ygnmi.NewWildcardQuery[map[oc.Lldp_Interface_Neighbor_Tlv_Key]*oc.Lldp_Interface_Neighbor_Tlv](
		"Lldp_Interface_Neighbor",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Lldp_Interface_Neighbor_Tlv_Key]*oc.Lldp_Interface_Neighbor_Tlv, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).Tlv
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lldp:custom-tlvs"},
			PostRelPath: []string{"openconfig-lldp:tlv"},
		},
	)
}

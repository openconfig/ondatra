/*
Package ateflow is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-common.yang
  - public/release/models/aft/openconfig-aft-ethernet.yang
  - public/release/models/aft/openconfig-aft-ipv4.yang
  - public/release/models/aft/openconfig-aft-ipv6.yang
  - public/release/models/aft/openconfig-aft-mpls.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-pf.yang
  - public/release/models/aft/openconfig-aft-state-synced.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft-types.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-rates.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/local-routing/openconfig-local-routing-network-instance.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/network-instance/openconfig-network-instance-l2.yang
  - public/release/models/network-instance/openconfig-network-instance-static.yang
  - public/release/models/oam/openconfig-cfm-types.yang
  - public/release/models/oam/openconfig-oam.yang
  - public/release/models/oam/openconfig-oam-cfm.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-area.yang
  - public/release/models/ospf/openconfig-ospf-common.yang
  - public/release/models/ospf/openconfig-ospf-global.yang
  - public/release/models/ospf/openconfig-ospf-types.yang
  - public/release/models/ospf/openconfig-ospf.yang
  - public/release/models/ospf/openconfig-ospfv3-area-interface.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-pf-forwarding-policies.yang
  - public/release/models/policy-forwarding/openconfig-pf-interfaces.yang
  - public/release/models/policy-forwarding/openconfig-pf-path-groups.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package ateflow

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Flow_ConvergenceTimePath represents the /openconfig-ate-flow/flows/flow/state/convergence-time YANG schema element.
type Flow_ConvergenceTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_ConvergenceTimePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/convergence-time YANG schema element.
type Flow_ConvergenceTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/convergence-time"
//	Path from root:       "/flows/flow/state/convergence-time"
func (n *Flow_ConvergenceTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "convergence-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow).ConvergenceTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/convergence-time"
//	Path from root:       "/flows/flow/state/convergence-time"
func (n *Flow_ConvergenceTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "convergence-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow).ConvergenceTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_DstIpv4Path represents the /openconfig-ate-flow/flows/flow/state/dst-ipv4 YANG schema element.
type Flow_DstIpv4Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_DstIpv4PathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/dst-ipv4 YANG schema element.
type Flow_DstIpv4PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/dst-ipv4"
//	Path from root:       "/flows/flow/state/dst-ipv4"
func (n *Flow_DstIpv4Path) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ipv4"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).DstIpv4
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/dst-ipv4"
//	Path from root:       "/flows/flow/state/dst-ipv4"
func (n *Flow_DstIpv4PathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ipv4"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).DstIpv4
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_DstIpv6Path represents the /openconfig-ate-flow/flows/flow/state/dst-ipv6 YANG schema element.
type Flow_DstIpv6Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_DstIpv6PathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/dst-ipv6 YANG schema element.
type Flow_DstIpv6PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/dst-ipv6"
//	Path from root:       "/flows/flow/state/dst-ipv6"
func (n *Flow_DstIpv6Path) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).DstIpv6
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/dst-ipv6"
//	Path from root:       "/flows/flow/state/dst-ipv6"
func (n *Flow_DstIpv6PathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).DstIpv6
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_DstPortPath represents the /openconfig-ate-flow/flows/flow/state/dst-port YANG schema element.
type Flow_DstPortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_DstPortPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/dst-port YANG schema element.
type Flow_DstPortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/dst-port"
//	Path from root:       "/flows/flow/state/dst-port"
func (n *Flow_DstPortPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).DstPort
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/dst-port"
//	Path from root:       "/flows/flow/state/dst-port"
func (n *Flow_DstPortPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).DstPort
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_FilterPath represents the /openconfig-ate-flow/flows/flow/state/filter YANG schema element.
type Flow_FilterPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_FilterPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/filter YANG schema element.
type Flow_FilterPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/filter"
//	Path from root:       "/flows/flow/state/filter"
func (n *Flow_FilterPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "filter"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).Filter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/filter"
//	Path from root:       "/flows/flow/state/filter"
func (n *Flow_FilterPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "filter"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).Filter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_FirstPacketLatencyPath represents the /openconfig-ate-flow/flows/flow/state/first-packet-latency YANG schema element.
type Flow_FirstPacketLatencyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_FirstPacketLatencyPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/first-packet-latency YANG schema element.
type Flow_FirstPacketLatencyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/first-packet-latency"
//	Path from root:       "/flows/flow/state/first-packet-latency"
func (n *Flow_FirstPacketLatencyPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "first-packet-latency"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow).FirstPacketLatency
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/first-packet-latency"
//	Path from root:       "/flows/flow/state/first-packet-latency"
func (n *Flow_FirstPacketLatencyPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "first-packet-latency"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow).FirstPacketLatency
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_InFrameRatePath represents the /openconfig-ate-flow/flows/flow/state/in-frame-rate YANG schema element.
type Flow_InFrameRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_InFrameRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/in-frame-rate YANG schema element.
type Flow_InFrameRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-frame-rate"
//	Path from root:       "/flows/flow/state/in-frame-rate"
func (n *Flow_InFrameRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Flow",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-frame-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow).InFrameRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-frame-rate"
//	Path from root:       "/flows/flow/state/in-frame-rate"
func (n *Flow_InFrameRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Flow",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-frame-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow).InFrameRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_InRatePath represents the /openconfig-ate-flow/flows/flow/state/in-rate YANG schema element.
type Flow_InRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_InRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/in-rate YANG schema element.
type Flow_InRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/flows/flow/state/in-rate"
func (n *Flow_InRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Flow",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow).InRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/flows/flow/state/in-rate"
func (n *Flow_InRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Flow",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow).InRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_LossPctPath represents the /openconfig-ate-flow/flows/flow/state/loss-pct YANG schema element.
type Flow_LossPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_LossPctPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/loss-pct YANG schema element.
type Flow_LossPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/loss-pct"
//	Path from root:       "/flows/flow/state/loss-pct"
func (n *Flow_LossPctPath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Flow",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loss-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow).LossPct
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/loss-pct"
//	Path from root:       "/flows/flow/state/loss-pct"
func (n *Flow_LossPctPathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Flow",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loss-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow).LossPct
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_MplsLabelPath represents the /openconfig-ate-flow/flows/flow/state/mpls-label YANG schema element.
type Flow_MplsLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_MplsLabelPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/mpls-label YANG schema element.
type Flow_MplsLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/mpls-label"
//	Path from root:       "/flows/flow/state/mpls-label"
func (n *Flow_MplsLabelPath) State() ygnmi.SingletonQuery[oc.Flow_MplsLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.Flow_MplsLabel_Union](
		"Flow",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Flow_MplsLabel_Union, bool) {
			ret := gs.(*oc.Flow).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/mpls-label"
//	Path from root:       "/flows/flow/state/mpls-label"
func (n *Flow_MplsLabelPathAny) State() ygnmi.WildcardQuery[oc.Flow_MplsLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.Flow_MplsLabel_Union](
		"Flow",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Flow_MplsLabel_Union, bool) {
			ret := gs.(*oc.Flow).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_NamePath represents the /openconfig-ate-flow/flows/flow/state/name YANG schema element.
type Flow_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_NamePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/name YANG schema element.
type Flow_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/name"
//	Path from root:       "/flows/flow/state/name"
func (n *Flow_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/name"
//	Path from root:       "/flows/flow/state/name"
func (n *Flow_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Flow_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Flow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Flow_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_OutFrameRatePath represents the /openconfig-ate-flow/flows/flow/state/out-frame-rate YANG schema element.
type Flow_OutFrameRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_OutFrameRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/out-frame-rate YANG schema element.
type Flow_OutFrameRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-frame-rate"
//	Path from root:       "/flows/flow/state/out-frame-rate"
func (n *Flow_OutFrameRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Flow",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-frame-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow).OutFrameRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-frame-rate"
//	Path from root:       "/flows/flow/state/out-frame-rate"
func (n *Flow_OutFrameRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Flow",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-frame-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow).OutFrameRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_OutRatePath represents the /openconfig-ate-flow/flows/flow/state/out-rate YANG schema element.
type Flow_OutRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_OutRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/out-rate YANG schema element.
type Flow_OutRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/flows/flow/state/out-rate"
func (n *Flow_OutRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Flow",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow).OutRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/flows/flow/state/out-rate"
func (n *Flow_OutRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Flow",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow).OutRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_SrcIpv4Path represents the /openconfig-ate-flow/flows/flow/state/src-ipv4 YANG schema element.
type Flow_SrcIpv4Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_SrcIpv4PathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/src-ipv4 YANG schema element.
type Flow_SrcIpv4PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/src-ipv4"
//	Path from root:       "/flows/flow/state/src-ipv4"
func (n *Flow_SrcIpv4Path) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ipv4"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).SrcIpv4
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/src-ipv4"
//	Path from root:       "/flows/flow/state/src-ipv4"
func (n *Flow_SrcIpv4PathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ipv4"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).SrcIpv4
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_SrcIpv6Path represents the /openconfig-ate-flow/flows/flow/state/src-ipv6 YANG schema element.
type Flow_SrcIpv6Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_SrcIpv6PathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/src-ipv6 YANG schema element.
type Flow_SrcIpv6PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/src-ipv6"
//	Path from root:       "/flows/flow/state/src-ipv6"
func (n *Flow_SrcIpv6Path) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).SrcIpv6
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/src-ipv6"
//	Path from root:       "/flows/flow/state/src-ipv6"
func (n *Flow_SrcIpv6PathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).SrcIpv6
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_SrcPortPath represents the /openconfig-ate-flow/flows/flow/state/src-port YANG schema element.
type Flow_SrcPortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_SrcPortPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/src-port YANG schema element.
type Flow_SrcPortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/src-port"
//	Path from root:       "/flows/flow/state/src-port"
func (n *Flow_SrcPortPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).SrcPort
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/src-port"
//	Path from root:       "/flows/flow/state/src-port"
func (n *Flow_SrcPortPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).SrcPort
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_VlanIdPath represents the /openconfig-ate-flow/flows/flow/state/vlan-id YANG schema element.
type Flow_VlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_VlanIdPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/vlan-id YANG schema element.
type Flow_VlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/flows/flow/state/vlan-id"
func (n *Flow_VlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Flow).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/flows/flow/state/vlan-id"
func (n *Flow_VlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Flow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Flow).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// FlowPath represents the /openconfig-ate-flow/flows/flow YANG schema element.
type FlowPath struct {
	*ygnmi.NodePath
}

// FlowPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow YANG schema element.
type FlowPathAny struct {
	*ygnmi.NodePath
}

// FlowPathMap represents the /openconfig-ate-flow/flows/flow YANG schema element.
type FlowPathMap struct {
	*ygnmi.NodePath
}

// FlowPathMapAny represents the wildcard version of the /openconfig-ate-flow/flows/flow YANG schema element.
type FlowPathMapAny struct {
	*ygnmi.NodePath
}

// ConvergenceTime (leaf): The time from when the first packet was received to when traffic
// loss dropped below a minimal threshold value.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/convergence-time"
//	Path from root:       "/flows/flow/state/convergence-time"
func (n *FlowPath) ConvergenceTime() *Flow_ConvergenceTimePath {
	ps := &Flow_ConvergenceTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "convergence-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConvergenceTime (leaf): The time from when the first packet was received to when traffic
// loss dropped below a minimal threshold value.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/convergence-time"
//	Path from root:       "/flows/flow/state/convergence-time"
func (n *FlowPathAny) ConvergenceTime() *Flow_ConvergenceTimePathAny {
	ps := &Flow_ConvergenceTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "convergence-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (container): Counters that correspond to the individual flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/counters"
//	Path from root:       "/flows/flow/state/counters"
func (n *FlowPath) Counters() *Flow_CountersPath {
	ps := &Flow_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters that correspond to the individual flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/counters"
//	Path from root:       "/flows/flow/state/counters"
func (n *FlowPathAny) Counters() *Flow_CountersPathAny {
	ps := &Flow_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DstIpv4 (leaf): The destination IPv4 value of the traffic header.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/dst-ipv4"
//	Path from root:       "/flows/flow/state/dst-ipv4"
func (n *FlowPath) DstIpv4() *Flow_DstIpv4Path {
	ps := &Flow_DstIpv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-ipv4"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstIpv4 (leaf): The destination IPv4 value of the traffic header.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/dst-ipv4"
//	Path from root:       "/flows/flow/state/dst-ipv4"
func (n *FlowPathAny) DstIpv4() *Flow_DstIpv4PathAny {
	ps := &Flow_DstIpv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-ipv4"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstIpv6 (leaf): The destination IPv6 value of the traffic header.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/dst-ipv6"
//	Path from root:       "/flows/flow/state/dst-ipv6"
func (n *FlowPath) DstIpv6() *Flow_DstIpv6Path {
	ps := &Flow_DstIpv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-ipv6"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstIpv6 (leaf): The destination IPv6 value of the traffic header.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/dst-ipv6"
//	Path from root:       "/flows/flow/state/dst-ipv6"
func (n *FlowPathAny) DstIpv6() *Flow_DstIpv6PathAny {
	ps := &Flow_DstIpv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-ipv6"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstPort (leaf): Value of the destination port for ingress tracking.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/dst-port"
//	Path from root:       "/flows/flow/state/dst-port"
func (n *FlowPath) DstPort() *Flow_DstPortPath {
	ps := &Flow_DstPortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstPort (leaf): Value of the destination port for ingress tracking.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/dst-port"
//	Path from root:       "/flows/flow/state/dst-port"
func (n *FlowPathAny) DstPort() *Flow_DstPortPathAny {
	ps := &Flow_DstPortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EgressTrackingAny (list): If the ATE is configured to track outgoing frames by a header field,
// this list will map values of that header field to the flow statistics
// specific to frames that match that value.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "egress-tracking/egress-tracking"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking"
func (n *FlowPath) EgressTrackingAny() *Flow_EgressTrackingPathAny {
	ps := &Flow_EgressTrackingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-tracking", "egress-tracking"},
			map[string]interface{}{"filter": "*"},
			n,
		),
	}
	return ps
}

// EgressTrackingAny (list): If the ATE is configured to track outgoing frames by a header field,
// this list will map values of that header field to the flow statistics
// specific to frames that match that value.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "egress-tracking/egress-tracking"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking"
func (n *FlowPathAny) EgressTrackingAny() *Flow_EgressTrackingPathAny {
	ps := &Flow_EgressTrackingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-tracking", "egress-tracking"},
			map[string]interface{}{"filter": "*"},
			n,
		),
	}
	return ps
}

// EgressTracking (list): If the ATE is configured to track outgoing frames by a header field,
// this list will map values of that header field to the flow statistics
// specific to frames that match that value.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "egress-tracking/egress-tracking"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking"
//
//	Filter: string
func (n *FlowPath) EgressTracking(Filter string) *Flow_EgressTrackingPath {
	ps := &Flow_EgressTrackingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-tracking", "egress-tracking"},
			map[string]interface{}{"filter": Filter},
			n,
		),
	}
	return ps
}

// EgressTracking (list): If the ATE is configured to track outgoing frames by a header field,
// this list will map values of that header field to the flow statistics
// specific to frames that match that value.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "egress-tracking/egress-tracking"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking"
//
//	Filter: string
func (n *FlowPathAny) EgressTracking(Filter string) *Flow_EgressTrackingPathAny {
	ps := &Flow_EgressTrackingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-tracking", "egress-tracking"},
			map[string]interface{}{"filter": Filter},
			n,
		),
	}
	return ps
}

// EgressTrackingMap (list): If the ATE is configured to track outgoing frames by a header field,
// this list will map values of that header field to the flow statistics
// specific to frames that match that value.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "egress-tracking/egress-tracking"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking"
func (n *FlowPath) EgressTrackingMap() *Flow_EgressTrackingPathMap {
	ps := &Flow_EgressTrackingPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-tracking"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EgressTrackingMap (list): If the ATE is configured to track outgoing frames by a header field,
// this list will map values of that header field to the flow statistics
// specific to frames that match that value.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "egress-tracking/egress-tracking"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking"
func (n *FlowPathAny) EgressTrackingMap() *Flow_EgressTrackingPathMapAny {
	ps := &Flow_EgressTrackingPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-tracking"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Filter (leaf): Name of the filter on which the egress stats are tracked
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/filter"
//	Path from root:       "/flows/flow/state/filter"
func (n *FlowPath) Filter() *Flow_FilterPath {
	ps := &Flow_FilterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "filter"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Filter (leaf): Name of the filter on which the egress stats are tracked
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/filter"
//	Path from root:       "/flows/flow/state/filter"
func (n *FlowPathAny) Filter() *Flow_FilterPathAny {
	ps := &Flow_FilterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "filter"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FirstPacketLatency (leaf): The time from when the flow was started to when the first packet was
// received.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/first-packet-latency"
//	Path from root:       "/flows/flow/state/first-packet-latency"
func (n *FlowPath) FirstPacketLatency() *Flow_FirstPacketLatencyPath {
	ps := &Flow_FirstPacketLatencyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "first-packet-latency"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FirstPacketLatency (leaf): The time from when the flow was started to when the first packet was
// received.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/first-packet-latency"
//	Path from root:       "/flows/flow/state/first-packet-latency"
func (n *FlowPathAny) FirstPacketLatency() *Flow_FirstPacketLatencyPathAny {
	ps := &Flow_FirstPacketLatencyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "first-packet-latency"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// received for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-frame-rate"
//	Path from root:       "/flows/flow/state/in-frame-rate"
func (n *FlowPath) InFrameRate() *Flow_InFrameRatePath {
	ps := &Flow_InFrameRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-frame-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// received for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-frame-rate"
//	Path from root:       "/flows/flow/state/in-frame-rate"
func (n *FlowPathAny) InFrameRate() *Flow_InFrameRatePathAny {
	ps := &Flow_InFrameRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-frame-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InRate (leaf): The rate, measured in bits per second, at which the flow is being
// received.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/flows/flow/state/in-rate"
func (n *FlowPath) InRate() *Flow_InRatePath {
	ps := &Flow_InRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InRate (leaf): The rate, measured in bits per second, at which the flow is being
// received.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/flows/flow/state/in-rate"
func (n *FlowPathAny) InRate() *Flow_InRatePathAny {
	ps := &Flow_InRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IngressTrackingAny (list): If the ATE is configured to track incoming frames by their header
// fields, this list will map combinations of values of those header
// fields to the flow statistics specific to frames that match that
// combination.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "ingress-tracking/ingress-tracking"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking"
func (n *FlowPath) IngressTrackingAny() *Flow_IngressTrackingPathAny {
	ps := &Flow_IngressTrackingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-tracking", "ingress-tracking"},
			map[string]interface{}{"src-port": "*", "dst-port": "*", "mpls-label": "*", "src-ipv4": "*", "dst-ipv4": "*", "src-ipv6": "*", "dst-ipv6": "*", "vlan-id": "*"},
			n,
		),
	}
	return ps
}

// IngressTrackingAny (list): If the ATE is configured to track incoming frames by their header
// fields, this list will map combinations of values of those header
// fields to the flow statistics specific to frames that match that
// combination.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "ingress-tracking/ingress-tracking"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking"
func (n *FlowPathAny) IngressTrackingAny() *Flow_IngressTrackingPathAny {
	ps := &Flow_IngressTrackingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-tracking", "ingress-tracking"},
			map[string]interface{}{"src-port": "*", "dst-port": "*", "mpls-label": "*", "src-ipv4": "*", "dst-ipv4": "*", "src-ipv6": "*", "dst-ipv6": "*", "vlan-id": "*"},
			n,
		),
	}
	return ps
}

// WithSrcPort sets Flow_IngressTrackingPathAny's key "src-port" to the specified value.
// SrcPort: string
func (n *Flow_IngressTrackingPathAny) WithSrcPort(SrcPort string) *Flow_IngressTrackingPathAny {
	ygnmi.ModifyKey(n.NodePath, "src-port", SrcPort)
	return n
}

// WithDstPort sets Flow_IngressTrackingPathAny's key "dst-port" to the specified value.
// DstPort: string
func (n *Flow_IngressTrackingPathAny) WithDstPort(DstPort string) *Flow_IngressTrackingPathAny {
	ygnmi.ModifyKey(n.NodePath, "dst-port", DstPort)
	return n
}

// WithMplsLabel sets Flow_IngressTrackingPathAny's key "mpls-label" to the specified value.
// MplsLabel: [oc.UnionUint32, oc.E_IngressTracking_MplsLabel]
func (n *Flow_IngressTrackingPathAny) WithMplsLabel(MplsLabel oc.Flow_IngressTracking_MplsLabel_Union) *Flow_IngressTrackingPathAny {
	ygnmi.ModifyKey(n.NodePath, "mpls-label", MplsLabel)
	return n
}

// WithSrcIpv4 sets Flow_IngressTrackingPathAny's key "src-ipv4" to the specified value.
// SrcIpv4: string
func (n *Flow_IngressTrackingPathAny) WithSrcIpv4(SrcIpv4 string) *Flow_IngressTrackingPathAny {
	ygnmi.ModifyKey(n.NodePath, "src-ipv4", SrcIpv4)
	return n
}

// WithDstIpv4 sets Flow_IngressTrackingPathAny's key "dst-ipv4" to the specified value.
// DstIpv4: string
func (n *Flow_IngressTrackingPathAny) WithDstIpv4(DstIpv4 string) *Flow_IngressTrackingPathAny {
	ygnmi.ModifyKey(n.NodePath, "dst-ipv4", DstIpv4)
	return n
}

// WithSrcIpv6 sets Flow_IngressTrackingPathAny's key "src-ipv6" to the specified value.
// SrcIpv6: string
func (n *Flow_IngressTrackingPathAny) WithSrcIpv6(SrcIpv6 string) *Flow_IngressTrackingPathAny {
	ygnmi.ModifyKey(n.NodePath, "src-ipv6", SrcIpv6)
	return n
}

// WithDstIpv6 sets Flow_IngressTrackingPathAny's key "dst-ipv6" to the specified value.
// DstIpv6: string
func (n *Flow_IngressTrackingPathAny) WithDstIpv6(DstIpv6 string) *Flow_IngressTrackingPathAny {
	ygnmi.ModifyKey(n.NodePath, "dst-ipv6", DstIpv6)
	return n
}

// WithVlanId sets Flow_IngressTrackingPathAny's key "vlan-id" to the specified value.
// VlanId: uint16
func (n *Flow_IngressTrackingPathAny) WithVlanId(VlanId uint16) *Flow_IngressTrackingPathAny {
	ygnmi.ModifyKey(n.NodePath, "vlan-id", VlanId)
	return n
}

// IngressTracking (list): If the ATE is configured to track incoming frames by their header
// fields, this list will map combinations of values of those header
// fields to the flow statistics specific to frames that match that
// combination.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "ingress-tracking/ingress-tracking"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking"
//
//	SrcPort: string
//	DstPort: string
//	MplsLabel: [oc.UnionUint32, oc.E_IngressTracking_MplsLabel]
//	SrcIpv4: string
//	DstIpv4: string
//	SrcIpv6: string
//	DstIpv6: string
//	VlanId: uint16
func (n *FlowPath) IngressTracking(SrcPort string, DstPort string, MplsLabel oc.Flow_IngressTracking_MplsLabel_Union, SrcIpv4 string, DstIpv4 string, SrcIpv6 string, DstIpv6 string, VlanId uint16) *Flow_IngressTrackingPath {
	ps := &Flow_IngressTrackingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-tracking", "ingress-tracking"},
			map[string]interface{}{"src-port": SrcPort, "dst-port": DstPort, "mpls-label": MplsLabel, "src-ipv4": SrcIpv4, "dst-ipv4": DstIpv4, "src-ipv6": SrcIpv6, "dst-ipv6": DstIpv6, "vlan-id": VlanId},
			n,
		),
	}
	return ps
}

// IngressTracking (list): If the ATE is configured to track incoming frames by their header
// fields, this list will map combinations of values of those header
// fields to the flow statistics specific to frames that match that
// combination.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "ingress-tracking/ingress-tracking"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking"
//
//	SrcPort: string
//	DstPort: string
//	MplsLabel: [oc.UnionUint32, oc.E_IngressTracking_MplsLabel]
//	SrcIpv4: string
//	DstIpv4: string
//	SrcIpv6: string
//	DstIpv6: string
//	VlanId: uint16
func (n *FlowPathAny) IngressTracking(SrcPort string, DstPort string, MplsLabel oc.Flow_IngressTracking_MplsLabel_Union, SrcIpv4 string, DstIpv4 string, SrcIpv6 string, DstIpv6 string, VlanId uint16) *Flow_IngressTrackingPathAny {
	ps := &Flow_IngressTrackingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-tracking", "ingress-tracking"},
			map[string]interface{}{"src-port": SrcPort, "dst-port": DstPort, "mpls-label": MplsLabel, "src-ipv4": SrcIpv4, "dst-ipv4": DstIpv4, "src-ipv6": SrcIpv6, "dst-ipv6": DstIpv6, "vlan-id": VlanId},
			n,
		),
	}
	return ps
}

// IngressTrackingMap (list): If the ATE is configured to track incoming frames by their header
// fields, this list will map combinations of values of those header
// fields to the flow statistics specific to frames that match that
// combination.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "ingress-tracking/ingress-tracking"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking"
func (n *FlowPath) IngressTrackingMap() *Flow_IngressTrackingPathMap {
	ps := &Flow_IngressTrackingPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-tracking"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IngressTrackingMap (list): If the ATE is configured to track incoming frames by their header
// fields, this list will map combinations of values of those header
// fields to the flow statistics specific to frames that match that
// combination.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "ingress-tracking/ingress-tracking"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking"
func (n *FlowPathAny) IngressTrackingMap() *Flow_IngressTrackingPathMapAny {
	ps := &Flow_IngressTrackingPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-tracking"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LossPct (leaf): The percentage of transmitted packets that were not received by the
// destinations of the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/loss-pct"
//	Path from root:       "/flows/flow/state/loss-pct"
func (n *FlowPath) LossPct() *Flow_LossPctPath {
	ps := &Flow_LossPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loss-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LossPct (leaf): The percentage of transmitted packets that were not received by the
// destinations of the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/loss-pct"
//	Path from root:       "/flows/flow/state/loss-pct"
func (n *FlowPathAny) LossPct() *Flow_LossPctPathAny {
	ps := &Flow_LossPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loss-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLabel (leaf): Value of the MPLS label for ingress tracking.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/mpls-label"
//	Path from root:       "/flows/flow/state/mpls-label"
func (n *FlowPath) MplsLabel() *Flow_MplsLabelPath {
	ps := &Flow_MplsLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mpls-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLabel (leaf): Value of the MPLS label for ingress tracking.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/mpls-label"
//	Path from root:       "/flows/flow/state/mpls-label"
func (n *FlowPathAny) MplsLabel() *Flow_MplsLabelPathAny {
	ps := &Flow_MplsLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mpls-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): An arbitary name used for the flow tracked by the system. This
// name must be unique for the flows tracked and exported by the target.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/name"
//	Path from root:       "/flows/flow/*/name"
func (n *FlowPath) Name() *Flow_NamePath {
	ps := &Flow_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): An arbitary name used for the flow tracked by the system. This
// name must be unique for the flows tracked and exported by the target.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/name"
//	Path from root:       "/flows/flow/*/name"
func (n *FlowPathAny) Name() *Flow_NamePathAny {
	ps := &Flow_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// transmitted for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-frame-rate"
//	Path from root:       "/flows/flow/state/out-frame-rate"
func (n *FlowPath) OutFrameRate() *Flow_OutFrameRatePath {
	ps := &Flow_OutFrameRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-frame-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// transmitted for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-frame-rate"
//	Path from root:       "/flows/flow/state/out-frame-rate"
func (n *FlowPathAny) OutFrameRate() *Flow_OutFrameRatePathAny {
	ps := &Flow_OutFrameRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-frame-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutRate (leaf): The rate, measured in bits per second, at which the flow is being
// transmitted.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/flows/flow/state/out-rate"
func (n *FlowPath) OutRate() *Flow_OutRatePath {
	ps := &Flow_OutRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutRate (leaf): The rate, measured in bits per second, at which the flow is being
// transmitted.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/flows/flow/state/out-rate"
func (n *FlowPathAny) OutRate() *Flow_OutRatePathAny {
	ps := &Flow_OutRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIpv4 (leaf): The source IPv4 value of the traffic header.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/src-ipv4"
//	Path from root:       "/flows/flow/state/src-ipv4"
func (n *FlowPath) SrcIpv4() *Flow_SrcIpv4Path {
	ps := &Flow_SrcIpv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-ipv4"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIpv4 (leaf): The source IPv4 value of the traffic header.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/src-ipv4"
//	Path from root:       "/flows/flow/state/src-ipv4"
func (n *FlowPathAny) SrcIpv4() *Flow_SrcIpv4PathAny {
	ps := &Flow_SrcIpv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-ipv4"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIpv6 (leaf): The source IPv6 value of the traffic header.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/src-ipv6"
//	Path from root:       "/flows/flow/state/src-ipv6"
func (n *FlowPath) SrcIpv6() *Flow_SrcIpv6Path {
	ps := &Flow_SrcIpv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-ipv6"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIpv6 (leaf): The source IPv6 value of the traffic header.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/src-ipv6"
//	Path from root:       "/flows/flow/state/src-ipv6"
func (n *FlowPathAny) SrcIpv6() *Flow_SrcIpv6PathAny {
	ps := &Flow_SrcIpv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-ipv6"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcPort (leaf): Value of the source port for ingress tracking.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/src-port"
//	Path from root:       "/flows/flow/state/src-port"
func (n *FlowPath) SrcPort() *Flow_SrcPortPath {
	ps := &Flow_SrcPortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcPort (leaf): Value of the source port for ingress tracking.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/src-port"
//	Path from root:       "/flows/flow/state/src-port"
func (n *FlowPathAny) SrcPort() *Flow_SrcPortPathAny {
	ps := &Flow_SrcPortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanId (leaf): The VLAN ID of the traffic header.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/flows/flow/state/vlan-id"
func (n *FlowPath) VlanId() *Flow_VlanIdPath {
	ps := &Flow_VlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanId (leaf): The VLAN ID of the traffic header.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/flows/flow/state/vlan-id"
func (n *FlowPathAny) VlanId() *Flow_VlanIdPathAny {
	ps := &Flow_VlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *FlowPath) State() ygnmi.SingletonQuery[*oc.Flow] {
	return ygnmi.NewSingletonQuery[*oc.Flow](
		"Flow",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *FlowPathAny) State() ygnmi.WildcardQuery[*oc.Flow] {
	return ygnmi.NewWildcardQuery[*oc.Flow](
		"Flow",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *FlowPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Flow] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Flow](
		"Root",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Flow, bool) {
			ret := gs.(*oc.Root).Flow
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-ate-flow:flows"},
			PostRelPath: []string{"openconfig-ate-flow:flow"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *FlowPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Flow] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Flow](
		"Root",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Flow, bool) {
			ret := gs.(*oc.Root).Flow
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-ate-flow:flows"},
			PostRelPath: []string{"openconfig-ate-flow:flow"},
		},
	)
}

// Flow_Counters_InOctetsPath represents the /openconfig-ate-flow/flows/flow/state/counters/in-octets YANG schema element.
type Flow_Counters_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/counters/in-octets YANG schema element.
type Flow_Counters_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-octets"
//	Path from root:       "/flows/flow/state/counters/in-octets"
func (n *Flow_Counters_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-octets"
//	Path from root:       "/flows/flow/state/counters/in-octets"
func (n *Flow_Counters_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_Counters_InPktsPath represents the /openconfig-ate-flow/flows/flow/state/counters/in-pkts YANG schema element.
type Flow_Counters_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_Counters_InPktsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/counters/in-pkts YANG schema element.
type Flow_Counters_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-pkts"
//	Path from root:       "/flows/flow/state/counters/in-pkts"
func (n *Flow_Counters_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-pkts"
//	Path from root:       "/flows/flow/state/counters/in-pkts"
func (n *Flow_Counters_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_Counters_OutOctetsPath represents the /openconfig-ate-flow/flows/flow/state/counters/out-octets YANG schema element.
type Flow_Counters_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/counters/out-octets YANG schema element.
type Flow_Counters_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-octets"
//	Path from root:       "/flows/flow/state/counters/out-octets"
func (n *Flow_Counters_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-octets"
//	Path from root:       "/flows/flow/state/counters/out-octets"
func (n *Flow_Counters_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_Counters_OutPktsPath represents the /openconfig-ate-flow/flows/flow/state/counters/out-pkts YANG schema element.
type Flow_Counters_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/counters/out-pkts YANG schema element.
type Flow_Counters_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-pkts"
//	Path from root:       "/flows/flow/state/counters/out-pkts"
func (n *Flow_Counters_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-pkts"
//	Path from root:       "/flows/flow/state/counters/out-pkts"
func (n *Flow_Counters_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_CountersPath represents the /openconfig-ate-flow/flows/flow/state/counters YANG schema element.
type Flow_CountersPath struct {
	*ygnmi.NodePath
}

// Flow_CountersPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/counters YANG schema element.
type Flow_CountersPathAny struct {
	*ygnmi.NodePath
}

// InOctets (leaf): The total number of bytes received by the target for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-octets"
//	Path from root:       "/flows/flow/state/counters/in-octets"
func (n *Flow_CountersPath) InOctets() *Flow_Counters_InOctetsPath {
	ps := &Flow_Counters_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of bytes received by the target for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-octets"
//	Path from root:       "/flows/flow/state/counters/in-octets"
func (n *Flow_CountersPathAny) InOctets() *Flow_Counters_InOctetsPathAny {
	ps := &Flow_Counters_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of packets received by the target for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-pkts"
//	Path from root:       "/flows/flow/state/counters/in-pkts"
func (n *Flow_CountersPath) InPkts() *Flow_Counters_InPktsPath {
	ps := &Flow_Counters_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of packets received by the target for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-pkts"
//	Path from root:       "/flows/flow/state/counters/in-pkts"
func (n *Flow_CountersPathAny) InPkts() *Flow_Counters_InPktsPathAny {
	ps := &Flow_Counters_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of bytes sent by the target for the flow. These
// packets may be generated or forwarded by the target.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-octets"
//	Path from root:       "/flows/flow/state/counters/out-octets"
func (n *Flow_CountersPath) OutOctets() *Flow_Counters_OutOctetsPath {
	ps := &Flow_Counters_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of bytes sent by the target for the flow. These
// packets may be generated or forwarded by the target.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-octets"
//	Path from root:       "/flows/flow/state/counters/out-octets"
func (n *Flow_CountersPathAny) OutOctets() *Flow_Counters_OutOctetsPathAny {
	ps := &Flow_Counters_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of packets sent by the target for the flow. These
// packets may be generated or forwarded by the target.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-pkts"
//	Path from root:       "/flows/flow/state/counters/out-pkts"
func (n *Flow_CountersPath) OutPkts() *Flow_Counters_OutPktsPath {
	ps := &Flow_Counters_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of packets sent by the target for the flow. These
// packets may be generated or forwarded by the target.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-pkts"
//	Path from root:       "/flows/flow/state/counters/out-pkts"
func (n *Flow_CountersPathAny) OutPkts() *Flow_Counters_OutPktsPathAny {
	ps := &Flow_Counters_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_CountersPath) State() ygnmi.SingletonQuery[*oc.Flow_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Flow_Counters](
		"Flow_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Flow_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Flow_Counters](
		"Flow_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_EgressTracking_ConvergenceTimePath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/convergence-time YANG schema element.
type Flow_EgressTracking_ConvergenceTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_EgressTracking_ConvergenceTimePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/convergence-time YANG schema element.
type Flow_EgressTracking_ConvergenceTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/convergence-time"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/convergence-time"
func (n *Flow_EgressTracking_ConvergenceTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_EgressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "convergence-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_EgressTracking).ConvergenceTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/convergence-time"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/convergence-time"
func (n *Flow_EgressTracking_ConvergenceTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_EgressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "convergence-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_EgressTracking).ConvergenceTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_EgressTracking_FilterPath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/filter YANG schema element.
type Flow_EgressTracking_FilterPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_EgressTracking_FilterPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/filter YANG schema element.
type Flow_EgressTracking_FilterPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/filter"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/filter"
func (n *Flow_EgressTracking_FilterPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Flow_EgressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "filter"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_EgressTracking).Filter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/filter"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/filter"
func (n *Flow_EgressTracking_FilterPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow_EgressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "filter"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_EgressTracking).Filter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "filter"
//	Path from root:       ""
func (n *Flow_EgressTracking_FilterPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Flow_EgressTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"filter"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_EgressTracking).Filter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "filter"
//	Path from root:       ""
func (n *Flow_EgressTracking_FilterPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow_EgressTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"filter"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_EgressTracking).Filter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_EgressTracking_FirstPacketLatencyPath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/first-packet-latency YANG schema element.
type Flow_EgressTracking_FirstPacketLatencyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_EgressTracking_FirstPacketLatencyPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/first-packet-latency YANG schema element.
type Flow_EgressTracking_FirstPacketLatencyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/first-packet-latency"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/first-packet-latency"
func (n *Flow_EgressTracking_FirstPacketLatencyPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_EgressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "first-packet-latency"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_EgressTracking).FirstPacketLatency
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/first-packet-latency"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/first-packet-latency"
func (n *Flow_EgressTracking_FirstPacketLatencyPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_EgressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "first-packet-latency"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_EgressTracking).FirstPacketLatency
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_EgressTracking_InFrameRatePath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/in-frame-rate YANG schema element.
type Flow_EgressTracking_InFrameRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_EgressTracking_InFrameRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/in-frame-rate YANG schema element.
type Flow_EgressTracking_InFrameRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-frame-rate"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/in-frame-rate"
func (n *Flow_EgressTracking_InFrameRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Flow_EgressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-frame-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_EgressTracking).InFrameRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-frame-rate"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/in-frame-rate"
func (n *Flow_EgressTracking_InFrameRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Flow_EgressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-frame-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_EgressTracking).InFrameRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_EgressTracking_InRatePath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/in-rate YANG schema element.
type Flow_EgressTracking_InRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_EgressTracking_InRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/in-rate YANG schema element.
type Flow_EgressTracking_InRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/in-rate"
func (n *Flow_EgressTracking_InRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Flow_EgressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_EgressTracking).InRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/in-rate"
func (n *Flow_EgressTracking_InRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Flow_EgressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_EgressTracking).InRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_EgressTracking_LossPctPath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/loss-pct YANG schema element.
type Flow_EgressTracking_LossPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_EgressTracking_LossPctPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/loss-pct YANG schema element.
type Flow_EgressTracking_LossPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/loss-pct"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/loss-pct"
func (n *Flow_EgressTracking_LossPctPath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Flow_EgressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loss-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_EgressTracking).LossPct
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/loss-pct"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/loss-pct"
func (n *Flow_EgressTracking_LossPctPathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Flow_EgressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loss-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_EgressTracking).LossPct
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_EgressTracking_OutFrameRatePath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/out-frame-rate YANG schema element.
type Flow_EgressTracking_OutFrameRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_EgressTracking_OutFrameRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/out-frame-rate YANG schema element.
type Flow_EgressTracking_OutFrameRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-frame-rate"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/out-frame-rate"
func (n *Flow_EgressTracking_OutFrameRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Flow_EgressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-frame-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_EgressTracking).OutFrameRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-frame-rate"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/out-frame-rate"
func (n *Flow_EgressTracking_OutFrameRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Flow_EgressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-frame-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_EgressTracking).OutFrameRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_EgressTracking_OutRatePath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/out-rate YANG schema element.
type Flow_EgressTracking_OutRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_EgressTracking_OutRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/out-rate YANG schema element.
type Flow_EgressTracking_OutRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/out-rate"
func (n *Flow_EgressTracking_OutRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Flow_EgressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_EgressTracking).OutRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/out-rate"
func (n *Flow_EgressTracking_OutRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Flow_EgressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_EgressTracking).OutRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_EgressTrackingPath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking YANG schema element.
type Flow_EgressTrackingPath struct {
	*ygnmi.NodePath
}

// Flow_EgressTrackingPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking YANG schema element.
type Flow_EgressTrackingPathAny struct {
	*ygnmi.NodePath
}

// Flow_EgressTrackingPathMap represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking YANG schema element.
type Flow_EgressTrackingPathMap struct {
	*ygnmi.NodePath
}

// Flow_EgressTrackingPathMapAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking YANG schema element.
type Flow_EgressTrackingPathMapAny struct {
	*ygnmi.NodePath
}

// ConvergenceTime (leaf): The time from when the first packet was received to when traffic
// loss dropped below a minimal threshold value.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/convergence-time"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/convergence-time"
func (n *Flow_EgressTrackingPath) ConvergenceTime() *Flow_EgressTracking_ConvergenceTimePath {
	ps := &Flow_EgressTracking_ConvergenceTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "convergence-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConvergenceTime (leaf): The time from when the first packet was received to when traffic
// loss dropped below a minimal threshold value.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/convergence-time"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/convergence-time"
func (n *Flow_EgressTrackingPathAny) ConvergenceTime() *Flow_EgressTracking_ConvergenceTimePathAny {
	ps := &Flow_EgressTracking_ConvergenceTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "convergence-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (container): Counters that correspond to the flow by egress tracking filter.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/counters"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/counters"
func (n *Flow_EgressTrackingPath) Counters() *Flow_EgressTracking_CountersPath {
	ps := &Flow_EgressTracking_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters that correspond to the flow by egress tracking filter.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/counters"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/counters"
func (n *Flow_EgressTrackingPathAny) Counters() *Flow_EgressTracking_CountersPathAny {
	ps := &Flow_EgressTracking_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Filter (leaf): Value of the filter on which the egress stats are tracked
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/filter"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/*/filter"
func (n *Flow_EgressTrackingPath) Filter() *Flow_EgressTracking_FilterPath {
	ps := &Flow_EgressTracking_FilterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "filter"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Filter (leaf): Value of the filter on which the egress stats are tracked
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/filter"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/*/filter"
func (n *Flow_EgressTrackingPathAny) Filter() *Flow_EgressTracking_FilterPathAny {
	ps := &Flow_EgressTracking_FilterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "filter"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FirstPacketLatency (leaf): The time from when the flow was started to when the first packet was
// received.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/first-packet-latency"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/first-packet-latency"
func (n *Flow_EgressTrackingPath) FirstPacketLatency() *Flow_EgressTracking_FirstPacketLatencyPath {
	ps := &Flow_EgressTracking_FirstPacketLatencyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "first-packet-latency"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FirstPacketLatency (leaf): The time from when the flow was started to when the first packet was
// received.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/first-packet-latency"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/first-packet-latency"
func (n *Flow_EgressTrackingPathAny) FirstPacketLatency() *Flow_EgressTracking_FirstPacketLatencyPathAny {
	ps := &Flow_EgressTracking_FirstPacketLatencyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "first-packet-latency"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// received for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-frame-rate"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/in-frame-rate"
func (n *Flow_EgressTrackingPath) InFrameRate() *Flow_EgressTracking_InFrameRatePath {
	ps := &Flow_EgressTracking_InFrameRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-frame-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// received for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-frame-rate"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/in-frame-rate"
func (n *Flow_EgressTrackingPathAny) InFrameRate() *Flow_EgressTracking_InFrameRatePathAny {
	ps := &Flow_EgressTracking_InFrameRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-frame-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InRate (leaf): The rate, measured in bits per second, at which the flow is being
// received.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/in-rate"
func (n *Flow_EgressTrackingPath) InRate() *Flow_EgressTracking_InRatePath {
	ps := &Flow_EgressTracking_InRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InRate (leaf): The rate, measured in bits per second, at which the flow is being
// received.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/in-rate"
func (n *Flow_EgressTrackingPathAny) InRate() *Flow_EgressTracking_InRatePathAny {
	ps := &Flow_EgressTracking_InRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LossPct (leaf): The percentage of transmitted packets that were not received by the
// destinations of the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/loss-pct"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/loss-pct"
func (n *Flow_EgressTrackingPath) LossPct() *Flow_EgressTracking_LossPctPath {
	ps := &Flow_EgressTracking_LossPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loss-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LossPct (leaf): The percentage of transmitted packets that were not received by the
// destinations of the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/loss-pct"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/loss-pct"
func (n *Flow_EgressTrackingPathAny) LossPct() *Flow_EgressTracking_LossPctPathAny {
	ps := &Flow_EgressTracking_LossPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loss-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// transmitted for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-frame-rate"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/out-frame-rate"
func (n *Flow_EgressTrackingPath) OutFrameRate() *Flow_EgressTracking_OutFrameRatePath {
	ps := &Flow_EgressTracking_OutFrameRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-frame-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// transmitted for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-frame-rate"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/out-frame-rate"
func (n *Flow_EgressTrackingPathAny) OutFrameRate() *Flow_EgressTracking_OutFrameRatePathAny {
	ps := &Flow_EgressTracking_OutFrameRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-frame-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutRate (leaf): The rate, measured in bits per second, at which the flow is being
// transmitted.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/out-rate"
func (n *Flow_EgressTrackingPath) OutRate() *Flow_EgressTracking_OutRatePath {
	ps := &Flow_EgressTracking_OutRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutRate (leaf): The rate, measured in bits per second, at which the flow is being
// transmitted.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/out-rate"
func (n *Flow_EgressTrackingPathAny) OutRate() *Flow_EgressTracking_OutRatePathAny {
	ps := &Flow_EgressTracking_OutRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_EgressTrackingPath) State() ygnmi.SingletonQuery[*oc.Flow_EgressTracking] {
	return ygnmi.NewSingletonQuery[*oc.Flow_EgressTracking](
		"Flow_EgressTracking",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_EgressTrackingPathAny) State() ygnmi.WildcardQuery[*oc.Flow_EgressTracking] {
	return ygnmi.NewWildcardQuery[*oc.Flow_EgressTracking](
		"Flow_EgressTracking",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_EgressTrackingPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Flow_EgressTracking] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Flow_EgressTracking](
		"Flow",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Flow_EgressTracking, bool) {
			ret := gs.(*oc.Flow).EgressTracking
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-ate-flow:egress-tracking"},
			PostRelPath: []string{"openconfig-ate-flow:egress-tracking"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_EgressTrackingPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Flow_EgressTracking] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Flow_EgressTracking](
		"Flow",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Flow_EgressTracking, bool) {
			ret := gs.(*oc.Flow).EgressTracking
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-ate-flow:egress-tracking"},
			PostRelPath: []string{"openconfig-ate-flow:egress-tracking"},
		},
	)
}

// Flow_EgressTracking_Counters_InOctetsPath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/counters/in-octets YANG schema element.
type Flow_EgressTracking_Counters_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_EgressTracking_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/counters/in-octets YANG schema element.
type Flow_EgressTracking_Counters_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-octets"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/counters/in-octets"
func (n *Flow_EgressTracking_Counters_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_EgressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_EgressTracking_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-octets"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/counters/in-octets"
func (n *Flow_EgressTracking_Counters_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_EgressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_EgressTracking_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_EgressTracking_Counters_InPktsPath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/counters/in-pkts YANG schema element.
type Flow_EgressTracking_Counters_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_EgressTracking_Counters_InPktsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/counters/in-pkts YANG schema element.
type Flow_EgressTracking_Counters_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-pkts"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/counters/in-pkts"
func (n *Flow_EgressTracking_Counters_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_EgressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_EgressTracking_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-pkts"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/counters/in-pkts"
func (n *Flow_EgressTracking_Counters_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_EgressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_EgressTracking_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_EgressTracking_Counters_OutOctetsPath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/counters/out-octets YANG schema element.
type Flow_EgressTracking_Counters_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_EgressTracking_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/counters/out-octets YANG schema element.
type Flow_EgressTracking_Counters_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-octets"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/counters/out-octets"
func (n *Flow_EgressTracking_Counters_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_EgressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_EgressTracking_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-octets"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/counters/out-octets"
func (n *Flow_EgressTracking_Counters_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_EgressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_EgressTracking_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_EgressTracking_Counters_OutPktsPath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/counters/out-pkts YANG schema element.
type Flow_EgressTracking_Counters_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_EgressTracking_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/counters/out-pkts YANG schema element.
type Flow_EgressTracking_Counters_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-pkts"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/counters/out-pkts"
func (n *Flow_EgressTracking_Counters_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_EgressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_EgressTracking_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-pkts"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/counters/out-pkts"
func (n *Flow_EgressTracking_Counters_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_EgressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_EgressTracking_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_EgressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_EgressTracking_CountersPath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/counters YANG schema element.
type Flow_EgressTracking_CountersPath struct {
	*ygnmi.NodePath
}

// Flow_EgressTracking_CountersPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/counters YANG schema element.
type Flow_EgressTracking_CountersPathAny struct {
	*ygnmi.NodePath
}

// InOctets (leaf): The total number of bytes received by the target for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-octets"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/counters/in-octets"
func (n *Flow_EgressTracking_CountersPath) InOctets() *Flow_EgressTracking_Counters_InOctetsPath {
	ps := &Flow_EgressTracking_Counters_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of bytes received by the target for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-octets"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/counters/in-octets"
func (n *Flow_EgressTracking_CountersPathAny) InOctets() *Flow_EgressTracking_Counters_InOctetsPathAny {
	ps := &Flow_EgressTracking_Counters_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of packets received by the target for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-pkts"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/counters/in-pkts"
func (n *Flow_EgressTracking_CountersPath) InPkts() *Flow_EgressTracking_Counters_InPktsPath {
	ps := &Flow_EgressTracking_Counters_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of packets received by the target for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-pkts"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/counters/in-pkts"
func (n *Flow_EgressTracking_CountersPathAny) InPkts() *Flow_EgressTracking_Counters_InPktsPathAny {
	ps := &Flow_EgressTracking_Counters_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of bytes sent by the target for the flow. These
// packets may be generated or forwarded by the target.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-octets"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/counters/out-octets"
func (n *Flow_EgressTracking_CountersPath) OutOctets() *Flow_EgressTracking_Counters_OutOctetsPath {
	ps := &Flow_EgressTracking_Counters_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of bytes sent by the target for the flow. These
// packets may be generated or forwarded by the target.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-octets"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/counters/out-octets"
func (n *Flow_EgressTracking_CountersPathAny) OutOctets() *Flow_EgressTracking_Counters_OutOctetsPathAny {
	ps := &Flow_EgressTracking_Counters_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of packets sent by the target for the flow. These
// packets may be generated or forwarded by the target.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-pkts"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/counters/out-pkts"
func (n *Flow_EgressTracking_CountersPath) OutPkts() *Flow_EgressTracking_Counters_OutPktsPath {
	ps := &Flow_EgressTracking_Counters_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of packets sent by the target for the flow. These
// packets may be generated or forwarded by the target.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-pkts"
//	Path from root:       "/flows/flow/egress-tracking/egress-tracking/state/counters/out-pkts"
func (n *Flow_EgressTracking_CountersPathAny) OutPkts() *Flow_EgressTracking_Counters_OutPktsPathAny {
	ps := &Flow_EgressTracking_Counters_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_EgressTracking_CountersPath) State() ygnmi.SingletonQuery[*oc.Flow_EgressTracking_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Flow_EgressTracking_Counters](
		"Flow_EgressTracking_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_EgressTracking_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Flow_EgressTracking_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Flow_EgressTracking_Counters](
		"Flow_EgressTracking_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_ConvergenceTimePath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/convergence-time YANG schema element.
type Flow_IngressTracking_ConvergenceTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_ConvergenceTimePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/convergence-time YANG schema element.
type Flow_IngressTracking_ConvergenceTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/convergence-time"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/convergence-time"
func (n *Flow_IngressTracking_ConvergenceTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "convergence-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking).ConvergenceTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/convergence-time"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/convergence-time"
func (n *Flow_IngressTracking_ConvergenceTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "convergence-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking).ConvergenceTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_DstIpv4Path represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/dst-ipv4 YANG schema element.
type Flow_IngressTracking_DstIpv4Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_DstIpv4PathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/dst-ipv4 YANG schema element.
type Flow_IngressTracking_DstIpv4PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/dst-ipv4"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/dst-ipv4"
func (n *Flow_IngressTracking_DstIpv4Path) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ipv4"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).DstIpv4
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/dst-ipv4"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/dst-ipv4"
func (n *Flow_IngressTracking_DstIpv4PathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ipv4"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).DstIpv4
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "dst-ipv4"
//	Path from root:       ""
func (n *Flow_IngressTracking_DstIpv4Path) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Flow_IngressTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dst-ipv4"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).DstIpv4
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "dst-ipv4"
//	Path from root:       ""
func (n *Flow_IngressTracking_DstIpv4PathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow_IngressTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dst-ipv4"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).DstIpv4
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_DstIpv6Path represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/dst-ipv6 YANG schema element.
type Flow_IngressTracking_DstIpv6Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_DstIpv6PathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/dst-ipv6 YANG schema element.
type Flow_IngressTracking_DstIpv6PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/dst-ipv6"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/dst-ipv6"
func (n *Flow_IngressTracking_DstIpv6Path) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).DstIpv6
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/dst-ipv6"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/dst-ipv6"
func (n *Flow_IngressTracking_DstIpv6PathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).DstIpv6
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "dst-ipv6"
//	Path from root:       ""
func (n *Flow_IngressTracking_DstIpv6Path) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Flow_IngressTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dst-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).DstIpv6
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "dst-ipv6"
//	Path from root:       ""
func (n *Flow_IngressTracking_DstIpv6PathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow_IngressTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dst-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).DstIpv6
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_DstPortPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/dst-port YANG schema element.
type Flow_IngressTracking_DstPortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_DstPortPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/dst-port YANG schema element.
type Flow_IngressTracking_DstPortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/dst-port"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/dst-port"
func (n *Flow_IngressTracking_DstPortPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).DstPort
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/dst-port"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/dst-port"
func (n *Flow_IngressTracking_DstPortPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).DstPort
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "dst-port"
//	Path from root:       ""
func (n *Flow_IngressTracking_DstPortPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Flow_IngressTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dst-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).DstPort
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "dst-port"
//	Path from root:       ""
func (n *Flow_IngressTracking_DstPortPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow_IngressTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dst-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).DstPort
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_FilterPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/filter YANG schema element.
type Flow_IngressTracking_FilterPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_FilterPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/filter YANG schema element.
type Flow_IngressTracking_FilterPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/filter"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/filter"
func (n *Flow_IngressTracking_FilterPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "filter"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).Filter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/filter"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/filter"
func (n *Flow_IngressTracking_FilterPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "filter"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).Filter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_FirstPacketLatencyPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/first-packet-latency YANG schema element.
type Flow_IngressTracking_FirstPacketLatencyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_FirstPacketLatencyPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/first-packet-latency YANG schema element.
type Flow_IngressTracking_FirstPacketLatencyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/first-packet-latency"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/first-packet-latency"
func (n *Flow_IngressTracking_FirstPacketLatencyPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "first-packet-latency"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking).FirstPacketLatency
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/first-packet-latency"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/first-packet-latency"
func (n *Flow_IngressTracking_FirstPacketLatencyPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "first-packet-latency"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking).FirstPacketLatency
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_InFrameRatePath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/in-frame-rate YANG schema element.
type Flow_IngressTracking_InFrameRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_InFrameRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/in-frame-rate YANG schema element.
type Flow_IngressTracking_InFrameRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-frame-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/in-frame-rate"
func (n *Flow_IngressTracking_InFrameRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Flow_IngressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-frame-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_IngressTracking).InFrameRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-frame-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/in-frame-rate"
func (n *Flow_IngressTracking_InFrameRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Flow_IngressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-frame-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_IngressTracking).InFrameRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_InRatePath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/in-rate YANG schema element.
type Flow_IngressTracking_InRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_InRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/in-rate YANG schema element.
type Flow_IngressTracking_InRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/in-rate"
func (n *Flow_IngressTracking_InRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Flow_IngressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_IngressTracking).InRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/in-rate"
func (n *Flow_IngressTracking_InRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Flow_IngressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_IngressTracking).InRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_LossPctPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/loss-pct YANG schema element.
type Flow_IngressTracking_LossPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_LossPctPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/loss-pct YANG schema element.
type Flow_IngressTracking_LossPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/loss-pct"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/loss-pct"
func (n *Flow_IngressTracking_LossPctPath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Flow_IngressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loss-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_IngressTracking).LossPct
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/loss-pct"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/loss-pct"
func (n *Flow_IngressTracking_LossPctPathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Flow_IngressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loss-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_IngressTracking).LossPct
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_MplsLabelPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/mpls-label YANG schema element.
type Flow_IngressTracking_MplsLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_MplsLabelPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/mpls-label YANG schema element.
type Flow_IngressTracking_MplsLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/mpls-label"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/mpls-label"
func (n *Flow_IngressTracking_MplsLabelPath) State() ygnmi.SingletonQuery[oc.Flow_IngressTracking_MplsLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.Flow_IngressTracking_MplsLabel_Union](
		"Flow_IngressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Flow_IngressTracking_MplsLabel_Union, bool) {
			ret := gs.(*oc.Flow_IngressTracking).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/mpls-label"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/mpls-label"
func (n *Flow_IngressTracking_MplsLabelPathAny) State() ygnmi.WildcardQuery[oc.Flow_IngressTracking_MplsLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.Flow_IngressTracking_MplsLabel_Union](
		"Flow_IngressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Flow_IngressTracking_MplsLabel_Union, bool) {
			ret := gs.(*oc.Flow_IngressTracking).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "mpls-label"
//	Path from root:       ""
func (n *Flow_IngressTracking_MplsLabelPath) Config() ygnmi.ConfigQuery[oc.Flow_IngressTracking_MplsLabel_Union] {
	return ygnmi.NewConfigQuery[oc.Flow_IngressTracking_MplsLabel_Union](
		"Flow_IngressTracking",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Flow_IngressTracking_MplsLabel_Union, bool) {
			ret := gs.(*oc.Flow_IngressTracking).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "mpls-label"
//	Path from root:       ""
func (n *Flow_IngressTracking_MplsLabelPathAny) Config() ygnmi.WildcardQuery[oc.Flow_IngressTracking_MplsLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.Flow_IngressTracking_MplsLabel_Union](
		"Flow_IngressTracking",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Flow_IngressTracking_MplsLabel_Union, bool) {
			ret := gs.(*oc.Flow_IngressTracking).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_NamePath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/name YANG schema element.
type Flow_IngressTracking_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_NamePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/name YANG schema element.
type Flow_IngressTracking_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/name"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/name"
func (n *Flow_IngressTracking_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/name"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/name"
func (n *Flow_IngressTracking_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_OutFrameRatePath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/out-frame-rate YANG schema element.
type Flow_IngressTracking_OutFrameRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_OutFrameRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/out-frame-rate YANG schema element.
type Flow_IngressTracking_OutFrameRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-frame-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/out-frame-rate"
func (n *Flow_IngressTracking_OutFrameRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Flow_IngressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-frame-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_IngressTracking).OutFrameRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-frame-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/out-frame-rate"
func (n *Flow_IngressTracking_OutFrameRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Flow_IngressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-frame-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_IngressTracking).OutFrameRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_OutRatePath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/out-rate YANG schema element.
type Flow_IngressTracking_OutRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_OutRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/out-rate YANG schema element.
type Flow_IngressTracking_OutRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/out-rate"
func (n *Flow_IngressTracking_OutRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Flow_IngressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_IngressTracking).OutRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/out-rate"
func (n *Flow_IngressTracking_OutRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Flow_IngressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_IngressTracking).OutRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_SrcIpv4Path represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/src-ipv4 YANG schema element.
type Flow_IngressTracking_SrcIpv4Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_SrcIpv4PathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/src-ipv4 YANG schema element.
type Flow_IngressTracking_SrcIpv4PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/src-ipv4"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/src-ipv4"
func (n *Flow_IngressTracking_SrcIpv4Path) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ipv4"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).SrcIpv4
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/src-ipv4"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/src-ipv4"
func (n *Flow_IngressTracking_SrcIpv4PathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ipv4"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).SrcIpv4
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "src-ipv4"
//	Path from root:       ""
func (n *Flow_IngressTracking_SrcIpv4Path) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Flow_IngressTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"src-ipv4"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).SrcIpv4
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "src-ipv4"
//	Path from root:       ""
func (n *Flow_IngressTracking_SrcIpv4PathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow_IngressTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"src-ipv4"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).SrcIpv4
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_SrcIpv6Path represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/src-ipv6 YANG schema element.
type Flow_IngressTracking_SrcIpv6Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_SrcIpv6PathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/src-ipv6 YANG schema element.
type Flow_IngressTracking_SrcIpv6PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/src-ipv6"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/src-ipv6"
func (n *Flow_IngressTracking_SrcIpv6Path) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).SrcIpv6
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/src-ipv6"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/src-ipv6"
func (n *Flow_IngressTracking_SrcIpv6PathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).SrcIpv6
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "src-ipv6"
//	Path from root:       ""
func (n *Flow_IngressTracking_SrcIpv6Path) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Flow_IngressTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"src-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).SrcIpv6
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "src-ipv6"
//	Path from root:       ""
func (n *Flow_IngressTracking_SrcIpv6PathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow_IngressTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"src-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).SrcIpv6
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_SrcPortPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/src-port YANG schema element.
type Flow_IngressTracking_SrcPortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_SrcPortPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/src-port YANG schema element.
type Flow_IngressTracking_SrcPortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/src-port"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/src-port"
func (n *Flow_IngressTracking_SrcPortPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).SrcPort
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/src-port"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/src-port"
func (n *Flow_IngressTracking_SrcPortPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).SrcPort
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "src-port"
//	Path from root:       ""
func (n *Flow_IngressTracking_SrcPortPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Flow_IngressTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"src-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).SrcPort
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "src-port"
//	Path from root:       ""
func (n *Flow_IngressTracking_SrcPortPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow_IngressTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"src-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking).SrcPort
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_VlanIdPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/vlan-id YANG schema element.
type Flow_IngressTracking_VlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_VlanIdPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/vlan-id YANG schema element.
type Flow_IngressTracking_VlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/vlan-id"
func (n *Flow_IngressTracking_VlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Flow_IngressTracking).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/vlan-id"
func (n *Flow_IngressTracking_VlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Flow_IngressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Flow_IngressTracking).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "vlan-id"
//	Path from root:       ""
func (n *Flow_IngressTracking_VlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Flow_IngressTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Flow_IngressTracking).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "vlan-id"
//	Path from root:       ""
func (n *Flow_IngressTracking_VlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Flow_IngressTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Flow_IngressTracking).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTrackingPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking YANG schema element.
type Flow_IngressTrackingPath struct {
	*ygnmi.NodePath
}

// Flow_IngressTrackingPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking YANG schema element.
type Flow_IngressTrackingPathAny struct {
	*ygnmi.NodePath
}

// Flow_IngressTrackingPathMap represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking YANG schema element.
type Flow_IngressTrackingPathMap struct {
	*ygnmi.NodePath
}

// Flow_IngressTrackingPathMapAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking YANG schema element.
type Flow_IngressTrackingPathMapAny struct {
	*ygnmi.NodePath
}

// ConvergenceTime (leaf): The time from when the first packet was received to when traffic
// loss dropped below a minimal threshold value.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/convergence-time"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/convergence-time"
func (n *Flow_IngressTrackingPath) ConvergenceTime() *Flow_IngressTracking_ConvergenceTimePath {
	ps := &Flow_IngressTracking_ConvergenceTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "convergence-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConvergenceTime (leaf): The time from when the first packet was received to when traffic
// loss dropped below a minimal threshold value.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/convergence-time"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/convergence-time"
func (n *Flow_IngressTrackingPathAny) ConvergenceTime() *Flow_IngressTracking_ConvergenceTimePathAny {
	ps := &Flow_IngressTracking_ConvergenceTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "convergence-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (container): Counters that correspond to the flow by ingress tracking filter.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/counters"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/counters"
func (n *Flow_IngressTrackingPath) Counters() *Flow_IngressTracking_CountersPath {
	ps := &Flow_IngressTracking_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters that correspond to the flow by ingress tracking filter.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/counters"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/counters"
func (n *Flow_IngressTrackingPathAny) Counters() *Flow_IngressTracking_CountersPathAny {
	ps := &Flow_IngressTracking_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DstIpv4 (leaf): The destination IPv4 value of the traffic header.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/dst-ipv4"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/*/dst-ipv4"
func (n *Flow_IngressTrackingPath) DstIpv4() *Flow_IngressTracking_DstIpv4Path {
	ps := &Flow_IngressTracking_DstIpv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dst-ipv4"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstIpv4 (leaf): The destination IPv4 value of the traffic header.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/dst-ipv4"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/*/dst-ipv4"
func (n *Flow_IngressTrackingPathAny) DstIpv4() *Flow_IngressTracking_DstIpv4PathAny {
	ps := &Flow_IngressTracking_DstIpv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dst-ipv4"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstIpv6 (leaf): The destination IPv6 value of the traffic header.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/dst-ipv6"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/*/dst-ipv6"
func (n *Flow_IngressTrackingPath) DstIpv6() *Flow_IngressTracking_DstIpv6Path {
	ps := &Flow_IngressTracking_DstIpv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dst-ipv6"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstIpv6 (leaf): The destination IPv6 value of the traffic header.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/dst-ipv6"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/*/dst-ipv6"
func (n *Flow_IngressTrackingPathAny) DstIpv6() *Flow_IngressTracking_DstIpv6PathAny {
	ps := &Flow_IngressTracking_DstIpv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dst-ipv6"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstPort (leaf): Value of the destination port for ingress tracking.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/dst-port"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/*/dst-port"
func (n *Flow_IngressTrackingPath) DstPort() *Flow_IngressTracking_DstPortPath {
	ps := &Flow_IngressTracking_DstPortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dst-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstPort (leaf): Value of the destination port for ingress tracking.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/dst-port"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/*/dst-port"
func (n *Flow_IngressTrackingPathAny) DstPort() *Flow_IngressTracking_DstPortPathAny {
	ps := &Flow_IngressTracking_DstPortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dst-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EgressTrackingAny (list): If the ATE is configured to track outgoing frames by a header field,
// this list will map values of that header field to the flow statistics
// specific to frames that match that value.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "egress-tracking/egress-tracking"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking"
func (n *Flow_IngressTrackingPath) EgressTrackingAny() *Flow_IngressTracking_EgressTrackingPathAny {
	ps := &Flow_IngressTracking_EgressTrackingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-tracking", "egress-tracking"},
			map[string]interface{}{"filter": "*"},
			n,
		),
	}
	return ps
}

// EgressTrackingAny (list): If the ATE is configured to track outgoing frames by a header field,
// this list will map values of that header field to the flow statistics
// specific to frames that match that value.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "egress-tracking/egress-tracking"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking"
func (n *Flow_IngressTrackingPathAny) EgressTrackingAny() *Flow_IngressTracking_EgressTrackingPathAny {
	ps := &Flow_IngressTracking_EgressTrackingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-tracking", "egress-tracking"},
			map[string]interface{}{"filter": "*"},
			n,
		),
	}
	return ps
}

// EgressTracking (list): If the ATE is configured to track outgoing frames by a header field,
// this list will map values of that header field to the flow statistics
// specific to frames that match that value.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "egress-tracking/egress-tracking"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking"
//
//	Filter: string
func (n *Flow_IngressTrackingPath) EgressTracking(Filter string) *Flow_IngressTracking_EgressTrackingPath {
	ps := &Flow_IngressTracking_EgressTrackingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-tracking", "egress-tracking"},
			map[string]interface{}{"filter": Filter},
			n,
		),
	}
	return ps
}

// EgressTracking (list): If the ATE is configured to track outgoing frames by a header field,
// this list will map values of that header field to the flow statistics
// specific to frames that match that value.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "egress-tracking/egress-tracking"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking"
//
//	Filter: string
func (n *Flow_IngressTrackingPathAny) EgressTracking(Filter string) *Flow_IngressTracking_EgressTrackingPathAny {
	ps := &Flow_IngressTracking_EgressTrackingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-tracking", "egress-tracking"},
			map[string]interface{}{"filter": Filter},
			n,
		),
	}
	return ps
}

// EgressTrackingMap (list): If the ATE is configured to track outgoing frames by a header field,
// this list will map values of that header field to the flow statistics
// specific to frames that match that value.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "egress-tracking/egress-tracking"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking"
func (n *Flow_IngressTrackingPath) EgressTrackingMap() *Flow_IngressTracking_EgressTrackingPathMap {
	ps := &Flow_IngressTracking_EgressTrackingPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-tracking"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EgressTrackingMap (list): If the ATE is configured to track outgoing frames by a header field,
// this list will map values of that header field to the flow statistics
// specific to frames that match that value.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "egress-tracking/egress-tracking"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking"
func (n *Flow_IngressTrackingPathAny) EgressTrackingMap() *Flow_IngressTracking_EgressTrackingPathMapAny {
	ps := &Flow_IngressTracking_EgressTrackingPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-tracking"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Filter (leaf): Name of the filter on which the egress stats are tracked
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/filter"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/filter"
func (n *Flow_IngressTrackingPath) Filter() *Flow_IngressTracking_FilterPath {
	ps := &Flow_IngressTracking_FilterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "filter"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Filter (leaf): Name of the filter on which the egress stats are tracked
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/filter"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/filter"
func (n *Flow_IngressTrackingPathAny) Filter() *Flow_IngressTracking_FilterPathAny {
	ps := &Flow_IngressTracking_FilterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "filter"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FirstPacketLatency (leaf): The time from when the flow was started to when the first packet was
// received.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/first-packet-latency"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/first-packet-latency"
func (n *Flow_IngressTrackingPath) FirstPacketLatency() *Flow_IngressTracking_FirstPacketLatencyPath {
	ps := &Flow_IngressTracking_FirstPacketLatencyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "first-packet-latency"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FirstPacketLatency (leaf): The time from when the flow was started to when the first packet was
// received.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/first-packet-latency"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/first-packet-latency"
func (n *Flow_IngressTrackingPathAny) FirstPacketLatency() *Flow_IngressTracking_FirstPacketLatencyPathAny {
	ps := &Flow_IngressTracking_FirstPacketLatencyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "first-packet-latency"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// received for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-frame-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/in-frame-rate"
func (n *Flow_IngressTrackingPath) InFrameRate() *Flow_IngressTracking_InFrameRatePath {
	ps := &Flow_IngressTracking_InFrameRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-frame-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// received for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-frame-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/in-frame-rate"
func (n *Flow_IngressTrackingPathAny) InFrameRate() *Flow_IngressTracking_InFrameRatePathAny {
	ps := &Flow_IngressTracking_InFrameRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-frame-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InRate (leaf): The rate, measured in bits per second, at which the flow is being
// received.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/in-rate"
func (n *Flow_IngressTrackingPath) InRate() *Flow_IngressTracking_InRatePath {
	ps := &Flow_IngressTracking_InRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InRate (leaf): The rate, measured in bits per second, at which the flow is being
// received.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/in-rate"
func (n *Flow_IngressTrackingPathAny) InRate() *Flow_IngressTracking_InRatePathAny {
	ps := &Flow_IngressTracking_InRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LossPct (leaf): The percentage of transmitted packets that were not received by the
// destinations of the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/loss-pct"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/loss-pct"
func (n *Flow_IngressTrackingPath) LossPct() *Flow_IngressTracking_LossPctPath {
	ps := &Flow_IngressTracking_LossPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loss-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LossPct (leaf): The percentage of transmitted packets that were not received by the
// destinations of the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/loss-pct"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/loss-pct"
func (n *Flow_IngressTrackingPathAny) LossPct() *Flow_IngressTracking_LossPctPathAny {
	ps := &Flow_IngressTracking_LossPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loss-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLabel (leaf): Value of the MPLS label for ingress tracking.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/mpls-label"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/*/mpls-label"
func (n *Flow_IngressTrackingPath) MplsLabel() *Flow_IngressTracking_MplsLabelPath {
	ps := &Flow_IngressTracking_MplsLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mpls-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLabel (leaf): Value of the MPLS label for ingress tracking.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/mpls-label"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/*/mpls-label"
func (n *Flow_IngressTrackingPathAny) MplsLabel() *Flow_IngressTracking_MplsLabelPathAny {
	ps := &Flow_IngressTracking_MplsLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mpls-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): An arbitary name used for the flow tracked by the system. This
// name must be unique for the flows tracked and exported by the target.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/name"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/name"
func (n *Flow_IngressTrackingPath) Name() *Flow_IngressTracking_NamePath {
	ps := &Flow_IngressTracking_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): An arbitary name used for the flow tracked by the system. This
// name must be unique for the flows tracked and exported by the target.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/name"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/name"
func (n *Flow_IngressTrackingPathAny) Name() *Flow_IngressTracking_NamePathAny {
	ps := &Flow_IngressTracking_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// transmitted for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-frame-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/out-frame-rate"
func (n *Flow_IngressTrackingPath) OutFrameRate() *Flow_IngressTracking_OutFrameRatePath {
	ps := &Flow_IngressTracking_OutFrameRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-frame-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// transmitted for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-frame-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/out-frame-rate"
func (n *Flow_IngressTrackingPathAny) OutFrameRate() *Flow_IngressTracking_OutFrameRatePathAny {
	ps := &Flow_IngressTracking_OutFrameRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-frame-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutRate (leaf): The rate, measured in bits per second, at which the flow is being
// transmitted.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/out-rate"
func (n *Flow_IngressTrackingPath) OutRate() *Flow_IngressTracking_OutRatePath {
	ps := &Flow_IngressTracking_OutRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutRate (leaf): The rate, measured in bits per second, at which the flow is being
// transmitted.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/out-rate"
func (n *Flow_IngressTrackingPathAny) OutRate() *Flow_IngressTracking_OutRatePathAny {
	ps := &Flow_IngressTracking_OutRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIpv4 (leaf): The source IPv4 value of the traffic header.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/src-ipv4"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/*/src-ipv4"
func (n *Flow_IngressTrackingPath) SrcIpv4() *Flow_IngressTracking_SrcIpv4Path {
	ps := &Flow_IngressTracking_SrcIpv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "src-ipv4"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIpv4 (leaf): The source IPv4 value of the traffic header.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/src-ipv4"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/*/src-ipv4"
func (n *Flow_IngressTrackingPathAny) SrcIpv4() *Flow_IngressTracking_SrcIpv4PathAny {
	ps := &Flow_IngressTracking_SrcIpv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "src-ipv4"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIpv6 (leaf): The source IPv6 value of the traffic header.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/src-ipv6"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/*/src-ipv6"
func (n *Flow_IngressTrackingPath) SrcIpv6() *Flow_IngressTracking_SrcIpv6Path {
	ps := &Flow_IngressTracking_SrcIpv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "src-ipv6"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIpv6 (leaf): The source IPv6 value of the traffic header.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/src-ipv6"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/*/src-ipv6"
func (n *Flow_IngressTrackingPathAny) SrcIpv6() *Flow_IngressTracking_SrcIpv6PathAny {
	ps := &Flow_IngressTracking_SrcIpv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "src-ipv6"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcPort (leaf): Value of the source port for ingress tracking.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/src-port"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/*/src-port"
func (n *Flow_IngressTrackingPath) SrcPort() *Flow_IngressTracking_SrcPortPath {
	ps := &Flow_IngressTracking_SrcPortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "src-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcPort (leaf): Value of the source port for ingress tracking.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/src-port"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/*/src-port"
func (n *Flow_IngressTrackingPathAny) SrcPort() *Flow_IngressTracking_SrcPortPathAny {
	ps := &Flow_IngressTracking_SrcPortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "src-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanId (leaf): The VLAN ID of the traffic header.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/vlan-id"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/*/vlan-id"
func (n *Flow_IngressTrackingPath) VlanId() *Flow_IngressTracking_VlanIdPath {
	ps := &Flow_IngressTracking_VlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanId (leaf): The VLAN ID of the traffic header.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/vlan-id"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/*/vlan-id"
func (n *Flow_IngressTrackingPathAny) VlanId() *Flow_IngressTracking_VlanIdPathAny {
	ps := &Flow_IngressTracking_VlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_IngressTrackingPath) State() ygnmi.SingletonQuery[*oc.Flow_IngressTracking] {
	return ygnmi.NewSingletonQuery[*oc.Flow_IngressTracking](
		"Flow_IngressTracking",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_IngressTrackingPathAny) State() ygnmi.WildcardQuery[*oc.Flow_IngressTracking] {
	return ygnmi.NewWildcardQuery[*oc.Flow_IngressTracking](
		"Flow_IngressTracking",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_IngressTrackingPathMap) State() ygnmi.SingletonQuery[map[oc.Flow_IngressTracking_Key]*oc.Flow_IngressTracking] {
	return ygnmi.NewSingletonQuery[map[oc.Flow_IngressTracking_Key]*oc.Flow_IngressTracking](
		"Flow",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Flow_IngressTracking_Key]*oc.Flow_IngressTracking, bool) {
			ret := gs.(*oc.Flow).IngressTracking
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-ate-flow:ingress-tracking"},
			PostRelPath: []string{"openconfig-ate-flow:ingress-tracking"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_IngressTrackingPathMapAny) State() ygnmi.WildcardQuery[map[oc.Flow_IngressTracking_Key]*oc.Flow_IngressTracking] {
	return ygnmi.NewWildcardQuery[map[oc.Flow_IngressTracking_Key]*oc.Flow_IngressTracking](
		"Flow",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Flow_IngressTracking_Key]*oc.Flow_IngressTracking, bool) {
			ret := gs.(*oc.Flow).IngressTracking
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-ate-flow:ingress-tracking"},
			PostRelPath: []string{"openconfig-ate-flow:ingress-tracking"},
		},
	)
}

// Flow_IngressTracking_Counters_InOctetsPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/counters/in-octets YANG schema element.
type Flow_IngressTracking_Counters_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/counters/in-octets YANG schema element.
type Flow_IngressTracking_Counters_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-octets"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/counters/in-octets"
func (n *Flow_IngressTracking_Counters_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_IngressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-octets"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/counters/in-octets"
func (n *Flow_IngressTracking_Counters_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_IngressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_Counters_InPktsPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/counters/in-pkts YANG schema element.
type Flow_IngressTracking_Counters_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_Counters_InPktsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/counters/in-pkts YANG schema element.
type Flow_IngressTracking_Counters_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-pkts"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/counters/in-pkts"
func (n *Flow_IngressTracking_Counters_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_IngressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-pkts"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/counters/in-pkts"
func (n *Flow_IngressTracking_Counters_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_IngressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_Counters_OutOctetsPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/counters/out-octets YANG schema element.
type Flow_IngressTracking_Counters_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/counters/out-octets YANG schema element.
type Flow_IngressTracking_Counters_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-octets"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/counters/out-octets"
func (n *Flow_IngressTracking_Counters_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_IngressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-octets"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/counters/out-octets"
func (n *Flow_IngressTracking_Counters_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_IngressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_Counters_OutPktsPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/counters/out-pkts YANG schema element.
type Flow_IngressTracking_Counters_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/counters/out-pkts YANG schema element.
type Flow_IngressTracking_Counters_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-pkts"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/counters/out-pkts"
func (n *Flow_IngressTracking_Counters_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_IngressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-pkts"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/counters/out-pkts"
func (n *Flow_IngressTracking_Counters_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_IngressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_CountersPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/counters YANG schema element.
type Flow_IngressTracking_CountersPath struct {
	*ygnmi.NodePath
}

// Flow_IngressTracking_CountersPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/state/counters YANG schema element.
type Flow_IngressTracking_CountersPathAny struct {
	*ygnmi.NodePath
}

// InOctets (leaf): The total number of bytes received by the target for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-octets"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/counters/in-octets"
func (n *Flow_IngressTracking_CountersPath) InOctets() *Flow_IngressTracking_Counters_InOctetsPath {
	ps := &Flow_IngressTracking_Counters_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of bytes received by the target for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-octets"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/counters/in-octets"
func (n *Flow_IngressTracking_CountersPathAny) InOctets() *Flow_IngressTracking_Counters_InOctetsPathAny {
	ps := &Flow_IngressTracking_Counters_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of packets received by the target for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-pkts"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/counters/in-pkts"
func (n *Flow_IngressTracking_CountersPath) InPkts() *Flow_IngressTracking_Counters_InPktsPath {
	ps := &Flow_IngressTracking_Counters_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of packets received by the target for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-pkts"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/counters/in-pkts"
func (n *Flow_IngressTracking_CountersPathAny) InPkts() *Flow_IngressTracking_Counters_InPktsPathAny {
	ps := &Flow_IngressTracking_Counters_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of bytes sent by the target for the flow. These
// packets may be generated or forwarded by the target.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-octets"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/counters/out-octets"
func (n *Flow_IngressTracking_CountersPath) OutOctets() *Flow_IngressTracking_Counters_OutOctetsPath {
	ps := &Flow_IngressTracking_Counters_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of bytes sent by the target for the flow. These
// packets may be generated or forwarded by the target.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-octets"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/counters/out-octets"
func (n *Flow_IngressTracking_CountersPathAny) OutOctets() *Flow_IngressTracking_Counters_OutOctetsPathAny {
	ps := &Flow_IngressTracking_Counters_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of packets sent by the target for the flow. These
// packets may be generated or forwarded by the target.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-pkts"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/counters/out-pkts"
func (n *Flow_IngressTracking_CountersPath) OutPkts() *Flow_IngressTracking_Counters_OutPktsPath {
	ps := &Flow_IngressTracking_Counters_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of packets sent by the target for the flow. These
// packets may be generated or forwarded by the target.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-pkts"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/state/counters/out-pkts"
func (n *Flow_IngressTracking_CountersPathAny) OutPkts() *Flow_IngressTracking_Counters_OutPktsPathAny {
	ps := &Flow_IngressTracking_Counters_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_IngressTracking_CountersPath) State() ygnmi.SingletonQuery[*oc.Flow_IngressTracking_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Flow_IngressTracking_Counters](
		"Flow_IngressTracking_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_IngressTracking_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Flow_IngressTracking_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Flow_IngressTracking_Counters](
		"Flow_IngressTracking_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_EgressTracking_ConvergenceTimePath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/convergence-time YANG schema element.
type Flow_IngressTracking_EgressTracking_ConvergenceTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_EgressTracking_ConvergenceTimePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/convergence-time YANG schema element.
type Flow_IngressTracking_EgressTracking_ConvergenceTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/convergence-time"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/convergence-time"
func (n *Flow_IngressTracking_EgressTracking_ConvergenceTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_IngressTracking_EgressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "convergence-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking).ConvergenceTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/convergence-time"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/convergence-time"
func (n *Flow_IngressTracking_EgressTracking_ConvergenceTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_IngressTracking_EgressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "convergence-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking).ConvergenceTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_EgressTracking_FilterPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/filter YANG schema element.
type Flow_IngressTracking_EgressTracking_FilterPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_EgressTracking_FilterPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/filter YANG schema element.
type Flow_IngressTracking_EgressTracking_FilterPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/filter"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/filter"
func (n *Flow_IngressTracking_EgressTracking_FilterPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Flow_IngressTracking_EgressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "filter"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking).Filter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/filter"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/filter"
func (n *Flow_IngressTracking_EgressTracking_FilterPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow_IngressTracking_EgressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "filter"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking).Filter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "filter"
//	Path from root:       ""
func (n *Flow_IngressTracking_EgressTracking_FilterPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Flow_IngressTracking_EgressTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"filter"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking).Filter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "filter"
//	Path from root:       ""
func (n *Flow_IngressTracking_EgressTracking_FilterPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Flow_IngressTracking_EgressTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"filter"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking).Filter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_EgressTracking_FirstPacketLatencyPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/first-packet-latency YANG schema element.
type Flow_IngressTracking_EgressTracking_FirstPacketLatencyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_EgressTracking_FirstPacketLatencyPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/first-packet-latency YANG schema element.
type Flow_IngressTracking_EgressTracking_FirstPacketLatencyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/first-packet-latency"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/first-packet-latency"
func (n *Flow_IngressTracking_EgressTracking_FirstPacketLatencyPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_IngressTracking_EgressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "first-packet-latency"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking).FirstPacketLatency
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/first-packet-latency"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/first-packet-latency"
func (n *Flow_IngressTracking_EgressTracking_FirstPacketLatencyPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_IngressTracking_EgressTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "first-packet-latency"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking).FirstPacketLatency
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_EgressTracking_InFrameRatePath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/in-frame-rate YANG schema element.
type Flow_IngressTracking_EgressTracking_InFrameRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_EgressTracking_InFrameRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/in-frame-rate YANG schema element.
type Flow_IngressTracking_EgressTracking_InFrameRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-frame-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/in-frame-rate"
func (n *Flow_IngressTracking_EgressTracking_InFrameRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Flow_IngressTracking_EgressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-frame-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking).InFrameRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-frame-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/in-frame-rate"
func (n *Flow_IngressTracking_EgressTracking_InFrameRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Flow_IngressTracking_EgressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-frame-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking).InFrameRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_EgressTracking_InRatePath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/in-rate YANG schema element.
type Flow_IngressTracking_EgressTracking_InRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_EgressTracking_InRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/in-rate YANG schema element.
type Flow_IngressTracking_EgressTracking_InRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/in-rate"
func (n *Flow_IngressTracking_EgressTracking_InRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Flow_IngressTracking_EgressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking).InRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/in-rate"
func (n *Flow_IngressTracking_EgressTracking_InRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Flow_IngressTracking_EgressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking).InRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_EgressTracking_LossPctPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/loss-pct YANG schema element.
type Flow_IngressTracking_EgressTracking_LossPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_EgressTracking_LossPctPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/loss-pct YANG schema element.
type Flow_IngressTracking_EgressTracking_LossPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/loss-pct"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/loss-pct"
func (n *Flow_IngressTracking_EgressTracking_LossPctPath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Flow_IngressTracking_EgressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loss-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking).LossPct
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/loss-pct"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/loss-pct"
func (n *Flow_IngressTracking_EgressTracking_LossPctPathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Flow_IngressTracking_EgressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loss-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking).LossPct
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_EgressTracking_OutFrameRatePath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/out-frame-rate YANG schema element.
type Flow_IngressTracking_EgressTracking_OutFrameRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_EgressTracking_OutFrameRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/out-frame-rate YANG schema element.
type Flow_IngressTracking_EgressTracking_OutFrameRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-frame-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/out-frame-rate"
func (n *Flow_IngressTracking_EgressTracking_OutFrameRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Flow_IngressTracking_EgressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-frame-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking).OutFrameRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-frame-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/out-frame-rate"
func (n *Flow_IngressTracking_EgressTracking_OutFrameRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Flow_IngressTracking_EgressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-frame-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking).OutFrameRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_EgressTracking_OutRatePath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/out-rate YANG schema element.
type Flow_IngressTracking_EgressTracking_OutRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_EgressTracking_OutRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/out-rate YANG schema element.
type Flow_IngressTracking_EgressTracking_OutRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/out-rate"
func (n *Flow_IngressTracking_EgressTracking_OutRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Flow_IngressTracking_EgressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking).OutRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/out-rate"
func (n *Flow_IngressTracking_EgressTracking_OutRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Flow_IngressTracking_EgressTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking).OutRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_EgressTrackingPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking YANG schema element.
type Flow_IngressTracking_EgressTrackingPath struct {
	*ygnmi.NodePath
}

// Flow_IngressTracking_EgressTrackingPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking YANG schema element.
type Flow_IngressTracking_EgressTrackingPathAny struct {
	*ygnmi.NodePath
}

// Flow_IngressTracking_EgressTrackingPathMap represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking YANG schema element.
type Flow_IngressTracking_EgressTrackingPathMap struct {
	*ygnmi.NodePath
}

// Flow_IngressTracking_EgressTrackingPathMapAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking YANG schema element.
type Flow_IngressTracking_EgressTrackingPathMapAny struct {
	*ygnmi.NodePath
}

// ConvergenceTime (leaf): The time from when the first packet was received to when traffic
// loss dropped below a minimal threshold value.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/convergence-time"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/convergence-time"
func (n *Flow_IngressTracking_EgressTrackingPath) ConvergenceTime() *Flow_IngressTracking_EgressTracking_ConvergenceTimePath {
	ps := &Flow_IngressTracking_EgressTracking_ConvergenceTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "convergence-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConvergenceTime (leaf): The time from when the first packet was received to when traffic
// loss dropped below a minimal threshold value.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/convergence-time"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/convergence-time"
func (n *Flow_IngressTracking_EgressTrackingPathAny) ConvergenceTime() *Flow_IngressTracking_EgressTracking_ConvergenceTimePathAny {
	ps := &Flow_IngressTracking_EgressTracking_ConvergenceTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "convergence-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (container): Counters that correspond to the flow by egress tracking filter.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/counters"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters"
func (n *Flow_IngressTracking_EgressTrackingPath) Counters() *Flow_IngressTracking_EgressTracking_CountersPath {
	ps := &Flow_IngressTracking_EgressTracking_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters that correspond to the flow by egress tracking filter.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/counters"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters"
func (n *Flow_IngressTracking_EgressTrackingPathAny) Counters() *Flow_IngressTracking_EgressTracking_CountersPathAny {
	ps := &Flow_IngressTracking_EgressTracking_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Filter (leaf): Value of the filter on which the egress stats are tracked
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/filter"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/*/filter"
func (n *Flow_IngressTracking_EgressTrackingPath) Filter() *Flow_IngressTracking_EgressTracking_FilterPath {
	ps := &Flow_IngressTracking_EgressTracking_FilterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "filter"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Filter (leaf): Value of the filter on which the egress stats are tracked
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "*/filter"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/*/filter"
func (n *Flow_IngressTracking_EgressTrackingPathAny) Filter() *Flow_IngressTracking_EgressTracking_FilterPathAny {
	ps := &Flow_IngressTracking_EgressTracking_FilterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "filter"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FirstPacketLatency (leaf): The time from when the flow was started to when the first packet was
// received.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/first-packet-latency"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/first-packet-latency"
func (n *Flow_IngressTracking_EgressTrackingPath) FirstPacketLatency() *Flow_IngressTracking_EgressTracking_FirstPacketLatencyPath {
	ps := &Flow_IngressTracking_EgressTracking_FirstPacketLatencyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "first-packet-latency"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FirstPacketLatency (leaf): The time from when the flow was started to when the first packet was
// received.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/first-packet-latency"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/first-packet-latency"
func (n *Flow_IngressTracking_EgressTrackingPathAny) FirstPacketLatency() *Flow_IngressTracking_EgressTracking_FirstPacketLatencyPathAny {
	ps := &Flow_IngressTracking_EgressTracking_FirstPacketLatencyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "first-packet-latency"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// received for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-frame-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/in-frame-rate"
func (n *Flow_IngressTracking_EgressTrackingPath) InFrameRate() *Flow_IngressTracking_EgressTracking_InFrameRatePath {
	ps := &Flow_IngressTracking_EgressTracking_InFrameRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-frame-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// received for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-frame-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/in-frame-rate"
func (n *Flow_IngressTracking_EgressTrackingPathAny) InFrameRate() *Flow_IngressTracking_EgressTracking_InFrameRatePathAny {
	ps := &Flow_IngressTracking_EgressTracking_InFrameRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-frame-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InRate (leaf): The rate, measured in bits per second, at which the flow is being
// received.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/in-rate"
func (n *Flow_IngressTracking_EgressTrackingPath) InRate() *Flow_IngressTracking_EgressTracking_InRatePath {
	ps := &Flow_IngressTracking_EgressTracking_InRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InRate (leaf): The rate, measured in bits per second, at which the flow is being
// received.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/in-rate"
func (n *Flow_IngressTracking_EgressTrackingPathAny) InRate() *Flow_IngressTracking_EgressTracking_InRatePathAny {
	ps := &Flow_IngressTracking_EgressTracking_InRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LossPct (leaf): The percentage of transmitted packets that were not received by the
// destinations of the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/loss-pct"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/loss-pct"
func (n *Flow_IngressTracking_EgressTrackingPath) LossPct() *Flow_IngressTracking_EgressTracking_LossPctPath {
	ps := &Flow_IngressTracking_EgressTracking_LossPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loss-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LossPct (leaf): The percentage of transmitted packets that were not received by the
// destinations of the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/loss-pct"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/loss-pct"
func (n *Flow_IngressTracking_EgressTrackingPathAny) LossPct() *Flow_IngressTracking_EgressTracking_LossPctPathAny {
	ps := &Flow_IngressTracking_EgressTracking_LossPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loss-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// transmitted for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-frame-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/out-frame-rate"
func (n *Flow_IngressTracking_EgressTrackingPath) OutFrameRate() *Flow_IngressTracking_EgressTracking_OutFrameRatePath {
	ps := &Flow_IngressTracking_EgressTracking_OutFrameRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-frame-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// transmitted for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-frame-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/out-frame-rate"
func (n *Flow_IngressTracking_EgressTrackingPathAny) OutFrameRate() *Flow_IngressTracking_EgressTracking_OutFrameRatePathAny {
	ps := &Flow_IngressTracking_EgressTracking_OutFrameRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-frame-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutRate (leaf): The rate, measured in bits per second, at which the flow is being
// transmitted.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/out-rate"
func (n *Flow_IngressTracking_EgressTrackingPath) OutRate() *Flow_IngressTracking_EgressTracking_OutRatePath {
	ps := &Flow_IngressTracking_EgressTracking_OutRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutRate (leaf): The rate, measured in bits per second, at which the flow is being
// transmitted.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/out-rate"
func (n *Flow_IngressTracking_EgressTrackingPathAny) OutRate() *Flow_IngressTracking_EgressTracking_OutRatePathAny {
	ps := &Flow_IngressTracking_EgressTracking_OutRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_IngressTracking_EgressTrackingPath) State() ygnmi.SingletonQuery[*oc.Flow_IngressTracking_EgressTracking] {
	return ygnmi.NewSingletonQuery[*oc.Flow_IngressTracking_EgressTracking](
		"Flow_IngressTracking_EgressTracking",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_IngressTracking_EgressTrackingPathAny) State() ygnmi.WildcardQuery[*oc.Flow_IngressTracking_EgressTracking] {
	return ygnmi.NewWildcardQuery[*oc.Flow_IngressTracking_EgressTracking](
		"Flow_IngressTracking_EgressTracking",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_IngressTracking_EgressTrackingPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Flow_IngressTracking_EgressTracking] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Flow_IngressTracking_EgressTracking](
		"Flow_IngressTracking",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Flow_IngressTracking_EgressTracking, bool) {
			ret := gs.(*oc.Flow_IngressTracking).EgressTracking
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-ate-flow:egress-tracking"},
			PostRelPath: []string{"openconfig-ate-flow:egress-tracking"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_IngressTracking_EgressTrackingPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Flow_IngressTracking_EgressTracking] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Flow_IngressTracking_EgressTracking](
		"Flow_IngressTracking",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Flow_IngressTracking_EgressTracking, bool) {
			ret := gs.(*oc.Flow_IngressTracking).EgressTracking
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-ate-flow:egress-tracking"},
			PostRelPath: []string{"openconfig-ate-flow:egress-tracking"},
		},
	)
}

// Flow_IngressTracking_EgressTracking_Counters_InOctetsPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/in-octets YANG schema element.
type Flow_IngressTracking_EgressTracking_Counters_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_EgressTracking_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/in-octets YANG schema element.
type Flow_IngressTracking_EgressTracking_Counters_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-octets"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/in-octets"
func (n *Flow_IngressTracking_EgressTracking_Counters_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_IngressTracking_EgressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-octets"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/in-octets"
func (n *Flow_IngressTracking_EgressTracking_Counters_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_IngressTracking_EgressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_EgressTracking_Counters_InPktsPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/in-pkts YANG schema element.
type Flow_IngressTracking_EgressTracking_Counters_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_EgressTracking_Counters_InPktsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/in-pkts YANG schema element.
type Flow_IngressTracking_EgressTracking_Counters_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-pkts"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/in-pkts"
func (n *Flow_IngressTracking_EgressTracking_Counters_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_IngressTracking_EgressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-pkts"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/in-pkts"
func (n *Flow_IngressTracking_EgressTracking_Counters_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_IngressTracking_EgressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_EgressTracking_Counters_OutOctetsPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/out-octets YANG schema element.
type Flow_IngressTracking_EgressTracking_Counters_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_EgressTracking_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/out-octets YANG schema element.
type Flow_IngressTracking_EgressTracking_Counters_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-octets"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/out-octets"
func (n *Flow_IngressTracking_EgressTracking_Counters_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_IngressTracking_EgressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-octets"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/out-octets"
func (n *Flow_IngressTracking_EgressTracking_Counters_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_IngressTracking_EgressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_EgressTracking_Counters_OutPktsPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/out-pkts YANG schema element.
type Flow_IngressTracking_EgressTracking_Counters_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_IngressTracking_EgressTracking_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/out-pkts YANG schema element.
type Flow_IngressTracking_EgressTracking_Counters_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-pkts"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/out-pkts"
func (n *Flow_IngressTracking_EgressTracking_Counters_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Flow_IngressTracking_EgressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-pkts"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/out-pkts"
func (n *Flow_IngressTracking_EgressTracking_Counters_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Flow_IngressTracking_EgressTracking_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_IngressTracking_EgressTracking_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_IngressTracking_EgressTracking_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Flow_IngressTracking_EgressTracking_CountersPath represents the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters YANG schema element.
type Flow_IngressTracking_EgressTracking_CountersPath struct {
	*ygnmi.NodePath
}

// Flow_IngressTracking_EgressTracking_CountersPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters YANG schema element.
type Flow_IngressTracking_EgressTracking_CountersPathAny struct {
	*ygnmi.NodePath
}

// InOctets (leaf): The total number of bytes received by the target for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-octets"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/in-octets"
func (n *Flow_IngressTracking_EgressTracking_CountersPath) InOctets() *Flow_IngressTracking_EgressTracking_Counters_InOctetsPath {
	ps := &Flow_IngressTracking_EgressTracking_Counters_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of bytes received by the target for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-octets"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/in-octets"
func (n *Flow_IngressTracking_EgressTracking_CountersPathAny) InOctets() *Flow_IngressTracking_EgressTracking_Counters_InOctetsPathAny {
	ps := &Flow_IngressTracking_EgressTracking_Counters_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of packets received by the target for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-pkts"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/in-pkts"
func (n *Flow_IngressTracking_EgressTracking_CountersPath) InPkts() *Flow_IngressTracking_EgressTracking_Counters_InPktsPath {
	ps := &Flow_IngressTracking_EgressTracking_Counters_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of packets received by the target for the flow.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "in-pkts"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/in-pkts"
func (n *Flow_IngressTracking_EgressTracking_CountersPathAny) InPkts() *Flow_IngressTracking_EgressTracking_Counters_InPktsPathAny {
	ps := &Flow_IngressTracking_EgressTracking_Counters_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of bytes sent by the target for the flow. These
// packets may be generated or forwarded by the target.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-octets"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/out-octets"
func (n *Flow_IngressTracking_EgressTracking_CountersPath) OutOctets() *Flow_IngressTracking_EgressTracking_Counters_OutOctetsPath {
	ps := &Flow_IngressTracking_EgressTracking_Counters_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of bytes sent by the target for the flow. These
// packets may be generated or forwarded by the target.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-octets"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/out-octets"
func (n *Flow_IngressTracking_EgressTracking_CountersPathAny) OutOctets() *Flow_IngressTracking_EgressTracking_Counters_OutOctetsPathAny {
	ps := &Flow_IngressTracking_EgressTracking_Counters_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of packets sent by the target for the flow. These
// packets may be generated or forwarded by the target.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-pkts"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/out-pkts"
func (n *Flow_IngressTracking_EgressTracking_CountersPath) OutPkts() *Flow_IngressTracking_EgressTracking_Counters_OutPktsPath {
	ps := &Flow_IngressTracking_EgressTracking_Counters_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of packets sent by the target for the flow. These
// packets may be generated or forwarded by the target.
//
//	Defining module:      "openconfig-ate-flow"
//	Instantiating module: "openconfig-ate-flow"
//	Path from parent:     "out-pkts"
//	Path from root:       "/flows/flow/ingress-tracking/ingress-tracking/egress-tracking/egress-tracking/state/counters/out-pkts"
func (n *Flow_IngressTracking_EgressTracking_CountersPathAny) OutPkts() *Flow_IngressTracking_EgressTracking_Counters_OutPktsPathAny {
	ps := &Flow_IngressTracking_EgressTracking_Counters_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_IngressTracking_EgressTracking_CountersPath) State() ygnmi.SingletonQuery[*oc.Flow_IngressTracking_EgressTracking_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Flow_IngressTracking_EgressTracking_Counters](
		"Flow_IngressTracking_EgressTracking_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_IngressTracking_EgressTracking_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Flow_IngressTracking_EgressTracking_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Flow_IngressTracking_EgressTracking_Counters](
		"Flow_IngressTracking_EgressTracking_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

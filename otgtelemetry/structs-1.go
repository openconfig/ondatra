/*
Package otgtelemetry is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /home/athena/go/pkg/mod/github.com/openconfig/ygot@v0.16.3/genutil/names.go
using the following YANG input files:
	- gnmi-collector-metadata.yang
	- models-yang/models/isis/open-traffic-generator-isis.yang
	- models-yang/models/types/open-traffic-generator-types.yang
	- models-yang/models/flow/open-traffic-generator-flow.yang
	- models-yang/models/discovery/open-traffic-generator-discovery.yang
	- models-yang/models/interface/open-traffic-generator-port.yang
	- models-yang/models/bgp/open-traffic-generator-bgp.yang
Imported modules were sourced from:
	- models-yang/models/...
*/
package otgtelemetry

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Interface_Ipv4Neighbor represents the /open-traffic-generator-discovery/interfaces/interface/ipv4-neighbors/ipv4-neighbor YANG schema element.
type Interface_Ipv4Neighbor struct {
	Ipv4Address      *string `path:"state/ipv4-address|ipv4-address" module:"open-traffic-generator-discovery/open-traffic-generator-discovery|open-traffic-generator-discovery" shadow-path:"ipv4-address" shadow-module:"open-traffic-generator-discovery"`
	LinkLayerAddress *string `path:"state/link-layer-address" module:"open-traffic-generator-discovery/open-traffic-generator-discovery"`
}

// IsYANGGoStruct ensures that Interface_Ipv4Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ipv4Neighbor) IsYANGGoStruct() {}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the Interface_Ipv4Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *Interface_Ipv4Neighbor) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the Interface_Ipv4Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkLayerAddress is set, it can
// safely use t.GetLinkLayerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkLayerAddress == nil' before retrieving the leaf's value.
func (t *Interface_Ipv4Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Ipv4Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Ipv4Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Interface_Ipv4Neighbor struct, which is a YANG list entry.
func (t *Interface_Ipv4Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ipv4Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Ipv4Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Ipv4Neighbor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_Ipv6Neighbor represents the /open-traffic-generator-discovery/interfaces/interface/ipv6-neighbors/ipv6-neighbor YANG schema element.
type Interface_Ipv6Neighbor struct {
	Ipv6Address      *string `path:"state/ipv6-address|ipv6-address" module:"open-traffic-generator-discovery/open-traffic-generator-discovery|open-traffic-generator-discovery" shadow-path:"ipv6-address" shadow-module:"open-traffic-generator-discovery"`
	LinkLayerAddress *string `path:"state/link-layer-address" module:"open-traffic-generator-discovery/open-traffic-generator-discovery"`
}

// IsYANGGoStruct ensures that Interface_Ipv6Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ipv6Neighbor) IsYANGGoStruct() {}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the Interface_Ipv6Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *Interface_Ipv6Neighbor) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the Interface_Ipv6Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkLayerAddress is set, it can
// safely use t.GetLinkLayerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkLayerAddress == nil' before retrieving the leaf's value.
func (t *Interface_Ipv6Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Ipv6Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Ipv6Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Interface_Ipv6Neighbor struct, which is a YANG list entry.
func (t *Interface_Ipv6Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ipv6Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Ipv6Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Ipv6Neighbor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// IsisRouter represents the /open-traffic-generator-isis/isis-routers/isis-router YANG schema element.
type IsisRouter struct {
	Counters *IsisRouter_Counters `path:"state/counters" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	Name     *string              `path:"state/name|name" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"name" shadow-module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *IsisRouter) GetOrCreateCounters() *IsisRouter_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &IsisRouter_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from IsisRouter. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter) GetCounters() *IsisRouter_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the IsisRouter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *IsisRouter) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the IsisRouter struct, which is a YANG list entry.
func (t *IsisRouter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// IsisRouter_Counters represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters YANG schema element.
type IsisRouter_Counters struct {
	Level1 *IsisRouter_Counters_Level1 `path:"level1" module:"open-traffic-generator-isis"`
	Level2 *IsisRouter_Counters_Level2 `path:"level2" module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_Counters) IsYANGGoStruct() {}

// GetOrCreateLevel1 retrieves the value of the Level1 field
// or returns the existing field if it already exists.
func (t *IsisRouter_Counters) GetOrCreateLevel1() *IsisRouter_Counters_Level1 {
	if t.Level1 != nil {
		return t.Level1
	}
	t.Level1 = &IsisRouter_Counters_Level1{}
	return t.Level1
}

// GetOrCreateLevel2 retrieves the value of the Level2 field
// or returns the existing field if it already exists.
func (t *IsisRouter_Counters) GetOrCreateLevel2() *IsisRouter_Counters_Level2 {
	if t.Level2 != nil {
		return t.Level2
	}
	t.Level2 = &IsisRouter_Counters_Level2{}
	return t.Level2
}

// GetLevel1 returns the value of the Level1 struct pointer
// from IsisRouter_Counters. If the receiver or the field Level1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_Counters) GetLevel1() *IsisRouter_Counters_Level1 {
	if t != nil && t.Level1 != nil {
		return t.Level1
	}
	return nil
}

// GetLevel2 returns the value of the Level2 struct pointer
// from IsisRouter_Counters. If the receiver or the field Level2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_Counters) GetLevel2() *IsisRouter_Counters_Level2 {
	if t != nil && t.Level2 != nil {
		return t.Level2
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Level1.PopulateDefaults()
	t.Level2.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// IsisRouter_Counters_Level1 represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1 YANG schema element.
type IsisRouter_Counters_Level1 struct {
	DatabaseSize   *uint64 `path:"database-size" module:"open-traffic-generator-isis"`
	InBcastHellos  *uint64 `path:"in-bcast-hellos" module:"open-traffic-generator-isis"`
	InCsnp         *uint64 `path:"in-csnp" module:"open-traffic-generator-isis"`
	InLsp          *uint64 `path:"in-lsp" module:"open-traffic-generator-isis"`
	InP2PHellos    *uint64 `path:"in-p2p-hellos" module:"open-traffic-generator-isis"`
	InPsnp         *uint64 `path:"in-psnp" module:"open-traffic-generator-isis"`
	OutBcastHellos *uint64 `path:"out-bcast-hellos" module:"open-traffic-generator-isis"`
	OutCsnp        *uint64 `path:"out-csnp" module:"open-traffic-generator-isis"`
	OutLsp         *uint64 `path:"out-lsp" module:"open-traffic-generator-isis"`
	OutP2PHellos   *uint64 `path:"out-p2p-hellos" module:"open-traffic-generator-isis"`
	OutPsnp        *uint64 `path:"out-psnp" module:"open-traffic-generator-isis"`
	SessionsFlap   *uint64 `path:"sessions-flap" module:"open-traffic-generator-isis"`
	SessionsUp     *uint64 `path:"sessions-up" module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_Counters_Level1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_Counters_Level1) IsYANGGoStruct() {}

// GetDatabaseSize retrieves the value of the leaf DatabaseSize from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DatabaseSize is set, it can
// safely use t.GetDatabaseSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DatabaseSize == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetDatabaseSize() uint64 {
	if t == nil || t.DatabaseSize == nil {
		return 0
	}
	return *t.DatabaseSize
}

// GetInBcastHellos retrieves the value of the leaf InBcastHellos from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InBcastHellos is set, it can
// safely use t.GetInBcastHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InBcastHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetInBcastHellos() uint64 {
	if t == nil || t.InBcastHellos == nil {
		return 0
	}
	return *t.InBcastHellos
}

// GetInCsnp retrieves the value of the leaf InCsnp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InCsnp is set, it can
// safely use t.GetInCsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InCsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetInCsnp() uint64 {
	if t == nil || t.InCsnp == nil {
		return 0
	}
	return *t.InCsnp
}

// GetInLsp retrieves the value of the leaf InLsp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLsp is set, it can
// safely use t.GetInLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLsp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetInLsp() uint64 {
	if t == nil || t.InLsp == nil {
		return 0
	}
	return *t.InLsp
}

// GetInP2PHellos retrieves the value of the leaf InP2PHellos from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InP2PHellos is set, it can
// safely use t.GetInP2PHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InP2PHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetInP2PHellos() uint64 {
	if t == nil || t.InP2PHellos == nil {
		return 0
	}
	return *t.InP2PHellos
}

// GetInPsnp retrieves the value of the leaf InPsnp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPsnp is set, it can
// safely use t.GetInPsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetInPsnp() uint64 {
	if t == nil || t.InPsnp == nil {
		return 0
	}
	return *t.InPsnp
}

// GetOutBcastHellos retrieves the value of the leaf OutBcastHellos from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutBcastHellos is set, it can
// safely use t.GetOutBcastHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutBcastHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetOutBcastHellos() uint64 {
	if t == nil || t.OutBcastHellos == nil {
		return 0
	}
	return *t.OutBcastHellos
}

// GetOutCsnp retrieves the value of the leaf OutCsnp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutCsnp is set, it can
// safely use t.GetOutCsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutCsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetOutCsnp() uint64 {
	if t == nil || t.OutCsnp == nil {
		return 0
	}
	return *t.OutCsnp
}

// GetOutLsp retrieves the value of the leaf OutLsp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLsp is set, it can
// safely use t.GetOutLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLsp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetOutLsp() uint64 {
	if t == nil || t.OutLsp == nil {
		return 0
	}
	return *t.OutLsp
}

// GetOutP2PHellos retrieves the value of the leaf OutP2PHellos from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutP2PHellos is set, it can
// safely use t.GetOutP2PHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutP2PHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetOutP2PHellos() uint64 {
	if t == nil || t.OutP2PHellos == nil {
		return 0
	}
	return *t.OutP2PHellos
}

// GetOutPsnp retrieves the value of the leaf OutPsnp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPsnp is set, it can
// safely use t.GetOutPsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetOutPsnp() uint64 {
	if t == nil || t.OutPsnp == nil {
		return 0
	}
	return *t.OutPsnp
}

// GetSessionsFlap retrieves the value of the leaf SessionsFlap from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsFlap is set, it can
// safely use t.GetSessionsFlap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsFlap == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetSessionsFlap() uint64 {
	if t == nil || t.SessionsFlap == nil {
		return 0
	}
	return *t.SessionsFlap
}

// GetSessionsUp retrieves the value of the leaf SessionsUp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsUp is set, it can
// safely use t.GetSessionsUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsUp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetSessionsUp() uint64 {
	if t == nil || t.SessionsUp == nil {
		return 0
	}
	return *t.SessionsUp
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_Counters_Level1
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_Counters_Level1) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_Counters_Level1) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_Counters_Level1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_Counters_Level1) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// IsisRouter_Counters_Level2 represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2 YANG schema element.
type IsisRouter_Counters_Level2 struct {
	DatabaseSize   *uint64 `path:"database-size" module:"open-traffic-generator-isis"`
	InBcastHellos  *uint64 `path:"in-bcast-hellos" module:"open-traffic-generator-isis"`
	InCsnp         *uint64 `path:"in-csnp" module:"open-traffic-generator-isis"`
	InLsp          *uint64 `path:"in-lsp" module:"open-traffic-generator-isis"`
	InP2PHellos    *uint64 `path:"in-p2p-hellos" module:"open-traffic-generator-isis"`
	InPsnp         *uint64 `path:"in-psnp" module:"open-traffic-generator-isis"`
	OutBcastHellos *uint64 `path:"out-bcast-hellos" module:"open-traffic-generator-isis"`
	OutCsnp        *uint64 `path:"out-csnp" module:"open-traffic-generator-isis"`
	OutLsp         *uint64 `path:"out-lsp" module:"open-traffic-generator-isis"`
	OutP2PHellos   *uint64 `path:"out-p2p-hellos" module:"open-traffic-generator-isis"`
	OutPsnp        *uint64 `path:"out-psnp" module:"open-traffic-generator-isis"`
	SessionsFlap   *uint64 `path:"sessions-flap" module:"open-traffic-generator-isis"`
	SessionsUp     *uint64 `path:"sessions-up" module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_Counters_Level2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_Counters_Level2) IsYANGGoStruct() {}

// GetDatabaseSize retrieves the value of the leaf DatabaseSize from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DatabaseSize is set, it can
// safely use t.GetDatabaseSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DatabaseSize == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetDatabaseSize() uint64 {
	if t == nil || t.DatabaseSize == nil {
		return 0
	}
	return *t.DatabaseSize
}

// GetInBcastHellos retrieves the value of the leaf InBcastHellos from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InBcastHellos is set, it can
// safely use t.GetInBcastHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InBcastHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetInBcastHellos() uint64 {
	if t == nil || t.InBcastHellos == nil {
		return 0
	}
	return *t.InBcastHellos
}

// GetInCsnp retrieves the value of the leaf InCsnp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InCsnp is set, it can
// safely use t.GetInCsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InCsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetInCsnp() uint64 {
	if t == nil || t.InCsnp == nil {
		return 0
	}
	return *t.InCsnp
}

// GetInLsp retrieves the value of the leaf InLsp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLsp is set, it can
// safely use t.GetInLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLsp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetInLsp() uint64 {
	if t == nil || t.InLsp == nil {
		return 0
	}
	return *t.InLsp
}

// GetInP2PHellos retrieves the value of the leaf InP2PHellos from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InP2PHellos is set, it can
// safely use t.GetInP2PHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InP2PHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetInP2PHellos() uint64 {
	if t == nil || t.InP2PHellos == nil {
		return 0
	}
	return *t.InP2PHellos
}

// GetInPsnp retrieves the value of the leaf InPsnp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPsnp is set, it can
// safely use t.GetInPsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetInPsnp() uint64 {
	if t == nil || t.InPsnp == nil {
		return 0
	}
	return *t.InPsnp
}

// GetOutBcastHellos retrieves the value of the leaf OutBcastHellos from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutBcastHellos is set, it can
// safely use t.GetOutBcastHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutBcastHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetOutBcastHellos() uint64 {
	if t == nil || t.OutBcastHellos == nil {
		return 0
	}
	return *t.OutBcastHellos
}

// GetOutCsnp retrieves the value of the leaf OutCsnp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutCsnp is set, it can
// safely use t.GetOutCsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutCsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetOutCsnp() uint64 {
	if t == nil || t.OutCsnp == nil {
		return 0
	}
	return *t.OutCsnp
}

// GetOutLsp retrieves the value of the leaf OutLsp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLsp is set, it can
// safely use t.GetOutLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLsp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetOutLsp() uint64 {
	if t == nil || t.OutLsp == nil {
		return 0
	}
	return *t.OutLsp
}

// GetOutP2PHellos retrieves the value of the leaf OutP2PHellos from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutP2PHellos is set, it can
// safely use t.GetOutP2PHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutP2PHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetOutP2PHellos() uint64 {
	if t == nil || t.OutP2PHellos == nil {
		return 0
	}
	return *t.OutP2PHellos
}

// GetOutPsnp retrieves the value of the leaf OutPsnp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPsnp is set, it can
// safely use t.GetOutPsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetOutPsnp() uint64 {
	if t == nil || t.OutPsnp == nil {
		return 0
	}
	return *t.OutPsnp
}

// GetSessionsFlap retrieves the value of the leaf SessionsFlap from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsFlap is set, it can
// safely use t.GetSessionsFlap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsFlap == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetSessionsFlap() uint64 {
	if t == nil || t.SessionsFlap == nil {
		return 0
	}
	return *t.SessionsFlap
}

// GetSessionsUp retrieves the value of the leaf SessionsUp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsUp is set, it can
// safely use t.GetSessionsUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsUp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetSessionsUp() uint64 {
	if t == nil || t.SessionsUp == nil {
		return 0
	}
	return *t.SessionsUp
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_Counters_Level2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_Counters_Level2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_Counters_Level2) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_Counters_Level2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_Counters_Level2) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

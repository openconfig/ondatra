/*
Package otgtelemetry is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /home/athena/go/pkg/mod/github.com/openconfig/ygot@v0.16.3/genutil/names.go
using the following YANG input files:
	- gnmi-collector-metadata.yang
	- models-yang/models/isis/open-traffic-generator-isis.yang
	- models-yang/models/types/open-traffic-generator-types.yang
	- models-yang/models/flow/open-traffic-generator-flow.yang
	- models-yang/models/discovery/open-traffic-generator-discovery.yang
	- models-yang/models/interface/open-traffic-generator-port.yang
	- models-yang/models/bgp/open-traffic-generator-bgp.yang
Imported modules were sourced from:
	- models-yang/models/...
*/
package otgtelemetry

import (
	"github.com/openconfig/ygot/ygot"
)

// MetaPath represents the /gnmi-collector-metadata/meta YANG schema element.
type MetaPath struct {
	*ygot.NodePath
}

// MetaPathAny represents the wildcard version of the /gnmi-collector-metadata/meta YANG schema element.
type MetaPathAny struct {
	*ygot.NodePath
}

// Meta_ConnectErrorPath represents the /gnmi-collector-metadata/meta/connectError YANG schema element.
type Meta_ConnectErrorPath struct {
	*ygot.NodePath
}

// Meta_ConnectErrorPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/connectError YANG schema element.
type Meta_ConnectErrorPathAny struct {
	*ygot.NodePath
}

// Meta_ConnectedPath represents the /gnmi-collector-metadata/meta/connected YANG schema element.
type Meta_ConnectedPath struct {
	*ygot.NodePath
}

// Meta_ConnectedPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/connected YANG schema element.
type Meta_ConnectedPathAny struct {
	*ygot.NodePath
}

// Meta_ConnectedAddressPath represents the /gnmi-collector-metadata/meta/connectedAddress YANG schema element.
type Meta_ConnectedAddressPath struct {
	*ygot.NodePath
}

// Meta_ConnectedAddressPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/connectedAddress YANG schema element.
type Meta_ConnectedAddressPathAny struct {
	*ygot.NodePath
}

// Meta_LatencyAvgPath represents the /gnmi-collector-metadata/meta/latencyAvg YANG schema element.
type Meta_LatencyAvgPath struct {
	*ygot.NodePath
}

// Meta_LatencyAvgPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/latencyAvg YANG schema element.
type Meta_LatencyAvgPathAny struct {
	*ygot.NodePath
}

// Meta_LatencyMaxPath represents the /gnmi-collector-metadata/meta/latencyMax YANG schema element.
type Meta_LatencyMaxPath struct {
	*ygot.NodePath
}

// Meta_LatencyMaxPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/latencyMax YANG schema element.
type Meta_LatencyMaxPathAny struct {
	*ygot.NodePath
}

// Meta_LatencyMinPath represents the /gnmi-collector-metadata/meta/latencyMin YANG schema element.
type Meta_LatencyMinPath struct {
	*ygot.NodePath
}

// Meta_LatencyMinPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/latencyMin YANG schema element.
type Meta_LatencyMinPathAny struct {
	*ygot.NodePath
}

// Meta_LatestTimestampPath represents the /gnmi-collector-metadata/meta/latestTimestamp YANG schema element.
type Meta_LatestTimestampPath struct {
	*ygot.NodePath
}

// Meta_LatestTimestampPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/latestTimestamp YANG schema element.
type Meta_LatestTimestampPathAny struct {
	*ygot.NodePath
}

// Meta_SyncPath represents the /gnmi-collector-metadata/meta/sync YANG schema element.
type Meta_SyncPath struct {
	*ygot.NodePath
}

// Meta_SyncPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/sync YANG schema element.
type Meta_SyncPathAny struct {
	*ygot.NodePath
}

// Meta_TargetLeavesPath represents the /gnmi-collector-metadata/meta/targetLeaves YANG schema element.
type Meta_TargetLeavesPath struct {
	*ygot.NodePath
}

// Meta_TargetLeavesPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/targetLeaves YANG schema element.
type Meta_TargetLeavesPathAny struct {
	*ygot.NodePath
}

// Meta_TargetLeavesAddedPath represents the /gnmi-collector-metadata/meta/targetLeavesAdded YANG schema element.
type Meta_TargetLeavesAddedPath struct {
	*ygot.NodePath
}

// Meta_TargetLeavesAddedPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/targetLeavesAdded YANG schema element.
type Meta_TargetLeavesAddedPathAny struct {
	*ygot.NodePath
}

// Meta_TargetLeavesDeletedPath represents the /gnmi-collector-metadata/meta/targetLeavesDeleted YANG schema element.
type Meta_TargetLeavesDeletedPath struct {
	*ygot.NodePath
}

// Meta_TargetLeavesDeletedPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/targetLeavesDeleted YANG schema element.
type Meta_TargetLeavesDeletedPathAny struct {
	*ygot.NodePath
}

// Meta_TargetLeavesEmptyPath represents the /gnmi-collector-metadata/meta/targetLeavesEmpty YANG schema element.
type Meta_TargetLeavesEmptyPath struct {
	*ygot.NodePath
}

// Meta_TargetLeavesEmptyPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/targetLeavesEmpty YANG schema element.
type Meta_TargetLeavesEmptyPathAny struct {
	*ygot.NodePath
}

// Meta_TargetLeavesStalePath represents the /gnmi-collector-metadata/meta/targetLeavesStale YANG schema element.
type Meta_TargetLeavesStalePath struct {
	*ygot.NodePath
}

// Meta_TargetLeavesStalePathAny represents the wildcard version of the /gnmi-collector-metadata/meta/targetLeavesStale YANG schema element.
type Meta_TargetLeavesStalePathAny struct {
	*ygot.NodePath
}

// Meta_TargetLeavesSuppressedPath represents the /gnmi-collector-metadata/meta/targetLeavesSuppressed YANG schema element.
type Meta_TargetLeavesSuppressedPath struct {
	*ygot.NodePath
}

// Meta_TargetLeavesSuppressedPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/targetLeavesSuppressed YANG schema element.
type Meta_TargetLeavesSuppressedPathAny struct {
	*ygot.NodePath
}

// Meta_TargetLeavesUpdatedPath represents the /gnmi-collector-metadata/meta/targetLeavesUpdated YANG schema element.
type Meta_TargetLeavesUpdatedPath struct {
	*ygot.NodePath
}

// Meta_TargetLeavesUpdatedPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/targetLeavesUpdated YANG schema element.
type Meta_TargetLeavesUpdatedPathAny struct {
	*ygot.NodePath
}

// Meta_TargetSizePath represents the /gnmi-collector-metadata/meta/targetSize YANG schema element.
type Meta_TargetSizePath struct {
	*ygot.NodePath
}

// Meta_TargetSizePathAny represents the wildcard version of the /gnmi-collector-metadata/meta/targetSize YANG schema element.
type Meta_TargetSizePathAny struct {
	*ygot.NodePath
}

// ConnectError (leaf): connectError is the error related to connection failure.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "connectError"
// Path from root: "/meta/connectError"
func (n *MetaPath) ConnectError() *Meta_ConnectErrorPath {
	return &Meta_ConnectErrorPath{
		NodePath: ygot.NewNodePath(
			[]string{"connectError"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectError (leaf): connectError is the error related to connection failure.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "connectError"
// Path from root: "/meta/connectError"
func (n *MetaPathAny) ConnectError() *Meta_ConnectErrorPathAny {
	return &Meta_ConnectErrorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"connectError"},
			map[string]interface{}{},
			n,
		),
	}
}

// Connected (leaf): connected reports whether the client has an active gRPC session with
// the target device; it requires at least 1 update delivered over the
// connection before being set to true.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "connected"
// Path from root: "/meta/connected"
func (n *MetaPath) Connected() *Meta_ConnectedPath {
	return &Meta_ConnectedPath{
		NodePath: ygot.NewNodePath(
			[]string{"connected"},
			map[string]interface{}{},
			n,
		),
	}
}

// Connected (leaf): connected reports whether the client has an active gRPC session with
// the target device; it requires at least 1 update delivered over the
// connection before being set to true.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "connected"
// Path from root: "/meta/connected"
func (n *MetaPathAny) Connected() *Meta_ConnectedPathAny {
	return &Meta_ConnectedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"connected"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectedAddress (leaf): connectedAddress denotes the last-hop IP address of a connected target
// in IP:Port format (e.g., '10.1.1.1:12345',
// '[123:123:123:123::1]:12345').
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "connectedAddress"
// Path from root: "/meta/connectedAddress"
func (n *MetaPath) ConnectedAddress() *Meta_ConnectedAddressPath {
	return &Meta_ConnectedAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"connectedAddress"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectedAddress (leaf): connectedAddress denotes the last-hop IP address of a connected target
// in IP:Port format (e.g., '10.1.1.1:12345',
// '[123:123:123:123::1]:12345').
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "connectedAddress"
// Path from root: "/meta/connectedAddress"
func (n *MetaPathAny) ConnectedAddress() *Meta_ConnectedAddressPathAny {
	return &Meta_ConnectedAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"connectedAddress"},
			map[string]interface{}{},
			n,
		),
	}
}

// LatencyAvg (leaf): latencyAvg is the average latency in nanoseconds between target
// timestamp and cache reception - latency being calculated by (timestamp
// of arrival) - (timestamp in update). It is reported per update
// window based on the commandline flag for metadata updates.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "latencyAvg"
// Path from root: "/meta/latencyAvg"
func (n *MetaPath) LatencyAvg() *Meta_LatencyAvgPath {
	return &Meta_LatencyAvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"latencyAvg"},
			map[string]interface{}{},
			n,
		),
	}
}

// LatencyAvg (leaf): latencyAvg is the average latency in nanoseconds between target
// timestamp and cache reception - latency being calculated by (timestamp
// of arrival) - (timestamp in update). It is reported per update
// window based on the commandline flag for metadata updates.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "latencyAvg"
// Path from root: "/meta/latencyAvg"
func (n *MetaPathAny) LatencyAvg() *Meta_LatencyAvgPathAny {
	return &Meta_LatencyAvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"latencyAvg"},
			map[string]interface{}{},
			n,
		),
	}
}

// LatencyMax (leaf): latencyMax is the maximum latency in nanoseconds between target
// timestamp and cache reception - latency being calculated by (timestamp
// of arrival) - (timestamp in update). It is reported per update
// window based on the commandline flag for metadata updates.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "latencyMax"
// Path from root: "/meta/latencyMax"
func (n *MetaPath) LatencyMax() *Meta_LatencyMaxPath {
	return &Meta_LatencyMaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"latencyMax"},
			map[string]interface{}{},
			n,
		),
	}
}

// LatencyMax (leaf): latencyMax is the maximum latency in nanoseconds between target
// timestamp and cache reception - latency being calculated by (timestamp
// of arrival) - (timestamp in update). It is reported per update
// window based on the commandline flag for metadata updates.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "latencyMax"
// Path from root: "/meta/latencyMax"
func (n *MetaPathAny) LatencyMax() *Meta_LatencyMaxPathAny {
	return &Meta_LatencyMaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"latencyMax"},
			map[string]interface{}{},
			n,
		),
	}
}

// LatencyMin (leaf): latencyMin is the minimum latency in nanoseconds - latency being
// calculated by (timestamp of arrival) - (timestamp in update). It is
// reported per update window based on the commandline flag for metadata
// updates.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "latencyMin"
// Path from root: "/meta/latencyMin"
func (n *MetaPath) LatencyMin() *Meta_LatencyMinPath {
	return &Meta_LatencyMinPath{
		NodePath: ygot.NewNodePath(
			[]string{"latencyMin"},
			map[string]interface{}{},
			n,
		),
	}
}

// LatencyMin (leaf): latencyMin is the minimum latency in nanoseconds - latency being
// calculated by (timestamp of arrival) - (timestamp in update). It is
// reported per update window based on the commandline flag for metadata
// updates.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "latencyMin"
// Path from root: "/meta/latencyMin"
func (n *MetaPathAny) LatencyMin() *Meta_LatencyMinPathAny {
	return &Meta_LatencyMinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"latencyMin"},
			map[string]interface{}{},
			n,
		),
	}
}

// LatestTimestamp (leaf): latestTimestamp is the latest timestamp in nanoseconds since Epoch time
// of the latest update received from the target. This value is updated
// periodically so it may lag behind the actual target updates.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "latestTimestamp"
// Path from root: "/meta/latestTimestamp"
func (n *MetaPath) LatestTimestamp() *Meta_LatestTimestampPath {
	return &Meta_LatestTimestampPath{
		NodePath: ygot.NewNodePath(
			[]string{"latestTimestamp"},
			map[string]interface{}{},
			n,
		),
	}
}

// LatestTimestamp (leaf): latestTimestamp is the latest timestamp in nanoseconds since Epoch time
// of the latest update received from the target. This value is updated
// periodically so it may lag behind the actual target updates.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "latestTimestamp"
// Path from root: "/meta/latestTimestamp"
func (n *MetaPathAny) LatestTimestamp() *Meta_LatestTimestampPathAny {
	return &Meta_LatestTimestampPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"latestTimestamp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sync (leaf): sync indicates that at least one copy of the target's entire tree has
// been received, as indicated by the sync_response field in a gNMI
// SubscribeResponse message
// (https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-specification.md#3514-the-subscriberesponse-message).
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "sync"
// Path from root: "/meta/sync"
func (n *MetaPath) Sync() *Meta_SyncPath {
	return &Meta_SyncPath{
		NodePath: ygot.NewNodePath(
			[]string{"sync"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sync (leaf): sync indicates that at least one copy of the target's entire tree has
// been received, as indicated by the sync_response field in a gNMI
// SubscribeResponse message
// (https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-specification.md#3514-the-subscriberesponse-message).
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "sync"
// Path from root: "/meta/sync"
func (n *MetaPathAny) Sync() *Meta_SyncPathAny {
	return &Meta_SyncPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sync"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetLeaves (leaf): targetLeaves is the total number of leaves available for the target.
// Note that this does not include any intermediate nodes.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "targetLeaves"
// Path from root: "/meta/targetLeaves"
func (n *MetaPath) TargetLeaves() *Meta_TargetLeavesPath {
	return &Meta_TargetLeavesPath{
		NodePath: ygot.NewNodePath(
			[]string{"targetLeaves"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetLeaves (leaf): targetLeaves is the total number of leaves available for the target.
// Note that this does not include any intermediate nodes.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "targetLeaves"
// Path from root: "/meta/targetLeaves"
func (n *MetaPathAny) TargetLeaves() *Meta_TargetLeavesPathAny {
	return &Meta_TargetLeavesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"targetLeaves"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetLeavesAdded (leaf): targetLeavesAdded is the total number of leaves that have been added.
// This number may be larger than meta/targetLeaves due to deletes.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "targetLeavesAdded"
// Path from root: "/meta/targetLeavesAdded"
func (n *MetaPath) TargetLeavesAdded() *Meta_TargetLeavesAddedPath {
	return &Meta_TargetLeavesAddedPath{
		NodePath: ygot.NewNodePath(
			[]string{"targetLeavesAdded"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetLeavesAdded (leaf): targetLeavesAdded is the total number of leaves that have been added.
// This number may be larger than meta/targetLeaves due to deletes.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "targetLeavesAdded"
// Path from root: "/meta/targetLeavesAdded"
func (n *MetaPathAny) TargetLeavesAdded() *Meta_TargetLeavesAddedPathAny {
	return &Meta_TargetLeavesAddedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"targetLeavesAdded"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetLeavesDeleted (leaf): targetLeavesDeleted is the total number of leaves that have been
// deleted.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "targetLeavesDeleted"
// Path from root: "/meta/targetLeavesDeleted"
func (n *MetaPath) TargetLeavesDeleted() *Meta_TargetLeavesDeletedPath {
	return &Meta_TargetLeavesDeletedPath{
		NodePath: ygot.NewNodePath(
			[]string{"targetLeavesDeleted"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetLeavesDeleted (leaf): targetLeavesDeleted is the total number of leaves that have been
// deleted.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "targetLeavesDeleted"
// Path from root: "/meta/targetLeavesDeleted"
func (n *MetaPathAny) TargetLeavesDeleted() *Meta_TargetLeavesDeletedPathAny {
	return &Meta_TargetLeavesDeletedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"targetLeavesDeleted"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetLeavesEmpty (leaf): targetLeavesEmpty is the total number of empty notifications received
// from the target.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "targetLeavesEmpty"
// Path from root: "/meta/targetLeavesEmpty"
func (n *MetaPath) TargetLeavesEmpty() *Meta_TargetLeavesEmptyPath {
	return &Meta_TargetLeavesEmptyPath{
		NodePath: ygot.NewNodePath(
			[]string{"targetLeavesEmpty"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetLeavesEmpty (leaf): targetLeavesEmpty is the total number of empty notifications received
// from the target.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "targetLeavesEmpty"
// Path from root: "/meta/targetLeavesEmpty"
func (n *MetaPathAny) TargetLeavesEmpty() *Meta_TargetLeavesEmptyPathAny {
	return &Meta_TargetLeavesEmptyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"targetLeavesEmpty"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetLeavesStale (leaf): targetLeavesStale is the total number of leaf updates that were received
// with a timestamp older than the latest timestamp reported for the target.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "targetLeavesStale"
// Path from root: "/meta/targetLeavesStale"
func (n *MetaPath) TargetLeavesStale() *Meta_TargetLeavesStalePath {
	return &Meta_TargetLeavesStalePath{
		NodePath: ygot.NewNodePath(
			[]string{"targetLeavesStale"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetLeavesStale (leaf): targetLeavesStale is the total number of leaf updates that were received
// with a timestamp older than the latest timestamp reported for the target.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "targetLeavesStale"
// Path from root: "/meta/targetLeavesStale"
func (n *MetaPathAny) TargetLeavesStale() *Meta_TargetLeavesStalePathAny {
	return &Meta_TargetLeavesStalePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"targetLeavesStale"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetLeavesSuppressed (leaf): targetLeavesSuppressed is the total number of leaf updates that were not
// forwarded to subscribers because the value had not changed.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "targetLeavesSuppressed"
// Path from root: "/meta/targetLeavesSuppressed"
func (n *MetaPath) TargetLeavesSuppressed() *Meta_TargetLeavesSuppressedPath {
	return &Meta_TargetLeavesSuppressedPath{
		NodePath: ygot.NewNodePath(
			[]string{"targetLeavesSuppressed"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetLeavesSuppressed (leaf): targetLeavesSuppressed is the total number of leaf updates that were not
// forwarded to subscribers because the value had not changed.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "targetLeavesSuppressed"
// Path from root: "/meta/targetLeavesSuppressed"
func (n *MetaPathAny) TargetLeavesSuppressed() *Meta_TargetLeavesSuppressedPathAny {
	return &Meta_TargetLeavesSuppressedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"targetLeavesSuppressed"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetLeavesUpdated (leaf): targetLeavesUpdated is the total number of leaf updates that have been
// received from the target by the collector
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "targetLeavesUpdated"
// Path from root: "/meta/targetLeavesUpdated"
func (n *MetaPath) TargetLeavesUpdated() *Meta_TargetLeavesUpdatedPath {
	return &Meta_TargetLeavesUpdatedPath{
		NodePath: ygot.NewNodePath(
			[]string{"targetLeavesUpdated"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetLeavesUpdated (leaf): targetLeavesUpdated is the total number of leaf updates that have been
// received from the target by the collector
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "targetLeavesUpdated"
// Path from root: "/meta/targetLeavesUpdated"
func (n *MetaPathAny) TargetLeavesUpdated() *Meta_TargetLeavesUpdatedPathAny {
	return &Meta_TargetLeavesUpdatedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"targetLeavesUpdated"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetSize (leaf): targetSize is the total number of bytes used to store all values. This
// count excludes all indexing overhead. This value is updated periodically
// and may not be up to date at all times.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "targetSize"
// Path from root: "/meta/targetSize"
func (n *MetaPath) TargetSize() *Meta_TargetSizePath {
	return &Meta_TargetSizePath{
		NodePath: ygot.NewNodePath(
			[]string{"targetSize"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetSize (leaf): targetSize is the total number of bytes used to store all values. This
// count excludes all indexing overhead. This value is updated periodically
// and may not be up to date at all times.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "targetSize"
// Path from root: "/meta/targetSize"
func (n *MetaPathAny) TargetSize() *Meta_TargetSizePathAny {
	return &Meta_TargetSizePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"targetSize"},
			map[string]interface{}{},
			n,
		),
	}
}

// WindowAny (list): latency statistics for a time window.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "latency/window"
// Path from root: "/meta/latency/window"
// Size (wildcarded): string
func (n *MetaPath) WindowAny() *Meta_WindowPathAny {
	return &Meta_WindowPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"latency", "window"},
			map[string]interface{}{"size": "*"},
			n,
		),
	}
}

// WindowAny (list): latency statistics for a time window.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "latency/window"
// Path from root: "/meta/latency/window"
// Size (wildcarded): string
func (n *MetaPathAny) WindowAny() *Meta_WindowPathAny {
	return &Meta_WindowPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"latency", "window"},
			map[string]interface{}{"size": "*"},
			n,
		),
	}
}

// Window (list): latency statistics for a time window.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "latency/window"
// Path from root: "/meta/latency/window"
// Size: string
func (n *MetaPath) Window(Size string) *Meta_WindowPath {
	return &Meta_WindowPath{
		NodePath: ygot.NewNodePath(
			[]string{"latency", "window"},
			map[string]interface{}{"size": Size},
			n,
		),
	}
}

// Window (list): latency statistics for a time window.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "latency/window"
// Path from root: "/meta/latency/window"
// Size: string
func (n *MetaPathAny) Window(Size string) *Meta_WindowPathAny {
	return &Meta_WindowPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"latency", "window"},
			map[string]interface{}{"size": Size},
			n,
		),
	}
}

// Meta_WindowPath represents the /gnmi-collector-metadata/meta/latency/window YANG schema element.
type Meta_WindowPath struct {
	*ygot.NodePath
}

// Meta_WindowPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/latency/window YANG schema element.
type Meta_WindowPathAny struct {
	*ygot.NodePath
}

// Meta_Window_AvgPath represents the /gnmi-collector-metadata/meta/latency/window/avg YANG schema element.
type Meta_Window_AvgPath struct {
	*ygot.NodePath
}

// Meta_Window_AvgPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/latency/window/avg YANG schema element.
type Meta_Window_AvgPathAny struct {
	*ygot.NodePath
}

// Meta_Window_MaxPath represents the /gnmi-collector-metadata/meta/latency/window/max YANG schema element.
type Meta_Window_MaxPath struct {
	*ygot.NodePath
}

// Meta_Window_MaxPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/latency/window/max YANG schema element.
type Meta_Window_MaxPathAny struct {
	*ygot.NodePath
}

// Meta_Window_MinPath represents the /gnmi-collector-metadata/meta/latency/window/min YANG schema element.
type Meta_Window_MinPath struct {
	*ygot.NodePath
}

// Meta_Window_MinPathAny represents the wildcard version of the /gnmi-collector-metadata/meta/latency/window/min YANG schema element.
type Meta_Window_MinPathAny struct {
	*ygot.NodePath
}

// Meta_Window_SizePath represents the /gnmi-collector-metadata/meta/latency/window/state/size YANG schema element.
type Meta_Window_SizePath struct {
	*ygot.NodePath
}

// Meta_Window_SizePathAny represents the wildcard version of the /gnmi-collector-metadata/meta/latency/window/state/size YANG schema element.
type Meta_Window_SizePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): avg is the average latency in nanoseconds of the time window.
// It is calculated and reported per update period.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "avg"
// Path from root: "/meta/latency/window/avg"
func (n *Meta_WindowPath) Avg() *Meta_Window_AvgPath {
	return &Meta_Window_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): avg is the average latency in nanoseconds of the time window.
// It is calculated and reported per update period.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "avg"
// Path from root: "/meta/latency/window/avg"
func (n *Meta_WindowPathAny) Avg() *Meta_Window_AvgPathAny {
	return &Meta_Window_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): max is the maximum latency in nanoseconds of the time window.
// It is calculated and reported per update period.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "max"
// Path from root: "/meta/latency/window/max"
func (n *Meta_WindowPath) Max() *Meta_Window_MaxPath {
	return &Meta_Window_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): max is the maximum latency in nanoseconds of the time window.
// It is calculated and reported per update period.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "max"
// Path from root: "/meta/latency/window/max"
func (n *Meta_WindowPathAny) Max() *Meta_Window_MaxPathAny {
	return &Meta_Window_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): min is the minimum latency in nanoseconds of the time window.
// It is calculated and reported per update period.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "min"
// Path from root: "/meta/latency/window/min"
func (n *Meta_WindowPath) Min() *Meta_Window_MinPath {
	return &Meta_Window_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): min is the minimum latency in nanoseconds of the time window.
// It is calculated and reported per update period.
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "min"
// Path from root: "/meta/latency/window/min"
func (n *Meta_WindowPathAny) Min() *Meta_Window_MinPathAny {
	return &Meta_Window_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Size (leaf): A unique string identifying the time window size (e.g. 2s, 5m).
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "state/size"
// Path from root: "/meta/latency/window/state/size"
func (n *Meta_WindowPath) Size() *Meta_Window_SizePath {
	return &Meta_Window_SizePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "size"},
			map[string]interface{}{},
			n,
		),
	}
}

// Size (leaf): A unique string identifying the time window size (e.g. 2s, 5m).
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "state/size"
// Path from root: "/meta/latency/window/state/size"
func (n *Meta_WindowPathAny) Size() *Meta_Window_SizePathAny {
	return &Meta_Window_SizePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "size"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortPath represents the /open-traffic-generator-port/ports/port YANG schema element.
type PortPath struct {
	*ygot.NodePath
}

// PortPathAny represents the wildcard version of the /open-traffic-generator-port/ports/port YANG schema element.
type PortPathAny struct {
	*ygot.NodePath
}

// Port_InRatePath represents the /open-traffic-generator-port/ports/port/state/in-rate YANG schema element.
type Port_InRatePath struct {
	*ygot.NodePath
}

// Port_InRatePathAny represents the wildcard version of the /open-traffic-generator-port/ports/port/state/in-rate YANG schema element.
type Port_InRatePathAny struct {
	*ygot.NodePath
}

// Port_LinkPath represents the /open-traffic-generator-port/ports/port/state/link YANG schema element.
type Port_LinkPath struct {
	*ygot.NodePath
}

// Port_LinkPathAny represents the wildcard version of the /open-traffic-generator-port/ports/port/state/link YANG schema element.
type Port_LinkPathAny struct {
	*ygot.NodePath
}

// Port_NamePath represents the /open-traffic-generator-port/ports/port/state/name YANG schema element.
type Port_NamePath struct {
	*ygot.NodePath
}

// Port_NamePathAny represents the wildcard version of the /open-traffic-generator-port/ports/port/state/name YANG schema element.
type Port_NamePathAny struct {
	*ygot.NodePath
}

// Port_OutRatePath represents the /open-traffic-generator-port/ports/port/state/out-rate YANG schema element.
type Port_OutRatePath struct {
	*ygot.NodePath
}

// Port_OutRatePathAny represents the wildcard version of the /open-traffic-generator-port/ports/port/state/out-rate YANG schema element.
type Port_OutRatePathAny struct {
	*ygot.NodePath
}

// Counters (container): Counters of an OTG port.
// ----------------------------------------
// Defining module: "open-traffic-generator-port"
// Instantiating module: "open-traffic-generator-port"
// Path from parent: "state/counters"
// Path from root: "/ports/port/state/counters"
func (n *PortPath) Counters() *Port_CountersPath {
	return &Port_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Counters of an OTG port.
// ----------------------------------------
// Defining module: "open-traffic-generator-port"
// Instantiating module: "open-traffic-generator-port"
// Path from parent: "state/counters"
// Path from root: "/ports/port/state/counters"
func (n *PortPathAny) Counters() *Port_CountersPathAny {
	return &Port_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// InRate (leaf): The current receive rate of an OTG port, measured in
// bits per second.
// ----------------------------------------
// Defining module: "open-traffic-generator-port"
// Instantiating module: "open-traffic-generator-port"
// Path from parent: "state/in-rate"
// Path from root: "/ports/port/state/in-rate"
func (n *PortPath) InRate() *Port_InRatePath {
	return &Port_InRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// InRate (leaf): The current receive rate of an OTG port, measured in
// bits per second.
// ----------------------------------------
// Defining module: "open-traffic-generator-port"
// Instantiating module: "open-traffic-generator-port"
// Path from parent: "state/in-rate"
// Path from root: "/ports/port/state/in-rate"
func (n *PortPathAny) InRate() *Port_InRatePathAny {
	return &Port_InRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// Link (leaf): The current state of an OTG port.
// ----------------------------------------
// Defining module: "open-traffic-generator-port"
// Instantiating module: "open-traffic-generator-port"
// Path from parent: "state/link"
// Path from root: "/ports/port/state/link"
func (n *PortPath) Link() *Port_LinkPath {
	return &Port_LinkPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "link"},
			map[string]interface{}{},
			n,
		),
	}
}

// Link (leaf): The current state of an OTG port.
// ----------------------------------------
// Defining module: "open-traffic-generator-port"
// Instantiating module: "open-traffic-generator-port"
// Path from parent: "state/link"
// Path from root: "/ports/port/state/link"
func (n *PortPathAny) Link() *Port_LinkPathAny {
	return &Port_LinkPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "link"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): An arbitary name of an OTG port determined by the OTG
// configuration.
// ----------------------------------------
// Defining module: "open-traffic-generator-port"
// Instantiating module: "open-traffic-generator-port"
// Path from parent: "state/name"
// Path from root: "/ports/port/state/name"
func (n *PortPath) Name() *Port_NamePath {
	return &Port_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): An arbitary name of an OTG port determined by the OTG
// configuration.
// ----------------------------------------
// Defining module: "open-traffic-generator-port"
// Instantiating module: "open-traffic-generator-port"
// Path from parent: "state/name"
// Path from root: "/ports/port/state/name"
func (n *PortPathAny) Name() *Port_NamePathAny {
	return &Port_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutRate (leaf): The current transmit rate of an OTG port, measured in
// bits per second.
// ----------------------------------------
// Defining module: "open-traffic-generator-port"
// Instantiating module: "open-traffic-generator-port"
// Path from parent: "state/out-rate"
// Path from root: "/ports/port/state/out-rate"
func (n *PortPath) OutRate() *Port_OutRatePath {
	return &Port_OutRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutRate (leaf): The current transmit rate of an OTG port, measured in
// bits per second.
// ----------------------------------------
// Defining module: "open-traffic-generator-port"
// Instantiating module: "open-traffic-generator-port"
// Path from parent: "state/out-rate"
// Path from root: "/ports/port/state/out-rate"
func (n *PortPathAny) OutRate() *Port_OutRatePathAny {
	return &Port_OutRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port_CountersPath represents the /open-traffic-generator-port/ports/port/state/counters YANG schema element.
type Port_CountersPath struct {
	*ygot.NodePath
}

// Port_CountersPathAny represents the wildcard version of the /open-traffic-generator-port/ports/port/state/counters YANG schema element.
type Port_CountersPathAny struct {
	*ygot.NodePath
}

// Port_Counters_InFramesPath represents the /open-traffic-generator-port/ports/port/state/counters/in-frames YANG schema element.
type Port_Counters_InFramesPath struct {
	*ygot.NodePath
}

// Port_Counters_InFramesPathAny represents the wildcard version of the /open-traffic-generator-port/ports/port/state/counters/in-frames YANG schema element.
type Port_Counters_InFramesPathAny struct {
	*ygot.NodePath
}

// Port_Counters_InOctetsPath represents the /open-traffic-generator-port/ports/port/state/counters/in-octets YANG schema element.
type Port_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Port_Counters_InOctetsPathAny represents the wildcard version of the /open-traffic-generator-port/ports/port/state/counters/in-octets YANG schema element.
type Port_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Port_Counters_OutFramesPath represents the /open-traffic-generator-port/ports/port/state/counters/out-frames YANG schema element.
type Port_Counters_OutFramesPath struct {
	*ygot.NodePath
}

// Port_Counters_OutFramesPathAny represents the wildcard version of the /open-traffic-generator-port/ports/port/state/counters/out-frames YANG schema element.
type Port_Counters_OutFramesPathAny struct {
	*ygot.NodePath
}

// Port_Counters_OutOctetsPath represents the /open-traffic-generator-port/ports/port/state/counters/out-octets YANG schema element.
type Port_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Port_Counters_OutOctetsPathAny represents the wildcard version of the /open-traffic-generator-port/ports/port/state/counters/out-octets YANG schema element.
type Port_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// InFrames (leaf): The total number of packets received on the port.
// ----------------------------------------
// Defining module: "open-traffic-generator-port"
// Instantiating module: "open-traffic-generator-port"
// Path from parent: "in-frames"
// Path from root: "/ports/port/state/counters/in-frames"
func (n *Port_CountersPath) InFrames() *Port_Counters_InFramesPath {
	return &Port_Counters_InFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFrames (leaf): The total number of packets received on the port.
// ----------------------------------------
// Defining module: "open-traffic-generator-port"
// Instantiating module: "open-traffic-generator-port"
// Path from parent: "in-frames"
// Path from root: "/ports/port/state/counters/in-frames"
func (n *Port_CountersPathAny) InFrames() *Port_Counters_InFramesPathAny {
	return &Port_Counters_InFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received on the port.
// ----------------------------------------
// Defining module: "open-traffic-generator-port"
// Instantiating module: "open-traffic-generator-port"
// Path from parent: "in-octets"
// Path from root: "/ports/port/state/counters/in-octets"
func (n *Port_CountersPath) InOctets() *Port_Counters_InOctetsPath {
	return &Port_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received on the port.
// ----------------------------------------
// Defining module: "open-traffic-generator-port"
// Instantiating module: "open-traffic-generator-port"
// Path from parent: "in-octets"
// Path from root: "/ports/port/state/counters/in-octets"
func (n *Port_CountersPathAny) InOctets() *Port_Counters_InOctetsPathAny {
	return &Port_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutFrames (leaf): The total number of packets transmitted on the port.
// ----------------------------------------
// Defining module: "open-traffic-generator-port"
// Instantiating module: "open-traffic-generator-port"
// Path from parent: "out-frames"
// Path from root: "/ports/port/state/counters/out-frames"
func (n *Port_CountersPath) OutFrames() *Port_Counters_OutFramesPath {
	return &Port_Counters_OutFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutFrames (leaf): The total number of packets transmitted on the port.
// ----------------------------------------
// Defining module: "open-traffic-generator-port"
// Instantiating module: "open-traffic-generator-port"
// Path from parent: "out-frames"
// Path from root: "/ports/port/state/counters/out-frames"
func (n *Port_CountersPathAny) OutFrames() *Port_Counters_OutFramesPathAny {
	return &Port_Counters_OutFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets transmitted on the port.
// ----------------------------------------
// Defining module: "open-traffic-generator-port"
// Instantiating module: "open-traffic-generator-port"
// Path from parent: "out-octets"
// Path from root: "/ports/port/state/counters/out-octets"
func (n *Port_CountersPath) OutOctets() *Port_Counters_OutOctetsPath {
	return &Port_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets transmitted on the port.
// ----------------------------------------
// Defining module: "open-traffic-generator-port"
// Instantiating module: "open-traffic-generator-port"
// Path from parent: "out-octets"
// Path from root: "/ports/port/state/counters/out-octets"
func (n *Port_CountersPathAny) OutOctets() *Port_Counters_OutOctetsPathAny {
	return &Port_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

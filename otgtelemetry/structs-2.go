/*
Package otgtelemetry is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /home/athena/go/pkg/mod/github.com/openconfig/ygot@v0.16.3/genutil/names.go
using the following YANG input files:
	- gnmi-collector-metadata.yang
	- models-yang/models/isis/open-traffic-generator-isis.yang
	- models-yang/models/types/open-traffic-generator-types.yang
	- models-yang/models/flow/open-traffic-generator-flow.yang
	- models-yang/models/discovery/open-traffic-generator-discovery.yang
	- models-yang/models/interface/open-traffic-generator-port.yang
	- models-yang/models/bgp/open-traffic-generator-bgp.yang
Imported modules were sourced from:
	- models-yang/models/...
*/
package otgtelemetry

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// IsisRouter_Counters_Level1 represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1 YANG schema element.
type IsisRouter_Counters_Level1 struct {
	DatabaseSize   *uint64 `path:"database-size" module:"open-traffic-generator-isis"`
	InBcastHellos  *uint64 `path:"in-bcast-hellos" module:"open-traffic-generator-isis"`
	InCsnp         *uint64 `path:"in-csnp" module:"open-traffic-generator-isis"`
	InLsp          *uint64 `path:"in-lsp" module:"open-traffic-generator-isis"`
	InP2PHellos    *uint64 `path:"in-p2p-hellos" module:"open-traffic-generator-isis"`
	InPsnp         *uint64 `path:"in-psnp" module:"open-traffic-generator-isis"`
	OutBcastHellos *uint64 `path:"out-bcast-hellos" module:"open-traffic-generator-isis"`
	OutCsnp        *uint64 `path:"out-csnp" module:"open-traffic-generator-isis"`
	OutLsp         *uint64 `path:"out-lsp" module:"open-traffic-generator-isis"`
	OutP2PHellos   *uint64 `path:"out-p2p-hellos" module:"open-traffic-generator-isis"`
	OutPsnp        *uint64 `path:"out-psnp" module:"open-traffic-generator-isis"`
	SessionsFlap   *uint64 `path:"sessions-flap" module:"open-traffic-generator-isis"`
	SessionsUp     *uint64 `path:"sessions-up" module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_Counters_Level1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_Counters_Level1) IsYANGGoStruct() {}

// GetDatabaseSize retrieves the value of the leaf DatabaseSize from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DatabaseSize is set, it can
// safely use t.GetDatabaseSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DatabaseSize == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetDatabaseSize() uint64 {
	if t == nil || t.DatabaseSize == nil {
		return 0
	}
	return *t.DatabaseSize
}

// GetInBcastHellos retrieves the value of the leaf InBcastHellos from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InBcastHellos is set, it can
// safely use t.GetInBcastHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InBcastHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetInBcastHellos() uint64 {
	if t == nil || t.InBcastHellos == nil {
		return 0
	}
	return *t.InBcastHellos
}

// GetInCsnp retrieves the value of the leaf InCsnp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InCsnp is set, it can
// safely use t.GetInCsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InCsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetInCsnp() uint64 {
	if t == nil || t.InCsnp == nil {
		return 0
	}
	return *t.InCsnp
}

// GetInLsp retrieves the value of the leaf InLsp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLsp is set, it can
// safely use t.GetInLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLsp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetInLsp() uint64 {
	if t == nil || t.InLsp == nil {
		return 0
	}
	return *t.InLsp
}

// GetInP2PHellos retrieves the value of the leaf InP2PHellos from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InP2PHellos is set, it can
// safely use t.GetInP2PHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InP2PHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetInP2PHellos() uint64 {
	if t == nil || t.InP2PHellos == nil {
		return 0
	}
	return *t.InP2PHellos
}

// GetInPsnp retrieves the value of the leaf InPsnp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPsnp is set, it can
// safely use t.GetInPsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetInPsnp() uint64 {
	if t == nil || t.InPsnp == nil {
		return 0
	}
	return *t.InPsnp
}

// GetOutBcastHellos retrieves the value of the leaf OutBcastHellos from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutBcastHellos is set, it can
// safely use t.GetOutBcastHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutBcastHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetOutBcastHellos() uint64 {
	if t == nil || t.OutBcastHellos == nil {
		return 0
	}
	return *t.OutBcastHellos
}

// GetOutCsnp retrieves the value of the leaf OutCsnp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutCsnp is set, it can
// safely use t.GetOutCsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutCsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetOutCsnp() uint64 {
	if t == nil || t.OutCsnp == nil {
		return 0
	}
	return *t.OutCsnp
}

// GetOutLsp retrieves the value of the leaf OutLsp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLsp is set, it can
// safely use t.GetOutLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLsp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetOutLsp() uint64 {
	if t == nil || t.OutLsp == nil {
		return 0
	}
	return *t.OutLsp
}

// GetOutP2PHellos retrieves the value of the leaf OutP2PHellos from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutP2PHellos is set, it can
// safely use t.GetOutP2PHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutP2PHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetOutP2PHellos() uint64 {
	if t == nil || t.OutP2PHellos == nil {
		return 0
	}
	return *t.OutP2PHellos
}

// GetOutPsnp retrieves the value of the leaf OutPsnp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPsnp is set, it can
// safely use t.GetOutPsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetOutPsnp() uint64 {
	if t == nil || t.OutPsnp == nil {
		return 0
	}
	return *t.OutPsnp
}

// GetSessionsFlap retrieves the value of the leaf SessionsFlap from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsFlap is set, it can
// safely use t.GetSessionsFlap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsFlap == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetSessionsFlap() uint64 {
	if t == nil || t.SessionsFlap == nil {
		return 0
	}
	return *t.SessionsFlap
}

// GetSessionsUp retrieves the value of the leaf SessionsUp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsUp is set, it can
// safely use t.GetSessionsUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsUp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetSessionsUp() uint64 {
	if t == nil || t.SessionsUp == nil {
		return 0
	}
	return *t.SessionsUp
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_Counters_Level1
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_Counters_Level1) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_Counters_Level1) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_Counters_Level1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_Counters_Level1) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// IsisRouter_Counters_Level2 represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2 YANG schema element.
type IsisRouter_Counters_Level2 struct {
	DatabaseSize   *uint64 `path:"database-size" module:"open-traffic-generator-isis"`
	InBcastHellos  *uint64 `path:"in-bcast-hellos" module:"open-traffic-generator-isis"`
	InCsnp         *uint64 `path:"in-csnp" module:"open-traffic-generator-isis"`
	InLsp          *uint64 `path:"in-lsp" module:"open-traffic-generator-isis"`
	InP2PHellos    *uint64 `path:"in-p2p-hellos" module:"open-traffic-generator-isis"`
	InPsnp         *uint64 `path:"in-psnp" module:"open-traffic-generator-isis"`
	OutBcastHellos *uint64 `path:"out-bcast-hellos" module:"open-traffic-generator-isis"`
	OutCsnp        *uint64 `path:"out-csnp" module:"open-traffic-generator-isis"`
	OutLsp         *uint64 `path:"out-lsp" module:"open-traffic-generator-isis"`
	OutP2PHellos   *uint64 `path:"out-p2p-hellos" module:"open-traffic-generator-isis"`
	OutPsnp        *uint64 `path:"out-psnp" module:"open-traffic-generator-isis"`
	SessionsFlap   *uint64 `path:"sessions-flap" module:"open-traffic-generator-isis"`
	SessionsUp     *uint64 `path:"sessions-up" module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_Counters_Level2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_Counters_Level2) IsYANGGoStruct() {}

// GetDatabaseSize retrieves the value of the leaf DatabaseSize from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DatabaseSize is set, it can
// safely use t.GetDatabaseSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DatabaseSize == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetDatabaseSize() uint64 {
	if t == nil || t.DatabaseSize == nil {
		return 0
	}
	return *t.DatabaseSize
}

// GetInBcastHellos retrieves the value of the leaf InBcastHellos from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InBcastHellos is set, it can
// safely use t.GetInBcastHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InBcastHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetInBcastHellos() uint64 {
	if t == nil || t.InBcastHellos == nil {
		return 0
	}
	return *t.InBcastHellos
}

// GetInCsnp retrieves the value of the leaf InCsnp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InCsnp is set, it can
// safely use t.GetInCsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InCsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetInCsnp() uint64 {
	if t == nil || t.InCsnp == nil {
		return 0
	}
	return *t.InCsnp
}

// GetInLsp retrieves the value of the leaf InLsp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLsp is set, it can
// safely use t.GetInLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLsp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetInLsp() uint64 {
	if t == nil || t.InLsp == nil {
		return 0
	}
	return *t.InLsp
}

// GetInP2PHellos retrieves the value of the leaf InP2PHellos from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InP2PHellos is set, it can
// safely use t.GetInP2PHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InP2PHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetInP2PHellos() uint64 {
	if t == nil || t.InP2PHellos == nil {
		return 0
	}
	return *t.InP2PHellos
}

// GetInPsnp retrieves the value of the leaf InPsnp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPsnp is set, it can
// safely use t.GetInPsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetInPsnp() uint64 {
	if t == nil || t.InPsnp == nil {
		return 0
	}
	return *t.InPsnp
}

// GetOutBcastHellos retrieves the value of the leaf OutBcastHellos from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutBcastHellos is set, it can
// safely use t.GetOutBcastHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutBcastHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetOutBcastHellos() uint64 {
	if t == nil || t.OutBcastHellos == nil {
		return 0
	}
	return *t.OutBcastHellos
}

// GetOutCsnp retrieves the value of the leaf OutCsnp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutCsnp is set, it can
// safely use t.GetOutCsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutCsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetOutCsnp() uint64 {
	if t == nil || t.OutCsnp == nil {
		return 0
	}
	return *t.OutCsnp
}

// GetOutLsp retrieves the value of the leaf OutLsp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLsp is set, it can
// safely use t.GetOutLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLsp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetOutLsp() uint64 {
	if t == nil || t.OutLsp == nil {
		return 0
	}
	return *t.OutLsp
}

// GetOutP2PHellos retrieves the value of the leaf OutP2PHellos from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutP2PHellos is set, it can
// safely use t.GetOutP2PHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutP2PHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetOutP2PHellos() uint64 {
	if t == nil || t.OutP2PHellos == nil {
		return 0
	}
	return *t.OutP2PHellos
}

// GetOutPsnp retrieves the value of the leaf OutPsnp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPsnp is set, it can
// safely use t.GetOutPsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetOutPsnp() uint64 {
	if t == nil || t.OutPsnp == nil {
		return 0
	}
	return *t.OutPsnp
}

// GetSessionsFlap retrieves the value of the leaf SessionsFlap from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsFlap is set, it can
// safely use t.GetSessionsFlap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsFlap == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetSessionsFlap() uint64 {
	if t == nil || t.SessionsFlap == nil {
		return 0
	}
	return *t.SessionsFlap
}

// GetSessionsUp retrieves the value of the leaf SessionsUp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsUp is set, it can
// safely use t.GetSessionsUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsUp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetSessionsUp() uint64 {
	if t == nil || t.SessionsUp == nil {
		return 0
	}
	return *t.SessionsUp
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_Counters_Level2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_Counters_Level2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_Counters_Level2) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_Counters_Level2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_Counters_Level2) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Meta represents the /gnmi-collector-metadata/meta YANG schema element.
type Meta struct {
	ConnectError           *string                 `path:"connectError" module:"gnmi-collector-metadata"`
	Connected              *bool                   `path:"connected" module:"gnmi-collector-metadata"`
	ConnectedAddress       *string                 `path:"connectedAddress" module:"gnmi-collector-metadata"`
	LatencyAvg             *int64                  `path:"latencyAvg" module:"gnmi-collector-metadata"`
	LatencyMax             *int64                  `path:"latencyMax" module:"gnmi-collector-metadata"`
	LatencyMin             *int64                  `path:"latencyMin" module:"gnmi-collector-metadata"`
	LatestTimestamp        *int64                  `path:"latestTimestamp" module:"gnmi-collector-metadata"`
	Sync                   *bool                   `path:"sync" module:"gnmi-collector-metadata"`
	TargetLeaves           *int64                  `path:"targetLeaves" module:"gnmi-collector-metadata"`
	TargetLeavesAdded      *int64                  `path:"targetLeavesAdded" module:"gnmi-collector-metadata"`
	TargetLeavesDeleted    *int64                  `path:"targetLeavesDeleted" module:"gnmi-collector-metadata"`
	TargetLeavesEmpty      *int64                  `path:"targetLeavesEmpty" module:"gnmi-collector-metadata"`
	TargetLeavesStale      *int64                  `path:"targetLeavesStale" module:"gnmi-collector-metadata"`
	TargetLeavesSuppressed *int64                  `path:"targetLeavesSuppressed" module:"gnmi-collector-metadata"`
	TargetLeavesUpdated    *int64                  `path:"targetLeavesUpdated" module:"gnmi-collector-metadata"`
	TargetSize             *int64                  `path:"targetSize" module:"gnmi-collector-metadata"`
	Window                 map[string]*Meta_Window `path:"latency/window" module:"gnmi-collector-metadata/gnmi-collector-metadata"`
}

// IsYANGGoStruct ensures that Meta implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Meta) IsYANGGoStruct() {}

// NewWindow creates a new entry in the Window list of the
// Meta struct. The keys of the list are populated from the input
// arguments.
func (t *Meta) NewWindow(Size string) (*Meta_Window, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Window == nil {
		t.Window = make(map[string]*Meta_Window)
	}

	key := Size

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Window[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Window", key)
	}

	t.Window[key] = &Meta_Window{
		Size: &Size,
	}

	return t.Window[key], nil
}

// RenameWindow renames an entry in the list Window within
// the Meta struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Meta) RenameWindow(oldK, newK string) error {
	if _, ok := t.Window[newK]; ok {
		return fmt.Errorf("key %v already exists in Window", newK)
	}

	e, ok := t.Window[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Window", oldK)
	}
	e.Size = &newK

	t.Window[newK] = e
	delete(t.Window, oldK)
	return nil
}

// GetOrCreateWindow retrieves the value with the specified keys from
// the receiver Meta. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Meta) GetOrCreateWindow(Size string) *Meta_Window {

	key := Size

	if v, ok := t.Window[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewWindow(Size)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateWindow got unexpected error: %v", err))
	}
	return v
}

// GetWindow retrieves the value with the specified key from
// the Window map field of Meta. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Meta) GetWindow(Size string) *Meta_Window {

	if t == nil {
		return nil
	}

	key := Size

	if lm, ok := t.Window[key]; ok {
		return lm
	}
	return nil
}

// DeleteWindow deletes the value with the specified keys from
// the receiver Meta. If there is no such element, the function
// is a no-op.
func (t *Meta) DeleteWindow(Size string) {
	key := Size

	delete(t.Window, key)
}

// AppendWindow appends the supplied Meta_Window struct to the
// list Window of Meta. If the key value(s) specified in
// the supplied Meta_Window already exist in the list, an error is
// returned.
func (t *Meta) AppendWindow(v *Meta_Window) error {
	if v.Size == nil {
		return fmt.Errorf("invalid nil key received for Size")
	}

	key := *v.Size

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Window == nil {
		t.Window = make(map[string]*Meta_Window)
	}

	if _, ok := t.Window[key]; ok {
		return fmt.Errorf("duplicate key for list Window %v", key)
	}

	t.Window[key] = v
	return nil
}

// GetConnectError retrieves the value of the leaf ConnectError from the Meta
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectError is set, it can
// safely use t.GetConnectError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectError == nil' before retrieving the leaf's value.
func (t *Meta) GetConnectError() string {
	if t == nil || t.ConnectError == nil {
		return ""
	}
	return *t.ConnectError
}

// GetConnected retrieves the value of the leaf Connected from the Meta
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Connected is set, it can
// safely use t.GetConnected() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Connected == nil' before retrieving the leaf's value.
func (t *Meta) GetConnected() bool {
	if t == nil || t.Connected == nil {
		return false
	}
	return *t.Connected
}

// GetConnectedAddress retrieves the value of the leaf ConnectedAddress from the Meta
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectedAddress is set, it can
// safely use t.GetConnectedAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectedAddress == nil' before retrieving the leaf's value.
func (t *Meta) GetConnectedAddress() string {
	if t == nil || t.ConnectedAddress == nil {
		return ""
	}
	return *t.ConnectedAddress
}

// GetLatencyAvg retrieves the value of the leaf LatencyAvg from the Meta
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LatencyAvg is set, it can
// safely use t.GetLatencyAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LatencyAvg == nil' before retrieving the leaf's value.
func (t *Meta) GetLatencyAvg() int64 {
	if t == nil || t.LatencyAvg == nil {
		return 0
	}
	return *t.LatencyAvg
}

// GetLatencyMax retrieves the value of the leaf LatencyMax from the Meta
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LatencyMax is set, it can
// safely use t.GetLatencyMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LatencyMax == nil' before retrieving the leaf's value.
func (t *Meta) GetLatencyMax() int64 {
	if t == nil || t.LatencyMax == nil {
		return 0
	}
	return *t.LatencyMax
}

// GetLatencyMin retrieves the value of the leaf LatencyMin from the Meta
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LatencyMin is set, it can
// safely use t.GetLatencyMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LatencyMin == nil' before retrieving the leaf's value.
func (t *Meta) GetLatencyMin() int64 {
	if t == nil || t.LatencyMin == nil {
		return 0
	}
	return *t.LatencyMin
}

// GetLatestTimestamp retrieves the value of the leaf LatestTimestamp from the Meta
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LatestTimestamp is set, it can
// safely use t.GetLatestTimestamp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LatestTimestamp == nil' before retrieving the leaf's value.
func (t *Meta) GetLatestTimestamp() int64 {
	if t == nil || t.LatestTimestamp == nil {
		return 0
	}
	return *t.LatestTimestamp
}

// GetSync retrieves the value of the leaf Sync from the Meta
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sync is set, it can
// safely use t.GetSync() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sync == nil' before retrieving the leaf's value.
func (t *Meta) GetSync() bool {
	if t == nil || t.Sync == nil {
		return false
	}
	return *t.Sync
}

// GetTargetLeaves retrieves the value of the leaf TargetLeaves from the Meta
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetLeaves is set, it can
// safely use t.GetTargetLeaves() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetLeaves == nil' before retrieving the leaf's value.
func (t *Meta) GetTargetLeaves() int64 {
	if t == nil || t.TargetLeaves == nil {
		return 0
	}
	return *t.TargetLeaves
}

// GetTargetLeavesAdded retrieves the value of the leaf TargetLeavesAdded from the Meta
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetLeavesAdded is set, it can
// safely use t.GetTargetLeavesAdded() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetLeavesAdded == nil' before retrieving the leaf's value.
func (t *Meta) GetTargetLeavesAdded() int64 {
	if t == nil || t.TargetLeavesAdded == nil {
		return 0
	}
	return *t.TargetLeavesAdded
}

// GetTargetLeavesDeleted retrieves the value of the leaf TargetLeavesDeleted from the Meta
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetLeavesDeleted is set, it can
// safely use t.GetTargetLeavesDeleted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetLeavesDeleted == nil' before retrieving the leaf's value.
func (t *Meta) GetTargetLeavesDeleted() int64 {
	if t == nil || t.TargetLeavesDeleted == nil {
		return 0
	}
	return *t.TargetLeavesDeleted
}

// GetTargetLeavesEmpty retrieves the value of the leaf TargetLeavesEmpty from the Meta
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetLeavesEmpty is set, it can
// safely use t.GetTargetLeavesEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetLeavesEmpty == nil' before retrieving the leaf's value.
func (t *Meta) GetTargetLeavesEmpty() int64 {
	if t == nil || t.TargetLeavesEmpty == nil {
		return 0
	}
	return *t.TargetLeavesEmpty
}

// GetTargetLeavesStale retrieves the value of the leaf TargetLeavesStale from the Meta
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetLeavesStale is set, it can
// safely use t.GetTargetLeavesStale() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetLeavesStale == nil' before retrieving the leaf's value.
func (t *Meta) GetTargetLeavesStale() int64 {
	if t == nil || t.TargetLeavesStale == nil {
		return 0
	}
	return *t.TargetLeavesStale
}

// GetTargetLeavesSuppressed retrieves the value of the leaf TargetLeavesSuppressed from the Meta
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetLeavesSuppressed is set, it can
// safely use t.GetTargetLeavesSuppressed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetLeavesSuppressed == nil' before retrieving the leaf's value.
func (t *Meta) GetTargetLeavesSuppressed() int64 {
	if t == nil || t.TargetLeavesSuppressed == nil {
		return 0
	}
	return *t.TargetLeavesSuppressed
}

// GetTargetLeavesUpdated retrieves the value of the leaf TargetLeavesUpdated from the Meta
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetLeavesUpdated is set, it can
// safely use t.GetTargetLeavesUpdated() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetLeavesUpdated == nil' before retrieving the leaf's value.
func (t *Meta) GetTargetLeavesUpdated() int64 {
	if t == nil || t.TargetLeavesUpdated == nil {
		return 0
	}
	return *t.TargetLeavesUpdated
}

// GetTargetSize retrieves the value of the leaf TargetSize from the Meta
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetSize is set, it can
// safely use t.GetTargetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetSize == nil' before retrieving the leaf's value.
func (t *Meta) GetTargetSize() int64 {
	if t == nil || t.TargetSize == nil {
		return 0
	}
	return *t.TargetSize
}

// PopulateDefaults recursively populates unset leaf fields in the Meta
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Meta) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Window {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Meta) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Meta"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Meta) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Meta_Window represents the /gnmi-collector-metadata/meta/latency/window YANG schema element.
type Meta_Window struct {
	Avg  *int64  `path:"avg" module:"gnmi-collector-metadata"`
	Max  *int64  `path:"max" module:"gnmi-collector-metadata"`
	Min  *int64  `path:"min" module:"gnmi-collector-metadata"`
	Size *string `path:"state/size|size" module:"gnmi-collector-metadata/gnmi-collector-metadata|gnmi-collector-metadata" shadow-path:"size" shadow-module:"gnmi-collector-metadata"`
}

// IsYANGGoStruct ensures that Meta_Window implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Meta_Window) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Meta_Window
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Meta_Window) GetAvg() int64 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetMax retrieves the value of the leaf Max from the Meta_Window
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Meta_Window) GetMax() int64 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMin retrieves the value of the leaf Min from the Meta_Window
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Meta_Window) GetMin() int64 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetSize retrieves the value of the leaf Size from the Meta_Window
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *Meta_Window) GetSize() string {
	if t == nil || t.Size == nil {
		return ""
	}
	return *t.Size
}

// PopulateDefaults recursively populates unset leaf fields in the Meta_Window
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Meta_Window) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Meta_Window struct, which is a YANG list entry.
func (t *Meta_Window) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Size == nil {
		return nil, fmt.Errorf("nil value for key Size")
	}

	return map[string]interface{}{
		"size": *t.Size,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Meta_Window) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Meta_Window"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Meta_Window) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Port represents the /open-traffic-generator-port/ports/port YANG schema element.
type Port struct {
	Counters *Port_Counters `path:"state/counters" module:"open-traffic-generator-port/open-traffic-generator-port"`
	InRate   Binary         `path:"state/in-rate" module:"open-traffic-generator-port/open-traffic-generator-port"`
	Link     E_Port_Link    `path:"state/link" module:"open-traffic-generator-port/open-traffic-generator-port"`
	Name     *string        `path:"state/name|name" module:"open-traffic-generator-port/open-traffic-generator-port|open-traffic-generator-port" shadow-path:"name" shadow-module:"open-traffic-generator-port"`
	OutRate  Binary         `path:"state/out-rate" module:"open-traffic-generator-port/open-traffic-generator-port"`
}

// IsYANGGoStruct ensures that Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Port) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Port) GetOrCreateCounters() *Port_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Port_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Port. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Port) GetCounters() *Port_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInRate retrieves the value of the leaf InRate from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InRate is set, it can
// safely use t.GetInRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InRate == nil' before retrieving the leaf's value.
func (t *Port) GetInRate() Binary {
	if t == nil || t.InRate == nil {
		return nil
	}
	return t.InRate
}

// GetLink retrieves the value of the leaf Link from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Link is set, it can
// safely use t.GetLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Link == nil' before retrieving the leaf's value.
func (t *Port) GetLink() E_Port_Link {
	if t == nil || t.Link == 0 {
		return 0
	}
	return t.Link
}

// GetName retrieves the value of the leaf Name from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Port) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOutRate retrieves the value of the leaf OutRate from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutRate is set, it can
// safely use t.GetOutRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutRate == nil' before retrieving the leaf's value.
func (t *Port) GetOutRate() Binary {
	if t == nil || t.OutRate == nil {
		return nil
	}
	return t.OutRate
}

// PopulateDefaults recursively populates unset leaf fields in the Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Port struct, which is a YANG list entry.
func (t *Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Port) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Port) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Port_Counters represents the /open-traffic-generator-port/ports/port/state/counters YANG schema element.
type Port_Counters struct {
	InFrames  *uint64 `path:"in-frames" module:"open-traffic-generator-port"`
	InOctets  *uint64 `path:"in-octets" module:"open-traffic-generator-port"`
	OutFrames *uint64 `path:"out-frames" module:"open-traffic-generator-port"`
	OutOctets *uint64 `path:"out-octets" module:"open-traffic-generator-port"`
}

// IsYANGGoStruct ensures that Port_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Port_Counters) IsYANGGoStruct() {}

// GetInFrames retrieves the value of the leaf InFrames from the Port_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFrames is set, it can
// safely use t.GetInFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFrames == nil' before retrieving the leaf's value.
func (t *Port_Counters) GetInFrames() uint64 {
	if t == nil || t.InFrames == nil {
		return 0
	}
	return *t.InFrames
}

// GetInOctets retrieves the value of the leaf InOctets from the Port_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *Port_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetOutFrames retrieves the value of the leaf OutFrames from the Port_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutFrames is set, it can
// safely use t.GetOutFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutFrames == nil' before retrieving the leaf's value.
func (t *Port_Counters) GetOutFrames() uint64 {
	if t == nil || t.OutFrames == nil {
		return 0
	}
	return *t.OutFrames
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Port_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *Port_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// PopulateDefaults recursively populates unset leaf fields in the Port_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Port_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Port_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Port_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Port_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

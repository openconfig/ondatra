/*
Package otgtelemetry is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /home/athena/go/pkg/mod/github.com/openconfig/ygot@v0.16.3/genutil/names.go
using the following YANG input files:
	- gnmi-collector-metadata.yang
	- models-yang/models/isis/open-traffic-generator-isis.yang
	- models-yang/models/types/open-traffic-generator-types.yang
	- models-yang/models/flow/open-traffic-generator-flow.yang
	- models-yang/models/discovery/open-traffic-generator-discovery.yang
	- models-yang/models/interface/open-traffic-generator-port.yang
	- models-yang/models/bgp/open-traffic-generator-bgp.yang
Imported modules were sourced from:
	- models-yang/models/...
*/
package otgtelemetry

import (
	"github.com/openconfig/ygot/ygot"
)

// BgpPeerPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer YANG schema element.
type BgpPeerPath struct {
	*ygot.NodePath
}

// BgpPeerPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer YANG schema element.
type BgpPeerPathAny struct {
	*ygot.NodePath
}

// BgpPeer_NamePath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/name YANG schema element.
type BgpPeer_NamePath struct {
	*ygot.NodePath
}

// BgpPeer_NamePathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/name YANG schema element.
type BgpPeer_NamePathAny struct {
	*ygot.NodePath
}

// BgpPeer_SessionStatePath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/session-state YANG schema element.
type BgpPeer_SessionStatePath struct {
	*ygot.NodePath
}

// BgpPeer_SessionStatePathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/session-state YANG schema element.
type BgpPeer_SessionStatePathAny struct {
	*ygot.NodePath
}

// Counters (container): Counters of an individual BGP peer.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "state/counters"
// Path from root: "/bgp-peers/bgp-peer/state/counters"
func (n *BgpPeerPath) Counters() *BgpPeer_CountersPath {
	return &BgpPeer_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Counters of an individual BGP peer.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "state/counters"
// Path from root: "/bgp-peers/bgp-peer/state/counters"
func (n *BgpPeerPathAny) Counters() *BgpPeer_CountersPathAny {
	return &BgpPeer_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): An arbitary name of the BGP peer determined by the ATE
// configuration.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "state/name"
// Path from root: "/bgp-peers/bgp-peer/state/name"
func (n *BgpPeerPath) Name() *BgpPeer_NamePath {
	return &BgpPeer_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): An arbitary name of the BGP peer determined by the ATE
// configuration.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "state/name"
// Path from root: "/bgp-peers/bgp-peer/state/name"
func (n *BgpPeerPathAny) Name() *BgpPeer_NamePathAny {
	return &BgpPeer_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionState (leaf): Operational state of the BGP peer
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "state/session-state"
// Path from root: "/bgp-peers/bgp-peer/state/session-state"
func (n *BgpPeerPath) SessionState() *BgpPeer_SessionStatePath {
	return &BgpPeer_SessionStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "session-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionState (leaf): Operational state of the BGP peer
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "state/session-state"
// Path from root: "/bgp-peers/bgp-peer/state/session-state"
func (n *BgpPeerPathAny) SessionState() *BgpPeer_SessionStatePathAny {
	return &BgpPeer_SessionStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "session-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// BgpPeer_CountersPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters YANG schema element.
type BgpPeer_CountersPath struct {
	*ygot.NodePath
}

// BgpPeer_CountersPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters YANG schema element.
type BgpPeer_CountersPathAny struct {
	*ygot.NodePath
}

// BgpPeer_Counters_FlapsPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/flaps YANG schema element.
type BgpPeer_Counters_FlapsPath struct {
	*ygot.NodePath
}

// BgpPeer_Counters_FlapsPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/flaps YANG schema element.
type BgpPeer_Counters_FlapsPathAny struct {
	*ygot.NodePath
}

// BgpPeer_Counters_InKeepalivesPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-keepalives YANG schema element.
type BgpPeer_Counters_InKeepalivesPath struct {
	*ygot.NodePath
}

// BgpPeer_Counters_InKeepalivesPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-keepalives YANG schema element.
type BgpPeer_Counters_InKeepalivesPathAny struct {
	*ygot.NodePath
}

// BgpPeer_Counters_InNotificationsPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-notifications YANG schema element.
type BgpPeer_Counters_InNotificationsPath struct {
	*ygot.NodePath
}

// BgpPeer_Counters_InNotificationsPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-notifications YANG schema element.
type BgpPeer_Counters_InNotificationsPathAny struct {
	*ygot.NodePath
}

// BgpPeer_Counters_InOpensPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-opens YANG schema element.
type BgpPeer_Counters_InOpensPath struct {
	*ygot.NodePath
}

// BgpPeer_Counters_InOpensPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-opens YANG schema element.
type BgpPeer_Counters_InOpensPathAny struct {
	*ygot.NodePath
}

// BgpPeer_Counters_InRouteWithdrawPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-route-withdraw YANG schema element.
type BgpPeer_Counters_InRouteWithdrawPath struct {
	*ygot.NodePath
}

// BgpPeer_Counters_InRouteWithdrawPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-route-withdraw YANG schema element.
type BgpPeer_Counters_InRouteWithdrawPathAny struct {
	*ygot.NodePath
}

// BgpPeer_Counters_InRoutesPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-routes YANG schema element.
type BgpPeer_Counters_InRoutesPath struct {
	*ygot.NodePath
}

// BgpPeer_Counters_InRoutesPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-routes YANG schema element.
type BgpPeer_Counters_InRoutesPathAny struct {
	*ygot.NodePath
}

// BgpPeer_Counters_InUpdatesPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-updates YANG schema element.
type BgpPeer_Counters_InUpdatesPath struct {
	*ygot.NodePath
}

// BgpPeer_Counters_InUpdatesPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-updates YANG schema element.
type BgpPeer_Counters_InUpdatesPathAny struct {
	*ygot.NodePath
}

// BgpPeer_Counters_OutKeepalivesPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-keepalives YANG schema element.
type BgpPeer_Counters_OutKeepalivesPath struct {
	*ygot.NodePath
}

// BgpPeer_Counters_OutKeepalivesPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-keepalives YANG schema element.
type BgpPeer_Counters_OutKeepalivesPathAny struct {
	*ygot.NodePath
}

// BgpPeer_Counters_OutNotificationsPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-notifications YANG schema element.
type BgpPeer_Counters_OutNotificationsPath struct {
	*ygot.NodePath
}

// BgpPeer_Counters_OutNotificationsPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-notifications YANG schema element.
type BgpPeer_Counters_OutNotificationsPathAny struct {
	*ygot.NodePath
}

// BgpPeer_Counters_OutOpensPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-opens YANG schema element.
type BgpPeer_Counters_OutOpensPath struct {
	*ygot.NodePath
}

// BgpPeer_Counters_OutOpensPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-opens YANG schema element.
type BgpPeer_Counters_OutOpensPathAny struct {
	*ygot.NodePath
}

// BgpPeer_Counters_OutRouteWithdrawPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-route-withdraw YANG schema element.
type BgpPeer_Counters_OutRouteWithdrawPath struct {
	*ygot.NodePath
}

// BgpPeer_Counters_OutRouteWithdrawPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-route-withdraw YANG schema element.
type BgpPeer_Counters_OutRouteWithdrawPathAny struct {
	*ygot.NodePath
}

// BgpPeer_Counters_OutRoutesPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-routes YANG schema element.
type BgpPeer_Counters_OutRoutesPath struct {
	*ygot.NodePath
}

// BgpPeer_Counters_OutRoutesPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-routes YANG schema element.
type BgpPeer_Counters_OutRoutesPathAny struct {
	*ygot.NodePath
}

// BgpPeer_Counters_OutUpdatesPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-updates YANG schema element.
type BgpPeer_Counters_OutUpdatesPath struct {
	*ygot.NodePath
}

// BgpPeer_Counters_OutUpdatesPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-updates YANG schema element.
type BgpPeer_Counters_OutUpdatesPathAny struct {
	*ygot.NodePath
}

// Flaps (leaf): The total number of times the BGP session went from an
// ESTABLISHED state to an IDLE state.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "flaps"
// Path from root: "/bgp-peers/bgp-peer/state/counters/flaps"
func (n *BgpPeer_CountersPath) Flaps() *BgpPeer_Counters_FlapsPath {
	return &BgpPeer_Counters_FlapsPath{
		NodePath: ygot.NewNodePath(
			[]string{"flaps"},
			map[string]interface{}{},
			n,
		),
	}
}

// Flaps (leaf): The total number of times the BGP session went from an
// ESTABLISHED state to an IDLE state.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "flaps"
// Path from root: "/bgp-peers/bgp-peer/state/counters/flaps"
func (n *BgpPeer_CountersPathAny) Flaps() *BgpPeer_Counters_FlapsPathAny {
	return &BgpPeer_Counters_FlapsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"flaps"},
			map[string]interface{}{},
			n,
		),
	}
}

// InKeepalives (leaf): The total number of KEEPALIVE messages received.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "in-keepalives"
// Path from root: "/bgp-peers/bgp-peer/state/counters/in-keepalives"
func (n *BgpPeer_CountersPath) InKeepalives() *BgpPeer_Counters_InKeepalivesPath {
	return &BgpPeer_Counters_InKeepalivesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-keepalives"},
			map[string]interface{}{},
			n,
		),
	}
}

// InKeepalives (leaf): The total number of KEEPALIVE messages received.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "in-keepalives"
// Path from root: "/bgp-peers/bgp-peer/state/counters/in-keepalives"
func (n *BgpPeer_CountersPathAny) InKeepalives() *BgpPeer_Counters_InKeepalivesPathAny {
	return &BgpPeer_Counters_InKeepalivesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-keepalives"},
			map[string]interface{}{},
			n,
		),
	}
}

// InNotifications (leaf): The total number of NOTIFICATION messages received.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "in-notifications"
// Path from root: "/bgp-peers/bgp-peer/state/counters/in-notifications"
func (n *BgpPeer_CountersPath) InNotifications() *BgpPeer_Counters_InNotificationsPath {
	return &BgpPeer_Counters_InNotificationsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-notifications"},
			map[string]interface{}{},
			n,
		),
	}
}

// InNotifications (leaf): The total number of NOTIFICATION messages received.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "in-notifications"
// Path from root: "/bgp-peers/bgp-peer/state/counters/in-notifications"
func (n *BgpPeer_CountersPathAny) InNotifications() *BgpPeer_Counters_InNotificationsPathAny {
	return &BgpPeer_Counters_InNotificationsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-notifications"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOpens (leaf): The total number of OPEN messages received.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "in-opens"
// Path from root: "/bgp-peers/bgp-peer/state/counters/in-opens"
func (n *BgpPeer_CountersPath) InOpens() *BgpPeer_Counters_InOpensPath {
	return &BgpPeer_Counters_InOpensPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-opens"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOpens (leaf): The total number of OPEN messages received.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "in-opens"
// Path from root: "/bgp-peers/bgp-peer/state/counters/in-opens"
func (n *BgpPeer_CountersPathAny) InOpens() *BgpPeer_Counters_InOpensPathAny {
	return &BgpPeer_Counters_InOpensPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-opens"},
			map[string]interface{}{},
			n,
		),
	}
}

// InRouteWithdraw (leaf): The total number of route withdraws received.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "in-route-withdraw"
// Path from root: "/bgp-peers/bgp-peer/state/counters/in-route-withdraw"
func (n *BgpPeer_CountersPath) InRouteWithdraw() *BgpPeer_Counters_InRouteWithdrawPath {
	return &BgpPeer_Counters_InRouteWithdrawPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-route-withdraw"},
			map[string]interface{}{},
			n,
		),
	}
}

// InRouteWithdraw (leaf): The total number of route withdraws received.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "in-route-withdraw"
// Path from root: "/bgp-peers/bgp-peer/state/counters/in-route-withdraw"
func (n *BgpPeer_CountersPathAny) InRouteWithdraw() *BgpPeer_Counters_InRouteWithdrawPathAny {
	return &BgpPeer_Counters_InRouteWithdrawPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-route-withdraw"},
			map[string]interface{}{},
			n,
		),
	}
}

// InRoutes (leaf): The total number of routes received.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "in-routes"
// Path from root: "/bgp-peers/bgp-peer/state/counters/in-routes"
func (n *BgpPeer_CountersPath) InRoutes() *BgpPeer_Counters_InRoutesPath {
	return &BgpPeer_Counters_InRoutesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-routes"},
			map[string]interface{}{},
			n,
		),
	}
}

// InRoutes (leaf): The total number of routes received.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "in-routes"
// Path from root: "/bgp-peers/bgp-peer/state/counters/in-routes"
func (n *BgpPeer_CountersPathAny) InRoutes() *BgpPeer_Counters_InRoutesPathAny {
	return &BgpPeer_Counters_InRoutesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-routes"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUpdates (leaf): The total number of UPDATE messages received.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "in-updates"
// Path from root: "/bgp-peers/bgp-peer/state/counters/in-updates"
func (n *BgpPeer_CountersPath) InUpdates() *BgpPeer_Counters_InUpdatesPath {
	return &BgpPeer_Counters_InUpdatesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-updates"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUpdates (leaf): The total number of UPDATE messages received.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "in-updates"
// Path from root: "/bgp-peers/bgp-peer/state/counters/in-updates"
func (n *BgpPeer_CountersPathAny) InUpdates() *BgpPeer_Counters_InUpdatesPathAny {
	return &BgpPeer_Counters_InUpdatesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-updates"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutKeepalives (leaf): The total number of KEEPALIVE messages sent.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "out-keepalives"
// Path from root: "/bgp-peers/bgp-peer/state/counters/out-keepalives"
func (n *BgpPeer_CountersPath) OutKeepalives() *BgpPeer_Counters_OutKeepalivesPath {
	return &BgpPeer_Counters_OutKeepalivesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-keepalives"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutKeepalives (leaf): The total number of KEEPALIVE messages sent.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "out-keepalives"
// Path from root: "/bgp-peers/bgp-peer/state/counters/out-keepalives"
func (n *BgpPeer_CountersPathAny) OutKeepalives() *BgpPeer_Counters_OutKeepalivesPathAny {
	return &BgpPeer_Counters_OutKeepalivesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-keepalives"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutNotifications (leaf): The total number of NOTIFICATION messages sent.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "out-notifications"
// Path from root: "/bgp-peers/bgp-peer/state/counters/out-notifications"
func (n *BgpPeer_CountersPath) OutNotifications() *BgpPeer_Counters_OutNotificationsPath {
	return &BgpPeer_Counters_OutNotificationsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-notifications"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutNotifications (leaf): The total number of NOTIFICATION messages sent.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "out-notifications"
// Path from root: "/bgp-peers/bgp-peer/state/counters/out-notifications"
func (n *BgpPeer_CountersPathAny) OutNotifications() *BgpPeer_Counters_OutNotificationsPathAny {
	return &BgpPeer_Counters_OutNotificationsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-notifications"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOpens (leaf): The total number of OPEN messages sent.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "out-opens"
// Path from root: "/bgp-peers/bgp-peer/state/counters/out-opens"
func (n *BgpPeer_CountersPath) OutOpens() *BgpPeer_Counters_OutOpensPath {
	return &BgpPeer_Counters_OutOpensPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-opens"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOpens (leaf): The total number of OPEN messages sent.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "out-opens"
// Path from root: "/bgp-peers/bgp-peer/state/counters/out-opens"
func (n *BgpPeer_CountersPathAny) OutOpens() *BgpPeer_Counters_OutOpensPathAny {
	return &BgpPeer_Counters_OutOpensPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-opens"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutRouteWithdraw (leaf): The total number of route withdraws sent.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "out-route-withdraw"
// Path from root: "/bgp-peers/bgp-peer/state/counters/out-route-withdraw"
func (n *BgpPeer_CountersPath) OutRouteWithdraw() *BgpPeer_Counters_OutRouteWithdrawPath {
	return &BgpPeer_Counters_OutRouteWithdrawPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-route-withdraw"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutRouteWithdraw (leaf): The total number of route withdraws sent.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "out-route-withdraw"
// Path from root: "/bgp-peers/bgp-peer/state/counters/out-route-withdraw"
func (n *BgpPeer_CountersPathAny) OutRouteWithdraw() *BgpPeer_Counters_OutRouteWithdrawPathAny {
	return &BgpPeer_Counters_OutRouteWithdrawPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-route-withdraw"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutRoutes (leaf): The total number of routes advertised.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "out-routes"
// Path from root: "/bgp-peers/bgp-peer/state/counters/out-routes"
func (n *BgpPeer_CountersPath) OutRoutes() *BgpPeer_Counters_OutRoutesPath {
	return &BgpPeer_Counters_OutRoutesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-routes"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutRoutes (leaf): The total number of routes advertised.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "out-routes"
// Path from root: "/bgp-peers/bgp-peer/state/counters/out-routes"
func (n *BgpPeer_CountersPathAny) OutRoutes() *BgpPeer_Counters_OutRoutesPathAny {
	return &BgpPeer_Counters_OutRoutesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-routes"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutUpdates (leaf): The total number of UPDATE messages sent.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "out-updates"
// Path from root: "/bgp-peers/bgp-peer/state/counters/out-updates"
func (n *BgpPeer_CountersPath) OutUpdates() *BgpPeer_Counters_OutUpdatesPath {
	return &BgpPeer_Counters_OutUpdatesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-updates"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutUpdates (leaf): The total number of UPDATE messages sent.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "out-updates"
// Path from root: "/bgp-peers/bgp-peer/state/counters/out-updates"
func (n *BgpPeer_CountersPathAny) OutUpdates() *BgpPeer_Counters_OutUpdatesPathAny {
	return &BgpPeer_Counters_OutUpdatesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-updates"},
			map[string]interface{}{},
			n,
		),
	}
}

// DevicePath represents the /device YANG schema element.
type DevicePath struct {
	*ygot.DeviceRootBase
}

// DeviceRoot returns a new path object from which YANG paths can be constructed.
func DeviceRoot(id string) *DevicePath {
	return &DevicePath{ygot.NewDeviceRootBase(id)}
}

// BgpPeerAny (list): Each BGP peer is identified by an arbitrary string
// identifier.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "bgp-peers/bgp-peer"
// Path from root: "/bgp-peers/bgp-peer"
// Name (wildcarded): string
func (n *DevicePath) BgpPeerAny() *BgpPeerPathAny {
	return &BgpPeerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-peers", "bgp-peer"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// BgpPeer (list): Each BGP peer is identified by an arbitrary string
// identifier.
// ----------------------------------------
// Defining module: "open-traffic-generator-bgp"
// Instantiating module: "open-traffic-generator-bgp"
// Path from parent: "bgp-peers/bgp-peer"
// Path from root: "/bgp-peers/bgp-peer"
// Name: string
func (n *DevicePath) BgpPeer(Name string) *BgpPeerPath {
	return &BgpPeerPath{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-peers", "bgp-peer"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// FlowAny (list): A flow of packets between one or more internal and external sources
// and one or more internal and external destinations that the target
// is able to track and report statistics on. Each flow is identified by
// an arbitrary string identifier.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "flows/flow"
// Path from root: "/flows/flow"
// Name (wildcarded): string
// MetricGroup (wildcarded): string
func (n *DevicePath) FlowAny() *FlowPathAny {
	return &FlowPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"flows", "flow"},
			map[string]interface{}{"name": "*", "metric-group": "*"},
			n,
		),
	}
}

// FlowAnyMetricGroup (list): A flow of packets between one or more internal and external sources
// and one or more internal and external destinations that the target
// is able to track and report statistics on. Each flow is identified by
// an arbitrary string identifier.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "flows/flow"
// Path from root: "/flows/flow"
// Name: string
// MetricGroup (wildcarded): string
func (n *DevicePath) FlowAnyMetricGroup(Name string) *FlowPathAny {
	return &FlowPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"flows", "flow"},
			map[string]interface{}{"name": Name, "metric-group": "*"},
			n,
		),
	}
}

// FlowAnyName (list): A flow of packets between one or more internal and external sources
// and one or more internal and external destinations that the target
// is able to track and report statistics on. Each flow is identified by
// an arbitrary string identifier.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "flows/flow"
// Path from root: "/flows/flow"
// Name (wildcarded): string
// MetricGroup: string
func (n *DevicePath) FlowAnyName(MetricGroup string) *FlowPathAny {
	return &FlowPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"flows", "flow"},
			map[string]interface{}{"name": "*", "metric-group": MetricGroup},
			n,
		),
	}
}

// Flow (list): A flow of packets between one or more internal and external sources
// and one or more internal and external destinations that the target
// is able to track and report statistics on. Each flow is identified by
// an arbitrary string identifier.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "flows/flow"
// Path from root: "/flows/flow"
// Name: string
// MetricGroup: string
func (n *DevicePath) Flow(Name string, MetricGroup string) *FlowPath {
	return &FlowPath{
		NodePath: ygot.NewNodePath(
			[]string{"flows", "flow"},
			map[string]interface{}{"name": Name, "metric-group": MetricGroup},
			n,
		),
	}
}

// InterfaceAny (list): An individual interface defined by an OTG.
// ----------------------------------------
// Defining module: "open-traffic-generator-discovery"
// Instantiating module: "open-traffic-generator-discovery"
// Path from parent: "interfaces/interface"
// Path from root: "/interfaces/interface"
// Name (wildcarded): string
func (n *DevicePath) InterfaceAny() *InterfacePathAny {
	return &InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Interface (list): An individual interface defined by an OTG.
// ----------------------------------------
// Defining module: "open-traffic-generator-discovery"
// Instantiating module: "open-traffic-generator-discovery"
// Path from parent: "interfaces/interface"
// Path from root: "/interfaces/interface"
// Name: string
func (n *DevicePath) Interface(Name string) *InterfacePath {
	return &InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// IsisRouterAny (list): Each ISIS router is identified by an arbitrary string
// identifier.
// ----------------------------------------
// Defining module: "open-traffic-generator-isis"
// Instantiating module: "open-traffic-generator-isis"
// Path from parent: "isis-routers/isis-router"
// Path from root: "/isis-routers/isis-router"
// Name (wildcarded): string
func (n *DevicePath) IsisRouterAny() *IsisRouterPathAny {
	return &IsisRouterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"isis-routers", "isis-router"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// IsisRouter (list): Each ISIS router is identified by an arbitrary string
// identifier.
// ----------------------------------------
// Defining module: "open-traffic-generator-isis"
// Instantiating module: "open-traffic-generator-isis"
// Path from parent: "isis-routers/isis-router"
// Path from root: "/isis-routers/isis-router"
// Name: string
func (n *DevicePath) IsisRouter(Name string) *IsisRouterPath {
	return &IsisRouterPath{
		NodePath: ygot.NewNodePath(
			[]string{"isis-routers", "isis-router"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Meta (container):
// ----------------------------------------
// Defining module: "gnmi-collector-metadata"
// Instantiating module: "gnmi-collector-metadata"
// Path from parent: "meta"
// Path from root: "/meta"
func (n *DevicePath) Meta() *MetaPath {
	return &MetaPath{
		NodePath: ygot.NewNodePath(
			[]string{"meta"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortAny (list): An individual port defined by an OTG.
// ----------------------------------------
// Defining module: "open-traffic-generator-port"
// Instantiating module: "open-traffic-generator-port"
// Path from parent: "ports/port"
// Path from root: "/ports/port"
// Name (wildcarded): string
func (n *DevicePath) PortAny() *PortPathAny {
	return &PortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ports", "port"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Port (list): An individual port defined by an OTG.
// ----------------------------------------
// Defining module: "open-traffic-generator-port"
// Instantiating module: "open-traffic-generator-port"
// Path from parent: "ports/port"
// Path from root: "/ports/port"
// Name: string
func (n *DevicePath) Port(Name string) *PortPath {
	return &PortPath{
		NodePath: ygot.NewNodePath(
			[]string{"ports", "port"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// FlowPath represents the /open-traffic-generator-flow/flows/flow YANG schema element.
type FlowPath struct {
	*ygot.NodePath
}

// FlowPathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow YANG schema element.
type FlowPathAny struct {
	*ygot.NodePath
}

// Flow_InFrameRatePath represents the /open-traffic-generator-flow/flows/flow/state/in-frame-rate YANG schema element.
type Flow_InFrameRatePath struct {
	*ygot.NodePath
}

// Flow_InFrameRatePathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/in-frame-rate YANG schema element.
type Flow_InFrameRatePathAny struct {
	*ygot.NodePath
}

// Flow_InRatePath represents the /open-traffic-generator-flow/flows/flow/state/in-rate YANG schema element.
type Flow_InRatePath struct {
	*ygot.NodePath
}

// Flow_InRatePathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/in-rate YANG schema element.
type Flow_InRatePathAny struct {
	*ygot.NodePath
}

// Flow_LossPctPath represents the /open-traffic-generator-flow/flows/flow/state/loss-pct YANG schema element.
type Flow_LossPctPath struct {
	*ygot.NodePath
}

// Flow_LossPctPathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/loss-pct YANG schema element.
type Flow_LossPctPathAny struct {
	*ygot.NodePath
}

// Flow_MetricGroupPath represents the /open-traffic-generator-flow/flows/flow/state/metric-group YANG schema element.
type Flow_MetricGroupPath struct {
	*ygot.NodePath
}

// Flow_MetricGroupPathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/metric-group YANG schema element.
type Flow_MetricGroupPathAny struct {
	*ygot.NodePath
}

// Flow_NamePath represents the /open-traffic-generator-flow/flows/flow/state/name YANG schema element.
type Flow_NamePath struct {
	*ygot.NodePath
}

// Flow_NamePathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/name YANG schema element.
type Flow_NamePathAny struct {
	*ygot.NodePath
}

// Flow_OutFrameRatePath represents the /open-traffic-generator-flow/flows/flow/state/out-frame-rate YANG schema element.
type Flow_OutFrameRatePath struct {
	*ygot.NodePath
}

// Flow_OutFrameRatePathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/out-frame-rate YANG schema element.
type Flow_OutFrameRatePathAny struct {
	*ygot.NodePath
}

// Flow_OutRatePath represents the /open-traffic-generator-flow/flows/flow/state/out-rate YANG schema element.
type Flow_OutRatePath struct {
	*ygot.NodePath
}

// Flow_OutRatePathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/out-rate YANG schema element.
type Flow_OutRatePathAny struct {
	*ygot.NodePath
}

// Counters (container): Counters that correspond to the individual flow.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/counters"
// Path from root: "/flows/flow/state/counters"
func (n *FlowPath) Counters() *Flow_CountersPath {
	return &Flow_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Counters that correspond to the individual flow.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/counters"
// Path from root: "/flows/flow/state/counters"
func (n *FlowPathAny) Counters() *Flow_CountersPathAny {
	return &Flow_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnumerationAny (list): A flow of packets between one or more internal and external sources
// and one or more internal and external destinations that the target
// is able to track and report statistics on. Each flow is identified by
// an arbitrary string identifier.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "enumerations/enumeration"
// Path from root: "/flows/flow/enumerations/enumeration"
// Name (wildcarded): string
func (n *FlowPath) EnumerationAny() *Flow_EnumerationPathAny {
	return &Flow_EnumerationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"enumerations", "enumeration"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// EnumerationAny (list): A flow of packets between one or more internal and external sources
// and one or more internal and external destinations that the target
// is able to track and report statistics on. Each flow is identified by
// an arbitrary string identifier.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "enumerations/enumeration"
// Path from root: "/flows/flow/enumerations/enumeration"
// Name (wildcarded): string
func (n *FlowPathAny) EnumerationAny() *Flow_EnumerationPathAny {
	return &Flow_EnumerationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"enumerations", "enumeration"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Enumeration (list): A flow of packets between one or more internal and external sources
// and one or more internal and external destinations that the target
// is able to track and report statistics on. Each flow is identified by
// an arbitrary string identifier.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "enumerations/enumeration"
// Path from root: "/flows/flow/enumerations/enumeration"
// Name: string
func (n *FlowPath) Enumeration(Name string) *Flow_EnumerationPath {
	return &Flow_EnumerationPath{
		NodePath: ygot.NewNodePath(
			[]string{"enumerations", "enumeration"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Enumeration (list): A flow of packets between one or more internal and external sources
// and one or more internal and external destinations that the target
// is able to track and report statistics on. Each flow is identified by
// an arbitrary string identifier.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "enumerations/enumeration"
// Path from root: "/flows/flow/enumerations/enumeration"
// Name: string
func (n *FlowPathAny) Enumeration(Name string) *Flow_EnumerationPathAny {
	return &Flow_EnumerationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"enumerations", "enumeration"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// InFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// received for the flow.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/in-frame-rate"
// Path from root: "/flows/flow/state/in-frame-rate"
func (n *FlowPath) InFrameRate() *Flow_InFrameRatePath {
	return &Flow_InFrameRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-frame-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// received for the flow.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/in-frame-rate"
// Path from root: "/flows/flow/state/in-frame-rate"
func (n *FlowPathAny) InFrameRate() *Flow_InFrameRatePathAny {
	return &Flow_InFrameRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-frame-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// InRate (leaf): The rate, measured in bits per second, at which the flow is being
// received.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/in-rate"
// Path from root: "/flows/flow/state/in-rate"
func (n *FlowPath) InRate() *Flow_InRatePath {
	return &Flow_InRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// InRate (leaf): The rate, measured in bits per second, at which the flow is being
// received.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/in-rate"
// Path from root: "/flows/flow/state/in-rate"
func (n *FlowPathAny) InRate() *Flow_InRatePathAny {
	return &Flow_InRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// LossPct (leaf): The percentage of transmitted packets that were not received by the
// destinations of the flow.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/loss-pct"
// Path from root: "/flows/flow/state/loss-pct"
func (n *FlowPath) LossPct() *Flow_LossPctPath {
	return &Flow_LossPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "loss-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// LossPct (leaf): The percentage of transmitted packets that were not received by the
// destinations of the flow.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/loss-pct"
// Path from root: "/flows/flow/state/loss-pct"
func (n *FlowPathAny) LossPct() *Flow_LossPctPathAny {
	return &Flow_LossPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "loss-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetricGroup (leaf): Any metric groups and filters
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/metric-group"
// Path from root: "/flows/flow/state/metric-group"
func (n *FlowPath) MetricGroup() *Flow_MetricGroupPath {
	return &Flow_MetricGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "metric-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetricGroup (leaf): Any metric groups and filters
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/metric-group"
// Path from root: "/flows/flow/state/metric-group"
func (n *FlowPathAny) MetricGroup() *Flow_MetricGroupPathAny {
	return &Flow_MetricGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "metric-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): An arbitary name used for the flow tracked by the system. This
// name must be unique for the flows tracked and exported by the target.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/name"
// Path from root: "/flows/flow/state/name"
func (n *FlowPath) Name() *Flow_NamePath {
	return &Flow_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): An arbitary name used for the flow tracked by the system. This
// name must be unique for the flows tracked and exported by the target.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/name"
// Path from root: "/flows/flow/state/name"
func (n *FlowPathAny) Name() *Flow_NamePathAny {
	return &Flow_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// transmitted for the flow.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/out-frame-rate"
// Path from root: "/flows/flow/state/out-frame-rate"
func (n *FlowPath) OutFrameRate() *Flow_OutFrameRatePath {
	return &Flow_OutFrameRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-frame-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// transmitted for the flow.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/out-frame-rate"
// Path from root: "/flows/flow/state/out-frame-rate"
func (n *FlowPathAny) OutFrameRate() *Flow_OutFrameRatePathAny {
	return &Flow_OutFrameRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-frame-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutRate (leaf): The rate, measured in bits per second, at which the flow is being
// transmitted.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/out-rate"
// Path from root: "/flows/flow/state/out-rate"
func (n *FlowPath) OutRate() *Flow_OutRatePath {
	return &Flow_OutRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutRate (leaf): The rate, measured in bits per second, at which the flow is being
// transmitted.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/out-rate"
// Path from root: "/flows/flow/state/out-rate"
func (n *FlowPathAny) OutRate() *Flow_OutRatePathAny {
	return &Flow_OutRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// Flow_CountersPath represents the /open-traffic-generator-flow/flows/flow/state/counters YANG schema element.
type Flow_CountersPath struct {
	*ygot.NodePath
}

// Flow_CountersPathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/counters YANG schema element.
type Flow_CountersPathAny struct {
	*ygot.NodePath
}

// Flow_Counters_InOctetsPath represents the /open-traffic-generator-flow/flows/flow/state/counters/in-octets YANG schema element.
type Flow_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Flow_Counters_InOctetsPathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/counters/in-octets YANG schema element.
type Flow_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Flow_Counters_InPktsPath represents the /open-traffic-generator-flow/flows/flow/state/counters/in-pkts YANG schema element.
type Flow_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Flow_Counters_InPktsPathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/counters/in-pkts YANG schema element.
type Flow_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Flow_Counters_OutOctetsPath represents the /open-traffic-generator-flow/flows/flow/state/counters/out-octets YANG schema element.
type Flow_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Flow_Counters_OutOctetsPathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/counters/out-octets YANG schema element.
type Flow_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Flow_Counters_OutPktsPath represents the /open-traffic-generator-flow/flows/flow/state/counters/out-pkts YANG schema element.
type Flow_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Flow_Counters_OutPktsPathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/counters/out-pkts YANG schema element.
type Flow_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// InOctets (leaf): The total number of bytes received by the target for the flow.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "in-octets"
// Path from root: "/flows/flow/state/counters/in-octets"
func (n *Flow_CountersPath) InOctets() *Flow_Counters_InOctetsPath {
	return &Flow_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of bytes received by the target for the flow.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "in-octets"
// Path from root: "/flows/flow/state/counters/in-octets"
func (n *Flow_CountersPathAny) InOctets() *Flow_Counters_InOctetsPathAny {
	return &Flow_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of packets received by the target for the flow.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "in-pkts"
// Path from root: "/flows/flow/state/counters/in-pkts"
func (n *Flow_CountersPath) InPkts() *Flow_Counters_InPktsPath {
	return &Flow_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of packets received by the target for the flow.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "in-pkts"
// Path from root: "/flows/flow/state/counters/in-pkts"
func (n *Flow_CountersPathAny) InPkts() *Flow_Counters_InPktsPathAny {
	return &Flow_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of bytes sent by the target for the flow. These
// packets may be generated or forwarded by the target.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "out-octets"
// Path from root: "/flows/flow/state/counters/out-octets"
func (n *Flow_CountersPath) OutOctets() *Flow_Counters_OutOctetsPath {
	return &Flow_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of bytes sent by the target for the flow. These
// packets may be generated or forwarded by the target.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "out-octets"
// Path from root: "/flows/flow/state/counters/out-octets"
func (n *Flow_CountersPathAny) OutOctets() *Flow_Counters_OutOctetsPathAny {
	return &Flow_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of packets sent by the target for the flow. These
// packets may be generated or forwarded by the target.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "out-pkts"
// Path from root: "/flows/flow/state/counters/out-pkts"
func (n *Flow_CountersPath) OutPkts() *Flow_Counters_OutPktsPath {
	return &Flow_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of packets sent by the target for the flow. These
// packets may be generated or forwarded by the target.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "out-pkts"
// Path from root: "/flows/flow/state/counters/out-pkts"
func (n *Flow_CountersPathAny) OutPkts() *Flow_Counters_OutPktsPathAny {
	return &Flow_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Flow_EnumerationPath represents the /open-traffic-generator-flow/flows/flow/enumerations/enumeration YANG schema element.
type Flow_EnumerationPath struct {
	*ygot.NodePath
}

// Flow_EnumerationPathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/enumerations/enumeration YANG schema element.
type Flow_EnumerationPathAny struct {
	*ygot.NodePath
}

// Flow_Enumeration_InFrameRatePath represents the /open-traffic-generator-flow/flows/flow/enumerations/enumeration/state/in-frame-rate YANG schema element.
type Flow_Enumeration_InFrameRatePath struct {
	*ygot.NodePath
}

// Flow_Enumeration_InFrameRatePathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/enumerations/enumeration/state/in-frame-rate YANG schema element.
type Flow_Enumeration_InFrameRatePathAny struct {
	*ygot.NodePath
}

// Flow_Enumeration_InRatePath represents the /open-traffic-generator-flow/flows/flow/enumerations/enumeration/state/in-rate YANG schema element.
type Flow_Enumeration_InRatePath struct {
	*ygot.NodePath
}

// Flow_Enumeration_InRatePathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/enumerations/enumeration/state/in-rate YANG schema element.
type Flow_Enumeration_InRatePathAny struct {
	*ygot.NodePath
}

// Flow_Enumeration_LossPctPath represents the /open-traffic-generator-flow/flows/flow/enumerations/enumeration/state/loss-pct YANG schema element.
type Flow_Enumeration_LossPctPath struct {
	*ygot.NodePath
}

// Flow_Enumeration_LossPctPathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/enumerations/enumeration/state/loss-pct YANG schema element.
type Flow_Enumeration_LossPctPathAny struct {
	*ygot.NodePath
}

// Flow_Enumeration_MetricGroupPath represents the /open-traffic-generator-flow/flows/flow/enumerations/enumeration/state/metric-group YANG schema element.
type Flow_Enumeration_MetricGroupPath struct {
	*ygot.NodePath
}

// Flow_Enumeration_MetricGroupPathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/enumerations/enumeration/state/metric-group YANG schema element.
type Flow_Enumeration_MetricGroupPathAny struct {
	*ygot.NodePath
}

// Flow_Enumeration_NamePath represents the /open-traffic-generator-flow/flows/flow/enumerations/enumeration/state/name YANG schema element.
type Flow_Enumeration_NamePath struct {
	*ygot.NodePath
}

// Flow_Enumeration_NamePathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/enumerations/enumeration/state/name YANG schema element.
type Flow_Enumeration_NamePathAny struct {
	*ygot.NodePath
}

// Flow_Enumeration_OutFrameRatePath represents the /open-traffic-generator-flow/flows/flow/enumerations/enumeration/state/out-frame-rate YANG schema element.
type Flow_Enumeration_OutFrameRatePath struct {
	*ygot.NodePath
}

// Flow_Enumeration_OutFrameRatePathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/enumerations/enumeration/state/out-frame-rate YANG schema element.
type Flow_Enumeration_OutFrameRatePathAny struct {
	*ygot.NodePath
}

// Flow_Enumeration_OutRatePath represents the /open-traffic-generator-flow/flows/flow/enumerations/enumeration/state/out-rate YANG schema element.
type Flow_Enumeration_OutRatePath struct {
	*ygot.NodePath
}

// Flow_Enumeration_OutRatePathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/enumerations/enumeration/state/out-rate YANG schema element.
type Flow_Enumeration_OutRatePathAny struct {
	*ygot.NodePath
}

// Counters (container): Counters that correspond to the individual flow.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/counters"
// Path from root: "/flows/flow/enumerations/enumeration/state/counters"
func (n *Flow_EnumerationPath) Counters() *Flow_Enumeration_CountersPath {
	return &Flow_Enumeration_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Counters that correspond to the individual flow.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/counters"
// Path from root: "/flows/flow/enumerations/enumeration/state/counters"
func (n *Flow_EnumerationPathAny) Counters() *Flow_Enumeration_CountersPathAny {
	return &Flow_Enumeration_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// received for the flow.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/in-frame-rate"
// Path from root: "/flows/flow/enumerations/enumeration/state/in-frame-rate"
func (n *Flow_EnumerationPath) InFrameRate() *Flow_Enumeration_InFrameRatePath {
	return &Flow_Enumeration_InFrameRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-frame-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// received for the flow.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/in-frame-rate"
// Path from root: "/flows/flow/enumerations/enumeration/state/in-frame-rate"
func (n *Flow_EnumerationPathAny) InFrameRate() *Flow_Enumeration_InFrameRatePathAny {
	return &Flow_Enumeration_InFrameRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-frame-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// InRate (leaf): The rate, measured in bits per second, at which the flow is being
// received.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/in-rate"
// Path from root: "/flows/flow/enumerations/enumeration/state/in-rate"
func (n *Flow_EnumerationPath) InRate() *Flow_Enumeration_InRatePath {
	return &Flow_Enumeration_InRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// InRate (leaf): The rate, measured in bits per second, at which the flow is being
// received.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/in-rate"
// Path from root: "/flows/flow/enumerations/enumeration/state/in-rate"
func (n *Flow_EnumerationPathAny) InRate() *Flow_Enumeration_InRatePathAny {
	return &Flow_Enumeration_InRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// LossPct (leaf): The percentage of transmitted packets that were not received by the
// destinations of the flow.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/loss-pct"
// Path from root: "/flows/flow/enumerations/enumeration/state/loss-pct"
func (n *Flow_EnumerationPath) LossPct() *Flow_Enumeration_LossPctPath {
	return &Flow_Enumeration_LossPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "loss-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// LossPct (leaf): The percentage of transmitted packets that were not received by the
// destinations of the flow.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/loss-pct"
// Path from root: "/flows/flow/enumerations/enumeration/state/loss-pct"
func (n *Flow_EnumerationPathAny) LossPct() *Flow_Enumeration_LossPctPathAny {
	return &Flow_Enumeration_LossPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "loss-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetricGroup (leaf): Any metric groups and filters
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/metric-group"
// Path from root: "/flows/flow/enumerations/enumeration/state/metric-group"
func (n *Flow_EnumerationPath) MetricGroup() *Flow_Enumeration_MetricGroupPath {
	return &Flow_Enumeration_MetricGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "metric-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetricGroup (leaf): Any metric groups and filters
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/metric-group"
// Path from root: "/flows/flow/enumerations/enumeration/state/metric-group"
func (n *Flow_EnumerationPathAny) MetricGroup() *Flow_Enumeration_MetricGroupPathAny {
	return &Flow_Enumeration_MetricGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "metric-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): An arbitary name used for the flow tracked by the system. This
// name must be unique for the flows tracked and exported by the target.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/name"
// Path from root: "/flows/flow/enumerations/enumeration/state/name"
func (n *Flow_EnumerationPath) Name() *Flow_Enumeration_NamePath {
	return &Flow_Enumeration_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): An arbitary name used for the flow tracked by the system. This
// name must be unique for the flows tracked and exported by the target.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/name"
// Path from root: "/flows/flow/enumerations/enumeration/state/name"
func (n *Flow_EnumerationPathAny) Name() *Flow_Enumeration_NamePathAny {
	return &Flow_Enumeration_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// transmitted for the flow.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/out-frame-rate"
// Path from root: "/flows/flow/enumerations/enumeration/state/out-frame-rate"
func (n *Flow_EnumerationPath) OutFrameRate() *Flow_Enumeration_OutFrameRatePath {
	return &Flow_Enumeration_OutFrameRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-frame-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// transmitted for the flow.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/out-frame-rate"
// Path from root: "/flows/flow/enumerations/enumeration/state/out-frame-rate"
func (n *Flow_EnumerationPathAny) OutFrameRate() *Flow_Enumeration_OutFrameRatePathAny {
	return &Flow_Enumeration_OutFrameRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-frame-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutRate (leaf): The rate, measured in bits per second, at which the flow is being
// transmitted.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/out-rate"
// Path from root: "/flows/flow/enumerations/enumeration/state/out-rate"
func (n *Flow_EnumerationPath) OutRate() *Flow_Enumeration_OutRatePath {
	return &Flow_Enumeration_OutRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutRate (leaf): The rate, measured in bits per second, at which the flow is being
// transmitted.
// ----------------------------------------
// Defining module: "open-traffic-generator-flow"
// Instantiating module: "open-traffic-generator-flow"
// Path from parent: "state/out-rate"
// Path from root: "/flows/flow/enumerations/enumeration/state/out-rate"
func (n *Flow_EnumerationPathAny) OutRate() *Flow_Enumeration_OutRatePathAny {
	return &Flow_Enumeration_OutRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

/*
Package otg is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /usr/local/google/home/alexmasi/go/pkg/mod/github.com/openconfig/ygot@v0.23.1/genutil/names.go
using the following YANG input files:
  - models-yang/models/isis/open-traffic-generator-isis.yang
  - models-yang/models/types/open-traffic-generator-types.yang
  - models-yang/models/flow/open-traffic-generator-flow.yang
  - models-yang/models/discovery/open-traffic-generator-discovery.yang
  - models-yang/models/interface/open-traffic-generator-port.yang
  - models-yang/models/bgp/open-traffic-generator-bgp.yang

Imported modules were sourced from:
  - models-yang/models/...
*/
package otg

import (
	"reflect"

	"github.com/openconfig/ygot/ygot"
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_BgpPeer_SessionState": {
		1: {Name: "IDLE"},
		2: {Name: "CONNECT"},
		3: {Name: "ACTIVE"},
		4: {Name: "OPEN_SENT"},
		5: {Name: "OPEN_CONFIRM"},
		6: {Name: "ESTABLISHED"},
	},
	"E_Port_Link": {
		1: {Name: "UP"},
		2: {Name: "DOWN"},
	},
	"E_UnicastIpv4Prefix_Origin": {
		1: {Name: "IGP"},
		2: {Name: "EGP"},
	},
	"E_UnicastIpv6Prefix_Origin": {
		1: {Name: "IGP"},
		2: {Name: "EGP"},
	},
}

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes() {
	ΛEnumTypes = map[string][]reflect.Type{
		"/bgp-peers/bgp-peer/state/session-state": {
			reflect.TypeOf((E_BgpPeer_SessionState)(0)),
		},
		"/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/origin": {
			reflect.TypeOf((E_UnicastIpv4Prefix_Origin)(0)),
		},
		"/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/origin": {
			reflect.TypeOf((E_UnicastIpv6Prefix_Origin)(0)),
		},
		"/ports/port/state/link": {
			reflect.TypeOf((E_Port_Link)(0)),
		},
	}
}

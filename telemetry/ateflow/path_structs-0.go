/*
Package ateflow is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/alexmasi/go/pkg/mod/github.com/openconfig/ygot@v0.23.1/genutil/names.go
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package ateflow

import (
	oc "github.com/openconfig/ondatra/telemetry"
	"github.com/openconfig/ygot/ygot"
)

// FlowPath represents the /openconfig-ate-flow/flows/flow YANG schema element.
type FlowPath struct {
	*ygot.NodePath
}

// FlowPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow YANG schema element.
type FlowPathAny struct {
	*ygot.NodePath
}

// Flow_ConvergenceTimePath represents the /openconfig-ate-flow/flows/flow/state/convergence-time YANG schema element.
type Flow_ConvergenceTimePath struct {
	*ygot.NodePath
}

// Flow_ConvergenceTimePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/convergence-time YANG schema element.
type Flow_ConvergenceTimePathAny struct {
	*ygot.NodePath
}

// Flow_DstIpv4Path represents the /openconfig-ate-flow/flows/flow/state/dst-ipv4 YANG schema element.
type Flow_DstIpv4Path struct {
	*ygot.NodePath
}

// Flow_DstIpv4PathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/dst-ipv4 YANG schema element.
type Flow_DstIpv4PathAny struct {
	*ygot.NodePath
}

// Flow_DstIpv6Path represents the /openconfig-ate-flow/flows/flow/state/dst-ipv6 YANG schema element.
type Flow_DstIpv6Path struct {
	*ygot.NodePath
}

// Flow_DstIpv6PathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/dst-ipv6 YANG schema element.
type Flow_DstIpv6PathAny struct {
	*ygot.NodePath
}

// Flow_DstPortPath represents the /openconfig-ate-flow/flows/flow/state/dst-port YANG schema element.
type Flow_DstPortPath struct {
	*ygot.NodePath
}

// Flow_DstPortPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/dst-port YANG schema element.
type Flow_DstPortPathAny struct {
	*ygot.NodePath
}

// Flow_FilterPath represents the /openconfig-ate-flow/flows/flow/state/filter YANG schema element.
type Flow_FilterPath struct {
	*ygot.NodePath
}

// Flow_FilterPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/filter YANG schema element.
type Flow_FilterPathAny struct {
	*ygot.NodePath
}

// Flow_FirstPacketLatencyPath represents the /openconfig-ate-flow/flows/flow/state/first-packet-latency YANG schema element.
type Flow_FirstPacketLatencyPath struct {
	*ygot.NodePath
}

// Flow_FirstPacketLatencyPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/first-packet-latency YANG schema element.
type Flow_FirstPacketLatencyPathAny struct {
	*ygot.NodePath
}

// Flow_InFrameRatePath represents the /openconfig-ate-flow/flows/flow/state/in-frame-rate YANG schema element.
type Flow_InFrameRatePath struct {
	*ygot.NodePath
}

// Flow_InFrameRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/in-frame-rate YANG schema element.
type Flow_InFrameRatePathAny struct {
	*ygot.NodePath
}

// Flow_InRatePath represents the /openconfig-ate-flow/flows/flow/state/in-rate YANG schema element.
type Flow_InRatePath struct {
	*ygot.NodePath
}

// Flow_InRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/in-rate YANG schema element.
type Flow_InRatePathAny struct {
	*ygot.NodePath
}

// Flow_LossPctPath represents the /openconfig-ate-flow/flows/flow/state/loss-pct YANG schema element.
type Flow_LossPctPath struct {
	*ygot.NodePath
}

// Flow_LossPctPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/loss-pct YANG schema element.
type Flow_LossPctPathAny struct {
	*ygot.NodePath
}

// Flow_MplsLabelPath represents the /openconfig-ate-flow/flows/flow/state/mpls-label YANG schema element.
type Flow_MplsLabelPath struct {
	*ygot.NodePath
}

// Flow_MplsLabelPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/mpls-label YANG schema element.
type Flow_MplsLabelPathAny struct {
	*ygot.NodePath
}

// Flow_NamePath represents the /openconfig-ate-flow/flows/flow/state/name YANG schema element.
type Flow_NamePath struct {
	*ygot.NodePath
}

// Flow_NamePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/name YANG schema element.
type Flow_NamePathAny struct {
	*ygot.NodePath
}

// Flow_OutFrameRatePath represents the /openconfig-ate-flow/flows/flow/state/out-frame-rate YANG schema element.
type Flow_OutFrameRatePath struct {
	*ygot.NodePath
}

// Flow_OutFrameRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/out-frame-rate YANG schema element.
type Flow_OutFrameRatePathAny struct {
	*ygot.NodePath
}

// Flow_OutRatePath represents the /openconfig-ate-flow/flows/flow/state/out-rate YANG schema element.
type Flow_OutRatePath struct {
	*ygot.NodePath
}

// Flow_OutRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/out-rate YANG schema element.
type Flow_OutRatePathAny struct {
	*ygot.NodePath
}

// Flow_SrcIpv4Path represents the /openconfig-ate-flow/flows/flow/state/src-ipv4 YANG schema element.
type Flow_SrcIpv4Path struct {
	*ygot.NodePath
}

// Flow_SrcIpv4PathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/src-ipv4 YANG schema element.
type Flow_SrcIpv4PathAny struct {
	*ygot.NodePath
}

// Flow_SrcIpv6Path represents the /openconfig-ate-flow/flows/flow/state/src-ipv6 YANG schema element.
type Flow_SrcIpv6Path struct {
	*ygot.NodePath
}

// Flow_SrcIpv6PathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/src-ipv6 YANG schema element.
type Flow_SrcIpv6PathAny struct {
	*ygot.NodePath
}

// Flow_SrcPortPath represents the /openconfig-ate-flow/flows/flow/state/src-port YANG schema element.
type Flow_SrcPortPath struct {
	*ygot.NodePath
}

// Flow_SrcPortPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/src-port YANG schema element.
type Flow_SrcPortPathAny struct {
	*ygot.NodePath
}

// Flow_VlanIdPath represents the /openconfig-ate-flow/flows/flow/state/vlan-id YANG schema element.
type Flow_VlanIdPath struct {
	*ygot.NodePath
}

// Flow_VlanIdPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/vlan-id YANG schema element.
type Flow_VlanIdPathAny struct {
	*ygot.NodePath
}

// ConvergenceTime (leaf): The time from when the first packet was received to when traffic
// loss dropped below a minimal threshold value.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/convergence-time"
// Path from root: "/flows/flow/state/convergence-time"
func (n *FlowPath) ConvergenceTime() *Flow_ConvergenceTimePath {
	return &Flow_ConvergenceTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "convergence-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConvergenceTime (leaf): The time from when the first packet was received to when traffic
// loss dropped below a minimal threshold value.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/convergence-time"
// Path from root: "/flows/flow/state/convergence-time"
func (n *FlowPathAny) ConvergenceTime() *Flow_ConvergenceTimePathAny {
	return &Flow_ConvergenceTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "convergence-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Counters that correspond to the individual flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/counters"
// Path from root: "/flows/flow/state/counters"
func (n *FlowPath) Counters() *Flow_CountersPath {
	return &Flow_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Counters that correspond to the individual flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/counters"
// Path from root: "/flows/flow/state/counters"
func (n *FlowPathAny) Counters() *Flow_CountersPathAny {
	return &Flow_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DstIpv4 (leaf): The destination IPv4 value of the traffic header.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/dst-ipv4"
// Path from root: "/flows/flow/state/dst-ipv4"
func (n *FlowPath) DstIpv4() *Flow_DstIpv4Path {
	return &Flow_DstIpv4Path{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dst-ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// DstIpv4 (leaf): The destination IPv4 value of the traffic header.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/dst-ipv4"
// Path from root: "/flows/flow/state/dst-ipv4"
func (n *FlowPathAny) DstIpv4() *Flow_DstIpv4PathAny {
	return &Flow_DstIpv4PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dst-ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// DstIpv6 (leaf): The destination IPv6 value of the traffic header.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/dst-ipv6"
// Path from root: "/flows/flow/state/dst-ipv6"
func (n *FlowPath) DstIpv6() *Flow_DstIpv6Path {
	return &Flow_DstIpv6Path{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dst-ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// DstIpv6 (leaf): The destination IPv6 value of the traffic header.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/dst-ipv6"
// Path from root: "/flows/flow/state/dst-ipv6"
func (n *FlowPathAny) DstIpv6() *Flow_DstIpv6PathAny {
	return &Flow_DstIpv6PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dst-ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// DstPort (leaf): Value of the destination port for ingress tracking.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/dst-port"
// Path from root: "/flows/flow/state/dst-port"
func (n *FlowPath) DstPort() *Flow_DstPortPath {
	return &Flow_DstPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dst-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// DstPort (leaf): Value of the destination port for ingress tracking.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/dst-port"
// Path from root: "/flows/flow/state/dst-port"
func (n *FlowPathAny) DstPort() *Flow_DstPortPathAny {
	return &Flow_DstPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dst-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// EgressTrackingAny (list): If the ATE is configured to track outgoing frames by a header field,
// this list will map values of that header field to the flow statistics
// specific to frames that match that value.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "egress-tracking/egress-tracking"
// Path from root: "/flows/flow/egress-tracking/egress-tracking"
// Filter (wildcarded): string
func (n *FlowPath) EgressTrackingAny() *Flow_EgressTrackingPathAny {
	return &Flow_EgressTrackingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress-tracking", "egress-tracking"},
			map[string]interface{}{"filter": "*"},
			n,
		),
	}
}

// EgressTrackingAny (list): If the ATE is configured to track outgoing frames by a header field,
// this list will map values of that header field to the flow statistics
// specific to frames that match that value.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "egress-tracking/egress-tracking"
// Path from root: "/flows/flow/egress-tracking/egress-tracking"
// Filter (wildcarded): string
func (n *FlowPathAny) EgressTrackingAny() *Flow_EgressTrackingPathAny {
	return &Flow_EgressTrackingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress-tracking", "egress-tracking"},
			map[string]interface{}{"filter": "*"},
			n,
		),
	}
}

// EgressTracking (list): If the ATE is configured to track outgoing frames by a header field,
// this list will map values of that header field to the flow statistics
// specific to frames that match that value.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "egress-tracking/egress-tracking"
// Path from root: "/flows/flow/egress-tracking/egress-tracking"
// Filter: string
func (n *FlowPath) EgressTracking(Filter string) *Flow_EgressTrackingPath {
	return &Flow_EgressTrackingPath{
		NodePath: ygot.NewNodePath(
			[]string{"egress-tracking", "egress-tracking"},
			map[string]interface{}{"filter": Filter},
			n,
		),
	}
}

// EgressTracking (list): If the ATE is configured to track outgoing frames by a header field,
// this list will map values of that header field to the flow statistics
// specific to frames that match that value.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "egress-tracking/egress-tracking"
// Path from root: "/flows/flow/egress-tracking/egress-tracking"
// Filter: string
func (n *FlowPathAny) EgressTracking(Filter string) *Flow_EgressTrackingPathAny {
	return &Flow_EgressTrackingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress-tracking", "egress-tracking"},
			map[string]interface{}{"filter": Filter},
			n,
		),
	}
}

// Filter (leaf): Name of the filter on which the egress stats are tracked
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/filter"
// Path from root: "/flows/flow/state/filter"
func (n *FlowPath) Filter() *Flow_FilterPath {
	return &Flow_FilterPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "filter"},
			map[string]interface{}{},
			n,
		),
	}
}

// Filter (leaf): Name of the filter on which the egress stats are tracked
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/filter"
// Path from root: "/flows/flow/state/filter"
func (n *FlowPathAny) Filter() *Flow_FilterPathAny {
	return &Flow_FilterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "filter"},
			map[string]interface{}{},
			n,
		),
	}
}

// FirstPacketLatency (leaf): The time from when the flow was started to when the first packet was
// received.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/first-packet-latency"
// Path from root: "/flows/flow/state/first-packet-latency"
func (n *FlowPath) FirstPacketLatency() *Flow_FirstPacketLatencyPath {
	return &Flow_FirstPacketLatencyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "first-packet-latency"},
			map[string]interface{}{},
			n,
		),
	}
}

// FirstPacketLatency (leaf): The time from when the flow was started to when the first packet was
// received.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/first-packet-latency"
// Path from root: "/flows/flow/state/first-packet-latency"
func (n *FlowPathAny) FirstPacketLatency() *Flow_FirstPacketLatencyPathAny {
	return &Flow_FirstPacketLatencyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "first-packet-latency"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// received for the flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/in-frame-rate"
// Path from root: "/flows/flow/state/in-frame-rate"
func (n *FlowPath) InFrameRate() *Flow_InFrameRatePath {
	return &Flow_InFrameRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-frame-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// received for the flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/in-frame-rate"
// Path from root: "/flows/flow/state/in-frame-rate"
func (n *FlowPathAny) InFrameRate() *Flow_InFrameRatePathAny {
	return &Flow_InFrameRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-frame-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// InRate (leaf): The rate, measured in bits per second, at which the flow is being
// received.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/in-rate"
// Path from root: "/flows/flow/state/in-rate"
func (n *FlowPath) InRate() *Flow_InRatePath {
	return &Flow_InRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// InRate (leaf): The rate, measured in bits per second, at which the flow is being
// received.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/in-rate"
// Path from root: "/flows/flow/state/in-rate"
func (n *FlowPathAny) InRate() *Flow_InRatePathAny {
	return &Flow_InRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// IngressTrackingAny (list): If the ATE is configured to track incoming frames by their header
// fields, this list will map combinations of values of those header
// fields to the flow statistics specific to frames that match that
// combination.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "ingress-tracking/ingress-tracking"
// Path from root: "/flows/flow/ingress-tracking/ingress-tracking"
func (n *FlowPath) IngressTrackingAny() *Flow_IngressTrackingPathAny {
	return &Flow_IngressTrackingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-tracking", "ingress-tracking"},
			map[string]interface{}{"src-port": "*", "dst-port": "*", "mpls-label": "*", "src-ipv4": "*", "dst-ipv4": "*", "src-ipv6": "*", "dst-ipv6": "*", "vlan-id": "*"},
			n,
		),
	}
}

// IngressTrackingAny (list): If the ATE is configured to track incoming frames by their header
// fields, this list will map combinations of values of those header
// fields to the flow statistics specific to frames that match that
// combination.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "ingress-tracking/ingress-tracking"
// Path from root: "/flows/flow/ingress-tracking/ingress-tracking"
func (n *FlowPathAny) IngressTrackingAny() *Flow_IngressTrackingPathAny {
	return &Flow_IngressTrackingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-tracking", "ingress-tracking"},
			map[string]interface{}{"src-port": "*", "dst-port": "*", "mpls-label": "*", "src-ipv4": "*", "dst-ipv4": "*", "src-ipv6": "*", "dst-ipv6": "*", "vlan-id": "*"},
			n,
		),
	}
}

// WithSrcPort sets Flow_IngressTrackingPathAny's key "src-port" to the specified value.
// SrcPort: string
func (n *Flow_IngressTrackingPathAny) WithSrcPort(SrcPort string) *Flow_IngressTrackingPathAny {
	ygot.ModifyKey(n.NodePath, "src-port", SrcPort)
	return n
}

// WithDstPort sets Flow_IngressTrackingPathAny's key "dst-port" to the specified value.
// DstPort: string
func (n *Flow_IngressTrackingPathAny) WithDstPort(DstPort string) *Flow_IngressTrackingPathAny {
	ygot.ModifyKey(n.NodePath, "dst-port", DstPort)
	return n
}

// WithMplsLabel sets Flow_IngressTrackingPathAny's key "mpls-label" to the specified value.
// MplsLabel: [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum]
func (n *Flow_IngressTrackingPathAny) WithMplsLabel(MplsLabel oc.Flow_IngressTracking_MplsLabel_Union) *Flow_IngressTrackingPathAny {
	ygot.ModifyKey(n.NodePath, "mpls-label", MplsLabel)
	return n
}

// WithSrcIpv4 sets Flow_IngressTrackingPathAny's key "src-ipv4" to the specified value.
// SrcIpv4: string
func (n *Flow_IngressTrackingPathAny) WithSrcIpv4(SrcIpv4 string) *Flow_IngressTrackingPathAny {
	ygot.ModifyKey(n.NodePath, "src-ipv4", SrcIpv4)
	return n
}

// WithDstIpv4 sets Flow_IngressTrackingPathAny's key "dst-ipv4" to the specified value.
// DstIpv4: string
func (n *Flow_IngressTrackingPathAny) WithDstIpv4(DstIpv4 string) *Flow_IngressTrackingPathAny {
	ygot.ModifyKey(n.NodePath, "dst-ipv4", DstIpv4)
	return n
}

// WithSrcIpv6 sets Flow_IngressTrackingPathAny's key "src-ipv6" to the specified value.
// SrcIpv6: string
func (n *Flow_IngressTrackingPathAny) WithSrcIpv6(SrcIpv6 string) *Flow_IngressTrackingPathAny {
	ygot.ModifyKey(n.NodePath, "src-ipv6", SrcIpv6)
	return n
}

// WithDstIpv6 sets Flow_IngressTrackingPathAny's key "dst-ipv6" to the specified value.
// DstIpv6: string
func (n *Flow_IngressTrackingPathAny) WithDstIpv6(DstIpv6 string) *Flow_IngressTrackingPathAny {
	ygot.ModifyKey(n.NodePath, "dst-ipv6", DstIpv6)
	return n
}

// WithVlanId sets Flow_IngressTrackingPathAny's key "vlan-id" to the specified value.
// VlanId: uint16
func (n *Flow_IngressTrackingPathAny) WithVlanId(VlanId uint16) *Flow_IngressTrackingPathAny {
	ygot.ModifyKey(n.NodePath, "vlan-id", VlanId)
	return n
}

// LossPct (leaf): The percentage of transmitted packets that were not received by the
// destinations of the flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/loss-pct"
// Path from root: "/flows/flow/state/loss-pct"
func (n *FlowPath) LossPct() *Flow_LossPctPath {
	return &Flow_LossPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "loss-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// LossPct (leaf): The percentage of transmitted packets that were not received by the
// destinations of the flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/loss-pct"
// Path from root: "/flows/flow/state/loss-pct"
func (n *FlowPathAny) LossPct() *Flow_LossPctPathAny {
	return &Flow_LossPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "loss-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsLabel (leaf): Value of the MPLS label for ingress tracking.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/mpls-label"
// Path from root: "/flows/flow/state/mpls-label"
func (n *FlowPath) MplsLabel() *Flow_MplsLabelPath {
	return &Flow_MplsLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsLabel (leaf): Value of the MPLS label for ingress tracking.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/mpls-label"
// Path from root: "/flows/flow/state/mpls-label"
func (n *FlowPathAny) MplsLabel() *Flow_MplsLabelPathAny {
	return &Flow_MplsLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): An arbitary name used for the flow tracked by the system. This
// name must be unique for the flows tracked and exported by the target.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/name"
// Path from root: "/flows/flow/state/name"
func (n *FlowPath) Name() *Flow_NamePath {
	return &Flow_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): An arbitary name used for the flow tracked by the system. This
// name must be unique for the flows tracked and exported by the target.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/name"
// Path from root: "/flows/flow/state/name"
func (n *FlowPathAny) Name() *Flow_NamePathAny {
	return &Flow_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// transmitted for the flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/out-frame-rate"
// Path from root: "/flows/flow/state/out-frame-rate"
func (n *FlowPath) OutFrameRate() *Flow_OutFrameRatePath {
	return &Flow_OutFrameRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-frame-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// transmitted for the flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/out-frame-rate"
// Path from root: "/flows/flow/state/out-frame-rate"
func (n *FlowPathAny) OutFrameRate() *Flow_OutFrameRatePathAny {
	return &Flow_OutFrameRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-frame-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutRate (leaf): The rate, measured in bits per second, at which the flow is being
// transmitted.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/out-rate"
// Path from root: "/flows/flow/state/out-rate"
func (n *FlowPath) OutRate() *Flow_OutRatePath {
	return &Flow_OutRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutRate (leaf): The rate, measured in bits per second, at which the flow is being
// transmitted.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/out-rate"
// Path from root: "/flows/flow/state/out-rate"
func (n *FlowPathAny) OutRate() *Flow_OutRatePathAny {
	return &Flow_OutRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrcIpv4 (leaf): The source IPv4 value of the traffic header.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/src-ipv4"
// Path from root: "/flows/flow/state/src-ipv4"
func (n *FlowPath) SrcIpv4() *Flow_SrcIpv4Path {
	return &Flow_SrcIpv4Path{
		NodePath: ygot.NewNodePath(
			[]string{"state", "src-ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrcIpv4 (leaf): The source IPv4 value of the traffic header.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/src-ipv4"
// Path from root: "/flows/flow/state/src-ipv4"
func (n *FlowPathAny) SrcIpv4() *Flow_SrcIpv4PathAny {
	return &Flow_SrcIpv4PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "src-ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrcIpv6 (leaf): The source IPv6 value of the traffic header.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/src-ipv6"
// Path from root: "/flows/flow/state/src-ipv6"
func (n *FlowPath) SrcIpv6() *Flow_SrcIpv6Path {
	return &Flow_SrcIpv6Path{
		NodePath: ygot.NewNodePath(
			[]string{"state", "src-ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrcIpv6 (leaf): The source IPv6 value of the traffic header.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/src-ipv6"
// Path from root: "/flows/flow/state/src-ipv6"
func (n *FlowPathAny) SrcIpv6() *Flow_SrcIpv6PathAny {
	return &Flow_SrcIpv6PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "src-ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrcPort (leaf): Value of the source port for ingress tracking.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/src-port"
// Path from root: "/flows/flow/state/src-port"
func (n *FlowPath) SrcPort() *Flow_SrcPortPath {
	return &Flow_SrcPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "src-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrcPort (leaf): Value of the source port for ingress tracking.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/src-port"
// Path from root: "/flows/flow/state/src-port"
func (n *FlowPathAny) SrcPort() *Flow_SrcPortPathAny {
	return &Flow_SrcPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "src-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): The VLAN ID of the traffic header.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/vlan-id"
// Path from root: "/flows/flow/state/vlan-id"
func (n *FlowPath) VlanId() *Flow_VlanIdPath {
	return &Flow_VlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): The VLAN ID of the traffic header.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/vlan-id"
// Path from root: "/flows/flow/state/vlan-id"
func (n *FlowPathAny) VlanId() *Flow_VlanIdPathAny {
	return &Flow_VlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Flow_CountersPath represents the /openconfig-ate-flow/flows/flow/state/counters YANG schema element.
type Flow_CountersPath struct {
	*ygot.NodePath
}

// Flow_CountersPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/counters YANG schema element.
type Flow_CountersPathAny struct {
	*ygot.NodePath
}

// Flow_Counters_InOctetsPath represents the /openconfig-ate-flow/flows/flow/state/counters/in-octets YANG schema element.
type Flow_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Flow_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/counters/in-octets YANG schema element.
type Flow_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Flow_Counters_InPktsPath represents the /openconfig-ate-flow/flows/flow/state/counters/in-pkts YANG schema element.
type Flow_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Flow_Counters_InPktsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/counters/in-pkts YANG schema element.
type Flow_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Flow_Counters_OutOctetsPath represents the /openconfig-ate-flow/flows/flow/state/counters/out-octets YANG schema element.
type Flow_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Flow_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/counters/out-octets YANG schema element.
type Flow_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Flow_Counters_OutPktsPath represents the /openconfig-ate-flow/flows/flow/state/counters/out-pkts YANG schema element.
type Flow_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Flow_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/state/counters/out-pkts YANG schema element.
type Flow_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// InOctets (leaf): The total number of bytes received by the target for the flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "in-octets"
// Path from root: "/flows/flow/state/counters/in-octets"
func (n *Flow_CountersPath) InOctets() *Flow_Counters_InOctetsPath {
	return &Flow_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of bytes received by the target for the flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "in-octets"
// Path from root: "/flows/flow/state/counters/in-octets"
func (n *Flow_CountersPathAny) InOctets() *Flow_Counters_InOctetsPathAny {
	return &Flow_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of packets received by the target for the flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "in-pkts"
// Path from root: "/flows/flow/state/counters/in-pkts"
func (n *Flow_CountersPath) InPkts() *Flow_Counters_InPktsPath {
	return &Flow_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of packets received by the target for the flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "in-pkts"
// Path from root: "/flows/flow/state/counters/in-pkts"
func (n *Flow_CountersPathAny) InPkts() *Flow_Counters_InPktsPathAny {
	return &Flow_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of bytes sent by the target for the flow. These
// packets may be generated or forwarded by the target.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "out-octets"
// Path from root: "/flows/flow/state/counters/out-octets"
func (n *Flow_CountersPath) OutOctets() *Flow_Counters_OutOctetsPath {
	return &Flow_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of bytes sent by the target for the flow. These
// packets may be generated or forwarded by the target.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "out-octets"
// Path from root: "/flows/flow/state/counters/out-octets"
func (n *Flow_CountersPathAny) OutOctets() *Flow_Counters_OutOctetsPathAny {
	return &Flow_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of packets sent by the target for the flow. These
// packets may be generated or forwarded by the target.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "out-pkts"
// Path from root: "/flows/flow/state/counters/out-pkts"
func (n *Flow_CountersPath) OutPkts() *Flow_Counters_OutPktsPath {
	return &Flow_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of packets sent by the target for the flow. These
// packets may be generated or forwarded by the target.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "out-pkts"
// Path from root: "/flows/flow/state/counters/out-pkts"
func (n *Flow_CountersPathAny) OutPkts() *Flow_Counters_OutPktsPathAny {
	return &Flow_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Flow_EgressTrackingPath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking YANG schema element.
type Flow_EgressTrackingPath struct {
	*ygot.NodePath
}

// Flow_EgressTrackingPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking YANG schema element.
type Flow_EgressTrackingPathAny struct {
	*ygot.NodePath
}

// Flow_EgressTracking_ConvergenceTimePath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/convergence-time YANG schema element.
type Flow_EgressTracking_ConvergenceTimePath struct {
	*ygot.NodePath
}

// Flow_EgressTracking_ConvergenceTimePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/convergence-time YANG schema element.
type Flow_EgressTracking_ConvergenceTimePathAny struct {
	*ygot.NodePath
}

// Flow_EgressTracking_FilterPath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/filter YANG schema element.
type Flow_EgressTracking_FilterPath struct {
	*ygot.NodePath
}

// Flow_EgressTracking_FilterPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/filter YANG schema element.
type Flow_EgressTracking_FilterPathAny struct {
	*ygot.NodePath
}

// Flow_EgressTracking_FirstPacketLatencyPath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/first-packet-latency YANG schema element.
type Flow_EgressTracking_FirstPacketLatencyPath struct {
	*ygot.NodePath
}

// Flow_EgressTracking_FirstPacketLatencyPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/first-packet-latency YANG schema element.
type Flow_EgressTracking_FirstPacketLatencyPathAny struct {
	*ygot.NodePath
}

// Flow_EgressTracking_InFrameRatePath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/in-frame-rate YANG schema element.
type Flow_EgressTracking_InFrameRatePath struct {
	*ygot.NodePath
}

// Flow_EgressTracking_InFrameRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/in-frame-rate YANG schema element.
type Flow_EgressTracking_InFrameRatePathAny struct {
	*ygot.NodePath
}

// Flow_EgressTracking_InRatePath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/in-rate YANG schema element.
type Flow_EgressTracking_InRatePath struct {
	*ygot.NodePath
}

// Flow_EgressTracking_InRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/in-rate YANG schema element.
type Flow_EgressTracking_InRatePathAny struct {
	*ygot.NodePath
}

// Flow_EgressTracking_LossPctPath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/loss-pct YANG schema element.
type Flow_EgressTracking_LossPctPath struct {
	*ygot.NodePath
}

// Flow_EgressTracking_LossPctPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/loss-pct YANG schema element.
type Flow_EgressTracking_LossPctPathAny struct {
	*ygot.NodePath
}

// Flow_EgressTracking_OutFrameRatePath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/out-frame-rate YANG schema element.
type Flow_EgressTracking_OutFrameRatePath struct {
	*ygot.NodePath
}

// Flow_EgressTracking_OutFrameRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/out-frame-rate YANG schema element.
type Flow_EgressTracking_OutFrameRatePathAny struct {
	*ygot.NodePath
}

// Flow_EgressTracking_OutRatePath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/out-rate YANG schema element.
type Flow_EgressTracking_OutRatePath struct {
	*ygot.NodePath
}

// Flow_EgressTracking_OutRatePathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/out-rate YANG schema element.
type Flow_EgressTracking_OutRatePathAny struct {
	*ygot.NodePath
}

// ConvergenceTime (leaf): The time from when the first packet was received to when traffic
// loss dropped below a minimal threshold value.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/convergence-time"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/convergence-time"
func (n *Flow_EgressTrackingPath) ConvergenceTime() *Flow_EgressTracking_ConvergenceTimePath {
	return &Flow_EgressTracking_ConvergenceTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "convergence-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConvergenceTime (leaf): The time from when the first packet was received to when traffic
// loss dropped below a minimal threshold value.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/convergence-time"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/convergence-time"
func (n *Flow_EgressTrackingPathAny) ConvergenceTime() *Flow_EgressTracking_ConvergenceTimePathAny {
	return &Flow_EgressTracking_ConvergenceTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "convergence-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Counters that correspond to the flow by egress tracking filter.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/counters"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/counters"
func (n *Flow_EgressTrackingPath) Counters() *Flow_EgressTracking_CountersPath {
	return &Flow_EgressTracking_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Counters that correspond to the flow by egress tracking filter.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/counters"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/counters"
func (n *Flow_EgressTrackingPathAny) Counters() *Flow_EgressTracking_CountersPathAny {
	return &Flow_EgressTracking_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Filter (leaf): Value of the filter on which the egress stats are tracked
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/filter"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/filter"
func (n *Flow_EgressTrackingPath) Filter() *Flow_EgressTracking_FilterPath {
	return &Flow_EgressTracking_FilterPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "filter"},
			map[string]interface{}{},
			n,
		),
	}
}

// Filter (leaf): Value of the filter on which the egress stats are tracked
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/filter"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/filter"
func (n *Flow_EgressTrackingPathAny) Filter() *Flow_EgressTracking_FilterPathAny {
	return &Flow_EgressTracking_FilterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "filter"},
			map[string]interface{}{},
			n,
		),
	}
}

// FirstPacketLatency (leaf): The time from when the flow was started to when the first packet was
// received.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/first-packet-latency"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/first-packet-latency"
func (n *Flow_EgressTrackingPath) FirstPacketLatency() *Flow_EgressTracking_FirstPacketLatencyPath {
	return &Flow_EgressTracking_FirstPacketLatencyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "first-packet-latency"},
			map[string]interface{}{},
			n,
		),
	}
}

// FirstPacketLatency (leaf): The time from when the flow was started to when the first packet was
// received.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/first-packet-latency"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/first-packet-latency"
func (n *Flow_EgressTrackingPathAny) FirstPacketLatency() *Flow_EgressTracking_FirstPacketLatencyPathAny {
	return &Flow_EgressTracking_FirstPacketLatencyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "first-packet-latency"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// received for the flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/in-frame-rate"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/in-frame-rate"
func (n *Flow_EgressTrackingPath) InFrameRate() *Flow_EgressTracking_InFrameRatePath {
	return &Flow_EgressTracking_InFrameRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-frame-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// received for the flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/in-frame-rate"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/in-frame-rate"
func (n *Flow_EgressTrackingPathAny) InFrameRate() *Flow_EgressTracking_InFrameRatePathAny {
	return &Flow_EgressTracking_InFrameRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-frame-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// InRate (leaf): The rate, measured in bits per second, at which the flow is being
// received.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/in-rate"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/in-rate"
func (n *Flow_EgressTrackingPath) InRate() *Flow_EgressTracking_InRatePath {
	return &Flow_EgressTracking_InRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// InRate (leaf): The rate, measured in bits per second, at which the flow is being
// received.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/in-rate"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/in-rate"
func (n *Flow_EgressTrackingPathAny) InRate() *Flow_EgressTracking_InRatePathAny {
	return &Flow_EgressTracking_InRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// LossPct (leaf): The percentage of transmitted packets that were not received by the
// destinations of the flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/loss-pct"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/loss-pct"
func (n *Flow_EgressTrackingPath) LossPct() *Flow_EgressTracking_LossPctPath {
	return &Flow_EgressTracking_LossPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "loss-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// LossPct (leaf): The percentage of transmitted packets that were not received by the
// destinations of the flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/loss-pct"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/loss-pct"
func (n *Flow_EgressTrackingPathAny) LossPct() *Flow_EgressTracking_LossPctPathAny {
	return &Flow_EgressTracking_LossPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "loss-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// transmitted for the flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/out-frame-rate"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/out-frame-rate"
func (n *Flow_EgressTrackingPath) OutFrameRate() *Flow_EgressTracking_OutFrameRatePath {
	return &Flow_EgressTracking_OutFrameRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-frame-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// transmitted for the flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/out-frame-rate"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/out-frame-rate"
func (n *Flow_EgressTrackingPathAny) OutFrameRate() *Flow_EgressTracking_OutFrameRatePathAny {
	return &Flow_EgressTracking_OutFrameRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-frame-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutRate (leaf): The rate, measured in bits per second, at which the flow is being
// transmitted.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/out-rate"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/out-rate"
func (n *Flow_EgressTrackingPath) OutRate() *Flow_EgressTracking_OutRatePath {
	return &Flow_EgressTracking_OutRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutRate (leaf): The rate, measured in bits per second, at which the flow is being
// transmitted.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "state/out-rate"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/out-rate"
func (n *Flow_EgressTrackingPathAny) OutRate() *Flow_EgressTracking_OutRatePathAny {
	return &Flow_EgressTracking_OutRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// Flow_EgressTracking_CountersPath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/counters YANG schema element.
type Flow_EgressTracking_CountersPath struct {
	*ygot.NodePath
}

// Flow_EgressTracking_CountersPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/counters YANG schema element.
type Flow_EgressTracking_CountersPathAny struct {
	*ygot.NodePath
}

// Flow_EgressTracking_Counters_InOctetsPath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/counters/in-octets YANG schema element.
type Flow_EgressTracking_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Flow_EgressTracking_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/counters/in-octets YANG schema element.
type Flow_EgressTracking_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Flow_EgressTracking_Counters_InPktsPath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/counters/in-pkts YANG schema element.
type Flow_EgressTracking_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Flow_EgressTracking_Counters_InPktsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/counters/in-pkts YANG schema element.
type Flow_EgressTracking_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Flow_EgressTracking_Counters_OutOctetsPath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/counters/out-octets YANG schema element.
type Flow_EgressTracking_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Flow_EgressTracking_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/counters/out-octets YANG schema element.
type Flow_EgressTracking_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Flow_EgressTracking_Counters_OutPktsPath represents the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/counters/out-pkts YANG schema element.
type Flow_EgressTracking_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Flow_EgressTracking_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-ate-flow/flows/flow/egress-tracking/egress-tracking/state/counters/out-pkts YANG schema element.
type Flow_EgressTracking_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// InOctets (leaf): The total number of bytes received by the target for the flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "in-octets"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/counters/in-octets"
func (n *Flow_EgressTracking_CountersPath) InOctets() *Flow_EgressTracking_Counters_InOctetsPath {
	return &Flow_EgressTracking_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of bytes received by the target for the flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "in-octets"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/counters/in-octets"
func (n *Flow_EgressTracking_CountersPathAny) InOctets() *Flow_EgressTracking_Counters_InOctetsPathAny {
	return &Flow_EgressTracking_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of packets received by the target for the flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "in-pkts"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/counters/in-pkts"
func (n *Flow_EgressTracking_CountersPath) InPkts() *Flow_EgressTracking_Counters_InPktsPath {
	return &Flow_EgressTracking_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of packets received by the target for the flow.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "in-pkts"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/counters/in-pkts"
func (n *Flow_EgressTracking_CountersPathAny) InPkts() *Flow_EgressTracking_Counters_InPktsPathAny {
	return &Flow_EgressTracking_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of bytes sent by the target for the flow. These
// packets may be generated or forwarded by the target.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "out-octets"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/counters/out-octets"
func (n *Flow_EgressTracking_CountersPath) OutOctets() *Flow_EgressTracking_Counters_OutOctetsPath {
	return &Flow_EgressTracking_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of bytes sent by the target for the flow. These
// packets may be generated or forwarded by the target.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "out-octets"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/counters/out-octets"
func (n *Flow_EgressTracking_CountersPathAny) OutOctets() *Flow_EgressTracking_Counters_OutOctetsPathAny {
	return &Flow_EgressTracking_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of packets sent by the target for the flow. These
// packets may be generated or forwarded by the target.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "out-pkts"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/counters/out-pkts"
func (n *Flow_EgressTracking_CountersPath) OutPkts() *Flow_EgressTracking_Counters_OutPktsPath {
	return &Flow_EgressTracking_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of packets sent by the target for the flow. These
// packets may be generated or forwarded by the target.
// ----------------------------------------
// Defining module: "openconfig-ate-flow"
// Instantiating module: "openconfig-ate-flow"
// Path from parent: "out-pkts"
// Path from root: "/flows/flow/egress-tracking/egress-tracking/state/counters/out-pkts"
func (n *Flow_EgressTracking_CountersPathAny) OutPkts() *Flow_EgressTracking_Counters_OutPktsPathAny {
	return &Flow_EgressTracking_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

/*
Package system is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/alexmasi/go/pkg/mod/github.com/openconfig/ygot@v0.23.1/genutil/names.go
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package system

import (
	oc "github.com/openconfig/ondatra/telemetry"
	"github.com/openconfig/ygot/ygot"
)

// System_Cpu_WaitPath represents the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type System_Cpu_WaitPath struct {
	*ygot.NodePath
}

// System_Cpu_WaitPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type System_Cpu_WaitPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_AvgPath represents the /openconfig-system/system/cpus/cpu/state/wait/avg YANG schema element.
type System_Cpu_Wait_AvgPath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/avg YANG schema element.
type System_Cpu_Wait_AvgPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_InstantPath represents the /openconfig-system/system/cpus/cpu/state/wait/instant YANG schema element.
type System_Cpu_Wait_InstantPath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/instant YANG schema element.
type System_Cpu_Wait_InstantPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/wait/interval YANG schema element.
type System_Cpu_Wait_IntervalPath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/interval YANG schema element.
type System_Cpu_Wait_IntervalPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MaxPath represents the /openconfig-system/system/cpus/cpu/state/wait/max YANG schema element.
type System_Cpu_Wait_MaxPath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/max YANG schema element.
type System_Cpu_Wait_MaxPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/wait/max-time YANG schema element.
type System_Cpu_Wait_MaxTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/max-time YANG schema element.
type System_Cpu_Wait_MaxTimePathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MinPath represents the /openconfig-system/system/cpus/cpu/state/wait/min YANG schema element.
type System_Cpu_Wait_MinPath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/min YANG schema element.
type System_Cpu_Wait_MinPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/wait/min-time YANG schema element.
type System_Cpu_Wait_MinTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/min-time YANG schema element.
type System_Cpu_Wait_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/wait/avg"
func (n *System_Cpu_WaitPath) Avg() *System_Cpu_Wait_AvgPath {
	return &System_Cpu_Wait_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/wait/avg"
func (n *System_Cpu_WaitPathAny) Avg() *System_Cpu_Wait_AvgPathAny {
	return &System_Cpu_Wait_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/wait/instant"
func (n *System_Cpu_WaitPath) Instant() *System_Cpu_Wait_InstantPath {
	return &System_Cpu_Wait_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/wait/instant"
func (n *System_Cpu_WaitPathAny) Instant() *System_Cpu_Wait_InstantPathAny {
	return &System_Cpu_Wait_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/wait/interval"
func (n *System_Cpu_WaitPath) Interval() *System_Cpu_Wait_IntervalPath {
	return &System_Cpu_Wait_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/wait/interval"
func (n *System_Cpu_WaitPathAny) Interval() *System_Cpu_Wait_IntervalPathAny {
	return &System_Cpu_Wait_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/wait/max"
func (n *System_Cpu_WaitPath) Max() *System_Cpu_Wait_MaxPath {
	return &System_Cpu_Wait_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/wait/max"
func (n *System_Cpu_WaitPathAny) Max() *System_Cpu_Wait_MaxPathAny {
	return &System_Cpu_Wait_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/wait/max-time"
func (n *System_Cpu_WaitPath) MaxTime() *System_Cpu_Wait_MaxTimePath {
	return &System_Cpu_Wait_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/wait/max-time"
func (n *System_Cpu_WaitPathAny) MaxTime() *System_Cpu_Wait_MaxTimePathAny {
	return &System_Cpu_Wait_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/wait/min"
func (n *System_Cpu_WaitPath) Min() *System_Cpu_Wait_MinPath {
	return &System_Cpu_Wait_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/wait/min"
func (n *System_Cpu_WaitPathAny) Min() *System_Cpu_Wait_MinPathAny {
	return &System_Cpu_Wait_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/wait/min-time"
func (n *System_Cpu_WaitPath) MinTime() *System_Cpu_Wait_MinTimePath {
	return &System_Cpu_Wait_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/wait/min-time"
func (n *System_Cpu_WaitPathAny) MinTime() *System_Cpu_Wait_MinTimePathAny {
	return &System_Cpu_Wait_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_DnsPath represents the /openconfig-system/system/dns YANG schema element.
type System_DnsPath struct {
	*ygot.NodePath
}

// System_DnsPathAny represents the wildcard version of the /openconfig-system/system/dns YANG schema element.
type System_DnsPathAny struct {
	*ygot.NodePath
}

// System_Dns_SearchPath represents the /openconfig-system/system/dns/state/search YANG schema element.
type System_Dns_SearchPath struct {
	*ygot.NodePath
}

// System_Dns_SearchPathAny represents the wildcard version of the /openconfig-system/system/dns/state/search YANG schema element.
type System_Dns_SearchPathAny struct {
	*ygot.NodePath
}

// HostEntryAny (list): List of static host entries
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "host-entries/host-entry"
// Path from root: "/system/dns/host-entries/host-entry"
// Hostname (wildcarded): string
func (n *System_DnsPath) HostEntryAny() *System_Dns_HostEntryPathAny {
	return &System_Dns_HostEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": "*"},
			n,
		),
	}
}

// HostEntryAny (list): List of static host entries
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "host-entries/host-entry"
// Path from root: "/system/dns/host-entries/host-entry"
// Hostname (wildcarded): string
func (n *System_DnsPathAny) HostEntryAny() *System_Dns_HostEntryPathAny {
	return &System_Dns_HostEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": "*"},
			n,
		),
	}
}

// HostEntry (list): List of static host entries
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "host-entries/host-entry"
// Path from root: "/system/dns/host-entries/host-entry"
// Hostname: string
func (n *System_DnsPath) HostEntry(Hostname string) *System_Dns_HostEntryPath {
	return &System_Dns_HostEntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": Hostname},
			n,
		),
	}
}

// HostEntry (list): List of static host entries
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "host-entries/host-entry"
// Path from root: "/system/dns/host-entries/host-entry"
// Hostname: string
func (n *System_DnsPathAny) HostEntry(Hostname string) *System_Dns_HostEntryPathAny {
	return &System_Dns_HostEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": Hostname},
			n,
		),
	}
}

// Search (leaf-list): An ordered list of domains to search when resolving
// a host name.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/search"
// Path from root: "/system/dns/state/search"
func (n *System_DnsPath) Search() *System_Dns_SearchPath {
	return &System_Dns_SearchPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "search"},
			map[string]interface{}{},
			n,
		),
	}
}

// Search (leaf-list): An ordered list of domains to search when resolving
// a host name.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/search"
// Path from root: "/system/dns/state/search"
func (n *System_DnsPathAny) Search() *System_Dns_SearchPathAny {
	return &System_Dns_SearchPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "search"},
			map[string]interface{}{},
			n,
		),
	}
}

// ServerAny (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/dns/servers/server"
// Address (wildcarded): string
func (n *System_DnsPath) ServerAny() *System_Dns_ServerPathAny {
	return &System_Dns_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// ServerAny (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/dns/servers/server"
// Address (wildcarded): string
func (n *System_DnsPathAny) ServerAny() *System_Dns_ServerPathAny {
	return &System_Dns_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// Server (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/dns/servers/server"
// Address: string
func (n *System_DnsPath) Server(Address string) *System_Dns_ServerPath {
	return &System_Dns_ServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// Server (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/dns/servers/server"
// Address: string
func (n *System_DnsPathAny) Server(Address string) *System_Dns_ServerPathAny {
	return &System_Dns_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// System_Dns_HostEntryPath represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPath struct {
	*ygot.NodePath
}

// System_Dns_HostEntryPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPathAny struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_AliasPath represents the /openconfig-system/system/dns/host-entries/host-entry/state/alias YANG schema element.
type System_Dns_HostEntry_AliasPath struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_AliasPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/alias YANG schema element.
type System_Dns_HostEntry_AliasPathAny struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_HostnamePath represents the /openconfig-system/system/dns/host-entries/host-entry/state/hostname YANG schema element.
type System_Dns_HostEntry_HostnamePath struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_HostnamePathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/hostname YANG schema element.
type System_Dns_HostEntry_HostnamePathAny struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_Ipv4AddressPath represents the /openconfig-system/system/dns/host-entries/host-entry/state/ipv4-address YANG schema element.
type System_Dns_HostEntry_Ipv4AddressPath struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_Ipv4AddressPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/ipv4-address YANG schema element.
type System_Dns_HostEntry_Ipv4AddressPathAny struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_Ipv6AddressPath represents the /openconfig-system/system/dns/host-entries/host-entry/state/ipv6-address YANG schema element.
type System_Dns_HostEntry_Ipv6AddressPath struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_Ipv6AddressPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/ipv6-address YANG schema element.
type System_Dns_HostEntry_Ipv6AddressPathAny struct {
	*ygot.NodePath
}

// Alias (leaf-list): Additional aliases for the hostname
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/alias"
// Path from root: "/system/dns/host-entries/host-entry/state/alias"
func (n *System_Dns_HostEntryPath) Alias() *System_Dns_HostEntry_AliasPath {
	return &System_Dns_HostEntry_AliasPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "alias"},
			map[string]interface{}{},
			n,
		),
	}
}

// Alias (leaf-list): Additional aliases for the hostname
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/alias"
// Path from root: "/system/dns/host-entries/host-entry/state/alias"
func (n *System_Dns_HostEntryPathAny) Alias() *System_Dns_HostEntry_AliasPathAny {
	return &System_Dns_HostEntry_AliasPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "alias"},
			map[string]interface{}{},
			n,
		),
	}
}

// Hostname (leaf): Hostname for the static DNS entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/hostname"
// Path from root: "/system/dns/host-entries/host-entry/state/hostname"
func (n *System_Dns_HostEntryPath) Hostname() *System_Dns_HostEntry_HostnamePath {
	return &System_Dns_HostEntry_HostnamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hostname"},
			map[string]interface{}{},
			n,
		),
	}
}

// Hostname (leaf): Hostname for the static DNS entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/hostname"
// Path from root: "/system/dns/host-entries/host-entry/state/hostname"
func (n *System_Dns_HostEntryPathAny) Hostname() *System_Dns_HostEntry_HostnamePathAny {
	return &System_Dns_HostEntry_HostnamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hostname"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4Address (leaf-list): List of IPv4 addresses for the host entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/ipv4-address"
// Path from root: "/system/dns/host-entries/host-entry/state/ipv4-address"
func (n *System_Dns_HostEntryPath) Ipv4Address() *System_Dns_HostEntry_Ipv4AddressPath {
	return &System_Dns_HostEntry_Ipv4AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ipv4-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4Address (leaf-list): List of IPv4 addresses for the host entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/ipv4-address"
// Path from root: "/system/dns/host-entries/host-entry/state/ipv4-address"
func (n *System_Dns_HostEntryPathAny) Ipv4Address() *System_Dns_HostEntry_Ipv4AddressPathAny {
	return &System_Dns_HostEntry_Ipv4AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ipv4-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6Address (leaf-list): List of IPv6 addresses for the host entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/ipv6-address"
// Path from root: "/system/dns/host-entries/host-entry/state/ipv6-address"
func (n *System_Dns_HostEntryPath) Ipv6Address() *System_Dns_HostEntry_Ipv6AddressPath {
	return &System_Dns_HostEntry_Ipv6AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ipv6-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6Address (leaf-list): List of IPv6 addresses for the host entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/ipv6-address"
// Path from root: "/system/dns/host-entries/host-entry/state/ipv6-address"
func (n *System_Dns_HostEntryPathAny) Ipv6Address() *System_Dns_HostEntry_Ipv6AddressPathAny {
	return &System_Dns_HostEntry_Ipv6AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ipv6-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Dns_ServerPath represents the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPath struct {
	*ygot.NodePath
}

// System_Dns_ServerPathAny represents the wildcard version of the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPathAny struct {
	*ygot.NodePath
}

// System_Dns_Server_AddressPath represents the /openconfig-system/system/dns/servers/server/state/address YANG schema element.
type System_Dns_Server_AddressPath struct {
	*ygot.NodePath
}

// System_Dns_Server_AddressPathAny represents the wildcard version of the /openconfig-system/system/dns/servers/server/state/address YANG schema element.
type System_Dns_Server_AddressPathAny struct {
	*ygot.NodePath
}

// System_Dns_Server_PortPath represents the /openconfig-system/system/dns/servers/server/state/port YANG schema element.
type System_Dns_Server_PortPath struct {
	*ygot.NodePath
}

// System_Dns_Server_PortPathAny represents the wildcard version of the /openconfig-system/system/dns/servers/server/state/port YANG schema element.
type System_Dns_Server_PortPathAny struct {
	*ygot.NodePath
}

// Address (leaf): The address of the DNS server, can be either IPv4
// or IPv6.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/address"
// Path from root: "/system/dns/servers/server/state/address"
func (n *System_Dns_ServerPath) Address() *System_Dns_Server_AddressPath {
	return &System_Dns_Server_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): The address of the DNS server, can be either IPv4
// or IPv6.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/address"
// Path from root: "/system/dns/servers/server/state/address"
func (n *System_Dns_ServerPathAny) Address() *System_Dns_Server_AddressPathAny {
	return &System_Dns_Server_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number of the DNS server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/port"
// Path from root: "/system/dns/servers/server/state/port"
func (n *System_Dns_ServerPath) Port() *System_Dns_Server_PortPath {
	return &System_Dns_Server_PortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number of the DNS server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/port"
// Path from root: "/system/dns/servers/server/state/port"
func (n *System_Dns_ServerPathAny) Port() *System_Dns_Server_PortPathAny {
	return &System_Dns_Server_PortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_GrpcServerPath represents the /openconfig-system/system/grpc-servers/grpc-server YANG schema element.
type System_GrpcServerPath struct {
	*ygot.NodePath
}

// System_GrpcServerPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server YANG schema element.
type System_GrpcServerPathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_CertificateIdPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-id YANG schema element.
type System_GrpcServer_CertificateIdPath struct {
	*ygot.NodePath
}

// System_GrpcServer_CertificateIdPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-id YANG schema element.
type System_GrpcServer_CertificateIdPathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_EnablePath represents the /openconfig-system/system/grpc-servers/grpc-server/state/enable YANG schema element.
type System_GrpcServer_EnablePath struct {
	*ygot.NodePath
}

// System_GrpcServer_EnablePathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/enable YANG schema element.
type System_GrpcServer_EnablePathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_ListenAddressesPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/listen-addresses YANG schema element.
type System_GrpcServer_ListenAddressesPath struct {
	*ygot.NodePath
}

// System_GrpcServer_ListenAddressesPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/listen-addresses YANG schema element.
type System_GrpcServer_ListenAddressesPathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_MetadataAuthenticationPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/metadata-authentication YANG schema element.
type System_GrpcServer_MetadataAuthenticationPath struct {
	*ygot.NodePath
}

// System_GrpcServer_MetadataAuthenticationPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/metadata-authentication YANG schema element.
type System_GrpcServer_MetadataAuthenticationPathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_NamePath represents the /openconfig-system/system/grpc-servers/grpc-server/state/name YANG schema element.
type System_GrpcServer_NamePath struct {
	*ygot.NodePath
}

// System_GrpcServer_NamePathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/name YANG schema element.
type System_GrpcServer_NamePathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_NetworkInstancePath represents the /openconfig-system/system/grpc-servers/grpc-server/state/network-instance YANG schema element.
type System_GrpcServer_NetworkInstancePath struct {
	*ygot.NodePath
}

// System_GrpcServer_NetworkInstancePathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/network-instance YANG schema element.
type System_GrpcServer_NetworkInstancePathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_PortPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/port YANG schema element.
type System_GrpcServer_PortPath struct {
	*ygot.NodePath
}

// System_GrpcServer_PortPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/port YANG schema element.
type System_GrpcServer_PortPathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_ServicesPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/services YANG schema element.
type System_GrpcServer_ServicesPath struct {
	*ygot.NodePath
}

// System_GrpcServer_ServicesPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/services YANG schema element.
type System_GrpcServer_ServicesPathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_TransportSecurityPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/transport-security YANG schema element.
type System_GrpcServer_TransportSecurityPath struct {
	*ygot.NodePath
}

// System_GrpcServer_TransportSecurityPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/transport-security YANG schema element.
type System_GrpcServer_TransportSecurityPathAny struct {
	*ygot.NodePath
}

// CertificateId (leaf): Name of the certificate that is associated with the gRPC service. The
// certificate ID is provisioned through other interfaces to the device, such
// as the gNOI certificate management service.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "state/certificate-id"
// Path from root: "/system/grpc-servers/grpc-server/state/certificate-id"
func (n *System_GrpcServerPath) CertificateId() *System_GrpcServer_CertificateIdPath {
	return &System_GrpcServer_CertificateIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "certificate-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// CertificateId (leaf): Name of the certificate that is associated with the gRPC service. The
// certificate ID is provisioned through other interfaces to the device, such
// as the gNOI certificate management service.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "state/certificate-id"
// Path from root: "/system/grpc-servers/grpc-server/state/certificate-id"
func (n *System_GrpcServerPathAny) CertificateId() *System_GrpcServer_CertificateIdPathAny {
	return &System_GrpcServer_CertificateIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "certificate-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): When set to true, the gRPC server is enabled and runs on the
// local device.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enable"
// Path from root: "/system/grpc-servers/grpc-server/state/enable"
func (n *System_GrpcServerPath) Enable() *System_GrpcServer_EnablePath {
	return &System_GrpcServer_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): When set to true, the gRPC server is enabled and runs on the
// local device.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enable"
// Path from root: "/system/grpc-servers/grpc-server/state/enable"
func (n *System_GrpcServerPathAny) Enable() *System_GrpcServer_EnablePathAny {
	return &System_GrpcServer_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// ListenAddresses (leaf-list): The IP addresses that the gRPC server should listen on. This may be
// an IPv4 or an IPv6 address (or both).
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "state/listen-addresses"
// Path from root: "/system/grpc-servers/grpc-server/state/listen-addresses"
func (n *System_GrpcServerPath) ListenAddresses() *System_GrpcServer_ListenAddressesPath {
	return &System_GrpcServer_ListenAddressesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "listen-addresses"},
			map[string]interface{}{},
			n,
		),
	}
}

// ListenAddresses (leaf-list): The IP addresses that the gRPC server should listen on. This may be
// an IPv4 or an IPv6 address (or both).
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "state/listen-addresses"
// Path from root: "/system/grpc-servers/grpc-server/state/listen-addresses"
func (n *System_GrpcServerPathAny) ListenAddresses() *System_GrpcServer_ListenAddressesPathAny {
	return &System_GrpcServer_ListenAddressesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "listen-addresses"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetadataAuthentication (leaf): When set to true, metadata authentication is enabled for the gRPC server.
// In this mode of operation, gRPC metadata is used to carry authentication
// credentials as per the specification in
// https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-authentication.md#credentials-and-authentication.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "state/metadata-authentication"
// Path from root: "/system/grpc-servers/grpc-server/state/metadata-authentication"
func (n *System_GrpcServerPath) MetadataAuthentication() *System_GrpcServer_MetadataAuthenticationPath {
	return &System_GrpcServer_MetadataAuthenticationPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "metadata-authentication"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetadataAuthentication (leaf): When set to true, metadata authentication is enabled for the gRPC server.
// In this mode of operation, gRPC metadata is used to carry authentication
// credentials as per the specification in
// https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-authentication.md#credentials-and-authentication.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "state/metadata-authentication"
// Path from root: "/system/grpc-servers/grpc-server/state/metadata-authentication"
func (n *System_GrpcServerPathAny) MetadataAuthentication() *System_GrpcServer_MetadataAuthenticationPathAny {
	return &System_GrpcServer_MetadataAuthenticationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "metadata-authentication"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The name of the gRPC server instance that is running on
// the local system.
//
// If the operator does not designate a name for the protocol
// instance (e.g. config), the implementation should use the
// name of 'DEFAULT' (e.g. state).  In addition, for
// implementations that support a single gRPC server instance,
// the default value is recommended for consistency.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "state/name"
// Path from root: "/system/grpc-servers/grpc-server/state/name"
func (n *System_GrpcServerPath) Name() *System_GrpcServer_NamePath {
	return &System_GrpcServer_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The name of the gRPC server instance that is running on
// the local system.
//
// If the operator does not designate a name for the protocol
// instance (e.g. config), the implementation should use the
// name of 'DEFAULT' (e.g. state).  In addition, for
// implementations that support a single gRPC server instance,
// the default value is recommended for consistency.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "state/name"
// Path from root: "/system/grpc-servers/grpc-server/state/name"
func (n *System_GrpcServerPathAny) Name() *System_GrpcServer_NamePathAny {
	return &System_GrpcServer_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance (leaf): The network instance within which the gRPC server is listening.
// When unspecified, the DEFAULT_INSTANCE should be used.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "state/network-instance"
// Path from root: "/system/grpc-servers/grpc-server/state/network-instance"
func (n *System_GrpcServerPath) NetworkInstance() *System_GrpcServer_NetworkInstancePath {
	return &System_GrpcServer_NetworkInstancePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "network-instance"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance (leaf): The network instance within which the gRPC server is listening.
// When unspecified, the DEFAULT_INSTANCE should be used.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "state/network-instance"
// Path from root: "/system/grpc-servers/grpc-server/state/network-instance"
func (n *System_GrpcServerPathAny) NetworkInstance() *System_GrpcServer_NetworkInstancePathAny {
	return &System_GrpcServer_NetworkInstancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "network-instance"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): TCP port on which the gRPC server should listen.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "state/port"
// Path from root: "/system/grpc-servers/grpc-server/state/port"
func (n *System_GrpcServerPath) Port() *System_GrpcServer_PortPath {
	return &System_GrpcServer_PortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): TCP port on which the gRPC server should listen.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "state/port"
// Path from root: "/system/grpc-servers/grpc-server/state/port"
func (n *System_GrpcServerPathAny) Port() *System_GrpcServer_PortPathAny {
	return &System_GrpcServer_PortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Services (leaf-list): The gRPC service definitions that should be enabled for the
// specified server. A target may support only specific
// sets of services being enabled on the same server (e.g.,
// it may be possible to run gNMI and gNOI services on the same
// port, but not to run gRIBI and gNMI on the same port).
//
// The set of gRPC services that are available to be configured is
// defined through the GRPC_SERVICE identity, which can be extended
// for each protocol that is based on gRPC that is available on the
// device.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "state/services"
// Path from root: "/system/grpc-servers/grpc-server/state/services"
func (n *System_GrpcServerPath) Services() *System_GrpcServer_ServicesPath {
	return &System_GrpcServer_ServicesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "services"},
			map[string]interface{}{},
			n,
		),
	}
}

// Services (leaf-list): The gRPC service definitions that should be enabled for the
// specified server. A target may support only specific
// sets of services being enabled on the same server (e.g.,
// it may be possible to run gNMI and gNOI services on the same
// port, but not to run gRIBI and gNMI on the same port).
//
// The set of gRPC services that are available to be configured is
// defined through the GRPC_SERVICE identity, which can be extended
// for each protocol that is based on gRPC that is available on the
// device.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "state/services"
// Path from root: "/system/grpc-servers/grpc-server/state/services"
func (n *System_GrpcServerPathAny) Services() *System_GrpcServer_ServicesPathAny {
	return &System_GrpcServer_ServicesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "services"},
			map[string]interface{}{},
			n,
		),
	}
}

// TransportSecurity (leaf): Use gRPC transport security (e.g., SSL or TLS). Enabled by default.
// This leaf allows transport security to be disabled for use cases that
// are not supported, such as lab testing.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "state/transport-security"
// Path from root: "/system/grpc-servers/grpc-server/state/transport-security"
func (n *System_GrpcServerPath) TransportSecurity() *System_GrpcServer_TransportSecurityPath {
	return &System_GrpcServer_TransportSecurityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "transport-security"},
			map[string]interface{}{},
			n,
		),
	}
}

// TransportSecurity (leaf): Use gRPC transport security (e.g., SSL or TLS). Enabled by default.
// This leaf allows transport security to be disabled for use cases that
// are not supported, such as lab testing.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "state/transport-security"
// Path from root: "/system/grpc-servers/grpc-server/state/transport-security"
func (n *System_GrpcServerPathAny) TransportSecurity() *System_GrpcServer_TransportSecurityPathAny {
	return &System_GrpcServer_TransportSecurityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "transport-security"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_LicensePath represents the /openconfig-system/system/license YANG schema element.
type System_LicensePath struct {
	*ygot.NodePath
}

// System_LicensePathAny represents the wildcard version of the /openconfig-system/system/license YANG schema element.
type System_LicensePathAny struct {
	*ygot.NodePath
}

// LicenseAny (list): List of licenses.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "licenses/license"
// Path from root: "/system/license/licenses/license"
// LicenseId (wildcarded): string
func (n *System_LicensePath) LicenseAny() *System_License_LicensePathAny {
	return &System_License_LicensePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": "*"},
			n,
		),
	}
}

// LicenseAny (list): List of licenses.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "licenses/license"
// Path from root: "/system/license/licenses/license"
// LicenseId (wildcarded): string
func (n *System_LicensePathAny) LicenseAny() *System_License_LicensePathAny {
	return &System_License_LicensePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": "*"},
			n,
		),
	}
}

// License (list): List of licenses.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "licenses/license"
// Path from root: "/system/license/licenses/license"
// LicenseId: string
func (n *System_LicensePath) License(LicenseId string) *System_License_LicensePath {
	return &System_License_LicensePath{
		NodePath: ygot.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": LicenseId},
			n,
		),
	}
}

// License (list): List of licenses.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "licenses/license"
// Path from root: "/system/license/licenses/license"
// LicenseId: string
func (n *System_LicensePathAny) License(LicenseId string) *System_License_LicensePathAny {
	return &System_License_LicensePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": LicenseId},
			n,
		),
	}
}

// System_License_LicensePath represents the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePath struct {
	*ygot.NodePath
}

// System_License_LicensePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePathAny struct {
	*ygot.NodePath
}

// System_License_License_ActivePath represents the /openconfig-system/system/license/licenses/license/state/active YANG schema element.
type System_License_License_ActivePath struct {
	*ygot.NodePath
}

// System_License_License_ActivePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/active YANG schema element.
type System_License_License_ActivePathAny struct {
	*ygot.NodePath
}

// System_License_License_DescriptionPath represents the /openconfig-system/system/license/licenses/license/state/description YANG schema element.
type System_License_License_DescriptionPath struct {
	*ygot.NodePath
}

// System_License_License_DescriptionPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/description YANG schema element.
type System_License_License_DescriptionPathAny struct {
	*ygot.NodePath
}

// System_License_License_ExpirationDatePath represents the /openconfig-system/system/license/licenses/license/state/expiration-date YANG schema element.
type System_License_License_ExpirationDatePath struct {
	*ygot.NodePath
}

// System_License_License_ExpirationDatePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/expiration-date YANG schema element.
type System_License_License_ExpirationDatePathAny struct {
	*ygot.NodePath
}

// System_License_License_ExpiredPath represents the /openconfig-system/system/license/licenses/license/state/expired YANG schema element.
type System_License_License_ExpiredPath struct {
	*ygot.NodePath
}

// System_License_License_ExpiredPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/expired YANG schema element.
type System_License_License_ExpiredPathAny struct {
	*ygot.NodePath
}

// System_License_License_InUsePath represents the /openconfig-system/system/license/licenses/license/state/in-use YANG schema element.
type System_License_License_InUsePath struct {
	*ygot.NodePath
}

// System_License_License_InUsePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/in-use YANG schema element.
type System_License_License_InUsePathAny struct {
	*ygot.NodePath
}

// System_License_License_IssueDatePath represents the /openconfig-system/system/license/licenses/license/state/issue-date YANG schema element.
type System_License_License_IssueDatePath struct {
	*ygot.NodePath
}

// System_License_License_IssueDatePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/issue-date YANG schema element.
type System_License_License_IssueDatePathAny struct {
	*ygot.NodePath
}

// System_License_License_LicenseDataPath represents the /openconfig-system/system/license/licenses/license/state/license-data YANG schema element.
type System_License_License_LicenseDataPath struct {
	*ygot.NodePath
}

// System_License_License_LicenseDataPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/license-data YANG schema element.
type System_License_License_LicenseDataPathAny struct {
	*ygot.NodePath
}

// System_License_License_LicenseIdPath represents the /openconfig-system/system/license/licenses/license/state/license-id YANG schema element.
type System_License_License_LicenseIdPath struct {
	*ygot.NodePath
}

// System_License_License_LicenseIdPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/license-id YANG schema element.
type System_License_License_LicenseIdPathAny struct {
	*ygot.NodePath
}

// System_License_License_ValidPath represents the /openconfig-system/system/license/licenses/license/state/valid YANG schema element.
type System_License_License_ValidPath struct {
	*ygot.NodePath
}

// System_License_License_ValidPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/valid YANG schema element.
type System_License_License_ValidPathAny struct {
	*ygot.NodePath
}

// Active (leaf): The activation state of the license.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/active"
// Path from root: "/system/license/licenses/license/state/active"
func (n *System_License_LicensePath) Active() *System_License_License_ActivePath {
	return &System_License_License_ActivePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// Active (leaf): The activation state of the license.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/active"
// Path from root: "/system/license/licenses/license/state/active"
func (n *System_License_LicensePathAny) Active() *System_License_License_ActivePathAny {
	return &System_License_License_ActivePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): The license description.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/description"
// Path from root: "/system/license/licenses/license/state/description"
func (n *System_License_LicensePath) Description() *System_License_License_DescriptionPath {
	return &System_License_License_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): The license description.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/description"
// Path from root: "/system/license/licenses/license/state/description"
func (n *System_License_LicensePathAny) Description() *System_License_License_DescriptionPathAny {
	return &System_License_License_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExpirationDate (leaf): The date and time at which the license will expire, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC). Zero if it does not expire.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/expiration-date"
// Path from root: "/system/license/licenses/license/state/expiration-date"
func (n *System_License_LicensePath) ExpirationDate() *System_License_License_ExpirationDatePath {
	return &System_License_License_ExpirationDatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "expiration-date"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExpirationDate (leaf): The date and time at which the license will expire, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC). Zero if it does not expire.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/expiration-date"
// Path from root: "/system/license/licenses/license/state/expiration-date"
func (n *System_License_LicensePathAny) ExpirationDate() *System_License_License_ExpirationDatePathAny {
	return &System_License_License_ExpirationDatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "expiration-date"},
			map[string]interface{}{},
			n,
		),
	}
}

// Expired (leaf): The license has expired.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/expired"
// Path from root: "/system/license/licenses/license/state/expired"
func (n *System_License_LicensePath) Expired() *System_License_License_ExpiredPath {
	return &System_License_License_ExpiredPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "expired"},
			map[string]interface{}{},
			n,
		),
	}
}

// Expired (leaf): The license has expired.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/expired"
// Path from root: "/system/license/licenses/license/state/expired"
func (n *System_License_LicensePathAny) Expired() *System_License_License_ExpiredPathAny {
	return &System_License_License_ExpiredPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "expired"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUse (leaf): The license is in use. Different from active. This states that the
// license is effectively being used in addition to being active. If
// license for feature X was activated but feature X is not being used,
// then this should be false.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/in-use"
// Path from root: "/system/license/licenses/license/state/in-use"
func (n *System_License_LicensePath) InUse() *System_License_License_InUsePath {
	return &System_License_License_InUsePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-use"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUse (leaf): The license is in use. Different from active. This states that the
// license is effectively being used in addition to being active. If
// license for feature X was activated but feature X is not being used,
// then this should be false.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/in-use"
// Path from root: "/system/license/licenses/license/state/in-use"
func (n *System_License_LicensePathAny) InUse() *System_License_License_InUsePathAny {
	return &System_License_License_InUsePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-use"},
			map[string]interface{}{},
			n,
		),
	}
}

// IssueDate (leaf): The date and time at which the license was issued, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/issue-date"
// Path from root: "/system/license/licenses/license/state/issue-date"
func (n *System_License_LicensePath) IssueDate() *System_License_License_IssueDatePath {
	return &System_License_License_IssueDatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "issue-date"},
			map[string]interface{}{},
			n,
		),
	}
}

// IssueDate (leaf): The date and time at which the license was issued, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/issue-date"
// Path from root: "/system/license/licenses/license/state/issue-date"
func (n *System_License_LicensePathAny) IssueDate() *System_License_License_IssueDatePathAny {
	return &System_License_License_IssueDatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "issue-date"},
			map[string]interface{}{},
			n,
		),
	}
}

// LicenseData (leaf): The contents of the licence (if required) - which may be
// supplied as a binary blob, or a simple string value. If this
// value is considered sensitive, it may be read as an empty value.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/license-data"
// Path from root: "/system/license/licenses/license/state/license-data"
func (n *System_License_LicensePath) LicenseData() *System_License_License_LicenseDataPath {
	return &System_License_License_LicenseDataPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "license-data"},
			map[string]interface{}{},
			n,
		),
	}
}

// LicenseData (leaf): The contents of the licence (if required) - which may be
// supplied as a binary blob, or a simple string value. If this
// value is considered sensitive, it may be read as an empty value.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/license-data"
// Path from root: "/system/license/licenses/license/state/license-data"
func (n *System_License_LicensePathAny) LicenseData() *System_License_License_LicenseDataPathAny {
	return &System_License_License_LicenseDataPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "license-data"},
			map[string]interface{}{},
			n,
		),
	}
}

// LicenseId (leaf): License ID. A string that uniquelly identifies the license. The
// platform should list all the licenses it supports being activated.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/license-id"
// Path from root: "/system/license/licenses/license/state/license-id"
func (n *System_License_LicensePath) LicenseId() *System_License_License_LicenseIdPath {
	return &System_License_License_LicenseIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "license-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LicenseId (leaf): License ID. A string that uniquelly identifies the license. The
// platform should list all the licenses it supports being activated.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/license-id"
// Path from root: "/system/license/licenses/license/state/license-id"
func (n *System_License_LicensePathAny) LicenseId() *System_License_License_LicenseIdPathAny {
	return &System_License_License_LicenseIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "license-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Valid (leaf): The license is valid. Can be activated in the system or platform.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/valid"
// Path from root: "/system/license/licenses/license/state/valid"
func (n *System_License_LicensePath) Valid() *System_License_License_ValidPath {
	return &System_License_License_ValidPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "valid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Valid (leaf): The license is valid. Can be activated in the system or platform.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/valid"
// Path from root: "/system/license/licenses/license/state/valid"
func (n *System_License_LicensePathAny) Valid() *System_License_License_ValidPathAny {
	return &System_License_License_ValidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "valid"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_LoggingPath represents the /openconfig-system/system/logging YANG schema element.
type System_LoggingPath struct {
	*ygot.NodePath
}

// System_LoggingPathAny represents the wildcard version of the /openconfig-system/system/logging YANG schema element.
type System_LoggingPathAny struct {
	*ygot.NodePath
}

// Console (container): Top-level container for data related to console-based
// logging
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "console"
// Path from root: "/system/logging/console"
func (n *System_LoggingPath) Console() *System_Logging_ConsolePath {
	return &System_Logging_ConsolePath{
		NodePath: ygot.NewNodePath(
			[]string{"console"},
			map[string]interface{}{},
			n,
		),
	}
}

// Console (container): Top-level container for data related to console-based
// logging
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "console"
// Path from root: "/system/logging/console"
func (n *System_LoggingPathAny) Console() *System_Logging_ConsolePathAny {
	return &System_Logging_ConsolePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"console"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemoteServerAny (list): List of remote log servers
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "remote-servers/remote-server"
// Path from root: "/system/logging/remote-servers/remote-server"
// Host (wildcarded): string
func (n *System_LoggingPath) RemoteServerAny() *System_Logging_RemoteServerPathAny {
	return &System_Logging_RemoteServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": "*"},
			n,
		),
	}
}

// RemoteServerAny (list): List of remote log servers
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "remote-servers/remote-server"
// Path from root: "/system/logging/remote-servers/remote-server"
// Host (wildcarded): string
func (n *System_LoggingPathAny) RemoteServerAny() *System_Logging_RemoteServerPathAny {
	return &System_Logging_RemoteServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": "*"},
			n,
		),
	}
}

// RemoteServer (list): List of remote log servers
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "remote-servers/remote-server"
// Path from root: "/system/logging/remote-servers/remote-server"
// Host: string
func (n *System_LoggingPath) RemoteServer(Host string) *System_Logging_RemoteServerPath {
	return &System_Logging_RemoteServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": Host},
			n,
		),
	}
}

// RemoteServer (list): List of remote log servers
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "remote-servers/remote-server"
// Path from root: "/system/logging/remote-servers/remote-server"
// Host: string
func (n *System_LoggingPathAny) RemoteServer(Host string) *System_Logging_RemoteServerPathAny {
	return &System_Logging_RemoteServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": Host},
			n,
		),
	}
}

// System_Logging_ConsolePath represents the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_ConsolePath struct {
	*ygot.NodePath
}

// System_Logging_ConsolePathAny represents the wildcard version of the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_ConsolePathAny struct {
	*ygot.NodePath
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) SelectorAny() *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) SelectorAny() *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) SelectorAnySeverity(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) SelectorAnySeverity(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) SelectorAnyFacility(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) SelectorAnyFacility(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPath {
	return &System_Logging_Console_SelectorPath{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// System_Logging_Console_SelectorPath represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPath struct {
	*ygot.NodePath
}

// System_Logging_Console_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPathAny struct {
	*ygot.NodePath
}

// System_Logging_Console_Selector_FacilityPath represents the /openconfig-system/system/logging/console/selectors/selector/state/facility YANG schema element.
type System_Logging_Console_Selector_FacilityPath struct {
	*ygot.NodePath
}

// System_Logging_Console_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector/state/facility YANG schema element.
type System_Logging_Console_Selector_FacilityPathAny struct {
	*ygot.NodePath
}

// System_Logging_Console_Selector_SeverityPath represents the /openconfig-system/system/logging/console/selectors/selector/state/severity YANG schema element.
type System_Logging_Console_Selector_SeverityPath struct {
	*ygot.NodePath
}

// System_Logging_Console_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector/state/severity YANG schema element.
type System_Logging_Console_Selector_SeverityPathAny struct {
	*ygot.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/facility"
// Path from root: "/system/logging/console/selectors/selector/state/facility"
func (n *System_Logging_Console_SelectorPath) Facility() *System_Logging_Console_Selector_FacilityPath {
	return &System_Logging_Console_Selector_FacilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/facility"
// Path from root: "/system/logging/console/selectors/selector/state/facility"
func (n *System_Logging_Console_SelectorPathAny) Facility() *System_Logging_Console_Selector_FacilityPathAny {
	return &System_Logging_Console_Selector_FacilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/severity"
// Path from root: "/system/logging/console/selectors/selector/state/severity"
func (n *System_Logging_Console_SelectorPath) Severity() *System_Logging_Console_Selector_SeverityPath {
	return &System_Logging_Console_Selector_SeverityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/severity"
// Path from root: "/system/logging/console/selectors/selector/state/severity"
func (n *System_Logging_Console_SelectorPathAny) Severity() *System_Logging_Console_Selector_SeverityPathAny {
	return &System_Logging_Console_Selector_SeverityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Logging_RemoteServerPath represents the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServerPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServerPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServerPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_HostPath represents the /openconfig-system/system/logging/remote-servers/remote-server/state/host YANG schema element.
type System_Logging_RemoteServer_HostPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_HostPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/state/host YANG schema element.
type System_Logging_RemoteServer_HostPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_RemotePortPath represents the /openconfig-system/system/logging/remote-servers/remote-server/state/remote-port YANG schema element.
type System_Logging_RemoteServer_RemotePortPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_RemotePortPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/state/remote-port YANG schema element.
type System_Logging_RemoteServer_RemotePortPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_SourceAddressPath represents the /openconfig-system/system/logging/remote-servers/remote-server/state/source-address YANG schema element.
type System_Logging_RemoteServer_SourceAddressPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/state/source-address YANG schema element.
type System_Logging_RemoteServer_SourceAddressPathAny struct {
	*ygot.NodePath
}

// Host (leaf): IP address or hostname of the remote log server
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/host"
// Path from root: "/system/logging/remote-servers/remote-server/state/host"
func (n *System_Logging_RemoteServerPath) Host() *System_Logging_RemoteServer_HostPath {
	return &System_Logging_RemoteServer_HostPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "host"},
			map[string]interface{}{},
			n,
		),
	}
}

// Host (leaf): IP address or hostname of the remote log server
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/host"
// Path from root: "/system/logging/remote-servers/remote-server/state/host"
func (n *System_Logging_RemoteServerPathAny) Host() *System_Logging_RemoteServer_HostPathAny {
	return &System_Logging_RemoteServer_HostPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "host"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemotePort (leaf): Sets the destination port number for syslog UDP messages to
// the server.  The default for syslog is 514.
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/remote-port"
// Path from root: "/system/logging/remote-servers/remote-server/state/remote-port"
func (n *System_Logging_RemoteServerPath) RemotePort() *System_Logging_RemoteServer_RemotePortPath {
	return &System_Logging_RemoteServer_RemotePortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "remote-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemotePort (leaf): Sets the destination port number for syslog UDP messages to
// the server.  The default for syslog is 514.
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/remote-port"
// Path from root: "/system/logging/remote-servers/remote-server/state/remote-port"
func (n *System_Logging_RemoteServerPathAny) RemotePort() *System_Logging_RemoteServer_RemotePortPathAny {
	return &System_Logging_RemoteServer_RemotePortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "remote-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) SelectorAny() *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) SelectorAny() *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) SelectorAnySeverity(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) SelectorAnySeverity(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) SelectorAnyFacility(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) SelectorAnyFacility(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPath {
	return &System_Logging_RemoteServer_SelectorPath{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address for packets to the log server
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/source-address"
// Path from root: "/system/logging/remote-servers/remote-server/state/source-address"
func (n *System_Logging_RemoteServerPath) SourceAddress() *System_Logging_RemoteServer_SourceAddressPath {
	return &System_Logging_RemoteServer_SourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address for packets to the log server
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/source-address"
// Path from root: "/system/logging/remote-servers/remote-server/state/source-address"
func (n *System_Logging_RemoteServerPathAny) SourceAddress() *System_Logging_RemoteServer_SourceAddressPathAny {
	return &System_Logging_RemoteServer_SourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Logging_RemoteServer_SelectorPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_SelectorPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_SelectorPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_Selector_FacilityPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state/facility YANG schema element.
type System_Logging_RemoteServer_Selector_FacilityPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state/facility YANG schema element.
type System_Logging_RemoteServer_Selector_FacilityPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_Selector_SeverityPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state/severity YANG schema element.
type System_Logging_RemoteServer_Selector_SeverityPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state/severity YANG schema element.
type System_Logging_RemoteServer_Selector_SeverityPathAny struct {
	*ygot.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/facility"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector/state/facility"
func (n *System_Logging_RemoteServer_SelectorPath) Facility() *System_Logging_RemoteServer_Selector_FacilityPath {
	return &System_Logging_RemoteServer_Selector_FacilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/facility"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector/state/facility"
func (n *System_Logging_RemoteServer_SelectorPathAny) Facility() *System_Logging_RemoteServer_Selector_FacilityPathAny {
	return &System_Logging_RemoteServer_Selector_FacilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/severity"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector/state/severity"
func (n *System_Logging_RemoteServer_SelectorPath) Severity() *System_Logging_RemoteServer_Selector_SeverityPath {
	return &System_Logging_RemoteServer_Selector_SeverityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/severity"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector/state/severity"
func (n *System_Logging_RemoteServer_SelectorPathAny) Severity() *System_Logging_RemoteServer_Selector_SeverityPathAny {
	return &System_Logging_RemoteServer_Selector_SeverityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_MemoryPath represents the /openconfig-system/system/memory YANG schema element.
type System_MemoryPath struct {
	*ygot.NodePath
}

// System_MemoryPathAny represents the wildcard version of the /openconfig-system/system/memory YANG schema element.
type System_MemoryPathAny struct {
	*ygot.NodePath
}

// System_Memory_FreePath represents the /openconfig-system/system/memory/state/free YANG schema element.
type System_Memory_FreePath struct {
	*ygot.NodePath
}

// System_Memory_FreePathAny represents the wildcard version of the /openconfig-system/system/memory/state/free YANG schema element.
type System_Memory_FreePathAny struct {
	*ygot.NodePath
}

// System_Memory_PhysicalPath represents the /openconfig-system/system/memory/state/physical YANG schema element.
type System_Memory_PhysicalPath struct {
	*ygot.NodePath
}

// System_Memory_PhysicalPathAny represents the wildcard version of the /openconfig-system/system/memory/state/physical YANG schema element.
type System_Memory_PhysicalPathAny struct {
	*ygot.NodePath
}

// System_Memory_ReservedPath represents the /openconfig-system/system/memory/state/reserved YANG schema element.
type System_Memory_ReservedPath struct {
	*ygot.NodePath
}

// System_Memory_ReservedPathAny represents the wildcard version of the /openconfig-system/system/memory/state/reserved YANG schema element.
type System_Memory_ReservedPathAny struct {
	*ygot.NodePath
}

// System_Memory_UsedPath represents the /openconfig-system/system/memory/state/used YANG schema element.
type System_Memory_UsedPath struct {
	*ygot.NodePath
}

// System_Memory_UsedPathAny represents the wildcard version of the /openconfig-system/system/memory/state/used YANG schema element.
type System_Memory_UsedPathAny struct {
	*ygot.NodePath
}

// Counters (container): Counters for tracking system memory errors
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/counters"
// Path from root: "/system/memory/state/counters"
func (n *System_MemoryPath) Counters() *System_Memory_CountersPath {
	return &System_Memory_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Counters for tracking system memory errors
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/counters"
// Path from root: "/system/memory/state/counters"
func (n *System_MemoryPathAny) Counters() *System_Memory_CountersPathAny {
	return &System_Memory_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Free (leaf): Memory that is not used and is available for allocation.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/free"
// Path from root: "/system/memory/state/free"
func (n *System_MemoryPath) Free() *System_Memory_FreePath {
	return &System_Memory_FreePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
	}
}

// Free (leaf): Memory that is not used and is available for allocation.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/free"
// Path from root: "/system/memory/state/free"
func (n *System_MemoryPathAny) Free() *System_Memory_FreePathAny {
	return &System_Memory_FreePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
	}
}

// Physical (leaf): Reports the total physical memory available on the
// system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/physical"
// Path from root: "/system/memory/state/physical"
func (n *System_MemoryPath) Physical() *System_Memory_PhysicalPath {
	return &System_Memory_PhysicalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "physical"},
			map[string]interface{}{},
			n,
		),
	}
}

// Physical (leaf): Reports the total physical memory available on the
// system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/physical"
// Path from root: "/system/memory/state/physical"
func (n *System_MemoryPathAny) Physical() *System_Memory_PhysicalPathAny {
	return &System_Memory_PhysicalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "physical"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reserved (leaf): Memory reserved for system use
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/reserved"
// Path from root: "/system/memory/state/reserved"
func (n *System_MemoryPath) Reserved() *System_Memory_ReservedPath {
	return &System_Memory_ReservedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "reserved"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reserved (leaf): Memory reserved for system use
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/reserved"
// Path from root: "/system/memory/state/reserved"
func (n *System_MemoryPathAny) Reserved() *System_Memory_ReservedPathAny {
	return &System_Memory_ReservedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "reserved"},
			map[string]interface{}{},
			n,
		),
	}
}

// Used (leaf): Memory that has been used and not available for allocation.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/used"
// Path from root: "/system/memory/state/used"
func (n *System_MemoryPath) Used() *System_Memory_UsedPath {
	return &System_Memory_UsedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
	}
}

// Used (leaf): Memory that has been used and not available for allocation.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/used"
// Path from root: "/system/memory/state/used"
func (n *System_MemoryPathAny) Used() *System_Memory_UsedPathAny {
	return &System_Memory_UsedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Memory_CountersPath represents the /openconfig-system/system/memory/state/counters YANG schema element.
type System_Memory_CountersPath struct {
	*ygot.NodePath
}

// System_Memory_CountersPathAny represents the wildcard version of the /openconfig-system/system/memory/state/counters YANG schema element.
type System_Memory_CountersPathAny struct {
	*ygot.NodePath
}

// System_Memory_Counters_CorrectableEccErrorsPath represents the /openconfig-system/system/memory/state/counters/correctable-ecc-errors YANG schema element.
type System_Memory_Counters_CorrectableEccErrorsPath struct {
	*ygot.NodePath
}

// System_Memory_Counters_CorrectableEccErrorsPathAny represents the wildcard version of the /openconfig-system/system/memory/state/counters/correctable-ecc-errors YANG schema element.
type System_Memory_Counters_CorrectableEccErrorsPathAny struct {
	*ygot.NodePath
}

// System_Memory_Counters_TotalEccErrorsPath represents the /openconfig-system/system/memory/state/counters/total-ecc-errors YANG schema element.
type System_Memory_Counters_TotalEccErrorsPath struct {
	*ygot.NodePath
}

// System_Memory_Counters_TotalEccErrorsPathAny represents the wildcard version of the /openconfig-system/system/memory/state/counters/total-ecc-errors YANG schema element.
type System_Memory_Counters_TotalEccErrorsPathAny struct {
	*ygot.NodePath
}

// System_Memory_Counters_UncorrectableEccErrorsPath represents the /openconfig-system/system/memory/state/counters/uncorrectable-ecc-errors YANG schema element.
type System_Memory_Counters_UncorrectableEccErrorsPath struct {
	*ygot.NodePath
}

// System_Memory_Counters_UncorrectableEccErrorsPathAny represents the wildcard version of the /openconfig-system/system/memory/state/counters/uncorrectable-ecc-errors YANG schema element.
type System_Memory_Counters_UncorrectableEccErrorsPathAny struct {
	*ygot.NodePath
}

// CorrectableEccErrors (leaf): Count of correctable ECC errors. Systems with ECC memory
// are capable of correcting Single-bit ECC errors.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "correctable-ecc-errors"
// Path from root: "/system/memory/state/counters/correctable-ecc-errors"
func (n *System_Memory_CountersPath) CorrectableEccErrors() *System_Memory_Counters_CorrectableEccErrorsPath {
	return &System_Memory_Counters_CorrectableEccErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"correctable-ecc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// CorrectableEccErrors (leaf): Count of correctable ECC errors. Systems with ECC memory
// are capable of correcting Single-bit ECC errors.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "correctable-ecc-errors"
// Path from root: "/system/memory/state/counters/correctable-ecc-errors"
func (n *System_Memory_CountersPathAny) CorrectableEccErrors() *System_Memory_Counters_CorrectableEccErrorsPathAny {
	return &System_Memory_Counters_CorrectableEccErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"correctable-ecc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// TotalEccErrors (leaf): Count of total ECC errors, this includes both correctable
// and uncorrectable ECC errors.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "total-ecc-errors"
// Path from root: "/system/memory/state/counters/total-ecc-errors"
func (n *System_Memory_CountersPath) TotalEccErrors() *System_Memory_Counters_TotalEccErrorsPath {
	return &System_Memory_Counters_TotalEccErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"total-ecc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// TotalEccErrors (leaf): Count of total ECC errors, this includes both correctable
// and uncorrectable ECC errors.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "total-ecc-errors"
// Path from root: "/system/memory/state/counters/total-ecc-errors"
func (n *System_Memory_CountersPathAny) TotalEccErrors() *System_Memory_Counters_TotalEccErrorsPathAny {
	return &System_Memory_Counters_TotalEccErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"total-ecc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// UncorrectableEccErrors (leaf): Count of uncorrectable ECC errors. Systems with ECC
// memory are capable of detecting multi-bit ECC errors,
// but cannot correct them.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "uncorrectable-ecc-errors"
// Path from root: "/system/memory/state/counters/uncorrectable-ecc-errors"
func (n *System_Memory_CountersPath) UncorrectableEccErrors() *System_Memory_Counters_UncorrectableEccErrorsPath {
	return &System_Memory_Counters_UncorrectableEccErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"uncorrectable-ecc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// UncorrectableEccErrors (leaf): Count of uncorrectable ECC errors. Systems with ECC
// memory are capable of detecting multi-bit ECC errors,
// but cannot correct them.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "uncorrectable-ecc-errors"
// Path from root: "/system/memory/state/counters/uncorrectable-ecc-errors"
func (n *System_Memory_CountersPathAny) UncorrectableEccErrors() *System_Memory_Counters_UncorrectableEccErrorsPathAny {
	return &System_Memory_Counters_UncorrectableEccErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"uncorrectable-ecc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_MessagesPath represents the /openconfig-system/system/messages YANG schema element.
type System_MessagesPath struct {
	*ygot.NodePath
}

// System_MessagesPathAny represents the wildcard version of the /openconfig-system/system/messages YANG schema element.
type System_MessagesPathAny struct {
	*ygot.NodePath
}

// System_Messages_SeverityPath represents the /openconfig-system/system/messages/state/severity YANG schema element.
type System_Messages_SeverityPath struct {
	*ygot.NodePath
}

// System_Messages_SeverityPathAny represents the wildcard version of the /openconfig-system/system/messages/state/severity YANG schema element.
type System_Messages_SeverityPathAny struct {
	*ygot.NodePath
}

// DebugServiceAny (list): List of debugging entries.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "debug-entries/debug-service"
// Path from root: "/system/messages/debug-entries/debug-service"
// Service (wildcarded): oc.E_Messages_DEBUG_SERVICE
func (n *System_MessagesPath) DebugServiceAny() *System_Messages_DebugServicePathAny {
	return &System_Messages_DebugServicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": "*"},
			n,
		),
	}
}

// DebugServiceAny (list): List of debugging entries.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "debug-entries/debug-service"
// Path from root: "/system/messages/debug-entries/debug-service"
// Service (wildcarded): oc.E_Messages_DEBUG_SERVICE
func (n *System_MessagesPathAny) DebugServiceAny() *System_Messages_DebugServicePathAny {
	return &System_Messages_DebugServicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": "*"},
			n,
		),
	}
}

// DebugService (list): List of debugging entries.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "debug-entries/debug-service"
// Path from root: "/system/messages/debug-entries/debug-service"
// Service: oc.E_Messages_DEBUG_SERVICE
func (n *System_MessagesPath) DebugService(Service oc.E_Messages_DEBUG_SERVICE) *System_Messages_DebugServicePath {
	return &System_Messages_DebugServicePath{
		NodePath: ygot.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": Service},
			n,
		),
	}
}

// DebugService (list): List of debugging entries.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "debug-entries/debug-service"
// Path from root: "/system/messages/debug-entries/debug-service"
// Service: oc.E_Messages_DEBUG_SERVICE
func (n *System_MessagesPathAny) DebugService(Service oc.E_Messages_DEBUG_SERVICE) *System_Messages_DebugServicePathAny {
	return &System_Messages_DebugServicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": Service},
			n,
		),
	}
}

// Message (container): Syslog messages the client is Subscribing to. This is all
// messages currently configured to be sent according to
// syslog-severity.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "state/message"
// Path from root: "/system/messages/state/message"
func (n *System_MessagesPath) Message() *System_Messages_MessagePath {
	return &System_Messages_MessagePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "message"},
			map[string]interface{}{},
			n,
		),
	}
}

// Message (container): Syslog messages the client is Subscribing to. This is all
// messages currently configured to be sent according to
// syslog-severity.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "state/message"
// Path from root: "/system/messages/state/message"
func (n *System_MessagesPathAny) Message() *System_Messages_MessagePathAny {
	return &System_Messages_MessagePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "message"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) are sent over the RPC.
//
// This is analogous to differentiating which severity is to be
// sent to legacy Syslog servers, as opposed to local buffer or
// files.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "state/severity"
// Path from root: "/system/messages/state/severity"
func (n *System_MessagesPath) Severity() *System_Messages_SeverityPath {
	return &System_Messages_SeverityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) are sent over the RPC.
//
// This is analogous to differentiating which severity is to be
// sent to legacy Syslog servers, as opposed to local buffer or
// files.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "state/severity"
// Path from root: "/system/messages/state/severity"
func (n *System_MessagesPathAny) Severity() *System_Messages_SeverityPathAny {
	return &System_Messages_SeverityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Messages_DebugServicePath represents the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugServicePath struct {
	*ygot.NodePath
}

// System_Messages_DebugServicePathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugServicePathAny struct {
	*ygot.NodePath
}

// System_Messages_DebugService_EnabledPath represents the /openconfig-system/system/messages/debug-entries/debug-service/state/enabled YANG schema element.
type System_Messages_DebugService_EnabledPath struct {
	*ygot.NodePath
}

// System_Messages_DebugService_EnabledPathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service/state/enabled YANG schema element.
type System_Messages_DebugService_EnabledPathAny struct {
	*ygot.NodePath
}

// System_Messages_DebugService_ServicePath represents the /openconfig-system/system/messages/debug-entries/debug-service/state/service YANG schema element.
type System_Messages_DebugService_ServicePath struct {
	*ygot.NodePath
}

// System_Messages_DebugService_ServicePathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service/state/service YANG schema element.
type System_Messages_DebugService_ServicePathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Enable and disable debugging.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enabled"
// Path from root: "/system/messages/debug-entries/debug-service/state/enabled"
func (n *System_Messages_DebugServicePath) Enabled() *System_Messages_DebugService_EnabledPath {
	return &System_Messages_DebugService_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enable and disable debugging.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enabled"
// Path from root: "/system/messages/debug-entries/debug-service/state/enabled"
func (n *System_Messages_DebugServicePathAny) Enabled() *System_Messages_DebugService_EnabledPathAny {
	return &System_Messages_DebugService_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Service (leaf): Enumeration of all services which can have debugging enabled.
// Vendors are to augment this base identity with their platform
// or OS specific debug options.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "state/service"
// Path from root: "/system/messages/debug-entries/debug-service/state/service"
func (n *System_Messages_DebugServicePath) Service() *System_Messages_DebugService_ServicePath {
	return &System_Messages_DebugService_ServicePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "service"},
			map[string]interface{}{},
			n,
		),
	}
}

// Service (leaf): Enumeration of all services which can have debugging enabled.
// Vendors are to augment this base identity with their platform
// or OS specific debug options.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "state/service"
// Path from root: "/system/messages/debug-entries/debug-service/state/service"
func (n *System_Messages_DebugServicePathAny) Service() *System_Messages_DebugService_ServicePathAny {
	return &System_Messages_DebugService_ServicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "service"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Messages_MessagePath represents the /openconfig-system/system/messages/state/message YANG schema element.
type System_Messages_MessagePath struct {
	*ygot.NodePath
}

// System_Messages_MessagePathAny represents the wildcard version of the /openconfig-system/system/messages/state/message YANG schema element.
type System_Messages_MessagePathAny struct {
	*ygot.NodePath
}

// System_Messages_Message_AppNamePath represents the /openconfig-system/system/messages/state/message/app-name YANG schema element.
type System_Messages_Message_AppNamePath struct {
	*ygot.NodePath
}

// System_Messages_Message_AppNamePathAny represents the wildcard version of the /openconfig-system/system/messages/state/message/app-name YANG schema element.
type System_Messages_Message_AppNamePathAny struct {
	*ygot.NodePath
}

// System_Messages_Message_MsgPath represents the /openconfig-system/system/messages/state/message/msg YANG schema element.
type System_Messages_Message_MsgPath struct {
	*ygot.NodePath
}

// System_Messages_Message_MsgPathAny represents the wildcard version of the /openconfig-system/system/messages/state/message/msg YANG schema element.
type System_Messages_Message_MsgPathAny struct {
	*ygot.NodePath
}

// System_Messages_Message_MsgidPath represents the /openconfig-system/system/messages/state/message/msgid YANG schema element.
type System_Messages_Message_MsgidPath struct {
	*ygot.NodePath
}

// System_Messages_Message_MsgidPathAny represents the wildcard version of the /openconfig-system/system/messages/state/message/msgid YANG schema element.
type System_Messages_Message_MsgidPathAny struct {
	*ygot.NodePath
}

// System_Messages_Message_PriorityPath represents the /openconfig-system/system/messages/state/message/priority YANG schema element.
type System_Messages_Message_PriorityPath struct {
	*ygot.NodePath
}

// System_Messages_Message_PriorityPathAny represents the wildcard version of the /openconfig-system/system/messages/state/message/priority YANG schema element.
type System_Messages_Message_PriorityPathAny struct {
	*ygot.NodePath
}

// System_Messages_Message_ProcidPath represents the /openconfig-system/system/messages/state/message/procid YANG schema element.
type System_Messages_Message_ProcidPath struct {
	*ygot.NodePath
}

// System_Messages_Message_ProcidPathAny represents the wildcard version of the /openconfig-system/system/messages/state/message/procid YANG schema element.
type System_Messages_Message_ProcidPathAny struct {
	*ygot.NodePath
}

// AppName (leaf): The APP-NAME field SHOULD identify the device or
// application that originated the message.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "app-name"
// Path from root: "/system/messages/state/message/app-name"
func (n *System_Messages_MessagePath) AppName() *System_Messages_Message_AppNamePath {
	return &System_Messages_Message_AppNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"app-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// AppName (leaf): The APP-NAME field SHOULD identify the device or
// application that originated the message.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "app-name"
// Path from root: "/system/messages/state/message/app-name"
func (n *System_Messages_MessagePathAny) AppName() *System_Messages_Message_AppNamePathAny {
	return &System_Messages_Message_AppNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"app-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Msg (leaf): Message payload. If other leafs within this container not
// supported, this leaf MAY include the entire message,
// inclding pri, procid, app-name etc..
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "msg"
// Path from root: "/system/messages/state/message/msg"
func (n *System_Messages_MessagePath) Msg() *System_Messages_Message_MsgPath {
	return &System_Messages_Message_MsgPath{
		NodePath: ygot.NewNodePath(
			[]string{"msg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Msg (leaf): Message payload. If other leafs within this container not
// supported, this leaf MAY include the entire message,
// inclding pri, procid, app-name etc..
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "msg"
// Path from root: "/system/messages/state/message/msg"
func (n *System_Messages_MessagePathAny) Msg() *System_Messages_Message_MsgPathAny {
	return &System_Messages_Message_MsgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"msg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Msgid (leaf): The MSGID SHOULD identify the type of message. For
// example, a firewall might use the MSGID 'TCPIN' for
// incoming TCP traffic and the MSGID 'TCPOUT' for outgoing
// TCP traffic.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "msgid"
// Path from root: "/system/messages/state/message/msgid"
func (n *System_Messages_MessagePath) Msgid() *System_Messages_Message_MsgidPath {
	return &System_Messages_Message_MsgidPath{
		NodePath: ygot.NewNodePath(
			[]string{"msgid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Msgid (leaf): The MSGID SHOULD identify the type of message. For
// example, a firewall might use the MSGID 'TCPIN' for
// incoming TCP traffic and the MSGID 'TCPOUT' for outgoing
// TCP traffic.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "msgid"
// Path from root: "/system/messages/state/message/msgid"
func (n *System_Messages_MessagePathAny) Msgid() *System_Messages_Message_MsgidPathAny {
	return &System_Messages_Message_MsgidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"msgid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): The Priority value (PRIVAL) represents both the
// Facility and Severity.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "priority"
// Path from root: "/system/messages/state/message/priority"
func (n *System_Messages_MessagePath) Priority() *System_Messages_Message_PriorityPath {
	return &System_Messages_Message_PriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): The Priority value (PRIVAL) represents both the
// Facility and Severity.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "priority"
// Path from root: "/system/messages/state/message/priority"
func (n *System_Messages_MessagePathAny) Priority() *System_Messages_Message_PriorityPathAny {
	return &System_Messages_Message_PriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Procid (leaf): PROCID is a value that is included in the message, having
// no interoperable meaning, except that a change in the value
// indicates there has been a discontinuity in syslog
// reporting.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "procid"
// Path from root: "/system/messages/state/message/procid"
func (n *System_Messages_MessagePath) Procid() *System_Messages_Message_ProcidPath {
	return &System_Messages_Message_ProcidPath{
		NodePath: ygot.NewNodePath(
			[]string{"procid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Procid (leaf): PROCID is a value that is included in the message, having
// no interoperable meaning, except that a change in the value
// indicates there has been a discontinuity in syslog
// reporting.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "procid"
// Path from root: "/system/messages/state/message/procid"
func (n *System_Messages_MessagePathAny) Procid() *System_Messages_Message_ProcidPathAny {
	return &System_Messages_Message_ProcidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"procid"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_MountPointPath represents the /openconfig-system/system/mount-points/mount-point YANG schema element.
type System_MountPointPath struct {
	*ygot.NodePath
}

// System_MountPointPathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point YANG schema element.
type System_MountPointPathAny struct {
	*ygot.NodePath
}

// System_MountPoint_AvailablePath represents the /openconfig-system/system/mount-points/mount-point/state/available YANG schema element.
type System_MountPoint_AvailablePath struct {
	*ygot.NodePath
}

// System_MountPoint_AvailablePathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/available YANG schema element.
type System_MountPoint_AvailablePathAny struct {
	*ygot.NodePath
}

// System_MountPoint_NamePath represents the /openconfig-system/system/mount-points/mount-point/state/name YANG schema element.
type System_MountPoint_NamePath struct {
	*ygot.NodePath
}

// System_MountPoint_NamePathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/name YANG schema element.
type System_MountPoint_NamePathAny struct {
	*ygot.NodePath
}

// System_MountPoint_SizePath represents the /openconfig-system/system/mount-points/mount-point/state/size YANG schema element.
type System_MountPoint_SizePath struct {
	*ygot.NodePath
}

// System_MountPoint_SizePathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/size YANG schema element.
type System_MountPoint_SizePathAny struct {
	*ygot.NodePath
}

// System_MountPoint_StorageComponentPath represents the /openconfig-system/system/mount-points/mount-point/state/storage-component YANG schema element.
type System_MountPoint_StorageComponentPath struct {
	*ygot.NodePath
}

// System_MountPoint_StorageComponentPathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/storage-component YANG schema element.
type System_MountPoint_StorageComponentPathAny struct {
	*ygot.NodePath
}

// System_MountPoint_UtilizedPath represents the /openconfig-system/system/mount-points/mount-point/state/utilized YANG schema element.
type System_MountPoint_UtilizedPath struct {
	*ygot.NodePath
}

// System_MountPoint_UtilizedPathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/utilized YANG schema element.
type System_MountPoint_UtilizedPathAny struct {
	*ygot.NodePath
}

// Available (leaf): The amount of unused space on the filesystem.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/available"
// Path from root: "/system/mount-points/mount-point/state/available"
func (n *System_MountPointPath) Available() *System_MountPoint_AvailablePath {
	return &System_MountPoint_AvailablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "available"},
			map[string]interface{}{},
			n,
		),
	}
}

// Available (leaf): The amount of unused space on the filesystem.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/available"
// Path from root: "/system/mount-points/mount-point/state/available"
func (n *System_MountPointPathAny) Available() *System_MountPoint_AvailablePathAny {
	return &System_MountPoint_AvailablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "available"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Mount point name.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/name"
// Path from root: "/system/mount-points/mount-point/state/name"
func (n *System_MountPointPath) Name() *System_MountPoint_NamePath {
	return &System_MountPoint_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Mount point name.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/name"
// Path from root: "/system/mount-points/mount-point/state/name"
func (n *System_MountPointPathAny) Name() *System_MountPoint_NamePathAny {
	return &System_MountPoint_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Size (leaf): The total size of the initialised filesystem.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/size"
// Path from root: "/system/mount-points/mount-point/state/size"
func (n *System_MountPointPath) Size() *System_MountPoint_SizePath {
	return &System_MountPoint_SizePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "size"},
			map[string]interface{}{},
			n,
		),
	}
}

// Size (leaf): The total size of the initialised filesystem.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/size"
// Path from root: "/system/mount-points/mount-point/state/size"
func (n *System_MountPointPathAny) Size() *System_MountPoint_SizePathAny {
	return &System_MountPoint_SizePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "size"},
			map[string]interface{}{},
			n,
		),
	}
}

// StorageComponent (leaf): In the case that the filesystem that is mounted corresponds to a
// physical or logical component within the system, this leaf provides
// a reference to the hosting component within the /components
// hierarchy.
//
// The reference should be to the most specific component (e.g., if an
// entry for /dev/sda1 exists, then this should be referred to,
// otherwise a reference to /dev/sda may be provided.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/storage-component"
// Path from root: "/system/mount-points/mount-point/state/storage-component"
func (n *System_MountPointPath) StorageComponent() *System_MountPoint_StorageComponentPath {
	return &System_MountPoint_StorageComponentPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "storage-component"},
			map[string]interface{}{},
			n,
		),
	}
}

// StorageComponent (leaf): In the case that the filesystem that is mounted corresponds to a
// physical or logical component within the system, this leaf provides
// a reference to the hosting component within the /components
// hierarchy.
//
// The reference should be to the most specific component (e.g., if an
// entry for /dev/sda1 exists, then this should be referred to,
// otherwise a reference to /dev/sda may be provided.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/storage-component"
// Path from root: "/system/mount-points/mount-point/state/storage-component"
func (n *System_MountPointPathAny) StorageComponent() *System_MountPoint_StorageComponentPathAny {
	return &System_MountPoint_StorageComponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "storage-component"},
			map[string]interface{}{},
			n,
		),
	}
}

// Utilized (leaf): The amount of space currently in use on the filesystem.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/utilized"
// Path from root: "/system/mount-points/mount-point/state/utilized"
func (n *System_MountPointPath) Utilized() *System_MountPoint_UtilizedPath {
	return &System_MountPoint_UtilizedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "utilized"},
			map[string]interface{}{},
			n,
		),
	}
}

// Utilized (leaf): The amount of space currently in use on the filesystem.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/utilized"
// Path from root: "/system/mount-points/mount-point/state/utilized"
func (n *System_MountPointPathAny) Utilized() *System_MountPoint_UtilizedPathAny {
	return &System_MountPoint_UtilizedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "utilized"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_NtpPath represents the /openconfig-system/system/ntp YANG schema element.
type System_NtpPath struct {
	*ygot.NodePath
}

// System_NtpPathAny represents the wildcard version of the /openconfig-system/system/ntp YANG schema element.
type System_NtpPathAny struct {
	*ygot.NodePath
}

// System_Ntp_AuthMismatchPath represents the /openconfig-system/system/ntp/state/auth-mismatch YANG schema element.
type System_Ntp_AuthMismatchPath struct {
	*ygot.NodePath
}

// System_Ntp_AuthMismatchPathAny represents the wildcard version of the /openconfig-system/system/ntp/state/auth-mismatch YANG schema element.
type System_Ntp_AuthMismatchPathAny struct {
	*ygot.NodePath
}

// System_Ntp_EnableNtpAuthPath represents the /openconfig-system/system/ntp/state/enable-ntp-auth YANG schema element.
type System_Ntp_EnableNtpAuthPath struct {
	*ygot.NodePath
}

// System_Ntp_EnableNtpAuthPathAny represents the wildcard version of the /openconfig-system/system/ntp/state/enable-ntp-auth YANG schema element.
type System_Ntp_EnableNtpAuthPathAny struct {
	*ygot.NodePath
}

// System_Ntp_EnabledPath represents the /openconfig-system/system/ntp/state/enabled YANG schema element.
type System_Ntp_EnabledPath struct {
	*ygot.NodePath
}

// System_Ntp_EnabledPathAny represents the wildcard version of the /openconfig-system/system/ntp/state/enabled YANG schema element.
type System_Ntp_EnabledPathAny struct {
	*ygot.NodePath
}

// System_Ntp_NtpSourceAddressPath represents the /openconfig-system/system/ntp/state/ntp-source-address YANG schema element.
type System_Ntp_NtpSourceAddressPath struct {
	*ygot.NodePath
}

// System_Ntp_NtpSourceAddressPathAny represents the wildcard version of the /openconfig-system/system/ntp/state/ntp-source-address YANG schema element.
type System_Ntp_NtpSourceAddressPathAny struct {
	*ygot.NodePath
}

// AuthMismatch (leaf): Count of the number of NTP packets received that were not
// processed due to authentication mismatch.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/auth-mismatch"
// Path from root: "/system/ntp/state/auth-mismatch"
func (n *System_NtpPath) AuthMismatch() *System_Ntp_AuthMismatchPath {
	return &System_Ntp_AuthMismatchPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "auth-mismatch"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthMismatch (leaf): Count of the number of NTP packets received that were not
// processed due to authentication mismatch.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/auth-mismatch"
// Path from root: "/system/ntp/state/auth-mismatch"
func (n *System_NtpPathAny) AuthMismatch() *System_Ntp_AuthMismatchPathAny {
	return &System_Ntp_AuthMismatchPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "auth-mismatch"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableNtpAuth (leaf): Enable or disable NTP authentication -- when enabled, the
// system will only use packets containing a trusted
// authentication key to synchronize the time.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enable-ntp-auth"
// Path from root: "/system/ntp/state/enable-ntp-auth"
func (n *System_NtpPath) EnableNtpAuth() *System_Ntp_EnableNtpAuthPath {
	return &System_Ntp_EnableNtpAuthPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable-ntp-auth"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableNtpAuth (leaf): Enable or disable NTP authentication -- when enabled, the
// system will only use packets containing a trusted
// authentication key to synchronize the time.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enable-ntp-auth"
// Path from root: "/system/ntp/state/enable-ntp-auth"
func (n *System_NtpPathAny) EnableNtpAuth() *System_Ntp_EnableNtpAuthPathAny {
	return &System_Ntp_EnableNtpAuthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable-ntp-auth"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enables the NTP protocol and indicates that the system should
// attempt to synchronize the system clock with an NTP server
// from the servers defined in the 'ntp/server' list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enabled"
// Path from root: "/system/ntp/state/enabled"
func (n *System_NtpPath) Enabled() *System_Ntp_EnabledPath {
	return &System_Ntp_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enables the NTP protocol and indicates that the system should
// attempt to synchronize the system clock with an NTP server
// from the servers defined in the 'ntp/server' list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enabled"
// Path from root: "/system/ntp/state/enabled"
func (n *System_NtpPathAny) Enabled() *System_Ntp_EnabledPathAny {
	return &System_Ntp_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// NtpKeyAny (list): List of NTP authentication keys
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp-keys/ntp-key"
// Path from root: "/system/ntp/ntp-keys/ntp-key"
// KeyId (wildcarded): uint16
func (n *System_NtpPath) NtpKeyAny() *System_Ntp_NtpKeyPathAny {
	return &System_Ntp_NtpKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": "*"},
			n,
		),
	}
}

// NtpKeyAny (list): List of NTP authentication keys
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp-keys/ntp-key"
// Path from root: "/system/ntp/ntp-keys/ntp-key"
// KeyId (wildcarded): uint16
func (n *System_NtpPathAny) NtpKeyAny() *System_Ntp_NtpKeyPathAny {
	return &System_Ntp_NtpKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": "*"},
			n,
		),
	}
}

// NtpKey (list): List of NTP authentication keys
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp-keys/ntp-key"
// Path from root: "/system/ntp/ntp-keys/ntp-key"
// KeyId: uint16
func (n *System_NtpPath) NtpKey(KeyId uint16) *System_Ntp_NtpKeyPath {
	return &System_Ntp_NtpKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": KeyId},
			n,
		),
	}
}

// NtpKey (list): List of NTP authentication keys
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp-keys/ntp-key"
// Path from root: "/system/ntp/ntp-keys/ntp-key"
// KeyId: uint16
func (n *System_NtpPathAny) NtpKey(KeyId uint16) *System_Ntp_NtpKeyPathAny {
	return &System_Ntp_NtpKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": KeyId},
			n,
		),
	}
}

// NtpSourceAddress (leaf): Source address to use on outgoing NTP packets
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/ntp-source-address"
// Path from root: "/system/ntp/state/ntp-source-address"
func (n *System_NtpPath) NtpSourceAddress() *System_Ntp_NtpSourceAddressPath {
	return &System_Ntp_NtpSourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ntp-source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NtpSourceAddress (leaf): Source address to use on outgoing NTP packets
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/ntp-source-address"
// Path from root: "/system/ntp/state/ntp-source-address"
func (n *System_NtpPathAny) NtpSourceAddress() *System_Ntp_NtpSourceAddressPathAny {
	return &System_Ntp_NtpSourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ntp-source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ServerAny (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/ntp/servers/server"
// Address (wildcarded): string
func (n *System_NtpPath) ServerAny() *System_Ntp_ServerPathAny {
	return &System_Ntp_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// ServerAny (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/ntp/servers/server"
// Address (wildcarded): string
func (n *System_NtpPathAny) ServerAny() *System_Ntp_ServerPathAny {
	return &System_Ntp_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// Server (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/ntp/servers/server"
// Address: string
func (n *System_NtpPath) Server(Address string) *System_Ntp_ServerPath {
	return &System_Ntp_ServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// Server (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/ntp/servers/server"
// Address: string
func (n *System_NtpPathAny) Server(Address string) *System_Ntp_ServerPathAny {
	return &System_Ntp_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// System_Ntp_NtpKeyPath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKeyPath struct {
	*ygot.NodePath
}

// System_Ntp_NtpKeyPathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKeyPathAny struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyIdPath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-id YANG schema element.
type System_Ntp_NtpKey_KeyIdPath struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyIdPathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-id YANG schema element.
type System_Ntp_NtpKey_KeyIdPathAny struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyTypePath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-type YANG schema element.
type System_Ntp_NtpKey_KeyTypePath struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyTypePathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-type YANG schema element.
type System_Ntp_NtpKey_KeyTypePathAny struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyValuePath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-value YANG schema element.
type System_Ntp_NtpKey_KeyValuePath struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyValuePathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-value YANG schema element.
type System_Ntp_NtpKey_KeyValuePathAny struct {
	*ygot.NodePath
}

// KeyId (leaf): Integer identifier used by the client and server to
// designate a secret key.  The client and server must use
// the same key id.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/key-id"
// Path from root: "/system/ntp/ntp-keys/ntp-key/state/key-id"
func (n *System_Ntp_NtpKeyPath) KeyId() *System_Ntp_NtpKey_KeyIdPath {
	return &System_Ntp_NtpKey_KeyIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyId (leaf): Integer identifier used by the client and server to
// designate a secret key.  The client and server must use
// the same key id.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/key-id"
// Path from root: "/system/ntp/ntp-keys/ntp-key/state/key-id"
func (n *System_Ntp_NtpKeyPathAny) KeyId() *System_Ntp_NtpKey_KeyIdPathAny {
	return &System_Ntp_NtpKey_KeyIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyType (leaf): Encryption type used for the NTP authentication key
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/key-type"
// Path from root: "/system/ntp/ntp-keys/ntp-key/state/key-type"
func (n *System_Ntp_NtpKeyPath) KeyType() *System_Ntp_NtpKey_KeyTypePath {
	return &System_Ntp_NtpKey_KeyTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyType (leaf): Encryption type used for the NTP authentication key
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/key-type"
// Path from root: "/system/ntp/ntp-keys/ntp-key/state/key-type"
func (n *System_Ntp_NtpKeyPathAny) KeyType() *System_Ntp_NtpKey_KeyTypePathAny {
	return &System_Ntp_NtpKey_KeyTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyValue (leaf): NTP authentication key value
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/key-value"
// Path from root: "/system/ntp/ntp-keys/ntp-key/state/key-value"
func (n *System_Ntp_NtpKeyPath) KeyValue() *System_Ntp_NtpKey_KeyValuePath {
	return &System_Ntp_NtpKey_KeyValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyValue (leaf): NTP authentication key value
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/key-value"
// Path from root: "/system/ntp/ntp-keys/ntp-key/state/key-value"
func (n *System_Ntp_NtpKeyPathAny) KeyValue() *System_Ntp_NtpKey_KeyValuePathAny {
	return &System_Ntp_NtpKey_KeyValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Ntp_ServerPath represents the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_ServerPath struct {
	*ygot.NodePath
}

// System_Ntp_ServerPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_ServerPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_AddressPath represents the /openconfig-system/system/ntp/servers/server/state/address YANG schema element.
type System_Ntp_Server_AddressPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_AddressPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/address YANG schema element.
type System_Ntp_Server_AddressPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_AssociationTypePath represents the /openconfig-system/system/ntp/servers/server/state/association-type YANG schema element.
type System_Ntp_Server_AssociationTypePath struct {
	*ygot.NodePath
}

// System_Ntp_Server_AssociationTypePathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/association-type YANG schema element.
type System_Ntp_Server_AssociationTypePathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_IburstPath represents the /openconfig-system/system/ntp/servers/server/state/iburst YANG schema element.
type System_Ntp_Server_IburstPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_IburstPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/iburst YANG schema element.
type System_Ntp_Server_IburstPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_OffsetPath represents the /openconfig-system/system/ntp/servers/server/state/offset YANG schema element.
type System_Ntp_Server_OffsetPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_OffsetPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/offset YANG schema element.
type System_Ntp_Server_OffsetPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_PollIntervalPath represents the /openconfig-system/system/ntp/servers/server/state/poll-interval YANG schema element.
type System_Ntp_Server_PollIntervalPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_PollIntervalPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/poll-interval YANG schema element.
type System_Ntp_Server_PollIntervalPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_PortPath represents the /openconfig-system/system/ntp/servers/server/state/port YANG schema element.
type System_Ntp_Server_PortPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_PortPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/port YANG schema element.
type System_Ntp_Server_PortPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_PreferPath represents the /openconfig-system/system/ntp/servers/server/state/prefer YANG schema element.
type System_Ntp_Server_PreferPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_PreferPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/prefer YANG schema element.
type System_Ntp_Server_PreferPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_RootDelayPath represents the /openconfig-system/system/ntp/servers/server/state/root-delay YANG schema element.
type System_Ntp_Server_RootDelayPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_RootDelayPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/root-delay YANG schema element.
type System_Ntp_Server_RootDelayPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_RootDispersionPath represents the /openconfig-system/system/ntp/servers/server/state/root-dispersion YANG schema element.
type System_Ntp_Server_RootDispersionPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_RootDispersionPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/root-dispersion YANG schema element.
type System_Ntp_Server_RootDispersionPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_StratumPath represents the /openconfig-system/system/ntp/servers/server/state/stratum YANG schema element.
type System_Ntp_Server_StratumPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_StratumPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/stratum YANG schema element.
type System_Ntp_Server_StratumPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_VersionPath represents the /openconfig-system/system/ntp/servers/server/state/version YANG schema element.
type System_Ntp_Server_VersionPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_VersionPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/version YANG schema element.
type System_Ntp_Server_VersionPathAny struct {
	*ygot.NodePath
}

// Address (leaf): The address or hostname of the NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/address"
// Path from root: "/system/ntp/servers/server/state/address"
func (n *System_Ntp_ServerPath) Address() *System_Ntp_Server_AddressPath {
	return &System_Ntp_Server_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): The address or hostname of the NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/address"
// Path from root: "/system/ntp/servers/server/state/address"
func (n *System_Ntp_ServerPathAny) Address() *System_Ntp_Server_AddressPathAny {
	return &System_Ntp_Server_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociationType (leaf): The desired association type for this NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/association-type"
// Path from root: "/system/ntp/servers/server/state/association-type"
func (n *System_Ntp_ServerPath) AssociationType() *System_Ntp_Server_AssociationTypePath {
	return &System_Ntp_Server_AssociationTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "association-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociationType (leaf): The desired association type for this NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/association-type"
// Path from root: "/system/ntp/servers/server/state/association-type"
func (n *System_Ntp_ServerPathAny) AssociationType() *System_Ntp_Server_AssociationTypePathAny {
	return &System_Ntp_Server_AssociationTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "association-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Iburst (leaf): Indicates whether this server should enable burst
// synchronization or not.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/iburst"
// Path from root: "/system/ntp/servers/server/state/iburst"
func (n *System_Ntp_ServerPath) Iburst() *System_Ntp_Server_IburstPath {
	return &System_Ntp_Server_IburstPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "iburst"},
			map[string]interface{}{},
			n,
		),
	}
}

// Iburst (leaf): Indicates whether this server should enable burst
// synchronization or not.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/iburst"
// Path from root: "/system/ntp/servers/server/state/iburst"
func (n *System_Ntp_ServerPathAny) Iburst() *System_Ntp_Server_IburstPathAny {
	return &System_Ntp_Server_IburstPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "iburst"},
			map[string]interface{}{},
			n,
		),
	}
}

// Offset (leaf): Estimate of the current time offset from the peer.  This is
// the time difference between the local and reference clock.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/offset"
// Path from root: "/system/ntp/servers/server/state/offset"
func (n *System_Ntp_ServerPath) Offset() *System_Ntp_Server_OffsetPath {
	return &System_Ntp_Server_OffsetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "offset"},
			map[string]interface{}{},
			n,
		),
	}
}

// Offset (leaf): Estimate of the current time offset from the peer.  This is
// the time difference between the local and reference clock.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/offset"
// Path from root: "/system/ntp/servers/server/state/offset"
func (n *System_Ntp_ServerPathAny) Offset() *System_Ntp_Server_OffsetPathAny {
	return &System_Ntp_Server_OffsetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "offset"},
			map[string]interface{}{},
			n,
		),
	}
}

// PollInterval (leaf): Polling interval of the peer
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/poll-interval"
// Path from root: "/system/ntp/servers/server/state/poll-interval"
func (n *System_Ntp_ServerPath) PollInterval() *System_Ntp_Server_PollIntervalPath {
	return &System_Ntp_Server_PollIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "poll-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// PollInterval (leaf): Polling interval of the peer
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/poll-interval"
// Path from root: "/system/ntp/servers/server/state/poll-interval"
func (n *System_Ntp_ServerPathAny) PollInterval() *System_Ntp_Server_PollIntervalPathAny {
	return &System_Ntp_Server_PollIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "poll-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number of the NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/port"
// Path from root: "/system/ntp/servers/server/state/port"
func (n *System_Ntp_ServerPath) Port() *System_Ntp_Server_PortPath {
	return &System_Ntp_Server_PortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number of the NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/port"
// Path from root: "/system/ntp/servers/server/state/port"
func (n *System_Ntp_ServerPathAny) Port() *System_Ntp_Server_PortPathAny {
	return &System_Ntp_Server_PortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefer (leaf): Indicates whether this server should be preferred
// or not.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/prefer"
// Path from root: "/system/ntp/servers/server/state/prefer"
func (n *System_Ntp_ServerPath) Prefer() *System_Ntp_Server_PreferPath {
	return &System_Ntp_Server_PreferPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefer"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefer (leaf): Indicates whether this server should be preferred
// or not.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/prefer"
// Path from root: "/system/ntp/servers/server/state/prefer"
func (n *System_Ntp_ServerPathAny) Prefer() *System_Ntp_Server_PreferPathAny {
	return &System_Ntp_Server_PreferPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefer"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootDelay (leaf): The round-trip delay to the server, in milliseconds.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/root-delay"
// Path from root: "/system/ntp/servers/server/state/root-delay"
func (n *System_Ntp_ServerPath) RootDelay() *System_Ntp_Server_RootDelayPath {
	return &System_Ntp_Server_RootDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootDelay (leaf): The round-trip delay to the server, in milliseconds.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/root-delay"
// Path from root: "/system/ntp/servers/server/state/root-delay"
func (n *System_Ntp_ServerPathAny) RootDelay() *System_Ntp_Server_RootDelayPathAny {
	return &System_Ntp_Server_RootDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootDispersion (leaf): Dispersion (epsilon) represents the maximum error inherent
// in the measurement
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/root-dispersion"
// Path from root: "/system/ntp/servers/server/state/root-dispersion"
func (n *System_Ntp_ServerPath) RootDispersion() *System_Ntp_Server_RootDispersionPath {
	return &System_Ntp_Server_RootDispersionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-dispersion"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootDispersion (leaf): Dispersion (epsilon) represents the maximum error inherent
// in the measurement
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/root-dispersion"
// Path from root: "/system/ntp/servers/server/state/root-dispersion"
func (n *System_Ntp_ServerPathAny) RootDispersion() *System_Ntp_Server_RootDispersionPathAny {
	return &System_Ntp_Server_RootDispersionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-dispersion"},
			map[string]interface{}{},
			n,
		),
	}
}

// Stratum (leaf): Indicates the level of the server in the NTP hierarchy. As
// stratum number increases, the accuracy is degraded.  Primary
// servers are stratum while a maximum value of 16 indicates
// unsynchronized.  The values have the following specific
// semantics:
//
// | 0      | unspecified or invalid
// | 1      | primary server (e.g., equipped with a GPS receiver)
// | 2-15   | secondary server (via NTP)
// | 16     | unsynchronized
// | 17-255 | reserved
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/stratum"
// Path from root: "/system/ntp/servers/server/state/stratum"
func (n *System_Ntp_ServerPath) Stratum() *System_Ntp_Server_StratumPath {
	return &System_Ntp_Server_StratumPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "stratum"},
			map[string]interface{}{},
			n,
		),
	}
}

// Stratum (leaf): Indicates the level of the server in the NTP hierarchy. As
// stratum number increases, the accuracy is degraded.  Primary
// servers are stratum while a maximum value of 16 indicates
// unsynchronized.  The values have the following specific
// semantics:
//
// | 0      | unspecified or invalid
// | 1      | primary server (e.g., equipped with a GPS receiver)
// | 2-15   | secondary server (via NTP)
// | 16     | unsynchronized
// | 17-255 | reserved
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/stratum"
// Path from root: "/system/ntp/servers/server/state/stratum"
func (n *System_Ntp_ServerPathAny) Stratum() *System_Ntp_Server_StratumPathAny {
	return &System_Ntp_Server_StratumPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "stratum"},
			map[string]interface{}{},
			n,
		),
	}
}

// Version (leaf): Version number to put in outgoing NTP packets
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/version"
// Path from root: "/system/ntp/servers/server/state/version"
func (n *System_Ntp_ServerPath) Version() *System_Ntp_Server_VersionPath {
	return &System_Ntp_Server_VersionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "version"},
			map[string]interface{}{},
			n,
		),
	}
}

// Version (leaf): Version number to put in outgoing NTP packets
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/version"
// Path from root: "/system/ntp/servers/server/state/version"
func (n *System_Ntp_ServerPathAny) Version() *System_Ntp_Server_VersionPathAny {
	return &System_Ntp_Server_VersionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "version"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_ProcessPath represents the /openconfig-system/system/processes/process YANG schema element.
type System_ProcessPath struct {
	*ygot.NodePath
}

// System_ProcessPathAny represents the wildcard version of the /openconfig-system/system/processes/process YANG schema element.
type System_ProcessPathAny struct {
	*ygot.NodePath
}

// System_Process_ArgsPath represents the /openconfig-system/system/processes/process/state/args YANG schema element.
type System_Process_ArgsPath struct {
	*ygot.NodePath
}

// System_Process_ArgsPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/args YANG schema element.
type System_Process_ArgsPathAny struct {
	*ygot.NodePath
}

// System_Process_CpuUsageSystemPath represents the /openconfig-system/system/processes/process/state/cpu-usage-system YANG schema element.
type System_Process_CpuUsageSystemPath struct {
	*ygot.NodePath
}

// System_Process_CpuUsageSystemPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/cpu-usage-system YANG schema element.
type System_Process_CpuUsageSystemPathAny struct {
	*ygot.NodePath
}

// System_Process_CpuUsageUserPath represents the /openconfig-system/system/processes/process/state/cpu-usage-user YANG schema element.
type System_Process_CpuUsageUserPath struct {
	*ygot.NodePath
}

// System_Process_CpuUsageUserPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/cpu-usage-user YANG schema element.
type System_Process_CpuUsageUserPathAny struct {
	*ygot.NodePath
}

// System_Process_CpuUtilizationPath represents the /openconfig-system/system/processes/process/state/cpu-utilization YANG schema element.
type System_Process_CpuUtilizationPath struct {
	*ygot.NodePath
}

// System_Process_CpuUtilizationPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/cpu-utilization YANG schema element.
type System_Process_CpuUtilizationPathAny struct {
	*ygot.NodePath
}

// System_Process_MemoryUsagePath represents the /openconfig-system/system/processes/process/state/memory-usage YANG schema element.
type System_Process_MemoryUsagePath struct {
	*ygot.NodePath
}

// System_Process_MemoryUsagePathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/memory-usage YANG schema element.
type System_Process_MemoryUsagePathAny struct {
	*ygot.NodePath
}

// System_Process_MemoryUtilizationPath represents the /openconfig-system/system/processes/process/state/memory-utilization YANG schema element.
type System_Process_MemoryUtilizationPath struct {
	*ygot.NodePath
}

// System_Process_MemoryUtilizationPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/memory-utilization YANG schema element.
type System_Process_MemoryUtilizationPathAny struct {
	*ygot.NodePath
}

// System_Process_NamePath represents the /openconfig-system/system/processes/process/state/name YANG schema element.
type System_Process_NamePath struct {
	*ygot.NodePath
}

// System_Process_NamePathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/name YANG schema element.
type System_Process_NamePathAny struct {
	*ygot.NodePath
}

// System_Process_PidPath represents the /openconfig-system/system/processes/process/state/pid YANG schema element.
type System_Process_PidPath struct {
	*ygot.NodePath
}

// System_Process_PidPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/pid YANG schema element.
type System_Process_PidPathAny struct {
	*ygot.NodePath
}

// System_Process_StartTimePath represents the /openconfig-system/system/processes/process/state/start-time YANG schema element.
type System_Process_StartTimePath struct {
	*ygot.NodePath
}

// System_Process_StartTimePathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/start-time YANG schema element.
type System_Process_StartTimePathAny struct {
	*ygot.NodePath
}

// Args (leaf-list): Current process command line arguments.  Arguments with
// a parameter (e.g., --option 10  or -option=10) should be
// represented as a single element of the list with the
// argument name and parameter together.  Flag arguments, i.e.,
// those without a parameter should also be in their own list
// element.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/args"
// Path from root: "/system/processes/process/state/args"
func (n *System_ProcessPath) Args() *System_Process_ArgsPath {
	return &System_Process_ArgsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "args"},
			map[string]interface{}{},
			n,
		),
	}
}

// Args (leaf-list): Current process command line arguments.  Arguments with
// a parameter (e.g., --option 10  or -option=10) should be
// represented as a single element of the list with the
// argument name and parameter together.  Flag arguments, i.e.,
// those without a parameter should also be in their own list
// element.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/args"
// Path from root: "/system/processes/process/state/args"
func (n *System_ProcessPathAny) Args() *System_Process_ArgsPathAny {
	return &System_Process_ArgsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "args"},
			map[string]interface{}{},
			n,
		),
	}
}

// CpuUsageSystem (leaf): CPU time consumed by this process in kernel mode.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/cpu-usage-system"
// Path from root: "/system/processes/process/state/cpu-usage-system"
func (n *System_ProcessPath) CpuUsageSystem() *System_Process_CpuUsageSystemPath {
	return &System_Process_CpuUsageSystemPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu-usage-system"},
			map[string]interface{}{},
			n,
		),
	}
}

// CpuUsageSystem (leaf): CPU time consumed by this process in kernel mode.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/cpu-usage-system"
// Path from root: "/system/processes/process/state/cpu-usage-system"
func (n *System_ProcessPathAny) CpuUsageSystem() *System_Process_CpuUsageSystemPathAny {
	return &System_Process_CpuUsageSystemPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu-usage-system"},
			map[string]interface{}{},
			n,
		),
	}
}

// CpuUsageUser (leaf): CPU time consumed by this process in user mode in
// nanoseconds.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/cpu-usage-user"
// Path from root: "/system/processes/process/state/cpu-usage-user"
func (n *System_ProcessPath) CpuUsageUser() *System_Process_CpuUsageUserPath {
	return &System_Process_CpuUsageUserPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu-usage-user"},
			map[string]interface{}{},
			n,
		),
	}
}

// CpuUsageUser (leaf): CPU time consumed by this process in user mode in
// nanoseconds.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/cpu-usage-user"
// Path from root: "/system/processes/process/state/cpu-usage-user"
func (n *System_ProcessPathAny) CpuUsageUser() *System_Process_CpuUsageUserPathAny {
	return &System_Process_CpuUsageUserPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu-usage-user"},
			map[string]interface{}{},
			n,
		),
	}
}

// CpuUtilization (leaf): The percentage of CPU that is being used by the process.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/cpu-utilization"
// Path from root: "/system/processes/process/state/cpu-utilization"
func (n *System_ProcessPath) CpuUtilization() *System_Process_CpuUtilizationPath {
	return &System_Process_CpuUtilizationPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu-utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// CpuUtilization (leaf): The percentage of CPU that is being used by the process.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/cpu-utilization"
// Path from root: "/system/processes/process/state/cpu-utilization"
func (n *System_ProcessPathAny) CpuUtilization() *System_Process_CpuUtilizationPathAny {
	return &System_Process_CpuUtilizationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu-utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// MemoryUsage (leaf): Bytes allocated and still in use by the process
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/memory-usage"
// Path from root: "/system/processes/process/state/memory-usage"
func (n *System_ProcessPath) MemoryUsage() *System_Process_MemoryUsagePath {
	return &System_Process_MemoryUsagePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "memory-usage"},
			map[string]interface{}{},
			n,
		),
	}
}

// MemoryUsage (leaf): Bytes allocated and still in use by the process
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/memory-usage"
// Path from root: "/system/processes/process/state/memory-usage"
func (n *System_ProcessPathAny) MemoryUsage() *System_Process_MemoryUsagePathAny {
	return &System_Process_MemoryUsagePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "memory-usage"},
			map[string]interface{}{},
			n,
		),
	}
}

// MemoryUtilization (leaf): The percentage of RAM that is being used by the process.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/memory-utilization"
// Path from root: "/system/processes/process/state/memory-utilization"
func (n *System_ProcessPath) MemoryUtilization() *System_Process_MemoryUtilizationPath {
	return &System_Process_MemoryUtilizationPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "memory-utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// MemoryUtilization (leaf): The percentage of RAM that is being used by the process.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/memory-utilization"
// Path from root: "/system/processes/process/state/memory-utilization"
func (n *System_ProcessPathAny) MemoryUtilization() *System_Process_MemoryUtilizationPathAny {
	return &System_Process_MemoryUtilizationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "memory-utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The process name
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/name"
// Path from root: "/system/processes/process/state/name"
func (n *System_ProcessPath) Name() *System_Process_NamePath {
	return &System_Process_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The process name
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/name"
// Path from root: "/system/processes/process/state/name"
func (n *System_ProcessPathAny) Name() *System_Process_NamePathAny {
	return &System_Process_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Pid (leaf): The process pid
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/pid"
// Path from root: "/system/processes/process/state/pid"
func (n *System_ProcessPath) Pid() *System_Process_PidPath {
	return &System_Process_PidPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Pid (leaf): The process pid
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/pid"
// Path from root: "/system/processes/process/state/pid"
func (n *System_ProcessPathAny) Pid() *System_Process_PidPathAny {
	return &System_Process_PidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pid"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartTime (leaf): The time at which this process started,
// relative to the UNIX epoch.  The system must be
// synchronized such that the start-time can be
// reported accurately, otherwise it should not be reported.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/start-time"
// Path from root: "/system/processes/process/state/start-time"
func (n *System_ProcessPath) StartTime() *System_Process_StartTimePath {
	return &System_Process_StartTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "start-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartTime (leaf): The time at which this process started,
// relative to the UNIX epoch.  The system must be
// synchronized such that the start-time can be
// reported accurately, otherwise it should not be reported.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/start-time"
// Path from root: "/system/processes/process/state/start-time"
func (n *System_ProcessPathAny) StartTime() *System_Process_StartTimePathAny {
	return &System_Process_StartTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "start-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_SshServerPath represents the /openconfig-system/system/ssh-server YANG schema element.
type System_SshServerPath struct {
	*ygot.NodePath
}

// System_SshServerPathAny represents the wildcard version of the /openconfig-system/system/ssh-server YANG schema element.
type System_SshServerPathAny struct {
	*ygot.NodePath
}

// System_SshServer_EnablePath represents the /openconfig-system/system/ssh-server/state/enable YANG schema element.
type System_SshServer_EnablePath struct {
	*ygot.NodePath
}

// System_SshServer_EnablePathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/enable YANG schema element.
type System_SshServer_EnablePathAny struct {
	*ygot.NodePath
}

// System_SshServer_ProtocolVersionPath represents the /openconfig-system/system/ssh-server/state/protocol-version YANG schema element.
type System_SshServer_ProtocolVersionPath struct {
	*ygot.NodePath
}

// System_SshServer_ProtocolVersionPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/protocol-version YANG schema element.
type System_SshServer_ProtocolVersionPathAny struct {
	*ygot.NodePath
}

// System_SshServer_RateLimitPath represents the /openconfig-system/system/ssh-server/state/rate-limit YANG schema element.
type System_SshServer_RateLimitPath struct {
	*ygot.NodePath
}

// System_SshServer_RateLimitPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/rate-limit YANG schema element.
type System_SshServer_RateLimitPathAny struct {
	*ygot.NodePath
}

// System_SshServer_SessionLimitPath represents the /openconfig-system/system/ssh-server/state/session-limit YANG schema element.
type System_SshServer_SessionLimitPath struct {
	*ygot.NodePath
}

// System_SshServer_SessionLimitPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/session-limit YANG schema element.
type System_SshServer_SessionLimitPathAny struct {
	*ygot.NodePath
}

// System_SshServer_TimeoutPath represents the /openconfig-system/system/ssh-server/state/timeout YANG schema element.
type System_SshServer_TimeoutPath struct {
	*ygot.NodePath
}

// System_SshServer_TimeoutPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/timeout YANG schema element.
type System_SshServer_TimeoutPathAny struct {
	*ygot.NodePath
}

// Enable (leaf): Enables the ssh server.  The ssh server is enabled by
// default.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enable"
// Path from root: "/system/ssh-server/state/enable"
func (n *System_SshServerPath) Enable() *System_SshServer_EnablePath {
	return &System_SshServer_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enables the ssh server.  The ssh server is enabled by
// default.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enable"
// Path from root: "/system/ssh-server/state/enable"
func (n *System_SshServerPathAny) Enable() *System_SshServer_EnablePathAny {
	return &System_SshServer_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtocolVersion (leaf): Set the protocol version for SSH connections to the system
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/protocol-version"
// Path from root: "/system/ssh-server/state/protocol-version"
func (n *System_SshServerPath) ProtocolVersion() *System_SshServer_ProtocolVersionPath {
	return &System_SshServer_ProtocolVersionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "protocol-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtocolVersion (leaf): Set the protocol version for SSH connections to the system
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/protocol-version"
// Path from root: "/system/ssh-server/state/protocol-version"
func (n *System_SshServerPathAny) ProtocolVersion() *System_SshServer_ProtocolVersionPathAny {
	return &System_SshServer_ProtocolVersionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "protocol-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/rate-limit"
// Path from root: "/system/ssh-server/state/rate-limit"
func (n *System_SshServerPath) RateLimit() *System_SshServer_RateLimitPath {
	return &System_SshServer_RateLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "rate-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/rate-limit"
// Path from root: "/system/ssh-server/state/rate-limit"
func (n *System_SshServerPathAny) RateLimit() *System_SshServer_RateLimitPathAny {
	return &System_SshServer_RateLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "rate-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/session-limit"
// Path from root: "/system/ssh-server/state/session-limit"
func (n *System_SshServerPath) SessionLimit() *System_SshServer_SessionLimitPath {
	return &System_SshServer_SessionLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "session-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/session-limit"
// Path from root: "/system/ssh-server/state/session-limit"
func (n *System_SshServerPathAny) SessionLimit() *System_SshServer_SessionLimitPathAny {
	return &System_SshServer_SessionLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "session-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/timeout"
// Path from root: "/system/ssh-server/state/timeout"
func (n *System_SshServerPath) Timeout() *System_SshServer_TimeoutPath {
	return &System_SshServer_TimeoutPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/timeout"
// Path from root: "/system/ssh-server/state/timeout"
func (n *System_SshServerPathAny) Timeout() *System_SshServer_TimeoutPathAny {
	return &System_SshServer_TimeoutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_TelnetServerPath represents the /openconfig-system/system/telnet-server YANG schema element.
type System_TelnetServerPath struct {
	*ygot.NodePath
}

// System_TelnetServerPathAny represents the wildcard version of the /openconfig-system/system/telnet-server YANG schema element.
type System_TelnetServerPathAny struct {
	*ygot.NodePath
}

// System_TelnetServer_EnablePath represents the /openconfig-system/system/telnet-server/state/enable YANG schema element.
type System_TelnetServer_EnablePath struct {
	*ygot.NodePath
}

// System_TelnetServer_EnablePathAny represents the wildcard version of the /openconfig-system/system/telnet-server/state/enable YANG schema element.
type System_TelnetServer_EnablePathAny struct {
	*ygot.NodePath
}

// System_TelnetServer_RateLimitPath represents the /openconfig-system/system/telnet-server/state/rate-limit YANG schema element.
type System_TelnetServer_RateLimitPath struct {
	*ygot.NodePath
}

// System_TelnetServer_RateLimitPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/state/rate-limit YANG schema element.
type System_TelnetServer_RateLimitPathAny struct {
	*ygot.NodePath
}

// System_TelnetServer_SessionLimitPath represents the /openconfig-system/system/telnet-server/state/session-limit YANG schema element.
type System_TelnetServer_SessionLimitPath struct {
	*ygot.NodePath
}

// System_TelnetServer_SessionLimitPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/state/session-limit YANG schema element.
type System_TelnetServer_SessionLimitPathAny struct {
	*ygot.NodePath
}

// System_TelnetServer_TimeoutPath represents the /openconfig-system/system/telnet-server/state/timeout YANG schema element.
type System_TelnetServer_TimeoutPath struct {
	*ygot.NodePath
}

// System_TelnetServer_TimeoutPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/state/timeout YANG schema element.
type System_TelnetServer_TimeoutPathAny struct {
	*ygot.NodePath
}

// Enable (leaf): Enables the telnet server.  Telnet is disabled by
// default
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enable"
// Path from root: "/system/telnet-server/state/enable"
func (n *System_TelnetServerPath) Enable() *System_TelnetServer_EnablePath {
	return &System_TelnetServer_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enables the telnet server.  Telnet is disabled by
// default
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enable"
// Path from root: "/system/telnet-server/state/enable"
func (n *System_TelnetServerPathAny) Enable() *System_TelnetServer_EnablePathAny {
	return &System_TelnetServer_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/rate-limit"
// Path from root: "/system/telnet-server/state/rate-limit"
func (n *System_TelnetServerPath) RateLimit() *System_TelnetServer_RateLimitPath {
	return &System_TelnetServer_RateLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "rate-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/rate-limit"
// Path from root: "/system/telnet-server/state/rate-limit"
func (n *System_TelnetServerPathAny) RateLimit() *System_TelnetServer_RateLimitPathAny {
	return &System_TelnetServer_RateLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "rate-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/session-limit"
// Path from root: "/system/telnet-server/state/session-limit"
func (n *System_TelnetServerPath) SessionLimit() *System_TelnetServer_SessionLimitPath {
	return &System_TelnetServer_SessionLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "session-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/session-limit"
// Path from root: "/system/telnet-server/state/session-limit"
func (n *System_TelnetServerPathAny) SessionLimit() *System_TelnetServer_SessionLimitPathAny {
	return &System_TelnetServer_SessionLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "session-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/timeout"
// Path from root: "/system/telnet-server/state/timeout"
func (n *System_TelnetServerPath) Timeout() *System_TelnetServer_TimeoutPath {
	return &System_TelnetServer_TimeoutPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/timeout"
// Path from root: "/system/telnet-server/state/timeout"
func (n *System_TelnetServerPathAny) Timeout() *System_TelnetServer_TimeoutPathAny {
	return &System_TelnetServer_TimeoutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

/*
Package lldp is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/alexmasi/go/pkg/mod/github.com/openconfig/ygot@v0.23.1/genutil/names.go
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package lldp

import (
	oc "github.com/openconfig/ondatra/telemetry"
	"github.com/openconfig/ygot/ygot"
)

// Lldp_Interface_NeighborPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor YANG schema element.
type Lldp_Interface_NeighborPath struct {
	*ygot.NodePath
}

// Lldp_Interface_NeighborPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor YANG schema element.
type Lldp_Interface_NeighborPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_AgePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/age YANG schema element.
type Lldp_Interface_Neighbor_AgePath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_AgePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/age YANG schema element.
type Lldp_Interface_Neighbor_AgePathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_ChassisIdPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id YANG schema element.
type Lldp_Interface_Neighbor_ChassisIdPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_ChassisIdPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id YANG schema element.
type Lldp_Interface_Neighbor_ChassisIdPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_ChassisIdTypePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type YANG schema element.
type Lldp_Interface_Neighbor_ChassisIdTypePath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_ChassisIdTypePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type YANG schema element.
type Lldp_Interface_Neighbor_ChassisIdTypePathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_IdPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/id YANG schema element.
type Lldp_Interface_Neighbor_IdPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_IdPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/id YANG schema element.
type Lldp_Interface_Neighbor_IdPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_LastUpdatePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/last-update YANG schema element.
type Lldp_Interface_Neighbor_LastUpdatePath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_LastUpdatePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/last-update YANG schema element.
type Lldp_Interface_Neighbor_LastUpdatePathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_ManagementAddressPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/management-address YANG schema element.
type Lldp_Interface_Neighbor_ManagementAddressPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_ManagementAddressPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/management-address YANG schema element.
type Lldp_Interface_Neighbor_ManagementAddressPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_ManagementAddressTypePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/management-address-type YANG schema element.
type Lldp_Interface_Neighbor_ManagementAddressTypePath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_ManagementAddressTypePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/management-address-type YANG schema element.
type Lldp_Interface_Neighbor_ManagementAddressTypePathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_PortDescriptionPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/port-description YANG schema element.
type Lldp_Interface_Neighbor_PortDescriptionPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_PortDescriptionPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/port-description YANG schema element.
type Lldp_Interface_Neighbor_PortDescriptionPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_PortIdPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/port-id YANG schema element.
type Lldp_Interface_Neighbor_PortIdPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_PortIdPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/port-id YANG schema element.
type Lldp_Interface_Neighbor_PortIdPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_PortIdTypePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/port-id-type YANG schema element.
type Lldp_Interface_Neighbor_PortIdTypePath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_PortIdTypePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/port-id-type YANG schema element.
type Lldp_Interface_Neighbor_PortIdTypePathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_SystemDescriptionPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/system-description YANG schema element.
type Lldp_Interface_Neighbor_SystemDescriptionPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_SystemDescriptionPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/system-description YANG schema element.
type Lldp_Interface_Neighbor_SystemDescriptionPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_SystemNamePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/system-name YANG schema element.
type Lldp_Interface_Neighbor_SystemNamePath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_SystemNamePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/system-name YANG schema element.
type Lldp_Interface_Neighbor_SystemNamePathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_TtlPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/ttl YANG schema element.
type Lldp_Interface_Neighbor_TtlPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_TtlPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/ttl YANG schema element.
type Lldp_Interface_Neighbor_TtlPathAny struct {
	*ygot.NodePath
}

// Age (leaf): Age since discovery
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/age"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/age"
func (n *Lldp_Interface_NeighborPath) Age() *Lldp_Interface_Neighbor_AgePath {
	return &Lldp_Interface_Neighbor_AgePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
	}
}

// Age (leaf): Age since discovery
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/age"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/age"
func (n *Lldp_Interface_NeighborPathAny) Age() *Lldp_Interface_Neighbor_AgePathAny {
	return &Lldp_Interface_Neighbor_AgePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
	}
}

// CapabilityAny (list): List of LLDP system capabilities advertised by the
// neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "capabilities/capability"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
// Name (wildcarded): oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY
func (n *Lldp_Interface_NeighborPath) CapabilityAny() *Lldp_Interface_Neighbor_CapabilityPathAny {
	return &Lldp_Interface_Neighbor_CapabilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"capabilities", "capability"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// CapabilityAny (list): List of LLDP system capabilities advertised by the
// neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "capabilities/capability"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
// Name (wildcarded): oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY
func (n *Lldp_Interface_NeighborPathAny) CapabilityAny() *Lldp_Interface_Neighbor_CapabilityPathAny {
	return &Lldp_Interface_Neighbor_CapabilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"capabilities", "capability"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Capability (list): List of LLDP system capabilities advertised by the
// neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "capabilities/capability"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
// Name: oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY
func (n *Lldp_Interface_NeighborPath) Capability(Name oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY) *Lldp_Interface_Neighbor_CapabilityPath {
	return &Lldp_Interface_Neighbor_CapabilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"capabilities", "capability"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Capability (list): List of LLDP system capabilities advertised by the
// neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "capabilities/capability"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
// Name: oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY
func (n *Lldp_Interface_NeighborPathAny) Capability(Name oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY) *Lldp_Interface_Neighbor_CapabilityPathAny {
	return &Lldp_Interface_Neighbor_CapabilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"capabilities", "capability"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the
// chassis component of the endpoint identifier associated with
// the transmitting LLDP agent
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/chassis-id"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id"
func (n *Lldp_Interface_NeighborPath) ChassisId() *Lldp_Interface_Neighbor_ChassisIdPath {
	return &Lldp_Interface_Neighbor_ChassisIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "chassis-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the
// chassis component of the endpoint identifier associated with
// the transmitting LLDP agent
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/chassis-id"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id"
func (n *Lldp_Interface_NeighborPathAny) ChassisId() *Lldp_Interface_Neighbor_ChassisIdPathAny {
	return &Lldp_Interface_Neighbor_ChassisIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "chassis-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis
// identifier string. It is an enumerator defined by the
// LldpChassisIdSubtype object from IEEE 802.1AB MIB.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/chassis-id-type"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type"
func (n *Lldp_Interface_NeighborPath) ChassisIdType() *Lldp_Interface_Neighbor_ChassisIdTypePath {
	return &Lldp_Interface_Neighbor_ChassisIdTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis
// identifier string. It is an enumerator defined by the
// LldpChassisIdSubtype object from IEEE 802.1AB MIB.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/chassis-id-type"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type"
func (n *Lldp_Interface_NeighborPathAny) ChassisIdType() *Lldp_Interface_Neighbor_ChassisIdTypePathAny {
	return &Lldp_Interface_Neighbor_ChassisIdTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): System generated identifier for the neighbor on the
// interface.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/id"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/id"
func (n *Lldp_Interface_NeighborPath) Id() *Lldp_Interface_Neighbor_IdPath {
	return &Lldp_Interface_Neighbor_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): System generated identifier for the neighbor on the
// interface.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/id"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/id"
func (n *Lldp_Interface_NeighborPathAny) Id() *Lldp_Interface_Neighbor_IdPathAny {
	return &Lldp_Interface_Neighbor_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastUpdate (leaf): Seconds since last update received.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/last-update"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/last-update"
func (n *Lldp_Interface_NeighborPath) LastUpdate() *Lldp_Interface_Neighbor_LastUpdatePath {
	return &Lldp_Interface_Neighbor_LastUpdatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-update"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastUpdate (leaf): Seconds since last update received.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/last-update"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/last-update"
func (n *Lldp_Interface_NeighborPathAny) LastUpdate() *Lldp_Interface_Neighbor_LastUpdatePathAny {
	return &Lldp_Interface_Neighbor_LastUpdatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-update"},
			map[string]interface{}{},
			n,
		),
	}
}

// ManagementAddress (leaf): The Management Address is a mandatory TLV which identifies a
// network address associated with the local LLDP agent, which
// can be used to reach the agent on the port identified in the
// Port ID TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/management-address"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/management-address"
func (n *Lldp_Interface_NeighborPath) ManagementAddress() *Lldp_Interface_Neighbor_ManagementAddressPath {
	return &Lldp_Interface_Neighbor_ManagementAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ManagementAddress (leaf): The Management Address is a mandatory TLV which identifies a
// network address associated with the local LLDP agent, which
// can be used to reach the agent on the port identified in the
// Port ID TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/management-address"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/management-address"
func (n *Lldp_Interface_NeighborPathAny) ManagementAddress() *Lldp_Interface_Neighbor_ManagementAddressPathAny {
	return &Lldp_Interface_Neighbor_ManagementAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ManagementAddressType (leaf): The enumerated value for the network address type
// identified in this TLV. This enumeration is defined in the
// 'Assigned Numbers' RFC [RFC3232] and the
// ianaAddressFamilyNumbers object.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/management-address-type"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/management-address-type"
func (n *Lldp_Interface_NeighborPath) ManagementAddressType() *Lldp_Interface_Neighbor_ManagementAddressTypePath {
	return &Lldp_Interface_Neighbor_ManagementAddressTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management-address-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// ManagementAddressType (leaf): The enumerated value for the network address type
// identified in this TLV. This enumeration is defined in the
// 'Assigned Numbers' RFC [RFC3232] and the
// ianaAddressFamilyNumbers object.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/management-address-type"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/management-address-type"
func (n *Lldp_Interface_NeighborPathAny) ManagementAddressType() *Lldp_Interface_Neighbor_ManagementAddressTypePathAny {
	return &Lldp_Interface_Neighbor_ManagementAddressTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management-address-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortDescription (leaf): The binary string containing the actual port identifier for
// the port which this LLDP PDU was transmitted. The source and
// format of this field is defined by PtopoPortId from
// RFC2922.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/port-description"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/port-description"
func (n *Lldp_Interface_NeighborPath) PortDescription() *Lldp_Interface_Neighbor_PortDescriptionPath {
	return &Lldp_Interface_Neighbor_PortDescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-description"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortDescription (leaf): The binary string containing the actual port identifier for
// the port which this LLDP PDU was transmitted. The source and
// format of this field is defined by PtopoPortId from
// RFC2922.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/port-description"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/port-description"
func (n *Lldp_Interface_NeighborPathAny) PortDescription() *Lldp_Interface_Neighbor_PortDescriptionPathAny {
	return &Lldp_Interface_Neighbor_PortDescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-description"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortId (leaf): The Port ID is a mandatory TLV which identifies the port
// component of the endpoint identifier associated with the
// transmitting LLDP agent. If the specified port is an IEEE
// 802.3 Repeater port, then this TLV is optional.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/port-id"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/port-id"
func (n *Lldp_Interface_NeighborPath) PortId() *Lldp_Interface_Neighbor_PortIdPath {
	return &Lldp_Interface_Neighbor_PortIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortId (leaf): The Port ID is a mandatory TLV which identifies the port
// component of the endpoint identifier associated with the
// transmitting LLDP agent. If the specified port is an IEEE
// 802.3 Repeater port, then this TLV is optional.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/port-id"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/port-id"
func (n *Lldp_Interface_NeighborPathAny) PortId() *Lldp_Interface_Neighbor_PortIdPathAny {
	return &Lldp_Interface_Neighbor_PortIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortIdType (leaf): This field identifies the format and source of the port
// identifier string. It is an enumerator defined by the
// PtopoPortIdType object from RFC2922.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/port-id-type"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/port-id-type"
func (n *Lldp_Interface_NeighborPath) PortIdType() *Lldp_Interface_Neighbor_PortIdTypePath {
	return &Lldp_Interface_Neighbor_PortIdTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-id-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortIdType (leaf): This field identifies the format and source of the port
// identifier string. It is an enumerator defined by the
// PtopoPortIdType object from RFC2922.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/port-id-type"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/port-id-type"
func (n *Lldp_Interface_NeighborPathAny) PortIdType() *Lldp_Interface_Neighbor_PortIdTypePathAny {
	return &Lldp_Interface_Neighbor_PortIdTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-id-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric
// string that is the textual description of the network entity.
// The system description should include the full name and
// version identification of the system's hardware type,
// software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object
// should be used for this field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/system-description"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/system-description"
func (n *Lldp_Interface_NeighborPath) SystemDescription() *Lldp_Interface_Neighbor_SystemDescriptionPath {
	return &Lldp_Interface_Neighbor_SystemDescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "system-description"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric
// string that is the textual description of the network entity.
// The system description should include the full name and
// version identification of the system's hardware type,
// software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object
// should be used for this field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/system-description"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/system-description"
func (n *Lldp_Interface_NeighborPathAny) SystemDescription() *Lldp_Interface_Neighbor_SystemDescriptionPathAny {
	return &Lldp_Interface_Neighbor_SystemDescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "system-description"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string
// that indicates the system's administratively assigned name.
// The system name should be the system's fully qualified domain
// name. If implementations support IETF RFC 3418, the sysName
// object should be used for this field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/system-name"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/system-name"
func (n *Lldp_Interface_NeighborPath) SystemName() *Lldp_Interface_Neighbor_SystemNamePath {
	return &Lldp_Interface_Neighbor_SystemNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "system-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string
// that indicates the system's administratively assigned name.
// The system name should be the system's fully qualified domain
// name. If implementations support IETF RFC 3418, the sysName
// object should be used for this field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/system-name"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/system-name"
func (n *Lldp_Interface_NeighborPathAny) SystemName() *Lldp_Interface_Neighbor_SystemNamePathAny {
	return &Lldp_Interface_Neighbor_SystemNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "system-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvAny (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui (wildcarded): string
// OuiSubtype (wildcarded): string
func (n *Lldp_Interface_NeighborPath) TlvAny() *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAny (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui (wildcarded): string
// OuiSubtype (wildcarded): string
func (n *Lldp_Interface_NeighborPathAny) TlvAny() *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyOuiAnyOuiSubtype (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui (wildcarded): string
// OuiSubtype (wildcarded): string
func (n *Lldp_Interface_NeighborPath) TlvAnyOuiAnyOuiSubtype(Type int32) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyOuiAnyOuiSubtype (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui (wildcarded): string
// OuiSubtype (wildcarded): string
func (n *Lldp_Interface_NeighborPathAny) TlvAnyOuiAnyOuiSubtype(Type int32) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyTypeAnyOuiSubtype (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui: string
// OuiSubtype (wildcarded): string
func (n *Lldp_Interface_NeighborPath) TlvAnyTypeAnyOuiSubtype(Oui string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": Oui, "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyTypeAnyOuiSubtype (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui: string
// OuiSubtype (wildcarded): string
func (n *Lldp_Interface_NeighborPathAny) TlvAnyTypeAnyOuiSubtype(Oui string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": Oui, "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyOuiSubtype (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui: string
// OuiSubtype (wildcarded): string
func (n *Lldp_Interface_NeighborPath) TlvAnyOuiSubtype(Type int32, Oui string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": Oui, "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyOuiSubtype (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui: string
// OuiSubtype (wildcarded): string
func (n *Lldp_Interface_NeighborPathAny) TlvAnyOuiSubtype(Type int32, Oui string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": Oui, "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyTypeAnyOui (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui (wildcarded): string
// OuiSubtype: string
func (n *Lldp_Interface_NeighborPath) TlvAnyTypeAnyOui(OuiSubtype string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": "*", "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// TlvAnyTypeAnyOui (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui (wildcarded): string
// OuiSubtype: string
func (n *Lldp_Interface_NeighborPathAny) TlvAnyTypeAnyOui(OuiSubtype string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": "*", "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// TlvAnyOui (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui (wildcarded): string
// OuiSubtype: string
func (n *Lldp_Interface_NeighborPath) TlvAnyOui(Type int32, OuiSubtype string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": "*", "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// TlvAnyOui (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui (wildcarded): string
// OuiSubtype: string
func (n *Lldp_Interface_NeighborPathAny) TlvAnyOui(Type int32, OuiSubtype string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": "*", "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// TlvAnyType (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui: string
// OuiSubtype: string
func (n *Lldp_Interface_NeighborPath) TlvAnyType(Oui string, OuiSubtype string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": Oui, "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// TlvAnyType (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui: string
// OuiSubtype: string
func (n *Lldp_Interface_NeighborPathAny) TlvAnyType(Oui string, OuiSubtype string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": Oui, "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// Tlv (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui: string
// OuiSubtype: string
func (n *Lldp_Interface_NeighborPath) Tlv(Type int32, Oui string, OuiSubtype string) *Lldp_Interface_Neighbor_TlvPath {
	return &Lldp_Interface_Neighbor_TlvPath{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": Oui, "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// Tlv (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui: string
// OuiSubtype: string
func (n *Lldp_Interface_NeighborPathAny) Tlv(Type int32, Oui string, OuiSubtype string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": Oui, "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// Ttl (leaf): The time-to-live (TTL) is a mandatory TLV which indicates
// how long information from the neighbor should be considered
// valid.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/ttl"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/ttl"
func (n *Lldp_Interface_NeighborPath) Ttl() *Lldp_Interface_Neighbor_TtlPath {
	return &Lldp_Interface_Neighbor_TtlPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ttl"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ttl (leaf): The time-to-live (TTL) is a mandatory TLV which indicates
// how long information from the neighbor should be considered
// valid.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/ttl"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/ttl"
func (n *Lldp_Interface_NeighborPathAny) Ttl() *Lldp_Interface_Neighbor_TtlPathAny {
	return &Lldp_Interface_Neighbor_TtlPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ttl"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lldp_Interface_Neighbor_CapabilityPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability YANG schema element.
type Lldp_Interface_Neighbor_CapabilityPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_CapabilityPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability YANG schema element.
type Lldp_Interface_Neighbor_CapabilityPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Capability_EnabledPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled YANG schema element.
type Lldp_Interface_Neighbor_Capability_EnabledPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Capability_EnabledPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled YANG schema element.
type Lldp_Interface_Neighbor_Capability_EnabledPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Capability_NamePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/name YANG schema element.
type Lldp_Interface_Neighbor_Capability_NamePath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Capability_NamePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/name YANG schema element.
type Lldp_Interface_Neighbor_Capability_NamePathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Indicates whether the corresponding system capability is
// enabled on the neighbor.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/enabled"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled"
func (n *Lldp_Interface_Neighbor_CapabilityPath) Enabled() *Lldp_Interface_Neighbor_Capability_EnabledPath {
	return &Lldp_Interface_Neighbor_Capability_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Indicates whether the corresponding system capability is
// enabled on the neighbor.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/enabled"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled"
func (n *Lldp_Interface_Neighbor_CapabilityPathAny) Enabled() *Lldp_Interface_Neighbor_Capability_EnabledPathAny {
	return &Lldp_Interface_Neighbor_Capability_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Name of the system capability advertised by the neighbor.
// Capabilities are represented in a bitmap that defines the
// primary functions of the system. The capabilities are
// defined in IEEE 802.1AB.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/name"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/name"
func (n *Lldp_Interface_Neighbor_CapabilityPath) Name() *Lldp_Interface_Neighbor_Capability_NamePath {
	return &Lldp_Interface_Neighbor_Capability_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Name of the system capability advertised by the neighbor.
// Capabilities are represented in a bitmap that defines the
// primary functions of the system. The capabilities are
// defined in IEEE 802.1AB.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/name"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/name"
func (n *Lldp_Interface_Neighbor_CapabilityPathAny) Name() *Lldp_Interface_Neighbor_Capability_NamePathAny {
	return &Lldp_Interface_Neighbor_Capability_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lldp_Interface_Neighbor_TlvPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type Lldp_Interface_Neighbor_TlvPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_TlvPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type Lldp_Interface_Neighbor_TlvPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Tlv_OuiPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui YANG schema element.
type Lldp_Interface_Neighbor_Tlv_OuiPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Tlv_OuiPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui YANG schema element.
type Lldp_Interface_Neighbor_Tlv_OuiPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Tlv_OuiSubtypePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype YANG schema element.
type Lldp_Interface_Neighbor_Tlv_OuiSubtypePath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Tlv_OuiSubtypePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype YANG schema element.
type Lldp_Interface_Neighbor_Tlv_OuiSubtypePathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Tlv_TypePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/type YANG schema element.
type Lldp_Interface_Neighbor_Tlv_TypePath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Tlv_TypePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/type YANG schema element.
type Lldp_Interface_Neighbor_Tlv_TypePathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Tlv_ValuePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/value YANG schema element.
type Lldp_Interface_Neighbor_Tlv_ValuePath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Tlv_ValuePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/value YANG schema element.
type Lldp_Interface_Neighbor_Tlv_ValuePathAny struct {
	*ygot.NodePath
}

// Oui (leaf): The organizationally unique identifier field shall contain
// the organization's OUI as defined in Clause 9 of IEEE Std
// 802. The high-order octet is 0 and the low-order 3 octets
// are the SMI Network Management Private Enterprise Code of
// the Vendor in network byte order, as defined in the
// 'Assigned Numbers' RFC [RFC3232].
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/oui"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui"
func (n *Lldp_Interface_Neighbor_TlvPath) Oui() *Lldp_Interface_Neighbor_Tlv_OuiPath {
	return &Lldp_Interface_Neighbor_Tlv_OuiPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oui"},
			map[string]interface{}{},
			n,
		),
	}
}

// Oui (leaf): The organizationally unique identifier field shall contain
// the organization's OUI as defined in Clause 9 of IEEE Std
// 802. The high-order octet is 0 and the low-order 3 octets
// are the SMI Network Management Private Enterprise Code of
// the Vendor in network byte order, as defined in the
// 'Assigned Numbers' RFC [RFC3232].
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/oui"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui"
func (n *Lldp_Interface_Neighbor_TlvPathAny) Oui() *Lldp_Interface_Neighbor_Tlv_OuiPathAny {
	return &Lldp_Interface_Neighbor_Tlv_OuiPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oui"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuiSubtype (leaf): The organizationally defined subtype field shall contain a
// unique subtype value assigned by the defining organization.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/oui-subtype"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype"
func (n *Lldp_Interface_Neighbor_TlvPath) OuiSubtype() *Lldp_Interface_Neighbor_Tlv_OuiSubtypePath {
	return &Lldp_Interface_Neighbor_Tlv_OuiSubtypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oui-subtype"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuiSubtype (leaf): The organizationally defined subtype field shall contain a
// unique subtype value assigned by the defining organization.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/oui-subtype"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype"
func (n *Lldp_Interface_Neighbor_TlvPathAny) OuiSubtype() *Lldp_Interface_Neighbor_Tlv_OuiSubtypePathAny {
	return &Lldp_Interface_Neighbor_Tlv_OuiSubtypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oui-subtype"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The integer value identifying the type of information
// contained in the value field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/type"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/type"
func (n *Lldp_Interface_Neighbor_TlvPath) Type() *Lldp_Interface_Neighbor_Tlv_TypePath {
	return &Lldp_Interface_Neighbor_Tlv_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The integer value identifying the type of information
// contained in the value field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/type"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/type"
func (n *Lldp_Interface_Neighbor_TlvPathAny) Type() *Lldp_Interface_Neighbor_Tlv_TypePathAny {
	return &Lldp_Interface_Neighbor_Tlv_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): A variable-length octet-string containing the
// instance-specific information for this TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/value"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/value"
func (n *Lldp_Interface_Neighbor_TlvPath) Value() *Lldp_Interface_Neighbor_Tlv_ValuePath {
	return &Lldp_Interface_Neighbor_Tlv_ValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): A variable-length octet-string containing the
// instance-specific information for this TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/value"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/value"
func (n *Lldp_Interface_Neighbor_TlvPathAny) Value() *Lldp_Interface_Neighbor_Tlv_ValuePathAny {
	return &Lldp_Interface_Neighbor_Tlv_ValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

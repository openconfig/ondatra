/*
Package interfaces is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/alexmasi/go/pkg/mod/github.com/openconfig/ygot@v0.23.1/genutil/names.go
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package interfaces

import (
	"github.com/openconfig/ygot/ygot"
)

// Interface_Subinterface_Ipv4_Address_VrrpGroupPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroupPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/accept-mode YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/accept-mode YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/advertisement-interval YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/advertisement-interval YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/preempt YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/preempt YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/preempt-delay YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/preempt-delay YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/priority YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/priority YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-address YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-address YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-router-id YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-router-id YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny struct {
	*ygot.NodePath
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/accept-mode"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/accept-mode"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) AcceptMode() *Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/accept-mode"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/accept-mode"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) AcceptMode() *Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/advertisement-interval"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/advertisement-interval"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) AdvertisementInterval() *Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/advertisement-interval"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/advertisement-interval"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) AdvertisementInterval() *Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) CurrentPriority() *Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) CurrentPriority() *Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) InterfaceTracking() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) InterfaceTracking() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/preempt"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/preempt"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) Preempt() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/preempt"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/preempt"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) Preempt() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/preempt-delay"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/preempt-delay"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) PreemptDelay() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/preempt-delay"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/preempt-delay"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) PreemptDelay() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) Priority() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) Priority() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/virtual-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-address"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) VirtualAddress() *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/virtual-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-address"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) VirtualAddress() *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/virtual-router-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-router-id"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) VirtualRouterId() *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/virtual-router-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-router-id"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) VirtualRouterId() *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny struct {
	*ygot.NodePath
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/priority-decrement"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) PriorityDecrement() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/priority-decrement"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) PriorityDecrement() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/track-interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) TrackInterface() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/track-interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) TrackInterface() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_CountersPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters YANG schema element.
type Interface_Subinterface_Ipv4_CountersPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters YANG schema element.
type Interface_Subinterface_Ipv4_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-error-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-error-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-error-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-error-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) InDiscardedPkts() *Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InDiscardedPkts() *Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) InErrorPkts() *Interface_Subinterface_Ipv4_Counters_InErrorPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_InErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InErrorPkts() *Interface_Subinterface_Ipv4_Counters_InErrorPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_InErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv4_CountersPath) InForwardedOctets() *Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPath {
	return &Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InForwardedOctets() *Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) InForwardedPkts() *Interface_Subinterface_Ipv4_Counters_InForwardedPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_InForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InForwardedPkts() *Interface_Subinterface_Ipv4_Counters_InForwardedPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_InForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv4_CountersPath) InOctets() *Interface_Subinterface_Ipv4_Counters_InOctetsPath {
	return &Interface_Subinterface_Ipv4_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InOctets() *Interface_Subinterface_Ipv4_Counters_InOctetsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) InPkts() *Interface_Subinterface_Ipv4_Counters_InPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InPkts() *Interface_Subinterface_Ipv4_Counters_InPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutDiscardedPkts() *Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutDiscardedPkts() *Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutErrorPkts() *Interface_Subinterface_Ipv4_Counters_OutErrorPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_OutErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutErrorPkts() *Interface_Subinterface_Ipv4_Counters_OutErrorPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_OutErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutForwardedOctets() *Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPath {
	return &Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutForwardedOctets() *Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutForwardedPkts() *Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutForwardedPkts() *Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutOctets() *Interface_Subinterface_Ipv4_Counters_OutOctetsPath {
	return &Interface_Subinterface_Ipv4_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutOctets() *Interface_Subinterface_Ipv4_Counters_OutOctetsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutPkts() *Interface_Subinterface_Ipv4_Counters_OutPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutPkts() *Interface_Subinterface_Ipv4_Counters_OutPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_NeighborPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv4_NeighborPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_NeighborPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv4_NeighborPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Neighbor_IpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/ip YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_IpPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Neighbor_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/ip YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_IpPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/link-layer-address YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/link-layer-address YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Neighbor_OriginPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/origin YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_OriginPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Neighbor_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/origin YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_OriginPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv4 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/ip"
func (n *Interface_Subinterface_Ipv4_NeighborPath) Ip() *Interface_Subinterface_Ipv4_Neighbor_IpPath {
	return &Interface_Subinterface_Ipv4_Neighbor_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv4 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/ip"
func (n *Interface_Subinterface_Ipv4_NeighborPathAny) Ip() *Interface_Subinterface_Ipv4_Neighbor_IpPathAny {
	return &Interface_Subinterface_Ipv4_Neighbor_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/link-layer-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/link-layer-address"
func (n *Interface_Subinterface_Ipv4_NeighborPath) LinkLayerAddress() *Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPath {
	return &Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/link-layer-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/link-layer-address"
func (n *Interface_Subinterface_Ipv4_NeighborPathAny) LinkLayerAddress() *Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPathAny {
	return &Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry, static or dynamic.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv4_NeighborPath) Origin() *Interface_Subinterface_Ipv4_Neighbor_OriginPath {
	return &Interface_Subinterface_Ipv4_Neighbor_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry, static or dynamic.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv4_NeighborPathAny) Origin() *Interface_Subinterface_Ipv4_Neighbor_OriginPathAny {
	return &Interface_Subinterface_Ipv4_Neighbor_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_ProxyArpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp YANG schema element.
type Interface_Subinterface_Ipv4_ProxyArpPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_ProxyArpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp YANG schema element.
type Interface_Subinterface_Ipv4_ProxyArpPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_ProxyArp_ModePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/state/mode YANG schema element.
type Interface_Subinterface_Ipv4_ProxyArp_ModePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_ProxyArp_ModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/state/mode YANG schema element.
type Interface_Subinterface_Ipv4_ProxyArp_ModePathAny struct {
	*ygot.NodePath
}

// Mode (leaf): When set to a value other than DISABLE, the local system should
// respond to ARP requests that are for target addresses other than
// those that are configured on the local subinterface using its own
// MAC address as the target hardware address. If the REMOTE_ONLY
// value is specified, replies are only sent when the target address
// falls outside the locally configured subnets on the interface,
// whereas with the ALL value, all requests, regardless of their
// target address are replied to.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/mode"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/state/mode"
func (n *Interface_Subinterface_Ipv4_ProxyArpPath) Mode() *Interface_Subinterface_Ipv4_ProxyArp_ModePath {
	return &Interface_Subinterface_Ipv4_ProxyArp_ModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): When set to a value other than DISABLE, the local system should
// respond to ARP requests that are for target addresses other than
// those that are configured on the local subinterface using its own
// MAC address as the target hardware address. If the REMOTE_ONLY
// value is specified, replies are only sent when the target address
// falls outside the locally configured subnets on the interface,
// whereas with the ALL value, all requests, regardless of their
// target address are replied to.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/mode"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/state/mode"
func (n *Interface_Subinterface_Ipv4_ProxyArpPathAny) Mode() *Interface_Subinterface_Ipv4_ProxyArp_ModePathAny {
	return &Interface_Subinterface_Ipv4_ProxyArp_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered YANG schema element.
type Interface_Subinterface_Ipv4_UnnumberedPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered YANG schema element.
type Interface_Subinterface_Ipv4_UnnumberedPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/state/enabled YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_EnabledPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/state/enabled YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_EnabledPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/state/enabled"
func (n *Interface_Subinterface_Ipv4_UnnumberedPath) Enabled() *Interface_Subinterface_Ipv4_Unnumbered_EnabledPath {
	return &Interface_Subinterface_Ipv4_Unnumbered_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/state/enabled"
func (n *Interface_Subinterface_Ipv4_UnnumberedPathAny) Enabled() *Interface_Subinterface_Ipv4_Unnumbered_EnabledPathAny {
	return &Interface_Subinterface_Ipv4_Unnumbered_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref"
func (n *Interface_Subinterface_Ipv4_UnnumberedPath) InterfaceRef() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath {
	return &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref"
func (n *Interface_Subinterface_Ipv4_UnnumberedPathAny) InterfaceRef() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny {
	return &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/state/interface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath) Interface() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePath {
	return &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/state/interface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny) Interface() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny {
	return &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/subinterface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/state/subinterface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath) Subinterface() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath {
	return &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/subinterface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/state/subinterface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny {
	return &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6Path represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6 YANG schema element.
type Interface_Subinterface_Ipv6Path struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6PathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6 YANG schema element.
type Interface_Subinterface_Ipv6PathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_DhcpClientPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/dhcp-client YANG schema element.
type Interface_Subinterface_Ipv6_DhcpClientPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_DhcpClientPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/dhcp-client YANG schema element.
type Interface_Subinterface_Ipv6_DhcpClientPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/dup-addr-detect-transmits YANG schema element.
type Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/dup-addr-detect-transmits YANG schema element.
type Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/enabled YANG schema element.
type Interface_Subinterface_Ipv6_EnabledPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/enabled YANG schema element.
type Interface_Subinterface_Ipv6_EnabledPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_MtuPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/mtu YANG schema element.
type Interface_Subinterface_Ipv6_MtuPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/mtu YANG schema element.
type Interface_Subinterface_Ipv6_MtuPathAny struct {
	*ygot.NodePath
}

// AddressAny (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv6Path) AddressAny() *Interface_Subinterface_Ipv6_AddressPathAny {
	return &Interface_Subinterface_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// AddressAny (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv6PathAny) AddressAny() *Interface_Subinterface_Ipv6_AddressPathAny {
	return &Interface_Subinterface_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Address (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address"
// Ip: string
func (n *Interface_Subinterface_Ipv6Path) Address(Ip string) *Interface_Subinterface_Ipv6_AddressPath {
	return &Interface_Subinterface_Ipv6_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Address (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address"
// Ip: string
func (n *Interface_Subinterface_Ipv6PathAny) Address(Ip string) *Interface_Subinterface_Ipv6_AddressPathAny {
	return &Interface_Subinterface_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Autoconf (container): Top-level container for IPv6 autoconf
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "autoconf"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf"
func (n *Interface_Subinterface_Ipv6Path) Autoconf() *Interface_Subinterface_Ipv6_AutoconfPath {
	return &Interface_Subinterface_Ipv6_AutoconfPath{
		NodePath: ygot.NewNodePath(
			[]string{"autoconf"},
			map[string]interface{}{},
			n,
		),
	}
}

// Autoconf (container): Top-level container for IPv6 autoconf
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "autoconf"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf"
func (n *Interface_Subinterface_Ipv6PathAny) Autoconf() *Interface_Subinterface_Ipv6_AutoconfPathAny {
	return &Interface_Subinterface_Ipv6_AutoconfPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"autoconf"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters"
func (n *Interface_Subinterface_Ipv6Path) Counters() *Interface_Subinterface_Ipv6_CountersPath {
	return &Interface_Subinterface_Ipv6_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters"
func (n *Interface_Subinterface_Ipv6PathAny) Counters() *Interface_Subinterface_Ipv6_CountersPathAny {
	return &Interface_Subinterface_Ipv6_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/dhcp-client"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/dhcp-client"
func (n *Interface_Subinterface_Ipv6Path) DhcpClient() *Interface_Subinterface_Ipv6_DhcpClientPath {
	return &Interface_Subinterface_Ipv6_DhcpClientPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/dhcp-client"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/dhcp-client"
func (n *Interface_Subinterface_Ipv6PathAny) DhcpClient() *Interface_Subinterface_Ipv6_DhcpClientPathAny {
	return &Interface_Subinterface_Ipv6_DhcpClientPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DupAddrDetectTransmits (leaf): The number of consecutive Neighbor Solicitation messages
// sent while performing Duplicate Address Detection on a
// tentative address.  A value of zero indicates that
// Duplicate Address Detection is not performed on
// tentative addresses.  A value of one indicates a single
// transmission with no follow-up retransmissions.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/dup-addr-detect-transmits"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/dup-addr-detect-transmits"
func (n *Interface_Subinterface_Ipv6Path) DupAddrDetectTransmits() *Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPath {
	return &Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dup-addr-detect-transmits"},
			map[string]interface{}{},
			n,
		),
	}
}

// DupAddrDetectTransmits (leaf): The number of consecutive Neighbor Solicitation messages
// sent while performing Duplicate Address Detection on a
// tentative address.  A value of zero indicates that
// Duplicate Address Detection is not performed on
// tentative addresses.  A value of one indicates a single
// transmission with no follow-up retransmissions.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/dup-addr-detect-transmits"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/dup-addr-detect-transmits"
func (n *Interface_Subinterface_Ipv6PathAny) DupAddrDetectTransmits() *Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPathAny {
	return &Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dup-addr-detect-transmits"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv6 is enabled or disabled on this
// interface.  When IPv6 is enabled, this interface is
// connected to an IPv6 stack, and the interface can send
// and receive IPv6 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/enabled"
func (n *Interface_Subinterface_Ipv6Path) Enabled() *Interface_Subinterface_Ipv6_EnabledPath {
	return &Interface_Subinterface_Ipv6_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv6 is enabled or disabled on this
// interface.  When IPv6 is enabled, this interface is
// connected to an IPv6 stack, and the interface can send
// and receive IPv6 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/enabled"
func (n *Interface_Subinterface_Ipv6PathAny) Enabled() *Interface_Subinterface_Ipv6_EnabledPathAny {
	return &Interface_Subinterface_Ipv6_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv6 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/mtu"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/mtu"
func (n *Interface_Subinterface_Ipv6Path) Mtu() *Interface_Subinterface_Ipv6_MtuPath {
	return &Interface_Subinterface_Ipv6_MtuPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv6 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/mtu"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/mtu"
func (n *Interface_Subinterface_Ipv6PathAny) Mtu() *Interface_Subinterface_Ipv6_MtuPathAny {
	return &Interface_Subinterface_Ipv6_MtuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv6Path) NeighborAny() *Interface_Subinterface_Ipv6_NeighborPathAny {
	return &Interface_Subinterface_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// NeighborAny (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv6PathAny) NeighborAny() *Interface_Subinterface_Ipv6_NeighborPathAny {
	return &Interface_Subinterface_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Neighbor (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor"
// Ip: string
func (n *Interface_Subinterface_Ipv6Path) Neighbor(Ip string) *Interface_Subinterface_Ipv6_NeighborPath {
	return &Interface_Subinterface_Ipv6_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Neighbor (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor"
// Ip: string
func (n *Interface_Subinterface_Ipv6PathAny) Neighbor(Ip string) *Interface_Subinterface_Ipv6_NeighborPathAny {
	return &Interface_Subinterface_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// RouterAdvertisement (container): Configuration and operational state parameters relating to
// router advertisements.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "router-advertisement"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement"
func (n *Interface_Subinterface_Ipv6Path) RouterAdvertisement() *Interface_Subinterface_Ipv6_RouterAdvertisementPath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisementPath{
		NodePath: ygot.NewNodePath(
			[]string{"router-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouterAdvertisement (container): Configuration and operational state parameters relating to
// router advertisements.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "router-advertisement"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement"
func (n *Interface_Subinterface_Ipv6PathAny) RouterAdvertisement() *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"router-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered"
func (n *Interface_Subinterface_Ipv6Path) Unnumbered() *Interface_Subinterface_Ipv6_UnnumberedPath {
	return &Interface_Subinterface_Ipv6_UnnumberedPath{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered"
func (n *Interface_Subinterface_Ipv6PathAny) Unnumbered() *Interface_Subinterface_Ipv6_UnnumberedPathAny {
	return &Interface_Subinterface_Ipv6_UnnumberedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_AddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address YANG schema element.
type Interface_Subinterface_Ipv6_AddressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_AddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address YANG schema element.
type Interface_Subinterface_Ipv6_AddressPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_IpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/ip YANG schema element.
type Interface_Subinterface_Ipv6_Address_IpPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/ip YANG schema element.
type Interface_Subinterface_Ipv6_Address_IpPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_OriginPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/origin YANG schema element.
type Interface_Subinterface_Ipv6_Address_OriginPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/origin YANG schema element.
type Interface_Subinterface_Ipv6_Address_OriginPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/prefix-length YANG schema element.
type Interface_Subinterface_Ipv6_Address_PrefixLengthPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/prefix-length YANG schema element.
type Interface_Subinterface_Ipv6_Address_PrefixLengthPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_StatusPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/status YANG schema element.
type Interface_Subinterface_Ipv6_Address_StatusPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_StatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/status YANG schema element.
type Interface_Subinterface_Ipv6_Address_StatusPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv6 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/ip"
func (n *Interface_Subinterface_Ipv6_AddressPath) Ip() *Interface_Subinterface_Ipv6_Address_IpPath {
	return &Interface_Subinterface_Ipv6_Address_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv6 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/ip"
func (n *Interface_Subinterface_Ipv6_AddressPathAny) Ip() *Interface_Subinterface_Ipv6_Address_IpPathAny {
	return &Interface_Subinterface_Ipv6_Address_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., static, dhcp, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv6_AddressPath) Origin() *Interface_Subinterface_Ipv6_Address_OriginPath {
	return &Interface_Subinterface_Ipv6_Address_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., static, dhcp, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv6_AddressPathAny) Origin() *Interface_Subinterface_Ipv6_Address_OriginPathAny {
	return &Interface_Subinterface_Ipv6_Address_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/prefix-length"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/prefix-length"
func (n *Interface_Subinterface_Ipv6_AddressPath) PrefixLength() *Interface_Subinterface_Ipv6_Address_PrefixLengthPath {
	return &Interface_Subinterface_Ipv6_Address_PrefixLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/prefix-length"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/prefix-length"
func (n *Interface_Subinterface_Ipv6_AddressPathAny) PrefixLength() *Interface_Subinterface_Ipv6_Address_PrefixLengthPathAny {
	return &Interface_Subinterface_Ipv6_Address_PrefixLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// Status (leaf): The status of an address.  Most of the states correspond
// to states from the IPv6 Stateless Address
// Autoconfiguration protocol.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/status"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/status"
func (n *Interface_Subinterface_Ipv6_AddressPath) Status() *Interface_Subinterface_Ipv6_Address_StatusPath {
	return &Interface_Subinterface_Ipv6_Address_StatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Status (leaf): The status of an address.  Most of the states correspond
// to states from the IPv6 Stateless Address
// Autoconfiguration protocol.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/status"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/status"
func (n *Interface_Subinterface_Ipv6_AddressPathAny) Status() *Interface_Subinterface_Ipv6_Address_StatusPathAny {
	return &Interface_Subinterface_Ipv6_Address_StatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_Subinterface_Ipv6_AddressPath) VrrpGroupAny() *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_Subinterface_Ipv6_AddressPathAny) VrrpGroupAny() *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_Subinterface_Ipv6_AddressPath) VrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv6_Address_VrrpGroupPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_Subinterface_Ipv6_AddressPathAny) VrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_Address_VrrpGroupPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroupPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/accept-mode YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/accept-mode YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/advertisement-interval YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/advertisement-interval YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/preempt YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/preempt YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/preempt-delay YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/preempt-delay YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/priority YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/priority YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-address YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-address YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-link-local YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-link-local YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-router-id YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-router-id YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny struct {
	*ygot.NodePath
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/accept-mode"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/accept-mode"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) AcceptMode() *Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/accept-mode"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/accept-mode"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) AcceptMode() *Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/advertisement-interval"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/advertisement-interval"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) AdvertisementInterval() *Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/advertisement-interval"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/advertisement-interval"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) AdvertisementInterval() *Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) CurrentPriority() *Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) CurrentPriority() *Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) InterfaceTracking() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) InterfaceTracking() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/preempt"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/preempt"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) Preempt() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/preempt"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/preempt"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) Preempt() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/preempt-delay"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/preempt-delay"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) PreemptDelay() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/preempt-delay"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/preempt-delay"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) PreemptDelay() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) Priority() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) Priority() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/virtual-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-address"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) VirtualAddress() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/virtual-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-address"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) VirtualAddress() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualLinkLocal (leaf): For VRRP on IPv6 interfaces, sets the virtual link local
// address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/virtual-link-local"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-link-local"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) VirtualLinkLocal() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-link-local"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualLinkLocal (leaf): For VRRP on IPv6 interfaces, sets the virtual link local
// address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/virtual-link-local"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-link-local"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) VirtualLinkLocal() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-link-local"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/virtual-router-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-router-id"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) VirtualRouterId() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/virtual-router-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-router-id"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) VirtualRouterId() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny struct {
	*ygot.NodePath
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/priority-decrement"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) PriorityDecrement() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/priority-decrement"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) PriorityDecrement() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/track-interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) TrackInterface() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/track-interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) TrackInterface() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_AutoconfPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf YANG schema element.
type Interface_Subinterface_Ipv6_AutoconfPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_AutoconfPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf YANG schema element.
type Interface_Subinterface_Ipv6_AutoconfPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-global-addresses YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-global-addresses YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-temporary-addresses YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-temporary-addresses YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-preferred-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-preferred-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-valid-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-valid-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny struct {
	*ygot.NodePath
}

// CreateGlobalAddresses (leaf): [adapted from IETF IP model RFC 7277]
//
// If enabled, the host creates global addresses as
// described in RFC 4862.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/create-global-addresses"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-global-addresses"
func (n *Interface_Subinterface_Ipv6_AutoconfPath) CreateGlobalAddresses() *Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath {
	return &Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "create-global-addresses"},
			map[string]interface{}{},
			n,
		),
	}
}

// CreateGlobalAddresses (leaf): [adapted from IETF IP model RFC 7277]
//
// If enabled, the host creates global addresses as
// described in RFC 4862.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/create-global-addresses"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-global-addresses"
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) CreateGlobalAddresses() *Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny {
	return &Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "create-global-addresses"},
			map[string]interface{}{},
			n,
		),
	}
}

// CreateTemporaryAddresses (leaf): [adapted from IETF IP model RFC 7277]
//
// If enabled, the host creates temporary addresses as
// described in RFC 4941.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/create-temporary-addresses"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-temporary-addresses"
func (n *Interface_Subinterface_Ipv6_AutoconfPath) CreateTemporaryAddresses() *Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath {
	return &Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "create-temporary-addresses"},
			map[string]interface{}{},
			n,
		),
	}
}

// CreateTemporaryAddresses (leaf): [adapted from IETF IP model RFC 7277]
//
// If enabled, the host creates temporary addresses as
// described in RFC 4941.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/create-temporary-addresses"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-temporary-addresses"
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) CreateTemporaryAddresses() *Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny {
	return &Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "create-temporary-addresses"},
			map[string]interface{}{},
			n,
		),
	}
}

// TemporaryPreferredLifetime (leaf): [adapted from IETF IP model RFC 7277]
//
// The time period during which the temporary address is
// preferred.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/temporary-preferred-lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_AutoconfPath) TemporaryPreferredLifetime() *Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath {
	return &Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "temporary-preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// TemporaryPreferredLifetime (leaf): [adapted from IETF IP model RFC 7277]
//
// The time period during which the temporary address is
// preferred.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/temporary-preferred-lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) TemporaryPreferredLifetime() *Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny {
	return &Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "temporary-preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// TemporaryValidLifetime (leaf): [adapted from IETF IP model RFC 7277]
//
// The time period during which the temporary address
// is valid.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/temporary-valid-lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-valid-lifetime"
func (n *Interface_Subinterface_Ipv6_AutoconfPath) TemporaryValidLifetime() *Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath {
	return &Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "temporary-valid-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// TemporaryValidLifetime (leaf): [adapted from IETF IP model RFC 7277]
//
// The time period during which the temporary address
// is valid.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/temporary-valid-lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-valid-lifetime"
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) TemporaryValidLifetime() *Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny {
	return &Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "temporary-valid-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_CountersPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters YANG schema element.
type Interface_Subinterface_Ipv6_CountersPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters YANG schema element.
type Interface_Subinterface_Ipv6_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InDiscardedPkts() *Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InDiscardedPkts() *Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InErrorPkts() *Interface_Subinterface_Ipv6_Counters_InErrorPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_InErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InErrorPkts() *Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) InForwardedOctets() *Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath {
	return &Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InForwardedOctets() *Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InForwardedPkts() *Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InForwardedPkts() *Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) InOctets() *Interface_Subinterface_Ipv6_Counters_InOctetsPath {
	return &Interface_Subinterface_Ipv6_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InOctets() *Interface_Subinterface_Ipv6_Counters_InOctetsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InPkts() *Interface_Subinterface_Ipv6_Counters_InPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InPkts() *Interface_Subinterface_Ipv6_Counters_InPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutDiscardedPkts() *Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutDiscardedPkts() *Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutErrorPkts() *Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutErrorPkts() *Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutForwardedOctets() *Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath {
	return &Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutForwardedOctets() *Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutForwardedPkts() *Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutForwardedPkts() *Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutOctets() *Interface_Subinterface_Ipv6_Counters_OutOctetsPath {
	return &Interface_Subinterface_Ipv6_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutOctets() *Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutPkts() *Interface_Subinterface_Ipv6_Counters_OutPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutPkts() *Interface_Subinterface_Ipv6_Counters_OutPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_NeighborPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv6_NeighborPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_NeighborPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv6_NeighborPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_IpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/ip YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_IpPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/ip YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_IpPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_IsRouterPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_IsRouterPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/link-layer-address YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/link-layer-address YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_OriginPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_OriginPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_OriginPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv6 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/ip"
func (n *Interface_Subinterface_Ipv6_NeighborPath) Ip() *Interface_Subinterface_Ipv6_Neighbor_IpPath {
	return &Interface_Subinterface_Ipv6_Neighbor_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv6 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/ip"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) Ip() *Interface_Subinterface_Ipv6_Neighbor_IpPathAny {
	return &Interface_Subinterface_Ipv6_Neighbor_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// IsRouter (leaf): Indicates that the neighbor node acts as a router.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/is-router"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_Subinterface_Ipv6_NeighborPath) IsRouter() *Interface_Subinterface_Ipv6_Neighbor_IsRouterPath {
	return &Interface_Subinterface_Ipv6_Neighbor_IsRouterPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "is-router"},
			map[string]interface{}{},
			n,
		),
	}
}

// IsRouter (leaf): Indicates that the neighbor node acts as a router.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/is-router"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) IsRouter() *Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny {
	return &Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "is-router"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/link-layer-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/link-layer-address"
func (n *Interface_Subinterface_Ipv6_NeighborPath) LinkLayerAddress() *Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath {
	return &Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/link-layer-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/link-layer-address"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) LinkLayerAddress() *Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny {
	return &Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborState (leaf): The Neighbor Unreachability Detection state of this
// entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/neighbor-state"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_Subinterface_Ipv6_NeighborPath) NeighborState() *Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath {
	return &Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborState (leaf): The Neighbor Unreachability Detection state of this
// entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/neighbor-state"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) NeighborState() *Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny {
	return &Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv6_NeighborPath) Origin() *Interface_Subinterface_Ipv6_Neighbor_OriginPath {
	return &Interface_Subinterface_Ipv6_Neighbor_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) Origin() *Interface_Subinterface_Ipv6_Neighbor_OriginPathAny {
	return &Interface_Subinterface_Ipv6_Neighbor_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_RouterAdvertisementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisementPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisementPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/interval YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/interval YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/suppress YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/suppress YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny struct {
	*ygot.NodePath
}

// Interval (leaf): The interval between periodic router advertisement neighbor
// discovery messages sent on this interface expressed in
// seconds.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/interval"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/interval"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Interval() *Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): The interval between periodic router advertisement neighbor
// discovery messages sent on this interface expressed in
// seconds.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/interval"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/interval"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Interval() *Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lifetime (leaf): The lifetime advertised in the router advertisement neighbor
// discovery message on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Lifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lifetime (leaf): The lifetime advertised in the router advertisement neighbor
// discovery message on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Lifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Suppress (leaf): When set to true, router advertisement neighbor discovery
// messages are not transmitted on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/suppress"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/suppress"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Suppress() *Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "suppress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Suppress (leaf): When set to true, router advertisement neighbor discovery
// messages are not transmitted on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/suppress"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/suppress"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Suppress() *Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "suppress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered YANG schema element.
type Interface_Subinterface_Ipv6_UnnumberedPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered YANG schema element.
type Interface_Subinterface_Ipv6_UnnumberedPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/state/enabled YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_EnabledPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/state/enabled YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/state/enabled"
func (n *Interface_Subinterface_Ipv6_UnnumberedPath) Enabled() *Interface_Subinterface_Ipv6_Unnumbered_EnabledPath {
	return &Interface_Subinterface_Ipv6_Unnumbered_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/state/enabled"
func (n *Interface_Subinterface_Ipv6_UnnumberedPathAny) Enabled() *Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny {
	return &Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref"
func (n *Interface_Subinterface_Ipv6_UnnumberedPath) InterfaceRef() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath {
	return &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref"
func (n *Interface_Subinterface_Ipv6_UnnumberedPathAny) InterfaceRef() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny {
	return &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/interface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath) Interface() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath {
	return &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/interface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny) Interface() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny {
	return &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/subinterface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/subinterface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath) Subinterface() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath {
	return &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/subinterface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/subinterface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny {
	return &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_VlanPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan YANG schema element.
type Interface_Subinterface_VlanPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_VlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan YANG schema element.
type Interface_Subinterface_VlanPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_VlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_VlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_VlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_VlanIdPathAny struct {
	*ygot.NodePath
}

// EgressMapping (container): Egress VLAN and label behaviors for packets that are
// destined for output via this subinterface.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "egress-mapping"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping"
func (n *Interface_Subinterface_VlanPath) EgressMapping() *Interface_Subinterface_Vlan_EgressMappingPath {
	return &Interface_Subinterface_Vlan_EgressMappingPath{
		NodePath: ygot.NewNodePath(
			[]string{"egress-mapping"},
			map[string]interface{}{},
			n,
		),
	}
}

// EgressMapping (container): Egress VLAN and label behaviors for packets that are
// destined for output via this subinterface.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "egress-mapping"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping"
func (n *Interface_Subinterface_VlanPathAny) EgressMapping() *Interface_Subinterface_Vlan_EgressMappingPathAny {
	return &Interface_Subinterface_Vlan_EgressMappingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress-mapping"},
			map[string]interface{}{},
			n,
		),
	}
}

// IngressMapping (container): Ingress VLAN stack behaviors for packets that arrive on
// this subinterface after their VLAN idenitifer(s) have been
// matched.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ingress-mapping"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping"
func (n *Interface_Subinterface_VlanPath) IngressMapping() *Interface_Subinterface_Vlan_IngressMappingPath {
	return &Interface_Subinterface_Vlan_IngressMappingPath{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-mapping"},
			map[string]interface{}{},
			n,
		),
	}
}

// IngressMapping (container): Ingress VLAN stack behaviors for packets that arrive on
// this subinterface after their VLAN idenitifer(s) have been
// matched.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ingress-mapping"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping"
func (n *Interface_Subinterface_VlanPathAny) IngressMapping() *Interface_Subinterface_Vlan_IngressMappingPathAny {
	return &Interface_Subinterface_Vlan_IngressMappingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-mapping"},
			map[string]interface{}{},
			n,
		),
	}
}

// Match (container): Configuration for various VLAN tag matching schemes,
// including single-tagged 802.1q packets and double-tagged
// 802.1ad 'Q-in-Q' packets. Typically only one of the subordinate
// containers should be specified.
//
// Wildcards may be matched by specifying range values of 2-4094.
// If implementations have a more efficient way to match Wildcards
// then they should recognize this pattern and translate accordingly.
//
// Implementations are expected to return errors for combinations
// that they do not support, or provide deviations to the same effect.
//
// For simple VLAN configurations without an 'egress-mapping' then
// using the 'single-tagged' and 'double-tagged' VLAN matches that
// resolve to specific values, these specify the VLAN identifiers
// applied to packets on egress.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "match"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match"
func (n *Interface_Subinterface_VlanPath) Match() *Interface_Subinterface_Vlan_MatchPath {
	return &Interface_Subinterface_Vlan_MatchPath{
		NodePath: ygot.NewNodePath(
			[]string{"match"},
			map[string]interface{}{},
			n,
		),
	}
}

// Match (container): Configuration for various VLAN tag matching schemes,
// including single-tagged 802.1q packets and double-tagged
// 802.1ad 'Q-in-Q' packets. Typically only one of the subordinate
// containers should be specified.
//
// Wildcards may be matched by specifying range values of 2-4094.
// If implementations have a more efficient way to match Wildcards
// then they should recognize this pattern and translate accordingly.
//
// Implementations are expected to return errors for combinations
// that they do not support, or provide deviations to the same effect.
//
// For simple VLAN configurations without an 'egress-mapping' then
// using the 'single-tagged' and 'double-tagged' VLAN matches that
// resolve to specific values, these specify the VLAN identifiers
// applied to packets on egress.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "match"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match"
func (n *Interface_Subinterface_VlanPathAny) Match() *Interface_Subinterface_Vlan_MatchPathAny {
	return &Interface_Subinterface_Vlan_MatchPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): VLAN id for the subinterface -- specified inline for the
// case of a local VLAN.  The id is scoped to the
// subinterface, and could be repeated on different
// subinterfaces.
// Deprecation note: See adjacent elements in the 'vlan' container for
// making more expressive VLAN matches.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/state/vlan-id"
func (n *Interface_Subinterface_VlanPath) VlanId() *Interface_Subinterface_Vlan_VlanIdPath {
	return &Interface_Subinterface_Vlan_VlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): VLAN id for the subinterface -- specified inline for the
// case of a local VLAN.  The id is scoped to the
// subinterface, and could be repeated on different
// subinterfaces.
// Deprecation note: See adjacent elements in the 'vlan' container for
// making more expressive VLAN matches.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/state/vlan-id"
func (n *Interface_Subinterface_VlanPathAny) VlanId() *Interface_Subinterface_Vlan_VlanIdPathAny {
	return &Interface_Subinterface_Vlan_VlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_EgressMappingPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping YANG schema element.
type Interface_Subinterface_Vlan_EgressMappingPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMappingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping YANG schema element.
type Interface_Subinterface_Vlan_EgressMappingPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMapping_TpidPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/tpid YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_TpidPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMapping_TpidPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/tpid YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_TpidPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMapping_VlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_VlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-stack-action YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-stack-action YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny struct {
	*ygot.NodePath
}

// Tpid (leaf): Optionally override the tag protocol identifier field (TPID) that
// is used by the action configured by 'vlan-stack-action' when
// modifying the VLAN stack.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/tpid"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/tpid"
func (n *Interface_Subinterface_Vlan_EgressMappingPath) Tpid() *Interface_Subinterface_Vlan_EgressMapping_TpidPath {
	return &Interface_Subinterface_Vlan_EgressMapping_TpidPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tpid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tpid (leaf): Optionally override the tag protocol identifier field (TPID) that
// is used by the action configured by 'vlan-stack-action' when
// modifying the VLAN stack.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/tpid"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/tpid"
func (n *Interface_Subinterface_Vlan_EgressMappingPathAny) Tpid() *Interface_Subinterface_Vlan_EgressMapping_TpidPathAny {
	return &Interface_Subinterface_Vlan_EgressMapping_TpidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tpid"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): Optionally specifies a fixed VLAN identifier that is used by the
// action configured in 'vlan-stack-action'. For example, if the action
// is 'POP' then a VLAN identifier is removed from the stack but the
// value of this leaf is used instead. This value must be non-zero if
// the 'vlan-stack-action' is one of 'PUSH' or 'SWAP'.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-id"
func (n *Interface_Subinterface_Vlan_EgressMappingPath) VlanId() *Interface_Subinterface_Vlan_EgressMapping_VlanIdPath {
	return &Interface_Subinterface_Vlan_EgressMapping_VlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): Optionally specifies a fixed VLAN identifier that is used by the
// action configured in 'vlan-stack-action'. For example, if the action
// is 'POP' then a VLAN identifier is removed from the stack but the
// value of this leaf is used instead. This value must be non-zero if
// the 'vlan-stack-action' is one of 'PUSH' or 'SWAP'.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-id"
func (n *Interface_Subinterface_Vlan_EgressMappingPathAny) VlanId() *Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny {
	return &Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanStackAction (leaf): The action to take on the VLAN stack of a packet. This is
// optionally used in conjunction with adjacent leaves to override
// the values of the action.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/vlan-stack-action"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_EgressMappingPath) VlanStackAction() *Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath {
	return &Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan-stack-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanStackAction (leaf): The action to take on the VLAN stack of a packet. This is
// optionally used in conjunction with adjacent leaves to override
// the values of the action.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/vlan-stack-action"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_EgressMappingPathAny) VlanStackAction() *Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny {
	return &Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan-stack-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_IngressMappingPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping YANG schema element.
type Interface_Subinterface_Vlan_IngressMappingPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMappingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping YANG schema element.
type Interface_Subinterface_Vlan_IngressMappingPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMapping_TpidPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/tpid YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_TpidPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMapping_TpidPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/tpid YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_TpidPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMapping_VlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_VlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-stack-action YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-stack-action YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny struct {
	*ygot.NodePath
}

// Tpid (leaf): Optionally override the tag protocol identifier field (TPID) that
// is used by the action configured by 'vlan-stack-action' when
// modifying the VLAN stack.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/tpid"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/tpid"
func (n *Interface_Subinterface_Vlan_IngressMappingPath) Tpid() *Interface_Subinterface_Vlan_IngressMapping_TpidPath {
	return &Interface_Subinterface_Vlan_IngressMapping_TpidPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tpid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tpid (leaf): Optionally override the tag protocol identifier field (TPID) that
// is used by the action configured by 'vlan-stack-action' when
// modifying the VLAN stack.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/tpid"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/tpid"
func (n *Interface_Subinterface_Vlan_IngressMappingPathAny) Tpid() *Interface_Subinterface_Vlan_IngressMapping_TpidPathAny {
	return &Interface_Subinterface_Vlan_IngressMapping_TpidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tpid"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): Optionally specifies a fixed VLAN identifier that is used by the
// action configured in 'vlan-stack-action'. For example, if the action
// is 'PUSH' then this VLAN identifier is added to the the stack.
// This value must be non-zero if the 'vlan-stack-action' is one of
// 'PUSH' or 'SWAP'.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-id"
func (n *Interface_Subinterface_Vlan_IngressMappingPath) VlanId() *Interface_Subinterface_Vlan_IngressMapping_VlanIdPath {
	return &Interface_Subinterface_Vlan_IngressMapping_VlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): Optionally specifies a fixed VLAN identifier that is used by the
// action configured in 'vlan-stack-action'. For example, if the action
// is 'PUSH' then this VLAN identifier is added to the the stack.
// This value must be non-zero if the 'vlan-stack-action' is one of
// 'PUSH' or 'SWAP'.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-id"
func (n *Interface_Subinterface_Vlan_IngressMappingPathAny) VlanId() *Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny {
	return &Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanStackAction (leaf): The action to take on the VLAN stack of a packet. This is
// optionally used in conjunction with adjacent leaves to override
// the values of the action.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/vlan-stack-action"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_IngressMappingPath) VlanStackAction() *Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath {
	return &Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan-stack-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanStackAction (leaf): The action to take on the VLAN stack of a packet. This is
// optionally used in conjunction with adjacent leaves to override
// the values of the action.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/vlan-stack-action"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_IngressMappingPathAny) VlanStackAction() *Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny {
	return &Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan-stack-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_MatchPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match YANG schema element.
type Interface_Subinterface_Vlan_MatchPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_MatchPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match YANG schema element.
type Interface_Subinterface_Vlan_MatchPathAny struct {
	*ygot.NodePath
}

// DoubleTagged (container): Match double-tagged packets against inner exact and outer exact
// VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTagged() *Interface_Subinterface_Vlan_Match_DoubleTaggedPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedPath{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTagged (container): Match double-tagged packets against inner exact and outer exact
// VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTagged() *Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedInnerList (container): Match double-tagged packets against an inner list and outer exact
// VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-inner-list"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedInnerList() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-inner-list"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedInnerList (container): Match double-tagged packets against an inner list and outer exact
// VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-inner-list"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedInnerList() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-inner-list"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedInnerOuterRange (container): Match double-tagged packets against an inner range and an outer
// range of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-inner-outer-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedInnerOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-inner-outer-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedInnerOuterRange (container): Match double-tagged packets against an inner range and an outer
// range of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-inner-outer-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedInnerOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-inner-outer-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedInnerRange (container): Match double-tagged packets against an inner range and outer
// exact VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-inner-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedInnerRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-inner-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedInnerRange (container): Match double-tagged packets against an inner range and outer
// exact VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-inner-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedInnerRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-inner-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedOuterList (container): Match double-tagged packets against an inner exact and outer list
// of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-outer-list"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedOuterList() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-outer-list"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedOuterList (container): Match double-tagged packets against an inner exact and outer list
// of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-outer-list"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedOuterList() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-outer-list"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedOuterRange (container): Match double-tagged packets against an inner exact and an outer
// range of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-outer-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-outer-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedOuterRange (container): Match double-tagged packets against an inner exact and an outer
// range of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-outer-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-outer-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleTagged (container): Match single-tagged packets with an exact VLAN identifier.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "single-tagged"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged"
func (n *Interface_Subinterface_Vlan_MatchPath) SingleTagged() *Interface_Subinterface_Vlan_Match_SingleTaggedPath {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedPath{
		NodePath: ygot.NewNodePath(
			[]string{"single-tagged"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleTagged (container): Match single-tagged packets with an exact VLAN identifier.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "single-tagged"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged"
func (n *Interface_Subinterface_Vlan_MatchPathAny) SingleTagged() *Interface_Subinterface_Vlan_Match_SingleTaggedPathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"single-tagged"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleTaggedList (container): Match single-tagged packets with a list of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "single-tagged-list"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list"
func (n *Interface_Subinterface_Vlan_MatchPath) SingleTaggedList() *Interface_Subinterface_Vlan_Match_SingleTaggedListPath {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedListPath{
		NodePath: ygot.NewNodePath(
			[]string{"single-tagged-list"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleTaggedList (container): Match single-tagged packets with a list of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "single-tagged-list"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list"
func (n *Interface_Subinterface_Vlan_MatchPathAny) SingleTaggedList() *Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"single-tagged-list"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleTaggedRange (container): Match single-tagged packets with a range of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "single-tagged-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range"
func (n *Interface_Subinterface_Vlan_MatchPath) SingleTaggedRange() *Interface_Subinterface_Vlan_Match_SingleTaggedRangePath {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedRangePath{
		NodePath: ygot.NewNodePath(
			[]string{"single-tagged-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleTaggedRange (container): Match single-tagged packets with a range of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "single-tagged-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range"
func (n *Interface_Subinterface_Vlan_MatchPathAny) SingleTaggedRange() *Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"single-tagged-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny struct {
	*ygot.NodePath
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/inner-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPath) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/inner-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanId (leaf): Outer VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/outer-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPath) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanId (leaf): Outer VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/outer-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/inner-vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/inner-vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny struct {
	*ygot.NodePath
}

// InnerVlanIds (leaf-list): Inner VLAN identifiers for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/inner-vlan-ids"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/inner-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath) InnerVlanIds() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "inner-vlan-ids"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerVlanIds (leaf-list): Inner VLAN identifiers for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/inner-vlan-ids"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/inner-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny) InnerVlanIds() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "inner-vlan-ids"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanId (leaf): Outer VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/outer-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanId (leaf): Outer VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/outer-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny struct {
	*ygot.NodePath
}

// InnerHighVlanId (leaf): The high-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/inner-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) InnerHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "inner-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerHighVlanId (leaf): The high-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/inner-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) InnerHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "inner-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerLowVlanId (leaf): The low-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/inner-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) InnerLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "inner-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerLowVlanId (leaf): The low-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/inner-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) InnerLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "inner-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterHighVlanId (leaf): The high-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/outer-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) OuterHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "outer-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterHighVlanId (leaf): The high-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/outer-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) OuterHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "outer-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterLowVlanId (leaf): The low-value outer VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/outer-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) OuterLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "outer-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterLowVlanId (leaf): The low-value outer VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/outer-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) OuterLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "outer-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny struct {
	*ygot.NodePath
}

// InnerHighVlanId (leaf): The high-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/inner-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath) InnerHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "inner-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerHighVlanId (leaf): The high-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/inner-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny) InnerHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "inner-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerLowVlanId (leaf): The low-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/inner-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath) InnerLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "inner-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerLowVlanId (leaf): The low-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/inner-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny) InnerLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "inner-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanId (leaf-list): Outer VLAN identifier of double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/outer-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanId (leaf-list): Outer VLAN identifier of double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/outer-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/outer-vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/outer-vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny struct {
	*ygot.NodePath
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/inner-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/inner-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanIds (leaf-list): Outer VLAN identifiers for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/outer-vlan-ids"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/outer-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath) OuterVlanIds() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "outer-vlan-ids"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanIds (leaf-list): Outer VLAN identifiers for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/outer-vlan-ids"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/outer-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny) OuterVlanIds() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "outer-vlan-ids"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny struct {
	*ygot.NodePath
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/inner-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/inner-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterHighVlanId (leaf): The high-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/outer-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath) OuterHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "outer-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterHighVlanId (leaf): The high-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/outer-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny) OuterHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "outer-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterLowVlanId (leaf): The low-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/outer-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath) OuterLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "outer-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterLowVlanId (leaf): The low-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/outer-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny) OuterLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "outer-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_SingleTaggedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny struct {
	*ygot.NodePath
}

// VlanId (leaf): VLAN identifier for single-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/state/vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedPath) VlanId() *Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath {
	return &Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): VLAN identifier for single-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/state/vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedPathAny) VlanId() *Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_SingleTaggedListPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedListPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/state/vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/state/vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny struct {
	*ygot.NodePath
}

// VlanIds (leaf-list): VLAN identifiers for single-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/vlan-ids"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/state/vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedListPath) VlanIds() *Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan-ids"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanIds (leaf-list): VLAN identifiers for single-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/vlan-ids"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/state/vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny) VlanIds() *Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan-ids"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRangePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny struct {
	*ygot.NodePath
}

// HighVlanId (leaf): The high-value VLAN identifier in a range for single-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePath) HighVlanId() *Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// HighVlanId (leaf): The high-value VLAN identifier in a range for single-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny) HighVlanId() *Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LowVlanId (leaf): The low-value VLAN identifier in a range for single-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePath) LowVlanId() *Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LowVlanId (leaf): The low-value VLAN identifier in a range for single-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny) LowVlanId() *Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

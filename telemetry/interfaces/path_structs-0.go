/*
Package interfaces is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/alexmasi/go/pkg/mod/github.com/openconfig/ygot@v0.23.1/genutil/names.go
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package interfaces

import (
	"github.com/openconfig/ygot/ygot"
)

// InterfacePath represents the /openconfig-interfaces/interfaces/interface YANG schema element.
type InterfacePath struct {
	*ygot.NodePath
}

// InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface YANG schema element.
type InterfacePathAny struct {
	*ygot.NodePath
}

// Interface_AdminStatusPath represents the /openconfig-interfaces/interfaces/interface/state/admin-status YANG schema element.
type Interface_AdminStatusPath struct {
	*ygot.NodePath
}

// Interface_AdminStatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/admin-status YANG schema element.
type Interface_AdminStatusPathAny struct {
	*ygot.NodePath
}

// Interface_CpuPath represents the /openconfig-interfaces/interfaces/interface/state/cpu YANG schema element.
type Interface_CpuPath struct {
	*ygot.NodePath
}

// Interface_CpuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/cpu YANG schema element.
type Interface_CpuPathAny struct {
	*ygot.NodePath
}

// Interface_DescriptionPath represents the /openconfig-interfaces/interfaces/interface/state/description YANG schema element.
type Interface_DescriptionPath struct {
	*ygot.NodePath
}

// Interface_DescriptionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/description YANG schema element.
type Interface_DescriptionPathAny struct {
	*ygot.NodePath
}

// Interface_EnabledPath represents the /openconfig-interfaces/interfaces/interface/state/enabled YANG schema element.
type Interface_EnabledPath struct {
	*ygot.NodePath
}

// Interface_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/enabled YANG schema element.
type Interface_EnabledPathAny struct {
	*ygot.NodePath
}

// Interface_HardwarePortPath represents the /openconfig-interfaces/interfaces/interface/state/hardware-port YANG schema element.
type Interface_HardwarePortPath struct {
	*ygot.NodePath
}

// Interface_HardwarePortPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/hardware-port YANG schema element.
type Interface_HardwarePortPathAny struct {
	*ygot.NodePath
}

// Interface_IdPath represents the /openconfig-interfaces/interfaces/interface/state/id YANG schema element.
type Interface_IdPath struct {
	*ygot.NodePath
}

// Interface_IdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/id YANG schema element.
type Interface_IdPathAny struct {
	*ygot.NodePath
}

// Interface_IfindexPath represents the /openconfig-interfaces/interfaces/interface/state/ifindex YANG schema element.
type Interface_IfindexPath struct {
	*ygot.NodePath
}

// Interface_IfindexPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/ifindex YANG schema element.
type Interface_IfindexPathAny struct {
	*ygot.NodePath
}

// Interface_InRatePath represents the /openconfig-interfaces/interfaces/interface/state/in-rate YANG schema element.
type Interface_InRatePath struct {
	*ygot.NodePath
}

// Interface_InRatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/in-rate YANG schema element.
type Interface_InRatePathAny struct {
	*ygot.NodePath
}

// Interface_LastChangePath represents the /openconfig-interfaces/interfaces/interface/state/last-change YANG schema element.
type Interface_LastChangePath struct {
	*ygot.NodePath
}

// Interface_LastChangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/last-change YANG schema element.
type Interface_LastChangePathAny struct {
	*ygot.NodePath
}

// Interface_LogicalPath represents the /openconfig-interfaces/interfaces/interface/state/logical YANG schema element.
type Interface_LogicalPath struct {
	*ygot.NodePath
}

// Interface_LogicalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/logical YANG schema element.
type Interface_LogicalPathAny struct {
	*ygot.NodePath
}

// Interface_LoopbackModePath represents the /openconfig-interfaces/interfaces/interface/state/loopback-mode YANG schema element.
type Interface_LoopbackModePath struct {
	*ygot.NodePath
}

// Interface_LoopbackModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/loopback-mode YANG schema element.
type Interface_LoopbackModePathAny struct {
	*ygot.NodePath
}

// Interface_ManagementPath represents the /openconfig-interfaces/interfaces/interface/state/management YANG schema element.
type Interface_ManagementPath struct {
	*ygot.NodePath
}

// Interface_ManagementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/management YANG schema element.
type Interface_ManagementPathAny struct {
	*ygot.NodePath
}

// Interface_MtuPath represents the /openconfig-interfaces/interfaces/interface/state/mtu YANG schema element.
type Interface_MtuPath struct {
	*ygot.NodePath
}

// Interface_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/mtu YANG schema element.
type Interface_MtuPathAny struct {
	*ygot.NodePath
}

// Interface_NamePath represents the /openconfig-interfaces/interfaces/interface/state/name YANG schema element.
type Interface_NamePath struct {
	*ygot.NodePath
}

// Interface_NamePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/name YANG schema element.
type Interface_NamePathAny struct {
	*ygot.NodePath
}

// Interface_OperStatusPath represents the /openconfig-interfaces/interfaces/interface/state/oper-status YANG schema element.
type Interface_OperStatusPath struct {
	*ygot.NodePath
}

// Interface_OperStatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/oper-status YANG schema element.
type Interface_OperStatusPathAny struct {
	*ygot.NodePath
}

// Interface_OutRatePath represents the /openconfig-interfaces/interfaces/interface/state/out-rate YANG schema element.
type Interface_OutRatePath struct {
	*ygot.NodePath
}

// Interface_OutRatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/out-rate YANG schema element.
type Interface_OutRatePathAny struct {
	*ygot.NodePath
}

// Interface_PhysicalChannelPath represents the /openconfig-interfaces/interfaces/interface/state/physical-channel YANG schema element.
type Interface_PhysicalChannelPath struct {
	*ygot.NodePath
}

// Interface_PhysicalChannelPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/physical-channel YANG schema element.
type Interface_PhysicalChannelPathAny struct {
	*ygot.NodePath
}

// Interface_TpidPath represents the /openconfig-interfaces/interfaces/interface/state/tpid YANG schema element.
type Interface_TpidPath struct {
	*ygot.NodePath
}

// Interface_TpidPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/tpid YANG schema element.
type Interface_TpidPathAny struct {
	*ygot.NodePath
}

// Interface_TransceiverPath represents the /openconfig-interfaces/interfaces/interface/state/transceiver YANG schema element.
type Interface_TransceiverPath struct {
	*ygot.NodePath
}

// Interface_TransceiverPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/transceiver YANG schema element.
type Interface_TransceiverPathAny struct {
	*ygot.NodePath
}

// Interface_TypePath represents the /openconfig-interfaces/interfaces/interface/state/type YANG schema element.
type Interface_TypePath struct {
	*ygot.NodePath
}

// Interface_TypePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/type YANG schema element.
type Interface_TypePathAny struct {
	*ygot.NodePath
}

// AdminStatus (leaf): The desired state of the interface.  In RFC 7223 this leaf
// has the same read semantics as ifAdminStatus.  Here, it
// reflects the administrative state as set by enabling or
// disabling the interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/admin-status"
// Path from root: "/interfaces/interface/state/admin-status"
func (n *InterfacePath) AdminStatus() *Interface_AdminStatusPath {
	return &Interface_AdminStatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminStatus (leaf): The desired state of the interface.  In RFC 7223 this leaf
// has the same read semantics as ifAdminStatus.  Here, it
// reflects the administrative state as set by enabling or
// disabling the interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/admin-status"
// Path from root: "/interfaces/interface/state/admin-status"
func (n *InterfacePathAny) AdminStatus() *Interface_AdminStatusPathAny {
	return &Interface_AdminStatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Aggregation (container): Options for logical interfaces representing
// aggregates
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "aggregation"
// Path from root: "/interfaces/interface/aggregation"
func (n *InterfacePath) Aggregation() *Interface_AggregationPath {
	return &Interface_AggregationPath{
		NodePath: ygot.NewNodePath(
			[]string{"aggregation"},
			map[string]interface{}{},
			n,
		),
	}
}

// Aggregation (container): Options for logical interfaces representing
// aggregates
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "aggregation"
// Path from root: "/interfaces/interface/aggregation"
func (n *InterfacePathAny) Aggregation() *Interface_AggregationPathAny {
	return &Interface_AggregationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"aggregation"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): A collection of interface-related statistics objects.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/state/counters"
func (n *InterfacePath) Counters() *Interface_CountersPath {
	return &Interface_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): A collection of interface-related statistics objects.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/state/counters"
func (n *InterfacePathAny) Counters() *Interface_CountersPathAny {
	return &Interface_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cpu (leaf): When set to true, the interface is for traffic
// that is handled by the system CPU, sometimes also called the
// control plane interface.  On systems that represent the CPU
// interface as an Ethernet interface, for example, this leaf
// should be used to distinguish the CPU interface from dataplane
// interfaces.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/cpu"
// Path from root: "/interfaces/interface/state/cpu"
func (n *InterfacePath) Cpu() *Interface_CpuPath {
	return &Interface_CpuPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cpu (leaf): When set to true, the interface is for traffic
// that is handled by the system CPU, sometimes also called the
// control plane interface.  On systems that represent the CPU
// interface as an Ethernet interface, for example, this leaf
// should be used to distinguish the CPU interface from dataplane
// interfaces.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/cpu"
// Path from root: "/interfaces/interface/state/cpu"
func (n *InterfacePathAny) Cpu() *Interface_CpuPathAny {
	return &Interface_CpuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): A textual description of the interface.
//
// A server implementation MAY map this leaf to the ifAlias
// MIB object.  Such an implementation needs to use some
// mechanism to handle the differences in size and characters
// allowed between this leaf and ifAlias.  The definition of
// such a mechanism is outside the scope of this document.
//
// Since ifAlias is defined to be stored in non-volatile
// storage, the MIB implementation MUST map ifAlias to the
// value of 'description' in the persistently stored
// datastore.
//
// Specifically, if the device supports ':startup', when
// ifAlias is read the device MUST return the value of
// 'description' in the 'startup' datastore, and when it is
// written, it MUST be written to the 'running' and 'startup'
// datastores.  Note that it is up to the implementation to
//
// decide whether to modify this single leaf in 'startup' or
// perform an implicit copy-config from 'running' to
// 'startup'.
//
// If the device does not support ':startup', ifAlias MUST
// be mapped to the 'description' leaf in the 'running'
// datastore.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/description"
// Path from root: "/interfaces/interface/state/description"
func (n *InterfacePath) Description() *Interface_DescriptionPath {
	return &Interface_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): A textual description of the interface.
//
// A server implementation MAY map this leaf to the ifAlias
// MIB object.  Such an implementation needs to use some
// mechanism to handle the differences in size and characters
// allowed between this leaf and ifAlias.  The definition of
// such a mechanism is outside the scope of this document.
//
// Since ifAlias is defined to be stored in non-volatile
// storage, the MIB implementation MUST map ifAlias to the
// value of 'description' in the persistently stored
// datastore.
//
// Specifically, if the device supports ':startup', when
// ifAlias is read the device MUST return the value of
// 'description' in the 'startup' datastore, and when it is
// written, it MUST be written to the 'running' and 'startup'
// datastores.  Note that it is up to the implementation to
//
// decide whether to modify this single leaf in 'startup' or
// perform an implicit copy-config from 'running' to
// 'startup'.
//
// If the device does not support ':startup', ifAlias MUST
// be mapped to the 'description' leaf in the 'running'
// datastore.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/description"
// Path from root: "/interfaces/interface/state/description"
func (n *InterfacePathAny) Description() *Interface_DescriptionPathAny {
	return &Interface_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): This leaf contains the configured, desired state of the
// interface.
//
// Systems that implement the IF-MIB use the value of this
// leaf in the 'running' datastore to set
// IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
// has been initialized, as described in RFC 2863.
//
// Changes in this leaf in the 'running' datastore are
// reflected in ifAdminStatus, but if ifAdminStatus is
// changed over SNMP, this leaf is not affected.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enabled"
// Path from root: "/interfaces/interface/state/enabled"
func (n *InterfacePath) Enabled() *Interface_EnabledPath {
	return &Interface_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): This leaf contains the configured, desired state of the
// interface.
//
// Systems that implement the IF-MIB use the value of this
// leaf in the 'running' datastore to set
// IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
// has been initialized, as described in RFC 2863.
//
// Changes in this leaf in the 'running' datastore are
// reflected in ifAdminStatus, but if ifAdminStatus is
// changed over SNMP, this leaf is not affected.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enabled"
// Path from root: "/interfaces/interface/state/enabled"
func (n *InterfacePathAny) Enabled() *Interface_EnabledPathAny {
	return &Interface_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ethernet (container): Top-level container for ethernet configuration
// and state
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ethernet"
// Path from root: "/interfaces/interface/ethernet"
func (n *InterfacePath) Ethernet() *Interface_EthernetPath {
	return &Interface_EthernetPath{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ethernet (container): Top-level container for ethernet configuration
// and state
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ethernet"
// Path from root: "/interfaces/interface/ethernet"
func (n *InterfacePathAny) Ethernet() *Interface_EthernetPathAny {
	return &Interface_EthernetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet"},
			map[string]interface{}{},
			n,
		),
	}
}

// HardwarePort (leaf): For non-channelized interfaces, references the hardware port
// corresponding to the base interface.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/hardware-port"
// Path from root: "/interfaces/interface/state/hardware-port"
func (n *InterfacePath) HardwarePort() *Interface_HardwarePortPath {
	return &Interface_HardwarePortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hardware-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// HardwarePort (leaf): For non-channelized interfaces, references the hardware port
// corresponding to the base interface.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/hardware-port"
// Path from root: "/interfaces/interface/state/hardware-port"
func (n *InterfacePathAny) HardwarePort() *Interface_HardwarePortPathAny {
	return &Interface_HardwarePortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hardware-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldTime (container): Top-level container for hold-time settings to enable
// dampening advertisements of interface transitions.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "hold-time"
// Path from root: "/interfaces/interface/hold-time"
func (n *InterfacePath) HoldTime() *Interface_HoldTimePath {
	return &Interface_HoldTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"hold-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldTime (container): Top-level container for hold-time settings to enable
// dampening advertisements of interface transitions.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "hold-time"
// Path from root: "/interfaces/interface/hold-time"
func (n *InterfacePathAny) HoldTime() *Interface_HoldTimePathAny {
	return &Interface_HoldTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"hold-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): The numeric identifier (SDN Port) used by the controller to
// address the interface. This ID is assigned by an
// external-to-the-device entity (e.g., an SDN management system)
// to establish an externally deterministic numeric reference for
// the interface. The programming entity must ensure that the ID is
// unique within the required context.
//
// Note that this identifier is used only when a numeric reference
// to the interface is required, it does not replace the unique
// name assigned to the interface.
//
// Ranges:
//
// 0x00000000: Unspecified/Invalid
// 0x00000001: Minimum Port Value
// 0xFFFFFEFF: Maximum Port Value
//
// Reserved:   0xFFFFFFF0 - 0xFFFFFFFF
// 0xFFFFFFFA: Recirculate
// 0xFFFFFFFD: CPU
//
// ----------------------------------------
// Defining module: "openconfig-p4rt"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/id"
// Path from root: "/interfaces/interface/state/id"
func (n *InterfacePath) Id() *Interface_IdPath {
	return &Interface_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): The numeric identifier (SDN Port) used by the controller to
// address the interface. This ID is assigned by an
// external-to-the-device entity (e.g., an SDN management system)
// to establish an externally deterministic numeric reference for
// the interface. The programming entity must ensure that the ID is
// unique within the required context.
//
// Note that this identifier is used only when a numeric reference
// to the interface is required, it does not replace the unique
// name assigned to the interface.
//
// Ranges:
//
// 0x00000000: Unspecified/Invalid
// 0x00000001: Minimum Port Value
// 0xFFFFFEFF: Maximum Port Value
//
// Reserved:   0xFFFFFFF0 - 0xFFFFFFFF
// 0xFFFFFFFA: Recirculate
// 0xFFFFFFFD: CPU
//
// ----------------------------------------
// Defining module: "openconfig-p4rt"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/id"
// Path from root: "/interfaces/interface/state/id"
func (n *InterfacePathAny) Id() *Interface_IdPathAny {
	return &Interface_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ifindex (leaf): System assigned number for each interface.  Corresponds to
// ifIndex object in SNMP Interface MIB
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ifindex"
// Path from root: "/interfaces/interface/state/ifindex"
func (n *InterfacePath) Ifindex() *Interface_IfindexPath {
	return &Interface_IfindexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ifindex"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ifindex (leaf): System assigned number for each interface.  Corresponds to
// ifIndex object in SNMP Interface MIB
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ifindex"
// Path from root: "/interfaces/interface/state/ifindex"
func (n *InterfacePathAny) Ifindex() *Interface_IfindexPathAny {
	return &Interface_IfindexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ifindex"},
			map[string]interface{}{},
			n,
		),
	}
}

// InRate (leaf): The calculate received rate of the interface, measured in bits
// per second.
// ----------------------------------------
// Defining module: "openconfig-ate-intf"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/in-rate"
// Path from root: "/interfaces/interface/state/in-rate"
func (n *InterfacePath) InRate() *Interface_InRatePath {
	return &Interface_InRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// InRate (leaf): The calculate received rate of the interface, measured in bits
// per second.
// ----------------------------------------
// Defining module: "openconfig-ate-intf"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/in-rate"
// Path from root: "/interfaces/interface/state/in-rate"
func (n *InterfacePathAny) InRate() *Interface_InRatePathAny {
	return &Interface_InRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastChange (leaf): This timestamp indicates the absolute time of the last
// state change of the interface (e.g., up-to-down transition).
// This is different than the SNMP ifLastChange object in the
// standard interface MIB in that it is not relative to the
// system boot time (i.e,. sysUpTime).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/last-change"
// Path from root: "/interfaces/interface/state/last-change"
func (n *InterfacePath) LastChange() *Interface_LastChangePath {
	return &Interface_LastChangePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastChange (leaf): This timestamp indicates the absolute time of the last
// state change of the interface (e.g., up-to-down transition).
// This is different than the SNMP ifLastChange object in the
// standard interface MIB in that it is not relative to the
// system boot time (i.e,. sysUpTime).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/last-change"
// Path from root: "/interfaces/interface/state/last-change"
func (n *InterfacePathAny) LastChange() *Interface_LastChangePathAny {
	return &Interface_LastChangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
	}
}

// Logical (leaf): When set to true, the interface is a logical interface
// which does not have an associated physical port or
// channel on the system.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/logical"
// Path from root: "/interfaces/interface/state/logical"
func (n *InterfacePath) Logical() *Interface_LogicalPath {
	return &Interface_LogicalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "logical"},
			map[string]interface{}{},
			n,
		),
	}
}

// Logical (leaf): When set to true, the interface is a logical interface
// which does not have an associated physical port or
// channel on the system.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/logical"
// Path from root: "/interfaces/interface/state/logical"
func (n *InterfacePathAny) Logical() *Interface_LogicalPathAny {
	return &Interface_LogicalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "logical"},
			map[string]interface{}{},
			n,
		),
	}
}

// LoopbackMode (leaf): When set to true, the interface is logically looped back,
// such that packets that are forwarded via the interface
// are received on the same interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/loopback-mode"
// Path from root: "/interfaces/interface/state/loopback-mode"
func (n *InterfacePath) LoopbackMode() *Interface_LoopbackModePath {
	return &Interface_LoopbackModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "loopback-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// LoopbackMode (leaf): When set to true, the interface is logically looped back,
// such that packets that are forwarded via the interface
// are received on the same interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/loopback-mode"
// Path from root: "/interfaces/interface/state/loopback-mode"
func (n *InterfacePathAny) LoopbackMode() *Interface_LoopbackModePathAny {
	return &Interface_LoopbackModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "loopback-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Management (leaf): When set to true, the interface is a dedicated
// management interface that is not connected to dataplane
// interfaces.  It may be used to connect the system to an
// out-of-band management network, for example.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/management"
// Path from root: "/interfaces/interface/state/management"
func (n *InterfacePath) Management() *Interface_ManagementPath {
	return &Interface_ManagementPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management"},
			map[string]interface{}{},
			n,
		),
	}
}

// Management (leaf): When set to true, the interface is a dedicated
// management interface that is not connected to dataplane
// interfaces.  It may be used to connect the system to an
// out-of-band management network, for example.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/management"
// Path from root: "/interfaces/interface/state/management"
func (n *InterfacePathAny) Management() *Interface_ManagementPathAny {
	return &Interface_ManagementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): Set the max transmission unit size in octets
// for the physical interface.  If this is not set, the mtu is
// set to the operational default -- e.g., 1514 bytes on an
// Ethernet interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/mtu"
// Path from root: "/interfaces/interface/state/mtu"
func (n *InterfacePath) Mtu() *Interface_MtuPath {
	return &Interface_MtuPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): Set the max transmission unit size in octets
// for the physical interface.  If this is not set, the mtu is
// set to the operational default -- e.g., 1514 bytes on an
// Ethernet interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/mtu"
// Path from root: "/interfaces/interface/state/mtu"
func (n *InterfacePathAny) Mtu() *Interface_MtuPathAny {
	return &Interface_MtuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The name of the interface.
//
// A device MAY restrict the allowed values for this leaf,
// possibly depending on the type of the interface.
// For system-controlled interfaces, this leaf is the
// device-specific name of the interface.  The 'config false'
// list interfaces/interface[name]/state contains the currently
// existing interfaces on the device.
//
// If a client tries to create configuration for a
// system-controlled interface that is not present in the
// corresponding state list, the server MAY reject
// the request if the implementation does not support
// pre-provisioning of interfaces or if the name refers to
// an interface that can never exist in the system.  A
// NETCONF server MUST reply with an rpc-error with the
// error-tag 'invalid-value' in this case.
//
// The IETF model in RFC 7223 provides YANG features for the
// following (i.e., pre-provisioning and arbitrary-names),
// however they are omitted here:
//
//	If the device supports pre-provisioning of interface
//	configuration, the 'pre-provisioning' feature is
//	advertised.
//
//	If the device allows arbitrarily named user-controlled
//	interfaces, the 'arbitrary-names' feature is advertised.
//
// When a configured user-controlled interface is created by
// the system, it is instantiated with the same name in the
// /interfaces/interface[name]/state list.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/name"
// Path from root: "/interfaces/interface/state/name"
func (n *InterfacePath) Name() *Interface_NamePath {
	return &Interface_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The name of the interface.
//
// A device MAY restrict the allowed values for this leaf,
// possibly depending on the type of the interface.
// For system-controlled interfaces, this leaf is the
// device-specific name of the interface.  The 'config false'
// list interfaces/interface[name]/state contains the currently
// existing interfaces on the device.
//
// If a client tries to create configuration for a
// system-controlled interface that is not present in the
// corresponding state list, the server MAY reject
// the request if the implementation does not support
// pre-provisioning of interfaces or if the name refers to
// an interface that can never exist in the system.  A
// NETCONF server MUST reply with an rpc-error with the
// error-tag 'invalid-value' in this case.
//
// The IETF model in RFC 7223 provides YANG features for the
// following (i.e., pre-provisioning and arbitrary-names),
// however they are omitted here:
//
//	If the device supports pre-provisioning of interface
//	configuration, the 'pre-provisioning' feature is
//	advertised.
//
//	If the device allows arbitrarily named user-controlled
//	interfaces, the 'arbitrary-names' feature is advertised.
//
// When a configured user-controlled interface is created by
// the system, it is instantiated with the same name in the
// /interfaces/interface[name]/state list.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/name"
// Path from root: "/interfaces/interface/state/name"
func (n *InterfacePathAny) Name() *Interface_NamePathAny {
	return &Interface_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperStatus (leaf): The current operational state of the interface.
//
// This leaf has the same semantics as ifOperStatus.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/oper-status"
// Path from root: "/interfaces/interface/state/oper-status"
func (n *InterfacePath) OperStatus() *Interface_OperStatusPath {
	return &Interface_OperStatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperStatus (leaf): The current operational state of the interface.
//
// This leaf has the same semantics as ifOperStatus.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/oper-status"
// Path from root: "/interfaces/interface/state/oper-status"
func (n *InterfacePathAny) OperStatus() *Interface_OperStatusPathAny {
	return &Interface_OperStatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutRate (leaf): The calculated transmitted rate of the interface, measured in bits
// per second.
// ----------------------------------------
// Defining module: "openconfig-ate-intf"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/out-rate"
// Path from root: "/interfaces/interface/state/out-rate"
func (n *InterfacePath) OutRate() *Interface_OutRatePath {
	return &Interface_OutRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutRate (leaf): The calculated transmitted rate of the interface, measured in bits
// per second.
// ----------------------------------------
// Defining module: "openconfig-ate-intf"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/out-rate"
// Path from root: "/interfaces/interface/state/out-rate"
func (n *InterfacePathAny) OutRate() *Interface_OutRatePathAny {
	return &Interface_OutRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// PhysicalChannel (leaf-list): For a channelized interface, list of references to the
// physical channels (lanes) corresponding to the interface.
// The physical channels are elements of a transceiver component
// in the platform model.
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/physical-channel"
// Path from root: "/interfaces/interface/state/physical-channel"
func (n *InterfacePath) PhysicalChannel() *Interface_PhysicalChannelPath {
	return &Interface_PhysicalChannelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "physical-channel"},
			map[string]interface{}{},
			n,
		),
	}
}

// PhysicalChannel (leaf-list): For a channelized interface, list of references to the
// physical channels (lanes) corresponding to the interface.
// The physical channels are elements of a transceiver component
// in the platform model.
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/physical-channel"
// Path from root: "/interfaces/interface/state/physical-channel"
func (n *InterfacePathAny) PhysicalChannel() *Interface_PhysicalChannelPathAny {
	return &Interface_PhysicalChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "physical-channel"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutedVlan (container): Top-level container for routed vlan interfaces.  These
// logical interfaces are also known as SVI (switched virtual
// interface), IRB (integrated routing and bridging), RVI
// (routed VLAN interface)
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "routed-vlan"
// Path from root: "/interfaces/interface/routed-vlan"
func (n *InterfacePath) RoutedVlan() *Interface_RoutedVlanPath {
	return &Interface_RoutedVlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"routed-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutedVlan (container): Top-level container for routed vlan interfaces.  These
// logical interfaces are also known as SVI (switched virtual
// interface), IRB (integrated routing and bridging), RVI
// (routed VLAN interface)
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "routed-vlan"
// Path from root: "/interfaces/interface/routed-vlan"
func (n *InterfacePathAny) RoutedVlan() *Interface_RoutedVlanPathAny {
	return &Interface_RoutedVlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"routed-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// SubinterfaceAny (list): The list of subinterfaces (logical interfaces) associated
// with a physical interface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "subinterfaces/subinterface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface"
// Index (wildcarded): uint32
func (n *InterfacePath) SubinterfaceAny() *Interface_SubinterfacePathAny {
	return &Interface_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"subinterfaces", "subinterface"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// SubinterfaceAny (list): The list of subinterfaces (logical interfaces) associated
// with a physical interface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "subinterfaces/subinterface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface"
// Index (wildcarded): uint32
func (n *InterfacePathAny) SubinterfaceAny() *Interface_SubinterfacePathAny {
	return &Interface_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"subinterfaces", "subinterface"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// Subinterface (list): The list of subinterfaces (logical interfaces) associated
// with a physical interface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "subinterfaces/subinterface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface"
// Index: uint32
func (n *InterfacePath) Subinterface(Index uint32) *Interface_SubinterfacePath {
	return &Interface_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"subinterfaces", "subinterface"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Subinterface (list): The list of subinterfaces (logical interfaces) associated
// with a physical interface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "subinterfaces/subinterface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface"
// Index: uint32
func (n *InterfacePathAny) Subinterface(Index uint32) *Interface_SubinterfacePathAny {
	return &Interface_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"subinterfaces", "subinterface"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Tpid (leaf): Optionally set the tag protocol identifier field (TPID) that
// is accepted on the VLAN
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/tpid"
// Path from root: "/interfaces/interface/state/tpid"
func (n *InterfacePath) Tpid() *Interface_TpidPath {
	return &Interface_TpidPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tpid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tpid (leaf): Optionally set the tag protocol identifier field (TPID) that
// is accepted on the VLAN
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/tpid"
// Path from root: "/interfaces/interface/state/tpid"
func (n *InterfacePathAny) Tpid() *Interface_TpidPathAny {
	return &Interface_TpidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tpid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transceiver (leaf): Provides a reference to the transceiver subcomponent that
// corresponds to the physical port component for this interface.
// The device must only populate this leaf with a reference to
// a component of type TRANSCEIVER.
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/transceiver"
// Path from root: "/interfaces/interface/state/transceiver"
func (n *InterfacePath) Transceiver() *Interface_TransceiverPath {
	return &Interface_TransceiverPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "transceiver"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transceiver (leaf): Provides a reference to the transceiver subcomponent that
// corresponds to the physical port component for this interface.
// The device must only populate this leaf with a reference to
// a component of type TRANSCEIVER.
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/transceiver"
// Path from root: "/interfaces/interface/state/transceiver"
func (n *InterfacePathAny) Transceiver() *Interface_TransceiverPathAny {
	return &Interface_TransceiverPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "transceiver"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The type of the interface.
//
// When an interface entry is created, a server MAY
// initialize the type leaf with a valid value, e.g., if it
// is possible to derive the type from the name of the
// interface.
//
// If a client tries to set the type of an interface to a
// value that can never be used by the system, e.g., if the
// type is not supported or if the type does not match the
// name of the interface, the server MUST reject the request.
// A NETCONF server MUST reply with an rpc-error with the
// error-tag 'invalid-value' in this case.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/type"
// Path from root: "/interfaces/interface/state/type"
func (n *InterfacePath) Type() *Interface_TypePath {
	return &Interface_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The type of the interface.
//
// When an interface entry is created, a server MAY
// initialize the type leaf with a valid value, e.g., if it
// is possible to derive the type from the name of the
// interface.
//
// If a client tries to set the type of an interface to a
// value that can never be used by the system, e.g., if the
// type is not supported or if the type does not match the
// name of the interface, the server MUST reject the request.
// A NETCONF server MUST reply with an rpc-error with the
// error-tag 'invalid-value' in this case.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/type"
// Path from root: "/interfaces/interface/state/type"
func (n *InterfacePathAny) Type() *Interface_TypePathAny {
	return &Interface_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_AggregationPath represents the /openconfig-interfaces/interfaces/interface/aggregation YANG schema element.
type Interface_AggregationPath struct {
	*ygot.NodePath
}

// Interface_AggregationPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation YANG schema element.
type Interface_AggregationPathAny struct {
	*ygot.NodePath
}

// Interface_Aggregation_LagSpeedPath represents the /openconfig-interfaces/interfaces/interface/aggregation/state/lag-speed YANG schema element.
type Interface_Aggregation_LagSpeedPath struct {
	*ygot.NodePath
}

// Interface_Aggregation_LagSpeedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/state/lag-speed YANG schema element.
type Interface_Aggregation_LagSpeedPathAny struct {
	*ygot.NodePath
}

// Interface_Aggregation_LagTypePath represents the /openconfig-interfaces/interfaces/interface/aggregation/state/lag-type YANG schema element.
type Interface_Aggregation_LagTypePath struct {
	*ygot.NodePath
}

// Interface_Aggregation_LagTypePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/state/lag-type YANG schema element.
type Interface_Aggregation_LagTypePathAny struct {
	*ygot.NodePath
}

// Interface_Aggregation_MemberPath represents the /openconfig-interfaces/interfaces/interface/aggregation/state/member YANG schema element.
type Interface_Aggregation_MemberPath struct {
	*ygot.NodePath
}

// Interface_Aggregation_MemberPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/state/member YANG schema element.
type Interface_Aggregation_MemberPathAny struct {
	*ygot.NodePath
}

// Interface_Aggregation_MinLinksPath represents the /openconfig-interfaces/interfaces/interface/aggregation/state/min-links YANG schema element.
type Interface_Aggregation_MinLinksPath struct {
	*ygot.NodePath
}

// Interface_Aggregation_MinLinksPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/state/min-links YANG schema element.
type Interface_Aggregation_MinLinksPathAny struct {
	*ygot.NodePath
}

// LagSpeed (leaf): Reports effective speed of the aggregate interface,
// based on speed of active member interfaces
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/lag-speed"
// Path from root: "/interfaces/interface/aggregation/state/lag-speed"
func (n *Interface_AggregationPath) LagSpeed() *Interface_Aggregation_LagSpeedPath {
	return &Interface_Aggregation_LagSpeedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lag-speed"},
			map[string]interface{}{},
			n,
		),
	}
}

// LagSpeed (leaf): Reports effective speed of the aggregate interface,
// based on speed of active member interfaces
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/lag-speed"
// Path from root: "/interfaces/interface/aggregation/state/lag-speed"
func (n *Interface_AggregationPathAny) LagSpeed() *Interface_Aggregation_LagSpeedPathAny {
	return &Interface_Aggregation_LagSpeedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lag-speed"},
			map[string]interface{}{},
			n,
		),
	}
}

// LagType (leaf): Sets the type of LAG, i.e., how it is
// configured / maintained
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/lag-type"
// Path from root: "/interfaces/interface/aggregation/state/lag-type"
func (n *Interface_AggregationPath) LagType() *Interface_Aggregation_LagTypePath {
	return &Interface_Aggregation_LagTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lag-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// LagType (leaf): Sets the type of LAG, i.e., how it is
// configured / maintained
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/lag-type"
// Path from root: "/interfaces/interface/aggregation/state/lag-type"
func (n *Interface_AggregationPathAny) LagType() *Interface_Aggregation_LagTypePathAny {
	return &Interface_Aggregation_LagTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lag-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Member (leaf-list): List of current member interfaces for the aggregate,
// expressed as references to existing interfaces
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/member"
// Path from root: "/interfaces/interface/aggregation/state/member"
func (n *Interface_AggregationPath) Member() *Interface_Aggregation_MemberPath {
	return &Interface_Aggregation_MemberPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "member"},
			map[string]interface{}{},
			n,
		),
	}
}

// Member (leaf-list): List of current member interfaces for the aggregate,
// expressed as references to existing interfaces
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/member"
// Path from root: "/interfaces/interface/aggregation/state/member"
func (n *Interface_AggregationPathAny) Member() *Interface_Aggregation_MemberPathAny {
	return &Interface_Aggregation_MemberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "member"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinLinks (leaf): Specifies the mininum number of member
// interfaces that must be active for the aggregate interface
// to be available
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/min-links"
// Path from root: "/interfaces/interface/aggregation/state/min-links"
func (n *Interface_AggregationPath) MinLinks() *Interface_Aggregation_MinLinksPath {
	return &Interface_Aggregation_MinLinksPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "min-links"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinLinks (leaf): Specifies the mininum number of member
// interfaces that must be active for the aggregate interface
// to be available
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/min-links"
// Path from root: "/interfaces/interface/aggregation/state/min-links"
func (n *Interface_AggregationPathAny) MinLinks() *Interface_Aggregation_MinLinksPathAny {
	return &Interface_Aggregation_MinLinksPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "min-links"},
			map[string]interface{}{},
			n,
		),
	}
}

// SwitchedVlan (container): Enclosing container for VLAN interface-specific
// data on Ethernet interfaces.  These are for standard
// L2, switched-style VLANs.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "switched-vlan"
// Path from root: "/interfaces/interface/aggregation/switched-vlan"
func (n *Interface_AggregationPath) SwitchedVlan() *Interface_Aggregation_SwitchedVlanPath {
	return &Interface_Aggregation_SwitchedVlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"switched-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// SwitchedVlan (container): Enclosing container for VLAN interface-specific
// data on Ethernet interfaces.  These are for standard
// L2, switched-style VLANs.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "switched-vlan"
// Path from root: "/interfaces/interface/aggregation/switched-vlan"
func (n *Interface_AggregationPathAny) SwitchedVlan() *Interface_Aggregation_SwitchedVlanPathAny {
	return &Interface_Aggregation_SwitchedVlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"switched-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Aggregation_SwitchedVlanPath represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlanPath struct {
	*ygot.NodePath
}

// Interface_Aggregation_SwitchedVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlanPathAny struct {
	*ygot.NodePath
}

// Interface_Aggregation_SwitchedVlan_AccessVlanPath represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/access-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan_AccessVlanPath struct {
	*ygot.NodePath
}

// Interface_Aggregation_SwitchedVlan_AccessVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/access-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan_AccessVlanPathAny struct {
	*ygot.NodePath
}

// Interface_Aggregation_SwitchedVlan_InterfaceModePath represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/interface-mode YANG schema element.
type Interface_Aggregation_SwitchedVlan_InterfaceModePath struct {
	*ygot.NodePath
}

// Interface_Aggregation_SwitchedVlan_InterfaceModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/interface-mode YANG schema element.
type Interface_Aggregation_SwitchedVlan_InterfaceModePathAny struct {
	*ygot.NodePath
}

// Interface_Aggregation_SwitchedVlan_NativeVlanPath represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/native-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan_NativeVlanPath struct {
	*ygot.NodePath
}

// Interface_Aggregation_SwitchedVlan_NativeVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/native-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan_NativeVlanPathAny struct {
	*ygot.NodePath
}

// Interface_Aggregation_SwitchedVlan_TrunkVlansPath represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/trunk-vlans YANG schema element.
type Interface_Aggregation_SwitchedVlan_TrunkVlansPath struct {
	*ygot.NodePath
}

// Interface_Aggregation_SwitchedVlan_TrunkVlansPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/trunk-vlans YANG schema element.
type Interface_Aggregation_SwitchedVlan_TrunkVlansPathAny struct {
	*ygot.NodePath
}

// AccessVlan (leaf): Assign the access vlan to the access port.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/access-vlan"
// Path from root: "/interfaces/interface/aggregation/switched-vlan/state/access-vlan"
func (n *Interface_Aggregation_SwitchedVlanPath) AccessVlan() *Interface_Aggregation_SwitchedVlan_AccessVlanPath {
	return &Interface_Aggregation_SwitchedVlan_AccessVlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "access-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// AccessVlan (leaf): Assign the access vlan to the access port.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/access-vlan"
// Path from root: "/interfaces/interface/aggregation/switched-vlan/state/access-vlan"
func (n *Interface_Aggregation_SwitchedVlanPathAny) AccessVlan() *Interface_Aggregation_SwitchedVlan_AccessVlanPathAny {
	return &Interface_Aggregation_SwitchedVlan_AccessVlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "access-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceMode (leaf): Set the interface to access or trunk mode for
// VLANs
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/interface-mode"
// Path from root: "/interfaces/interface/aggregation/switched-vlan/state/interface-mode"
func (n *Interface_Aggregation_SwitchedVlanPath) InterfaceMode() *Interface_Aggregation_SwitchedVlan_InterfaceModePath {
	return &Interface_Aggregation_SwitchedVlan_InterfaceModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceMode (leaf): Set the interface to access or trunk mode for
// VLANs
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/interface-mode"
// Path from root: "/interfaces/interface/aggregation/switched-vlan/state/interface-mode"
func (n *Interface_Aggregation_SwitchedVlanPathAny) InterfaceMode() *Interface_Aggregation_SwitchedVlan_InterfaceModePathAny {
	return &Interface_Aggregation_SwitchedVlan_InterfaceModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// NativeVlan (leaf): Set the native VLAN id for untagged frames arriving on
// a trunk interface.  Tagged frames sent on an interface
// configured with a native VLAN should have their tags
// stripped prior to transmission. This configuration is only
// valid on a trunk interface.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/native-vlan"
// Path from root: "/interfaces/interface/aggregation/switched-vlan/state/native-vlan"
func (n *Interface_Aggregation_SwitchedVlanPath) NativeVlan() *Interface_Aggregation_SwitchedVlan_NativeVlanPath {
	return &Interface_Aggregation_SwitchedVlan_NativeVlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "native-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// NativeVlan (leaf): Set the native VLAN id for untagged frames arriving on
// a trunk interface.  Tagged frames sent on an interface
// configured with a native VLAN should have their tags
// stripped prior to transmission. This configuration is only
// valid on a trunk interface.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/native-vlan"
// Path from root: "/interfaces/interface/aggregation/switched-vlan/state/native-vlan"
func (n *Interface_Aggregation_SwitchedVlanPathAny) NativeVlan() *Interface_Aggregation_SwitchedVlan_NativeVlanPathAny {
	return &Interface_Aggregation_SwitchedVlan_NativeVlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "native-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrunkVlans (leaf-list): Specify VLANs, or ranges thereof, that the interface may
// carry when in trunk mode.  If not specified, all VLANs are
// allowed on the interface. Ranges are specified in the form
// x..y, where x<y - ranges are assumed to be inclusive (such
// that the VLAN range is x <= range <= y.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/trunk-vlans"
// Path from root: "/interfaces/interface/aggregation/switched-vlan/state/trunk-vlans"
func (n *Interface_Aggregation_SwitchedVlanPath) TrunkVlans() *Interface_Aggregation_SwitchedVlan_TrunkVlansPath {
	return &Interface_Aggregation_SwitchedVlan_TrunkVlansPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "trunk-vlans"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrunkVlans (leaf-list): Specify VLANs, or ranges thereof, that the interface may
// carry when in trunk mode.  If not specified, all VLANs are
// allowed on the interface. Ranges are specified in the form
// x..y, where x<y - ranges are assumed to be inclusive (such
// that the VLAN range is x <= range <= y.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/trunk-vlans"
// Path from root: "/interfaces/interface/aggregation/switched-vlan/state/trunk-vlans"
func (n *Interface_Aggregation_SwitchedVlanPathAny) TrunkVlans() *Interface_Aggregation_SwitchedVlan_TrunkVlansPathAny {
	return &Interface_Aggregation_SwitchedVlan_TrunkVlansPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "trunk-vlans"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_CountersPath represents the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type Interface_CountersPath struct {
	*ygot.NodePath
}

// Interface_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type Interface_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_CarrierTransitionsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/carrier-transitions YANG schema element.
type Interface_Counters_CarrierTransitionsPath struct {
	*ygot.NodePath
}

// Interface_Counters_CarrierTransitionsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/carrier-transitions YANG schema element.
type Interface_Counters_CarrierTransitionsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_InBroadcastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-broadcast-pkts YANG schema element.
type Interface_Counters_InBroadcastPktsPath struct {
	*ygot.NodePath
}

// Interface_Counters_InBroadcastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-broadcast-pkts YANG schema element.
type Interface_Counters_InBroadcastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_InDiscardsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-discards YANG schema element.
type Interface_Counters_InDiscardsPath struct {
	*ygot.NodePath
}

// Interface_Counters_InDiscardsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-discards YANG schema element.
type Interface_Counters_InDiscardsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_InErrorsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-errors YANG schema element.
type Interface_Counters_InErrorsPath struct {
	*ygot.NodePath
}

// Interface_Counters_InErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-errors YANG schema element.
type Interface_Counters_InErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_InFcsErrorsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-fcs-errors YANG schema element.
type Interface_Counters_InFcsErrorsPath struct {
	*ygot.NodePath
}

// Interface_Counters_InFcsErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-fcs-errors YANG schema element.
type Interface_Counters_InFcsErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_InMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-multicast-pkts YANG schema element.
type Interface_Counters_InMulticastPktsPath struct {
	*ygot.NodePath
}

// Interface_Counters_InMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-multicast-pkts YANG schema element.
type Interface_Counters_InMulticastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-octets YANG schema element.
type Interface_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Interface_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-octets YANG schema element.
type Interface_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-pkts YANG schema element.
type Interface_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Interface_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-pkts YANG schema element.
type Interface_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_InUnicastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-unicast-pkts YANG schema element.
type Interface_Counters_InUnicastPktsPath struct {
	*ygot.NodePath
}

// Interface_Counters_InUnicastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-unicast-pkts YANG schema element.
type Interface_Counters_InUnicastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_InUnknownProtosPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-unknown-protos YANG schema element.
type Interface_Counters_InUnknownProtosPath struct {
	*ygot.NodePath
}

// Interface_Counters_InUnknownProtosPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-unknown-protos YANG schema element.
type Interface_Counters_InUnknownProtosPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_LastClearPath represents the /openconfig-interfaces/interfaces/interface/state/counters/last-clear YANG schema element.
type Interface_Counters_LastClearPath struct {
	*ygot.NodePath
}

// Interface_Counters_LastClearPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/last-clear YANG schema element.
type Interface_Counters_LastClearPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_OutBroadcastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-broadcast-pkts YANG schema element.
type Interface_Counters_OutBroadcastPktsPath struct {
	*ygot.NodePath
}

// Interface_Counters_OutBroadcastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-broadcast-pkts YANG schema element.
type Interface_Counters_OutBroadcastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_OutDiscardsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-discards YANG schema element.
type Interface_Counters_OutDiscardsPath struct {
	*ygot.NodePath
}

// Interface_Counters_OutDiscardsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-discards YANG schema element.
type Interface_Counters_OutDiscardsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_OutErrorsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-errors YANG schema element.
type Interface_Counters_OutErrorsPath struct {
	*ygot.NodePath
}

// Interface_Counters_OutErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-errors YANG schema element.
type Interface_Counters_OutErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_OutMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-multicast-pkts YANG schema element.
type Interface_Counters_OutMulticastPktsPath struct {
	*ygot.NodePath
}

// Interface_Counters_OutMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-multicast-pkts YANG schema element.
type Interface_Counters_OutMulticastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-octets YANG schema element.
type Interface_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Interface_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-octets YANG schema element.
type Interface_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-pkts YANG schema element.
type Interface_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Interface_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-pkts YANG schema element.
type Interface_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_OutUnicastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-unicast-pkts YANG schema element.
type Interface_Counters_OutUnicastPktsPath struct {
	*ygot.NodePath
}

// Interface_Counters_OutUnicastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-unicast-pkts YANG schema element.
type Interface_Counters_OutUnicastPktsPathAny struct {
	*ygot.NodePath
}

// CarrierTransitions (leaf): Number of times the interface state has transitioned
// between up and down since the time the device restarted
// or the last-clear time, whichever is most recent.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "carrier-transitions"
// Path from root: "/interfaces/interface/state/counters/carrier-transitions"
func (n *Interface_CountersPath) CarrierTransitions() *Interface_Counters_CarrierTransitionsPath {
	return &Interface_Counters_CarrierTransitionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"carrier-transitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// CarrierTransitions (leaf): Number of times the interface state has transitioned
// between up and down since the time the device restarted
// or the last-clear time, whichever is most recent.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "carrier-transitions"
// Path from root: "/interfaces/interface/state/counters/carrier-transitions"
func (n *Interface_CountersPathAny) CarrierTransitions() *Interface_Counters_CarrierTransitionsPathAny {
	return &Interface_Counters_CarrierTransitionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"carrier-transitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// InBroadcastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a broadcast
// address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-broadcast-pkts"
// Path from root: "/interfaces/interface/state/counters/in-broadcast-pkts"
func (n *Interface_CountersPath) InBroadcastPkts() *Interface_Counters_InBroadcastPktsPath {
	return &Interface_Counters_InBroadcastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InBroadcastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a broadcast
// address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-broadcast-pkts"
// Path from root: "/interfaces/interface/state/counters/in-broadcast-pkts"
func (n *Interface_CountersPathAny) InBroadcastPkts() *Interface_Counters_InBroadcastPktsPathAny {
	return &Interface_Counters_InBroadcastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscards (leaf): The number of inbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being deliverable to a higher-layer
// protocol.  One possible reason for discarding such a
// packet could be to free up buffer space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discards"
// Path from root: "/interfaces/interface/state/counters/in-discards"
func (n *Interface_CountersPath) InDiscards() *Interface_Counters_InDiscardsPath {
	return &Interface_Counters_InDiscardsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-discards"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscards (leaf): The number of inbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being deliverable to a higher-layer
// protocol.  One possible reason for discarding such a
// packet could be to free up buffer space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discards"
// Path from root: "/interfaces/interface/state/counters/in-discards"
func (n *Interface_CountersPathAny) InDiscards() *Interface_Counters_InDiscardsPathAny {
	return &Interface_Counters_InDiscardsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-discards"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrors (leaf): For packet-oriented interfaces, the number of inbound
// packets that contained errors preventing them from being
// deliverable to a higher-layer protocol.  For character-
// oriented or fixed-length interfaces, the number of
// inbound transmission units that contained errors
// preventing them from being deliverable to a higher-layer
// protocol.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-errors"
// Path from root: "/interfaces/interface/state/counters/in-errors"
func (n *Interface_CountersPath) InErrors() *Interface_Counters_InErrorsPath {
	return &Interface_Counters_InErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrors (leaf): For packet-oriented interfaces, the number of inbound
// packets that contained errors preventing them from being
// deliverable to a higher-layer protocol.  For character-
// oriented or fixed-length interfaces, the number of
// inbound transmission units that contained errors
// preventing them from being deliverable to a higher-layer
// protocol.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-errors"
// Path from root: "/interfaces/interface/state/counters/in-errors"
func (n *Interface_CountersPathAny) InErrors() *Interface_Counters_InErrorsPathAny {
	return &Interface_Counters_InErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFcsErrors (leaf): Number of received packets which had errors in the
// frame check sequence (FCS), i.e., framing errors.
//
// Discontinuities in the value of this counter can occur
// when the device is re-initialization as indicated by the
// value of 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-fcs-errors"
// Path from root: "/interfaces/interface/state/counters/in-fcs-errors"
func (n *Interface_CountersPath) InFcsErrors() *Interface_Counters_InFcsErrorsPath {
	return &Interface_Counters_InFcsErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-fcs-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFcsErrors (leaf): Number of received packets which had errors in the
// frame check sequence (FCS), i.e., framing errors.
//
// Discontinuities in the value of this counter can occur
// when the device is re-initialization as indicated by the
// value of 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-fcs-errors"
// Path from root: "/interfaces/interface/state/counters/in-fcs-errors"
func (n *Interface_CountersPathAny) InFcsErrors() *Interface_Counters_InFcsErrorsPathAny {
	return &Interface_Counters_InFcsErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-fcs-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a multicast
// address at this sub-layer.  For a MAC-layer protocol,
// this includes both Group and Functional addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-pkts"
// Path from root: "/interfaces/interface/state/counters/in-multicast-pkts"
func (n *Interface_CountersPath) InMulticastPkts() *Interface_Counters_InMulticastPktsPath {
	return &Interface_Counters_InMulticastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a multicast
// address at this sub-layer.  For a MAC-layer protocol,
// this includes both Group and Functional addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-pkts"
// Path from root: "/interfaces/interface/state/counters/in-multicast-pkts"
func (n *Interface_CountersPathAny) InMulticastPkts() *Interface_Counters_InMulticastPktsPathAny {
	return &Interface_Counters_InMulticastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received on the interface,
// including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/state/counters/in-octets"
func (n *Interface_CountersPath) InOctets() *Interface_Counters_InOctetsPath {
	return &Interface_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received on the interface,
// including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/state/counters/in-octets"
func (n *Interface_CountersPathAny) InOctets() *Interface_Counters_InOctetsPathAny {
	return &Interface_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of packets received on the interface,
// including all unicast, multicast, broadcast and bad packets
// etc.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/state/counters/in-pkts"
func (n *Interface_CountersPath) InPkts() *Interface_Counters_InPktsPath {
	return &Interface_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of packets received on the interface,
// including all unicast, multicast, broadcast and bad packets
// etc.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/state/counters/in-pkts"
func (n *Interface_CountersPathAny) InPkts() *Interface_Counters_InPktsPathAny {
	return &Interface_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUnicastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were not addressed to a
// multicast or broadcast address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-unicast-pkts"
// Path from root: "/interfaces/interface/state/counters/in-unicast-pkts"
func (n *Interface_CountersPath) InUnicastPkts() *Interface_Counters_InUnicastPktsPath {
	return &Interface_Counters_InUnicastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUnicastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were not addressed to a
// multicast or broadcast address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-unicast-pkts"
// Path from root: "/interfaces/interface/state/counters/in-unicast-pkts"
func (n *Interface_CountersPathAny) InUnicastPkts() *Interface_Counters_InUnicastPktsPathAny {
	return &Interface_Counters_InUnicastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUnknownProtos (leaf): For packet-oriented interfaces, the number of packets
// received via the interface that were discarded because
// of an unknown or unsupported protocol.  For
// character-oriented or fixed-length interfaces that
// support protocol multiplexing, the number of
// transmission units received via the interface that were
// discarded because of an unknown or unsupported protocol.
// For any interface that does not support protocol
// multiplexing, this counter is not present.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-unknown-protos"
// Path from root: "/interfaces/interface/state/counters/in-unknown-protos"
func (n *Interface_CountersPath) InUnknownProtos() *Interface_Counters_InUnknownProtosPath {
	return &Interface_Counters_InUnknownProtosPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-unknown-protos"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUnknownProtos (leaf): For packet-oriented interfaces, the number of packets
// received via the interface that were discarded because
// of an unknown or unsupported protocol.  For
// character-oriented or fixed-length interfaces that
// support protocol multiplexing, the number of
// transmission units received via the interface that were
// discarded because of an unknown or unsupported protocol.
// For any interface that does not support protocol
// multiplexing, this counter is not present.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-unknown-protos"
// Path from root: "/interfaces/interface/state/counters/in-unknown-protos"
func (n *Interface_CountersPathAny) InUnknownProtos() *Interface_Counters_InUnknownProtosPathAny {
	return &Interface_Counters_InUnknownProtosPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-unknown-protos"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastClear (leaf): Timestamp of the last time the interface counters were
// cleared.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "last-clear"
// Path from root: "/interfaces/interface/state/counters/last-clear"
func (n *Interface_CountersPath) LastClear() *Interface_Counters_LastClearPath {
	return &Interface_Counters_LastClearPath{
		NodePath: ygot.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastClear (leaf): Timestamp of the last time the interface counters were
// cleared.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "last-clear"
// Path from root: "/interfaces/interface/state/counters/last-clear"
func (n *Interface_CountersPathAny) LastClear() *Interface_Counters_LastClearPathAny {
	return &Interface_Counters_LastClearPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutBroadcastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// broadcast address at this sub-layer, including those
// that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-broadcast-pkts"
// Path from root: "/interfaces/interface/state/counters/out-broadcast-pkts"
func (n *Interface_CountersPath) OutBroadcastPkts() *Interface_Counters_OutBroadcastPktsPath {
	return &Interface_Counters_OutBroadcastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutBroadcastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// broadcast address at this sub-layer, including those
// that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-broadcast-pkts"
// Path from root: "/interfaces/interface/state/counters/out-broadcast-pkts"
func (n *Interface_CountersPathAny) OutBroadcastPkts() *Interface_Counters_OutBroadcastPktsPathAny {
	return &Interface_Counters_OutBroadcastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscards (leaf): The number of outbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being transmitted.  One possible reason
// for discarding such a packet could be to free up buffer
// space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discards"
// Path from root: "/interfaces/interface/state/counters/out-discards"
func (n *Interface_CountersPath) OutDiscards() *Interface_Counters_OutDiscardsPath {
	return &Interface_Counters_OutDiscardsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-discards"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscards (leaf): The number of outbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being transmitted.  One possible reason
// for discarding such a packet could be to free up buffer
// space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discards"
// Path from root: "/interfaces/interface/state/counters/out-discards"
func (n *Interface_CountersPathAny) OutDiscards() *Interface_Counters_OutDiscardsPathAny {
	return &Interface_Counters_OutDiscardsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-discards"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrors (leaf): For packet-oriented interfaces, the number of outbound
// packets that could not be transmitted because of errors.
// For character-oriented or fixed-length interfaces, the
// number of outbound transmission units that could not be
// transmitted because of errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-errors"
// Path from root: "/interfaces/interface/state/counters/out-errors"
func (n *Interface_CountersPath) OutErrors() *Interface_Counters_OutErrorsPath {
	return &Interface_Counters_OutErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrors (leaf): For packet-oriented interfaces, the number of outbound
// packets that could not be transmitted because of errors.
// For character-oriented or fixed-length interfaces, the
// number of outbound transmission units that could not be
// transmitted because of errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-errors"
// Path from root: "/interfaces/interface/state/counters/out-errors"
func (n *Interface_CountersPathAny) OutErrors() *Interface_Counters_OutErrorsPathAny {
	return &Interface_Counters_OutErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// multicast address at this sub-layer, including those
// that were discarded or not sent.  For a MAC-layer
// protocol, this includes both Group and Functional
// addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-pkts"
// Path from root: "/interfaces/interface/state/counters/out-multicast-pkts"
func (n *Interface_CountersPath) OutMulticastPkts() *Interface_Counters_OutMulticastPktsPath {
	return &Interface_Counters_OutMulticastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// multicast address at this sub-layer, including those
// that were discarded or not sent.  For a MAC-layer
// protocol, this includes both Group and Functional
// addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-pkts"
// Path from root: "/interfaces/interface/state/counters/out-multicast-pkts"
func (n *Interface_CountersPathAny) OutMulticastPkts() *Interface_Counters_OutMulticastPktsPathAny {
	return &Interface_Counters_OutMulticastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets transmitted out of the
// interface, including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/state/counters/out-octets"
func (n *Interface_CountersPath) OutOctets() *Interface_Counters_OutOctetsPath {
	return &Interface_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets transmitted out of the
// interface, including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/state/counters/out-octets"
func (n *Interface_CountersPathAny) OutOctets() *Interface_Counters_OutOctetsPathAny {
	return &Interface_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of packets transmitted out of the
// interface, including all unicast, multicast, broadcast,
// and bad packets etc.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/state/counters/out-pkts"
func (n *Interface_CountersPath) OutPkts() *Interface_Counters_OutPktsPath {
	return &Interface_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of packets transmitted out of the
// interface, including all unicast, multicast, broadcast,
// and bad packets etc.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/state/counters/out-pkts"
func (n *Interface_CountersPathAny) OutPkts() *Interface_Counters_OutPktsPathAny {
	return &Interface_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutUnicastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were not addressed
// to a multicast or broadcast address at this sub-layer,
// including those that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-unicast-pkts"
// Path from root: "/interfaces/interface/state/counters/out-unicast-pkts"
func (n *Interface_CountersPath) OutUnicastPkts() *Interface_Counters_OutUnicastPktsPath {
	return &Interface_Counters_OutUnicastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutUnicastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were not addressed
// to a multicast or broadcast address at this sub-layer,
// including those that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-unicast-pkts"
// Path from root: "/interfaces/interface/state/counters/out-unicast-pkts"
func (n *Interface_CountersPathAny) OutUnicastPkts() *Interface_Counters_OutUnicastPktsPathAny {
	return &Interface_Counters_OutUnicastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_EthernetPath represents the /openconfig-interfaces/interfaces/interface/ethernet YANG schema element.
type Interface_EthernetPath struct {
	*ygot.NodePath
}

// Interface_EthernetPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet YANG schema element.
type Interface_EthernetPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_AggregateIdPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/aggregate-id YANG schema element.
type Interface_Ethernet_AggregateIdPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_AggregateIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/aggregate-id YANG schema element.
type Interface_Ethernet_AggregateIdPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_AutoNegotiatePath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/auto-negotiate YANG schema element.
type Interface_Ethernet_AutoNegotiatePath struct {
	*ygot.NodePath
}

// Interface_Ethernet_AutoNegotiatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/auto-negotiate YANG schema element.
type Interface_Ethernet_AutoNegotiatePathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_DuplexModePath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/duplex-mode YANG schema element.
type Interface_Ethernet_DuplexModePath struct {
	*ygot.NodePath
}

// Interface_Ethernet_DuplexModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/duplex-mode YANG schema element.
type Interface_Ethernet_DuplexModePathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_EnableFlowControlPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/enable-flow-control YANG schema element.
type Interface_Ethernet_EnableFlowControlPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_EnableFlowControlPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/enable-flow-control YANG schema element.
type Interface_Ethernet_EnableFlowControlPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_FecModePath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/fec-mode YANG schema element.
type Interface_Ethernet_FecModePath struct {
	*ygot.NodePath
}

// Interface_Ethernet_FecModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/fec-mode YANG schema element.
type Interface_Ethernet_FecModePathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_HwMacAddressPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/hw-mac-address YANG schema element.
type Interface_Ethernet_HwMacAddressPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_HwMacAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/hw-mac-address YANG schema element.
type Interface_Ethernet_HwMacAddressPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_MacAddressPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/mac-address YANG schema element.
type Interface_Ethernet_MacAddressPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_MacAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/mac-address YANG schema element.
type Interface_Ethernet_MacAddressPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_NegotiatedDuplexModePath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/negotiated-duplex-mode YANG schema element.
type Interface_Ethernet_NegotiatedDuplexModePath struct {
	*ygot.NodePath
}

// Interface_Ethernet_NegotiatedDuplexModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/negotiated-duplex-mode YANG schema element.
type Interface_Ethernet_NegotiatedDuplexModePathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_NegotiatedPortSpeedPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/negotiated-port-speed YANG schema element.
type Interface_Ethernet_NegotiatedPortSpeedPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_NegotiatedPortSpeedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/negotiated-port-speed YANG schema element.
type Interface_Ethernet_NegotiatedPortSpeedPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_PortSpeedPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/port-speed YANG schema element.
type Interface_Ethernet_PortSpeedPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_PortSpeedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/port-speed YANG schema element.
type Interface_Ethernet_PortSpeedPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_StandaloneLinkTrainingPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/standalone-link-training YANG schema element.
type Interface_Ethernet_StandaloneLinkTrainingPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_StandaloneLinkTrainingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/standalone-link-training YANG schema element.
type Interface_Ethernet_StandaloneLinkTrainingPathAny struct {
	*ygot.NodePath
}

// AggregateId (leaf): Specify the logical aggregate interface to which
// this interface belongs
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/aggregate-id"
// Path from root: "/interfaces/interface/ethernet/state/aggregate-id"
func (n *Interface_EthernetPath) AggregateId() *Interface_Ethernet_AggregateIdPath {
	return &Interface_Ethernet_AggregateIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "aggregate-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// AggregateId (leaf): Specify the logical aggregate interface to which
// this interface belongs
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/aggregate-id"
// Path from root: "/interfaces/interface/ethernet/state/aggregate-id"
func (n *Interface_EthernetPathAny) AggregateId() *Interface_Ethernet_AggregateIdPathAny {
	return &Interface_Ethernet_AggregateIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "aggregate-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// AutoNegotiate (leaf): Set to TRUE to request the interface to auto-negotiate
// transmission parameters with its peer interface.  When
// set to FALSE, the transmission parameters are specified
// manually.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/auto-negotiate"
// Path from root: "/interfaces/interface/ethernet/state/auto-negotiate"
func (n *Interface_EthernetPath) AutoNegotiate() *Interface_Ethernet_AutoNegotiatePath {
	return &Interface_Ethernet_AutoNegotiatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "auto-negotiate"},
			map[string]interface{}{},
			n,
		),
	}
}

// AutoNegotiate (leaf): Set to TRUE to request the interface to auto-negotiate
// transmission parameters with its peer interface.  When
// set to FALSE, the transmission parameters are specified
// manually.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/auto-negotiate"
// Path from root: "/interfaces/interface/ethernet/state/auto-negotiate"
func (n *Interface_EthernetPathAny) AutoNegotiate() *Interface_Ethernet_AutoNegotiatePathAny {
	return &Interface_Ethernet_AutoNegotiatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "auto-negotiate"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Ethernet interface counters
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/ethernet/state/counters"
func (n *Interface_EthernetPath) Counters() *Interface_Ethernet_CountersPath {
	return &Interface_Ethernet_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Ethernet interface counters
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/ethernet/state/counters"
func (n *Interface_EthernetPathAny) Counters() *Interface_Ethernet_CountersPathAny {
	return &Interface_Ethernet_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DuplexMode (leaf): When auto-negotiate is TRUE, this optionally sets the
// duplex mode that will be advertised to the peer.  If
// unspecified, the interface should negotiate the duplex mode
// directly (typically full-duplex).  When auto-negotiate is
// FALSE, this sets the duplex mode on the interface directly.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/duplex-mode"
// Path from root: "/interfaces/interface/ethernet/state/duplex-mode"
func (n *Interface_EthernetPath) DuplexMode() *Interface_Ethernet_DuplexModePath {
	return &Interface_Ethernet_DuplexModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "duplex-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// DuplexMode (leaf): When auto-negotiate is TRUE, this optionally sets the
// duplex mode that will be advertised to the peer.  If
// unspecified, the interface should negotiate the duplex mode
// directly (typically full-duplex).  When auto-negotiate is
// FALSE, this sets the duplex mode on the interface directly.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/duplex-mode"
// Path from root: "/interfaces/interface/ethernet/state/duplex-mode"
func (n *Interface_EthernetPathAny) DuplexMode() *Interface_Ethernet_DuplexModePathAny {
	return &Interface_Ethernet_DuplexModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "duplex-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableFlowControl (leaf): Enable or disable flow control for this interface.
// Ethernet flow control is a mechanism by which a receiver
// may send PAUSE frames to a sender to stop transmission for
// a specified time.
//
// This setting should override auto-negotiated flow control
// settings.  If left unspecified, and auto-negotiate is TRUE,
// flow control mode is negotiated with the peer interface.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enable-flow-control"
// Path from root: "/interfaces/interface/ethernet/state/enable-flow-control"
func (n *Interface_EthernetPath) EnableFlowControl() *Interface_Ethernet_EnableFlowControlPath {
	return &Interface_Ethernet_EnableFlowControlPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable-flow-control"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableFlowControl (leaf): Enable or disable flow control for this interface.
// Ethernet flow control is a mechanism by which a receiver
// may send PAUSE frames to a sender to stop transmission for
// a specified time.
//
// This setting should override auto-negotiated flow control
// settings.  If left unspecified, and auto-negotiate is TRUE,
// flow control mode is negotiated with the peer interface.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enable-flow-control"
// Path from root: "/interfaces/interface/ethernet/state/enable-flow-control"
func (n *Interface_EthernetPathAny) EnableFlowControl() *Interface_Ethernet_EnableFlowControlPathAny {
	return &Interface_Ethernet_EnableFlowControlPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable-flow-control"},
			map[string]interface{}{},
			n,
		),
	}
}

// FecMode (leaf): The FEC mode applied to the physical channels associated with
// the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/fec-mode"
// Path from root: "/interfaces/interface/ethernet/state/fec-mode"
func (n *Interface_EthernetPath) FecMode() *Interface_Ethernet_FecModePath {
	return &Interface_Ethernet_FecModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "fec-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// FecMode (leaf): The FEC mode applied to the physical channels associated with
// the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/fec-mode"
// Path from root: "/interfaces/interface/ethernet/state/fec-mode"
func (n *Interface_EthernetPathAny) FecMode() *Interface_Ethernet_FecModePathAny {
	return &Interface_Ethernet_FecModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "fec-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// HwMacAddress (leaf): Represents the 'burned-in', or system-assigned, MAC
// address for the Ethernet interface.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/hw-mac-address"
// Path from root: "/interfaces/interface/ethernet/state/hw-mac-address"
func (n *Interface_EthernetPath) HwMacAddress() *Interface_Ethernet_HwMacAddressPath {
	return &Interface_Ethernet_HwMacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hw-mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// HwMacAddress (leaf): Represents the 'burned-in', or system-assigned, MAC
// address for the Ethernet interface.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/hw-mac-address"
// Path from root: "/interfaces/interface/ethernet/state/hw-mac-address"
func (n *Interface_EthernetPathAny) HwMacAddress() *Interface_Ethernet_HwMacAddressPathAny {
	return &Interface_Ethernet_HwMacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hw-mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): Assigns a MAC address to the Ethernet interface.  If not
// specified, the corresponding operational state leaf is
// expected to show the system-assigned MAC address.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/mac-address"
// Path from root: "/interfaces/interface/ethernet/state/mac-address"
func (n *Interface_EthernetPath) MacAddress() *Interface_Ethernet_MacAddressPath {
	return &Interface_Ethernet_MacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): Assigns a MAC address to the Ethernet interface.  If not
// specified, the corresponding operational state leaf is
// expected to show the system-assigned MAC address.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/mac-address"
// Path from root: "/interfaces/interface/ethernet/state/mac-address"
func (n *Interface_EthernetPathAny) MacAddress() *Interface_Ethernet_MacAddressPathAny {
	return &Interface_Ethernet_MacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NegotiatedDuplexMode (leaf): When auto-negotiate is set to TRUE, and the interface has
// completed auto-negotiation with the remote peer, this value
// shows the duplex mode that has been negotiated.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/negotiated-duplex-mode"
// Path from root: "/interfaces/interface/ethernet/state/negotiated-duplex-mode"
func (n *Interface_EthernetPath) NegotiatedDuplexMode() *Interface_Ethernet_NegotiatedDuplexModePath {
	return &Interface_Ethernet_NegotiatedDuplexModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "negotiated-duplex-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// NegotiatedDuplexMode (leaf): When auto-negotiate is set to TRUE, and the interface has
// completed auto-negotiation with the remote peer, this value
// shows the duplex mode that has been negotiated.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/negotiated-duplex-mode"
// Path from root: "/interfaces/interface/ethernet/state/negotiated-duplex-mode"
func (n *Interface_EthernetPathAny) NegotiatedDuplexMode() *Interface_Ethernet_NegotiatedDuplexModePathAny {
	return &Interface_Ethernet_NegotiatedDuplexModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "negotiated-duplex-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// NegotiatedPortSpeed (leaf): When auto-negotiate is set to TRUE, and the interface has
// completed auto-negotiation with the remote peer, this value
// shows the interface speed that has been negotiated.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/negotiated-port-speed"
// Path from root: "/interfaces/interface/ethernet/state/negotiated-port-speed"
func (n *Interface_EthernetPath) NegotiatedPortSpeed() *Interface_Ethernet_NegotiatedPortSpeedPath {
	return &Interface_Ethernet_NegotiatedPortSpeedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "negotiated-port-speed"},
			map[string]interface{}{},
			n,
		),
	}
}

// NegotiatedPortSpeed (leaf): When auto-negotiate is set to TRUE, and the interface has
// completed auto-negotiation with the remote peer, this value
// shows the interface speed that has been negotiated.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/negotiated-port-speed"
// Path from root: "/interfaces/interface/ethernet/state/negotiated-port-speed"
func (n *Interface_EthernetPathAny) NegotiatedPortSpeed() *Interface_Ethernet_NegotiatedPortSpeedPathAny {
	return &Interface_Ethernet_NegotiatedPortSpeedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "negotiated-port-speed"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortSpeed (leaf): When auto-negotiate is TRUE, this optionally sets the
// port-speed mode that will be advertised to the peer for
// negotiation.  If unspecified, it is expected that the
// interface will select the highest speed available based on
// negotiation.  When auto-negotiate is set to FALSE, sets the
// link speed to a fixed value -- supported values are defined
// by ETHERNET_SPEED identities
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/port-speed"
// Path from root: "/interfaces/interface/ethernet/state/port-speed"
func (n *Interface_EthernetPath) PortSpeed() *Interface_Ethernet_PortSpeedPath {
	return &Interface_Ethernet_PortSpeedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-speed"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortSpeed (leaf): When auto-negotiate is TRUE, this optionally sets the
// port-speed mode that will be advertised to the peer for
// negotiation.  If unspecified, it is expected that the
// interface will select the highest speed available based on
// negotiation.  When auto-negotiate is set to FALSE, sets the
// link speed to a fixed value -- supported values are defined
// by ETHERNET_SPEED identities
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/port-speed"
// Path from root: "/interfaces/interface/ethernet/state/port-speed"
func (n *Interface_EthernetPathAny) PortSpeed() *Interface_Ethernet_PortSpeedPathAny {
	return &Interface_Ethernet_PortSpeedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-speed"},
			map[string]interface{}{},
			n,
		),
	}
}

// StandaloneLinkTraining (leaf): Link training is automatic tuning of the SerDes transmit and
// receive parameters to ensure an optimal connection over copper
// links. It is normally run as part of the auto negotiation
// sequence as specified in IEEE 802.3 Clause 73.
//
// Standalone link training is used when full auto negotiation is
// not desired on an Ethernet link but link training is needed.
// It is configured by setting the standalone-link-training leaf
// to TRUE and augo-negotiate leaf to FALSE.
//
// Note: If auto-negotiate is true, then the value of standalone
// link training leaf will be ignored.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/standalone-link-training"
// Path from root: "/interfaces/interface/ethernet/state/standalone-link-training"
func (n *Interface_EthernetPath) StandaloneLinkTraining() *Interface_Ethernet_StandaloneLinkTrainingPath {
	return &Interface_Ethernet_StandaloneLinkTrainingPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "standalone-link-training"},
			map[string]interface{}{},
			n,
		),
	}
}

// StandaloneLinkTraining (leaf): Link training is automatic tuning of the SerDes transmit and
// receive parameters to ensure an optimal connection over copper
// links. It is normally run as part of the auto negotiation
// sequence as specified in IEEE 802.3 Clause 73.
//
// Standalone link training is used when full auto negotiation is
// not desired on an Ethernet link but link training is needed.
// It is configured by setting the standalone-link-training leaf
// to TRUE and augo-negotiate leaf to FALSE.
//
// Note: If auto-negotiate is true, then the value of standalone
// link training leaf will be ignored.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/standalone-link-training"
// Path from root: "/interfaces/interface/ethernet/state/standalone-link-training"
func (n *Interface_EthernetPathAny) StandaloneLinkTraining() *Interface_Ethernet_StandaloneLinkTrainingPathAny {
	return &Interface_Ethernet_StandaloneLinkTrainingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "standalone-link-training"},
			map[string]interface{}{},
			n,
		),
	}
}

// SwitchedVlan (container): Enclosing container for VLAN interface-specific
// data on Ethernet interfaces.  These are for standard
// L2, switched-style VLANs.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "switched-vlan"
// Path from root: "/interfaces/interface/ethernet/switched-vlan"
func (n *Interface_EthernetPath) SwitchedVlan() *Interface_Ethernet_SwitchedVlanPath {
	return &Interface_Ethernet_SwitchedVlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"switched-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// SwitchedVlan (container): Enclosing container for VLAN interface-specific
// data on Ethernet interfaces.  These are for standard
// L2, switched-style VLANs.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "switched-vlan"
// Path from root: "/interfaces/interface/ethernet/switched-vlan"
func (n *Interface_EthernetPathAny) SwitchedVlan() *Interface_Ethernet_SwitchedVlanPathAny {
	return &Interface_Ethernet_SwitchedVlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"switched-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Ethernet_CountersPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters YANG schema element.
type Interface_Ethernet_CountersPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters YANG schema element.
type Interface_Ethernet_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_In_8021QFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-8021q-frames YANG schema element.
type Interface_Ethernet_Counters_In_8021QFramesPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_In_8021QFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-8021q-frames YANG schema element.
type Interface_Ethernet_Counters_In_8021QFramesPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InBlockErrorsPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-block-errors YANG schema element.
type Interface_Ethernet_Counters_InBlockErrorsPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InBlockErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-block-errors YANG schema element.
type Interface_Ethernet_Counters_InBlockErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InCarrierErrorsPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-carrier-errors YANG schema element.
type Interface_Ethernet_Counters_InCarrierErrorsPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InCarrierErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-carrier-errors YANG schema element.
type Interface_Ethernet_Counters_InCarrierErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InCrcErrorsPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-crc-errors YANG schema element.
type Interface_Ethernet_Counters_InCrcErrorsPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InCrcErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-crc-errors YANG schema element.
type Interface_Ethernet_Counters_InCrcErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InFragmentFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-fragment-frames YANG schema element.
type Interface_Ethernet_Counters_InFragmentFramesPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InFragmentFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-fragment-frames YANG schema element.
type Interface_Ethernet_Counters_InFragmentFramesPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InInterruptedTxPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-interrupted-tx YANG schema element.
type Interface_Ethernet_Counters_InInterruptedTxPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InInterruptedTxPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-interrupted-tx YANG schema element.
type Interface_Ethernet_Counters_InInterruptedTxPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InJabberFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-jabber-frames YANG schema element.
type Interface_Ethernet_Counters_InJabberFramesPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InJabberFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-jabber-frames YANG schema element.
type Interface_Ethernet_Counters_InJabberFramesPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InLateCollisionPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-late-collision YANG schema element.
type Interface_Ethernet_Counters_InLateCollisionPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InLateCollisionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-late-collision YANG schema element.
type Interface_Ethernet_Counters_InLateCollisionPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InMacControlFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-mac-control-frames YANG schema element.
type Interface_Ethernet_Counters_InMacControlFramesPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InMacControlFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-mac-control-frames YANG schema element.
type Interface_Ethernet_Counters_InMacControlFramesPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InMacErrorsRxPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-mac-errors-rx YANG schema element.
type Interface_Ethernet_Counters_InMacErrorsRxPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InMacErrorsRxPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-mac-errors-rx YANG schema element.
type Interface_Ethernet_Counters_InMacErrorsRxPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InMacPauseFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-mac-pause-frames YANG schema element.
type Interface_Ethernet_Counters_InMacPauseFramesPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InMacPauseFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-mac-pause-frames YANG schema element.
type Interface_Ethernet_Counters_InMacPauseFramesPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InMaxsizeExceededPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-maxsize-exceeded YANG schema element.
type Interface_Ethernet_Counters_InMaxsizeExceededPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InMaxsizeExceededPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-maxsize-exceeded YANG schema element.
type Interface_Ethernet_Counters_InMaxsizeExceededPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InOversizeFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-oversize-frames YANG schema element.
type Interface_Ethernet_Counters_InOversizeFramesPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InOversizeFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-oversize-frames YANG schema element.
type Interface_Ethernet_Counters_InOversizeFramesPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InSingleCollisionPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-single-collision YANG schema element.
type Interface_Ethernet_Counters_InSingleCollisionPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InSingleCollisionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-single-collision YANG schema element.
type Interface_Ethernet_Counters_InSingleCollisionPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InSymbolErrorPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-symbol-error YANG schema element.
type Interface_Ethernet_Counters_InSymbolErrorPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InSymbolErrorPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-symbol-error YANG schema element.
type Interface_Ethernet_Counters_InSymbolErrorPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InUndersizeFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-undersize-frames YANG schema element.
type Interface_Ethernet_Counters_InUndersizeFramesPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InUndersizeFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-undersize-frames YANG schema element.
type Interface_Ethernet_Counters_InUndersizeFramesPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_Out_8021QFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-8021q-frames YANG schema element.
type Interface_Ethernet_Counters_Out_8021QFramesPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_Out_8021QFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-8021q-frames YANG schema element.
type Interface_Ethernet_Counters_Out_8021QFramesPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_OutMacControlFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-mac-control-frames YANG schema element.
type Interface_Ethernet_Counters_OutMacControlFramesPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_OutMacControlFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-mac-control-frames YANG schema element.
type Interface_Ethernet_Counters_OutMacControlFramesPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_OutMacErrorsTxPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-mac-errors-tx YANG schema element.
type Interface_Ethernet_Counters_OutMacErrorsTxPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_OutMacErrorsTxPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-mac-errors-tx YANG schema element.
type Interface_Ethernet_Counters_OutMacErrorsTxPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_OutMacPauseFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-mac-pause-frames YANG schema element.
type Interface_Ethernet_Counters_OutMacPauseFramesPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_OutMacPauseFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-mac-pause-frames YANG schema element.
type Interface_Ethernet_Counters_OutMacPauseFramesPathAny struct {
	*ygot.NodePath
}

// In_8021QFrames (leaf): Number of 802.1q tagged frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-8021q-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-8021q-frames"
func (n *Interface_Ethernet_CountersPath) In_8021QFrames() *Interface_Ethernet_Counters_In_8021QFramesPath {
	return &Interface_Ethernet_Counters_In_8021QFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-8021q-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// In_8021QFrames (leaf): Number of 802.1q tagged frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-8021q-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-8021q-frames"
func (n *Interface_Ethernet_CountersPathAny) In_8021QFrames() *Interface_Ethernet_Counters_In_8021QFramesPathAny {
	return &Interface_Ethernet_Counters_In_8021QFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-8021q-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InBlockErrors (leaf): The number of received errored blocks. Error detection codes
// are capable of detecting whether one or more errors have
// occurred in a given sequence of bits – the block. It is
// normally not possible to determine the exact number of errored
// bits within the block
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-block-errors"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-block-errors"
func (n *Interface_Ethernet_CountersPath) InBlockErrors() *Interface_Ethernet_Counters_InBlockErrorsPath {
	return &Interface_Ethernet_Counters_InBlockErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-block-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InBlockErrors (leaf): The number of received errored blocks. Error detection codes
// are capable of detecting whether one or more errors have
// occurred in a given sequence of bits – the block. It is
// normally not possible to determine the exact number of errored
// bits within the block
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-block-errors"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-block-errors"
func (n *Interface_Ethernet_CountersPathAny) InBlockErrors() *Interface_Ethernet_Counters_InBlockErrorsPathAny {
	return &Interface_Ethernet_Counters_InBlockErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-block-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InCarrierErrors (leaf): The number of received errored frames due to a carrier issue.
// The value refers to MIB counter for
// dot3StatsCarrierSenseErrors
// oid=1.3.6.1.2.1.10.7.2.1.11
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-carrier-errors"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-carrier-errors"
func (n *Interface_Ethernet_CountersPath) InCarrierErrors() *Interface_Ethernet_Counters_InCarrierErrorsPath {
	return &Interface_Ethernet_Counters_InCarrierErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-carrier-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InCarrierErrors (leaf): The number of received errored frames due to a carrier issue.
// The value refers to MIB counter for
// dot3StatsCarrierSenseErrors
// oid=1.3.6.1.2.1.10.7.2.1.11
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-carrier-errors"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-carrier-errors"
func (n *Interface_Ethernet_CountersPathAny) InCarrierErrors() *Interface_Ethernet_Counters_InCarrierErrorsPathAny {
	return &Interface_Ethernet_Counters_InCarrierErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-carrier-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InCrcErrors (leaf): The total number of frames received that
// had a length (excluding framing bits, but
// including FCS octets) of between 64 and 1518
// octets, inclusive, but had either a bad
// Frame Check Sequence (FCS) with an integral
// number of octets (FCS Error) or a bad FCS with
// a non-integral number of octets (Alignment Error)
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-crc-errors"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-crc-errors"
func (n *Interface_Ethernet_CountersPath) InCrcErrors() *Interface_Ethernet_Counters_InCrcErrorsPath {
	return &Interface_Ethernet_Counters_InCrcErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-crc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InCrcErrors (leaf): The total number of frames received that
// had a length (excluding framing bits, but
// including FCS octets) of between 64 and 1518
// octets, inclusive, but had either a bad
// Frame Check Sequence (FCS) with an integral
// number of octets (FCS Error) or a bad FCS with
// a non-integral number of octets (Alignment Error)
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-crc-errors"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-crc-errors"
func (n *Interface_Ethernet_CountersPathAny) InCrcErrors() *Interface_Ethernet_Counters_InCrcErrorsPathAny {
	return &Interface_Ethernet_Counters_InCrcErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-crc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFragmentFrames (leaf): The total number of frames received that were less than
// 64 octets in length (excluding framing bits but including
// FCS octets) and had either a bad Frame Check Sequence
// (FCS) with an integral number of octets (FCS Error) or a
// bad FCS with a non-integral number of octets (Alignment
// Error).
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-fragment-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-fragment-frames"
func (n *Interface_Ethernet_CountersPath) InFragmentFrames() *Interface_Ethernet_Counters_InFragmentFramesPath {
	return &Interface_Ethernet_Counters_InFragmentFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-fragment-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFragmentFrames (leaf): The total number of frames received that were less than
// 64 octets in length (excluding framing bits but including
// FCS octets) and had either a bad Frame Check Sequence
// (FCS) with an integral number of octets (FCS Error) or a
// bad FCS with a non-integral number of octets (Alignment
// Error).
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-fragment-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-fragment-frames"
func (n *Interface_Ethernet_CountersPathAny) InFragmentFrames() *Interface_Ethernet_Counters_InFragmentFramesPathAny {
	return &Interface_Ethernet_Counters_InFragmentFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-fragment-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InInterruptedTx (leaf): The number of received errored frames due to interrupted
// transmission issue. The value refers to MIB counter for
// dot3StatsDeferredTransmissions
// oid=1.3.6.1.2.1.10.7.2.1.7
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-interrupted-tx"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-interrupted-tx"
func (n *Interface_Ethernet_CountersPath) InInterruptedTx() *Interface_Ethernet_Counters_InInterruptedTxPath {
	return &Interface_Ethernet_Counters_InInterruptedTxPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-interrupted-tx"},
			map[string]interface{}{},
			n,
		),
	}
}

// InInterruptedTx (leaf): The number of received errored frames due to interrupted
// transmission issue. The value refers to MIB counter for
// dot3StatsDeferredTransmissions
// oid=1.3.6.1.2.1.10.7.2.1.7
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-interrupted-tx"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-interrupted-tx"
func (n *Interface_Ethernet_CountersPathAny) InInterruptedTx() *Interface_Ethernet_Counters_InInterruptedTxPathAny {
	return &Interface_Ethernet_Counters_InInterruptedTxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-interrupted-tx"},
			map[string]interface{}{},
			n,
		),
	}
}

// InJabberFrames (leaf): Number of jabber frames received on the
// interface.  Jabber frames are typically defined as oversize
// frames which also have a bad CRC.  Implementations may use
// slightly different definitions of what constitutes a jabber
// frame.  Often indicative of a NIC hardware problem.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-jabber-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-jabber-frames"
func (n *Interface_Ethernet_CountersPath) InJabberFrames() *Interface_Ethernet_Counters_InJabberFramesPath {
	return &Interface_Ethernet_Counters_InJabberFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-jabber-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InJabberFrames (leaf): Number of jabber frames received on the
// interface.  Jabber frames are typically defined as oversize
// frames which also have a bad CRC.  Implementations may use
// slightly different definitions of what constitutes a jabber
// frame.  Often indicative of a NIC hardware problem.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-jabber-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-jabber-frames"
func (n *Interface_Ethernet_CountersPathAny) InJabberFrames() *Interface_Ethernet_Counters_InJabberFramesPathAny {
	return &Interface_Ethernet_Counters_InJabberFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-jabber-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InLateCollision (leaf): The number of received errored frames due to late collision
// issue. The value refers to MIB counter for
// dot3StatsLateCollisions
// oid=1.3.6.1.2.1.10.7.2.1.8
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-late-collision"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-late-collision"
func (n *Interface_Ethernet_CountersPath) InLateCollision() *Interface_Ethernet_Counters_InLateCollisionPath {
	return &Interface_Ethernet_Counters_InLateCollisionPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-late-collision"},
			map[string]interface{}{},
			n,
		),
	}
}

// InLateCollision (leaf): The number of received errored frames due to late collision
// issue. The value refers to MIB counter for
// dot3StatsLateCollisions
// oid=1.3.6.1.2.1.10.7.2.1.8
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-late-collision"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-late-collision"
func (n *Interface_Ethernet_CountersPathAny) InLateCollision() *Interface_Ethernet_Counters_InLateCollisionPathAny {
	return &Interface_Ethernet_Counters_InLateCollisionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-late-collision"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacControlFrames (leaf): MAC layer control frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-mac-control-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-mac-control-frames"
func (n *Interface_Ethernet_CountersPath) InMacControlFrames() *Interface_Ethernet_Counters_InMacControlFramesPath {
	return &Interface_Ethernet_Counters_InMacControlFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacControlFrames (leaf): MAC layer control frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-mac-control-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-mac-control-frames"
func (n *Interface_Ethernet_CountersPathAny) InMacControlFrames() *Interface_Ethernet_Counters_InMacControlFramesPathAny {
	return &Interface_Ethernet_Counters_InMacControlFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacErrorsRx (leaf): The number of received errored frames due to MAC errors
// received. The value refers to MIB counter for
// dot3StatsInternalMacReceiveErrors
// oid=1.3.6.1.2.1.10.7.2.1.16
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-mac-errors-rx"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-mac-errors-rx"
func (n *Interface_Ethernet_CountersPath) InMacErrorsRx() *Interface_Ethernet_Counters_InMacErrorsRxPath {
	return &Interface_Ethernet_Counters_InMacErrorsRxPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-mac-errors-rx"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacErrorsRx (leaf): The number of received errored frames due to MAC errors
// received. The value refers to MIB counter for
// dot3StatsInternalMacReceiveErrors
// oid=1.3.6.1.2.1.10.7.2.1.16
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-mac-errors-rx"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-mac-errors-rx"
func (n *Interface_Ethernet_CountersPathAny) InMacErrorsRx() *Interface_Ethernet_Counters_InMacErrorsRxPathAny {
	return &Interface_Ethernet_Counters_InMacErrorsRxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-mac-errors-rx"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacPauseFrames (leaf): MAC layer PAUSE frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-mac-pause-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-mac-pause-frames"
func (n *Interface_Ethernet_CountersPath) InMacPauseFrames() *Interface_Ethernet_Counters_InMacPauseFramesPath {
	return &Interface_Ethernet_Counters_InMacPauseFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacPauseFrames (leaf): MAC layer PAUSE frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-mac-pause-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-mac-pause-frames"
func (n *Interface_Ethernet_CountersPathAny) InMacPauseFrames() *Interface_Ethernet_Counters_InMacPauseFramesPathAny {
	return &Interface_Ethernet_Counters_InMacPauseFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMaxsizeExceeded (leaf): The total number frames received that are well-formed but
// dropped due to exceeding the maximum frame size on the interface
// (e.g., MTU or MRU)
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-maxsize-exceeded"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-maxsize-exceeded"
func (n *Interface_Ethernet_CountersPath) InMaxsizeExceeded() *Interface_Ethernet_Counters_InMaxsizeExceededPath {
	return &Interface_Ethernet_Counters_InMaxsizeExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-maxsize-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMaxsizeExceeded (leaf): The total number frames received that are well-formed but
// dropped due to exceeding the maximum frame size on the interface
// (e.g., MTU or MRU)
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-maxsize-exceeded"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-maxsize-exceeded"
func (n *Interface_Ethernet_CountersPathAny) InMaxsizeExceeded() *Interface_Ethernet_Counters_InMaxsizeExceededPathAny {
	return &Interface_Ethernet_Counters_InMaxsizeExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-maxsize-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOversizeFrames (leaf): The total number of frames received that were
// longer than 1518 octets (excluding framing bits,
// but including FCS octets) and were otherwise
// well formed.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-oversize-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-oversize-frames"
func (n *Interface_Ethernet_CountersPath) InOversizeFrames() *Interface_Ethernet_Counters_InOversizeFramesPath {
	return &Interface_Ethernet_Counters_InOversizeFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-oversize-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOversizeFrames (leaf): The total number of frames received that were
// longer than 1518 octets (excluding framing bits,
// but including FCS octets) and were otherwise
// well formed.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-oversize-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-oversize-frames"
func (n *Interface_Ethernet_CountersPathAny) InOversizeFrames() *Interface_Ethernet_Counters_InOversizeFramesPathAny {
	return &Interface_Ethernet_Counters_InOversizeFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-oversize-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSingleCollision (leaf): The number of received errored frames due to single collision
// issue. The value refers to MIB counter for
// dot3StatsSingleCollisionFrames
// oid=1.3.6.1.2.1.10.7.2.1.4
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-single-collision"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-single-collision"
func (n *Interface_Ethernet_CountersPath) InSingleCollision() *Interface_Ethernet_Counters_InSingleCollisionPath {
	return &Interface_Ethernet_Counters_InSingleCollisionPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-single-collision"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSingleCollision (leaf): The number of received errored frames due to single collision
// issue. The value refers to MIB counter for
// dot3StatsSingleCollisionFrames
// oid=1.3.6.1.2.1.10.7.2.1.4
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-single-collision"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-single-collision"
func (n *Interface_Ethernet_CountersPathAny) InSingleCollision() *Interface_Ethernet_Counters_InSingleCollisionPathAny {
	return &Interface_Ethernet_Counters_InSingleCollisionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-single-collision"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSymbolError (leaf): The number of received errored frames due to symbol error.
// The value refers to MIB counter for
// in-symbol-error
// oid=1.3.6.1.2.1.10.7.2.1.18
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-symbol-error"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-symbol-error"
func (n *Interface_Ethernet_CountersPath) InSymbolError() *Interface_Ethernet_Counters_InSymbolErrorPath {
	return &Interface_Ethernet_Counters_InSymbolErrorPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-symbol-error"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSymbolError (leaf): The number of received errored frames due to symbol error.
// The value refers to MIB counter for
// in-symbol-error
// oid=1.3.6.1.2.1.10.7.2.1.18
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-symbol-error"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-symbol-error"
func (n *Interface_Ethernet_CountersPathAny) InSymbolError() *Interface_Ethernet_Counters_InSymbolErrorPathAny {
	return &Interface_Ethernet_Counters_InSymbolErrorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-symbol-error"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUndersizeFrames (leaf): The total number of frames received that were
// less than 64 octets long (excluding framing bits,
// but including FCS octets) and were otherwise well
// formed.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-undersize-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-undersize-frames"
func (n *Interface_Ethernet_CountersPath) InUndersizeFrames() *Interface_Ethernet_Counters_InUndersizeFramesPath {
	return &Interface_Ethernet_Counters_InUndersizeFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-undersize-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUndersizeFrames (leaf): The total number of frames received that were
// less than 64 octets long (excluding framing bits,
// but including FCS octets) and were otherwise well
// formed.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-undersize-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-undersize-frames"
func (n *Interface_Ethernet_CountersPathAny) InUndersizeFrames() *Interface_Ethernet_Counters_InUndersizeFramesPathAny {
	return &Interface_Ethernet_Counters_InUndersizeFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-undersize-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// Out_8021QFrames (leaf): Number of 802.1q tagged frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-8021q-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/out-8021q-frames"
func (n *Interface_Ethernet_CountersPath) Out_8021QFrames() *Interface_Ethernet_Counters_Out_8021QFramesPath {
	return &Interface_Ethernet_Counters_Out_8021QFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-8021q-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// Out_8021QFrames (leaf): Number of 802.1q tagged frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-8021q-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/out-8021q-frames"
func (n *Interface_Ethernet_CountersPathAny) Out_8021QFrames() *Interface_Ethernet_Counters_Out_8021QFramesPathAny {
	return &Interface_Ethernet_Counters_Out_8021QFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-8021q-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacControlFrames (leaf): MAC layer control frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-mac-control-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/out-mac-control-frames"
func (n *Interface_Ethernet_CountersPath) OutMacControlFrames() *Interface_Ethernet_Counters_OutMacControlFramesPath {
	return &Interface_Ethernet_Counters_OutMacControlFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacControlFrames (leaf): MAC layer control frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-mac-control-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/out-mac-control-frames"
func (n *Interface_Ethernet_CountersPathAny) OutMacControlFrames() *Interface_Ethernet_Counters_OutMacControlFramesPathAny {
	return &Interface_Ethernet_Counters_OutMacControlFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacErrorsTx (leaf): The number of sent errored frames due to MAC errors
// transmitted. The value refers to MIB counter for
// dot3StatsInternalMacTransmitErrors
// oid=1.3.6.1.2.1.10.7.2.1.10
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-mac-errors-tx"
// Path from root: "/interfaces/interface/ethernet/state/counters/out-mac-errors-tx"
func (n *Interface_Ethernet_CountersPath) OutMacErrorsTx() *Interface_Ethernet_Counters_OutMacErrorsTxPath {
	return &Interface_Ethernet_Counters_OutMacErrorsTxPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-mac-errors-tx"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacErrorsTx (leaf): The number of sent errored frames due to MAC errors
// transmitted. The value refers to MIB counter for
// dot3StatsInternalMacTransmitErrors
// oid=1.3.6.1.2.1.10.7.2.1.10
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-mac-errors-tx"
// Path from root: "/interfaces/interface/ethernet/state/counters/out-mac-errors-tx"
func (n *Interface_Ethernet_CountersPathAny) OutMacErrorsTx() *Interface_Ethernet_Counters_OutMacErrorsTxPathAny {
	return &Interface_Ethernet_Counters_OutMacErrorsTxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-mac-errors-tx"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacPauseFrames (leaf): MAC layer PAUSE frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-mac-pause-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/out-mac-pause-frames"
func (n *Interface_Ethernet_CountersPath) OutMacPauseFrames() *Interface_Ethernet_Counters_OutMacPauseFramesPath {
	return &Interface_Ethernet_Counters_OutMacPauseFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacPauseFrames (leaf): MAC layer PAUSE frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-mac-pause-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/out-mac-pause-frames"
func (n *Interface_Ethernet_CountersPathAny) OutMacPauseFrames() *Interface_Ethernet_Counters_OutMacPauseFramesPathAny {
	return &Interface_Ethernet_Counters_OutMacPauseFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Ethernet_SwitchedVlanPath represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlanPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_SwitchedVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlanPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_SwitchedVlan_AccessVlanPath represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/access-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlan_AccessVlanPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_SwitchedVlan_AccessVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/access-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlan_AccessVlanPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_SwitchedVlan_InterfaceModePath represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/interface-mode YANG schema element.
type Interface_Ethernet_SwitchedVlan_InterfaceModePath struct {
	*ygot.NodePath
}

// Interface_Ethernet_SwitchedVlan_InterfaceModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/interface-mode YANG schema element.
type Interface_Ethernet_SwitchedVlan_InterfaceModePathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_SwitchedVlan_NativeVlanPath represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/native-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlan_NativeVlanPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_SwitchedVlan_NativeVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/native-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlan_NativeVlanPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_SwitchedVlan_TrunkVlansPath represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/trunk-vlans YANG schema element.
type Interface_Ethernet_SwitchedVlan_TrunkVlansPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_SwitchedVlan_TrunkVlansPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/trunk-vlans YANG schema element.
type Interface_Ethernet_SwitchedVlan_TrunkVlansPathAny struct {
	*ygot.NodePath
}

// AccessVlan (leaf): Assign the access vlan to the access port.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/access-vlan"
// Path from root: "/interfaces/interface/ethernet/switched-vlan/state/access-vlan"
func (n *Interface_Ethernet_SwitchedVlanPath) AccessVlan() *Interface_Ethernet_SwitchedVlan_AccessVlanPath {
	return &Interface_Ethernet_SwitchedVlan_AccessVlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "access-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// AccessVlan (leaf): Assign the access vlan to the access port.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/access-vlan"
// Path from root: "/interfaces/interface/ethernet/switched-vlan/state/access-vlan"
func (n *Interface_Ethernet_SwitchedVlanPathAny) AccessVlan() *Interface_Ethernet_SwitchedVlan_AccessVlanPathAny {
	return &Interface_Ethernet_SwitchedVlan_AccessVlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "access-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceMode (leaf): Set the interface to access or trunk mode for
// VLANs
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/interface-mode"
// Path from root: "/interfaces/interface/ethernet/switched-vlan/state/interface-mode"
func (n *Interface_Ethernet_SwitchedVlanPath) InterfaceMode() *Interface_Ethernet_SwitchedVlan_InterfaceModePath {
	return &Interface_Ethernet_SwitchedVlan_InterfaceModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceMode (leaf): Set the interface to access or trunk mode for
// VLANs
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/interface-mode"
// Path from root: "/interfaces/interface/ethernet/switched-vlan/state/interface-mode"
func (n *Interface_Ethernet_SwitchedVlanPathAny) InterfaceMode() *Interface_Ethernet_SwitchedVlan_InterfaceModePathAny {
	return &Interface_Ethernet_SwitchedVlan_InterfaceModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// NativeVlan (leaf): Set the native VLAN id for untagged frames arriving on
// a trunk interface.  Tagged frames sent on an interface
// configured with a native VLAN should have their tags
// stripped prior to transmission. This configuration is only
// valid on a trunk interface.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/native-vlan"
// Path from root: "/interfaces/interface/ethernet/switched-vlan/state/native-vlan"
func (n *Interface_Ethernet_SwitchedVlanPath) NativeVlan() *Interface_Ethernet_SwitchedVlan_NativeVlanPath {
	return &Interface_Ethernet_SwitchedVlan_NativeVlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "native-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// NativeVlan (leaf): Set the native VLAN id for untagged frames arriving on
// a trunk interface.  Tagged frames sent on an interface
// configured with a native VLAN should have their tags
// stripped prior to transmission. This configuration is only
// valid on a trunk interface.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/native-vlan"
// Path from root: "/interfaces/interface/ethernet/switched-vlan/state/native-vlan"
func (n *Interface_Ethernet_SwitchedVlanPathAny) NativeVlan() *Interface_Ethernet_SwitchedVlan_NativeVlanPathAny {
	return &Interface_Ethernet_SwitchedVlan_NativeVlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "native-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrunkVlans (leaf-list): Specify VLANs, or ranges thereof, that the interface may
// carry when in trunk mode.  If not specified, all VLANs are
// allowed on the interface. Ranges are specified in the form
// x..y, where x<y - ranges are assumed to be inclusive (such
// that the VLAN range is x <= range <= y.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/trunk-vlans"
// Path from root: "/interfaces/interface/ethernet/switched-vlan/state/trunk-vlans"
func (n *Interface_Ethernet_SwitchedVlanPath) TrunkVlans() *Interface_Ethernet_SwitchedVlan_TrunkVlansPath {
	return &Interface_Ethernet_SwitchedVlan_TrunkVlansPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "trunk-vlans"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrunkVlans (leaf-list): Specify VLANs, or ranges thereof, that the interface may
// carry when in trunk mode.  If not specified, all VLANs are
// allowed on the interface. Ranges are specified in the form
// x..y, where x<y - ranges are assumed to be inclusive (such
// that the VLAN range is x <= range <= y.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/trunk-vlans"
// Path from root: "/interfaces/interface/ethernet/switched-vlan/state/trunk-vlans"
func (n *Interface_Ethernet_SwitchedVlanPathAny) TrunkVlans() *Interface_Ethernet_SwitchedVlan_TrunkVlansPathAny {
	return &Interface_Ethernet_SwitchedVlan_TrunkVlansPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "trunk-vlans"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_HoldTimePath represents the /openconfig-interfaces/interfaces/interface/hold-time YANG schema element.
type Interface_HoldTimePath struct {
	*ygot.NodePath
}

// Interface_HoldTimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/hold-time YANG schema element.
type Interface_HoldTimePathAny struct {
	*ygot.NodePath
}

// Interface_HoldTime_DownPath represents the /openconfig-interfaces/interfaces/interface/hold-time/state/down YANG schema element.
type Interface_HoldTime_DownPath struct {
	*ygot.NodePath
}

// Interface_HoldTime_DownPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/hold-time/state/down YANG schema element.
type Interface_HoldTime_DownPathAny struct {
	*ygot.NodePath
}

// Interface_HoldTime_UpPath represents the /openconfig-interfaces/interfaces/interface/hold-time/state/up YANG schema element.
type Interface_HoldTime_UpPath struct {
	*ygot.NodePath
}

// Interface_HoldTime_UpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/hold-time/state/up YANG schema element.
type Interface_HoldTime_UpPathAny struct {
	*ygot.NodePath
}

// Down (leaf): Dampens advertisement when the interface transitions from
// up to down.  A zero value means dampening is turned off,
// i.e., immediate notification.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/down"
// Path from root: "/interfaces/interface/hold-time/state/down"
func (n *Interface_HoldTimePath) Down() *Interface_HoldTime_DownPath {
	return &Interface_HoldTime_DownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "down"},
			map[string]interface{}{},
			n,
		),
	}
}

// Down (leaf): Dampens advertisement when the interface transitions from
// up to down.  A zero value means dampening is turned off,
// i.e., immediate notification.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/down"
// Path from root: "/interfaces/interface/hold-time/state/down"
func (n *Interface_HoldTimePathAny) Down() *Interface_HoldTime_DownPathAny {
	return &Interface_HoldTime_DownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "down"},
			map[string]interface{}{},
			n,
		),
	}
}

// Up (leaf): Dampens advertisement when the interface
// transitions from down to up.  A zero value means dampening
// is turned off, i.e., immediate notification.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/up"
// Path from root: "/interfaces/interface/hold-time/state/up"
func (n *Interface_HoldTimePath) Up() *Interface_HoldTime_UpPath {
	return &Interface_HoldTime_UpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "up"},
			map[string]interface{}{},
			n,
		),
	}
}

// Up (leaf): Dampens advertisement when the interface
// transitions from down to up.  A zero value means dampening
// is turned off, i.e., immediate notification.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/up"
// Path from root: "/interfaces/interface/hold-time/state/up"
func (n *Interface_HoldTimePathAny) Up() *Interface_HoldTime_UpPathAny {
	return &Interface_HoldTime_UpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "up"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlanPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan YANG schema element.
type Interface_RoutedVlanPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan YANG schema element.
type Interface_RoutedVlanPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_VlanPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/state/vlan YANG schema element.
type Interface_RoutedVlan_VlanPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_VlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/state/vlan YANG schema element.
type Interface_RoutedVlan_VlanPathAny struct {
	*ygot.NodePath
}

// Ipv4 (container): Parameters for the IPv4 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv4"
// Path from root: "/interfaces/interface/routed-vlan/ipv4"
func (n *Interface_RoutedVlanPath) Ipv4() *Interface_RoutedVlan_Ipv4Path {
	return &Interface_RoutedVlan_Ipv4Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4 (container): Parameters for the IPv4 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv4"
// Path from root: "/interfaces/interface/routed-vlan/ipv4"
func (n *Interface_RoutedVlanPathAny) Ipv4() *Interface_RoutedVlan_Ipv4PathAny {
	return &Interface_RoutedVlan_Ipv4PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Parameters for the IPv6 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv6"
// Path from root: "/interfaces/interface/routed-vlan/ipv6"
func (n *Interface_RoutedVlanPath) Ipv6() *Interface_RoutedVlan_Ipv6Path {
	return &Interface_RoutedVlan_Ipv6Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Parameters for the IPv6 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv6"
// Path from root: "/interfaces/interface/routed-vlan/ipv6"
func (n *Interface_RoutedVlanPathAny) Ipv6() *Interface_RoutedVlan_Ipv6PathAny {
	return &Interface_RoutedVlan_Ipv6PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (leaf): References the VLAN for which this IP interface
// provides routing services -- similar to a switch virtual
// interface (SVI), or integrated routing and bridging interface
// (IRB) in some implementations.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/vlan"
// Path from root: "/interfaces/interface/routed-vlan/state/vlan"
func (n *Interface_RoutedVlanPath) Vlan() *Interface_RoutedVlan_VlanPath {
	return &Interface_RoutedVlan_VlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (leaf): References the VLAN for which this IP interface
// provides routing services -- similar to a switch virtual
// interface (SVI), or integrated routing and bridging interface
// (IRB) in some implementations.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/vlan"
// Path from root: "/interfaces/interface/routed-vlan/state/vlan"
func (n *Interface_RoutedVlanPathAny) Vlan() *Interface_RoutedVlan_VlanPathAny {
	return &Interface_RoutedVlan_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4Path represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4 YANG schema element.
type Interface_RoutedVlan_Ipv4Path struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4PathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4 YANG schema element.
type Interface_RoutedVlan_Ipv4PathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_DhcpClientPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/dhcp-client YANG schema element.
type Interface_RoutedVlan_Ipv4_DhcpClientPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_DhcpClientPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/dhcp-client YANG schema element.
type Interface_RoutedVlan_Ipv4_DhcpClientPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv4_EnabledPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv4_EnabledPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_MtuPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/mtu YANG schema element.
type Interface_RoutedVlan_Ipv4_MtuPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/mtu YANG schema element.
type Interface_RoutedVlan_Ipv4_MtuPathAny struct {
	*ygot.NodePath
}

// AddressAny (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv4Path) AddressAny() *Interface_RoutedVlan_Ipv4_AddressPathAny {
	return &Interface_RoutedVlan_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// AddressAny (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv4PathAny) AddressAny() *Interface_RoutedVlan_Ipv4_AddressPathAny {
	return &Interface_RoutedVlan_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Address (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address"
// Ip: string
func (n *Interface_RoutedVlan_Ipv4Path) Address(Ip string) *Interface_RoutedVlan_Ipv4_AddressPath {
	return &Interface_RoutedVlan_Ipv4_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Address (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address"
// Ip: string
func (n *Interface_RoutedVlan_Ipv4PathAny) Address(Ip string) *Interface_RoutedVlan_Ipv4_AddressPathAny {
	return &Interface_RoutedVlan_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters"
func (n *Interface_RoutedVlan_Ipv4Path) Counters() *Interface_RoutedVlan_Ipv4_CountersPath {
	return &Interface_RoutedVlan_Ipv4_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters"
func (n *Interface_RoutedVlan_Ipv4PathAny) Counters() *Interface_RoutedVlan_Ipv4_CountersPathAny {
	return &Interface_RoutedVlan_Ipv4_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/dhcp-client"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/dhcp-client"
func (n *Interface_RoutedVlan_Ipv4Path) DhcpClient() *Interface_RoutedVlan_Ipv4_DhcpClientPath {
	return &Interface_RoutedVlan_Ipv4_DhcpClientPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/dhcp-client"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/dhcp-client"
func (n *Interface_RoutedVlan_Ipv4PathAny) DhcpClient() *Interface_RoutedVlan_Ipv4_DhcpClientPathAny {
	return &Interface_RoutedVlan_Ipv4_DhcpClientPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv4 is enabled or disabled on this
// interface.  When IPv4 is enabled, this interface is
// connected to an IPv4 stack, and the interface can send
// and receive IPv4 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/enabled"
func (n *Interface_RoutedVlan_Ipv4Path) Enabled() *Interface_RoutedVlan_Ipv4_EnabledPath {
	return &Interface_RoutedVlan_Ipv4_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv4 is enabled or disabled on this
// interface.  When IPv4 is enabled, this interface is
// connected to an IPv4 stack, and the interface can send
// and receive IPv4 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/enabled"
func (n *Interface_RoutedVlan_Ipv4PathAny) Enabled() *Interface_RoutedVlan_Ipv4_EnabledPathAny {
	return &Interface_RoutedVlan_Ipv4_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv4 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/mtu"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/mtu"
func (n *Interface_RoutedVlan_Ipv4Path) Mtu() *Interface_RoutedVlan_Ipv4_MtuPath {
	return &Interface_RoutedVlan_Ipv4_MtuPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv4 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/mtu"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/mtu"
func (n *Interface_RoutedVlan_Ipv4PathAny) Mtu() *Interface_RoutedVlan_Ipv4_MtuPathAny {
	return &Interface_RoutedVlan_Ipv4_MtuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv4Path) NeighborAny() *Interface_RoutedVlan_Ipv4_NeighborPathAny {
	return &Interface_RoutedVlan_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// NeighborAny (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv4PathAny) NeighborAny() *Interface_RoutedVlan_Ipv4_NeighborPathAny {
	return &Interface_RoutedVlan_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Neighbor (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor"
// Ip: string
func (n *Interface_RoutedVlan_Ipv4Path) Neighbor(Ip string) *Interface_RoutedVlan_Ipv4_NeighborPath {
	return &Interface_RoutedVlan_Ipv4_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Neighbor (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor"
// Ip: string
func (n *Interface_RoutedVlan_Ipv4PathAny) Neighbor(Ip string) *Interface_RoutedVlan_Ipv4_NeighborPathAny {
	return &Interface_RoutedVlan_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// ProxyArp (container): Configuration and operational state parameters
// relating to proxy ARP. This functionality allows a
// system to respond to ARP requests that are not
// explicitly destined to the local system.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "proxy-arp"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/proxy-arp"
func (n *Interface_RoutedVlan_Ipv4Path) ProxyArp() *Interface_RoutedVlan_Ipv4_ProxyArpPath {
	return &Interface_RoutedVlan_Ipv4_ProxyArpPath{
		NodePath: ygot.NewNodePath(
			[]string{"proxy-arp"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProxyArp (container): Configuration and operational state parameters
// relating to proxy ARP. This functionality allows a
// system to respond to ARP requests that are not
// explicitly destined to the local system.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "proxy-arp"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/proxy-arp"
func (n *Interface_RoutedVlan_Ipv4PathAny) ProxyArp() *Interface_RoutedVlan_Ipv4_ProxyArpPathAny {
	return &Interface_RoutedVlan_Ipv4_ProxyArpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"proxy-arp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered"
func (n *Interface_RoutedVlan_Ipv4Path) Unnumbered() *Interface_RoutedVlan_Ipv4_UnnumberedPath {
	return &Interface_RoutedVlan_Ipv4_UnnumberedPath{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered"
func (n *Interface_RoutedVlan_Ipv4PathAny) Unnumbered() *Interface_RoutedVlan_Ipv4_UnnumberedPathAny {
	return &Interface_RoutedVlan_Ipv4_UnnumberedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_AddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv4_AddressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_AddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv4_AddressPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_IpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/ip YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_IpPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/ip YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_IpPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_OriginPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_OriginPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_OriginPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/prefix-length YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/prefix-length YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv4 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/ip"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) Ip() *Interface_RoutedVlan_Ipv4_Address_IpPath {
	return &Interface_RoutedVlan_Ipv4_Address_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv4 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/ip"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) Ip() *Interface_RoutedVlan_Ipv4_Address_IpPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) Origin() *Interface_RoutedVlan_Ipv4_Address_OriginPath {
	return &Interface_RoutedVlan_Ipv4_Address_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) Origin() *Interface_RoutedVlan_Ipv4_Address_OriginPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/prefix-length"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/prefix-length"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) PrefixLength() *Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath {
	return &Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/prefix-length"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/prefix-length"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) PrefixLength() *Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_RoutedVlan_Ipv4_AddressPath) VrrpGroupAny() *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) VrrpGroupAny() *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_RoutedVlan_Ipv4_AddressPath) VrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) VrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/accept-mode YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/accept-mode YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/advertisement-interval YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/advertisement-interval YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt-delay YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt-delay YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/priority YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/priority YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-address YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-address YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-router-id YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-router-id YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny struct {
	*ygot.NodePath
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/accept-mode"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/accept-mode"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) AcceptMode() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/accept-mode"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/accept-mode"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) AcceptMode() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/advertisement-interval"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) AdvertisementInterval() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/advertisement-interval"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) AdvertisementInterval() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) CurrentPriority() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) CurrentPriority() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) InterfaceTracking() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) InterfaceTracking() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/preempt"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) Preempt() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/preempt"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) Preempt() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/preempt-delay"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt-delay"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) PreemptDelay() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/preempt-delay"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt-delay"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) PreemptDelay() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) Priority() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) Priority() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/virtual-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-address"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) VirtualAddress() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/virtual-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-address"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) VirtualAddress() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/virtual-router-id"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) VirtualRouterId() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/virtual-router-id"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) VirtualRouterId() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny struct {
	*ygot.NodePath
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/priority-decrement"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) PriorityDecrement() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/priority-decrement"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) PriorityDecrement() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/track-interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) TrackInterface() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/track-interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) TrackInterface() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_CountersPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv4_CountersPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv4_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InDiscardedPkts() *Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InDiscardedPkts() *Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InErrorPkts() *Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InErrorPkts() *Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InForwardedOctets() *Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InForwardedOctets() *Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InForwardedPkts() *Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InForwardedPkts() *Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InOctets() *Interface_RoutedVlan_Ipv4_Counters_InOctetsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InOctets() *Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InPkts() *Interface_RoutedVlan_Ipv4_Counters_InPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InPkts() *Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutDiscardedPkts() *Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutDiscardedPkts() *Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutErrorPkts() *Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutErrorPkts() *Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutForwardedOctets() *Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutForwardedOctets() *Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutForwardedPkts() *Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutForwardedPkts() *Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutOctets() *Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutOctets() *Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutPkts() *Interface_RoutedVlan_Ipv4_Counters_OutPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutPkts() *Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_NeighborPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv4_NeighborPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_NeighborPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv4_NeighborPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Neighbor_IpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/ip YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_IpPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/ip YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/link-layer-address YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/link-layer-address YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Neighbor_OriginPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_OriginPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv4 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/ip"
func (n *Interface_RoutedVlan_Ipv4_NeighborPath) Ip() *Interface_RoutedVlan_Ipv4_Neighbor_IpPath {
	return &Interface_RoutedVlan_Ipv4_Neighbor_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv4 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/ip"
func (n *Interface_RoutedVlan_Ipv4_NeighborPathAny) Ip() *Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny {
	return &Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/link-layer-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/link-layer-address"
func (n *Interface_RoutedVlan_Ipv4_NeighborPath) LinkLayerAddress() *Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath {
	return &Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/link-layer-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/link-layer-address"
func (n *Interface_RoutedVlan_Ipv4_NeighborPathAny) LinkLayerAddress() *Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny {
	return &Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry, static or dynamic.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv4_NeighborPath) Origin() *Interface_RoutedVlan_Ipv4_Neighbor_OriginPath {
	return &Interface_RoutedVlan_Ipv4_Neighbor_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry, static or dynamic.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv4_NeighborPathAny) Origin() *Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny {
	return &Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_ProxyArpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArpPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_ProxyArpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArpPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_ProxyArp_ModePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp/state/mode YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArp_ModePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp/state/mode YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny struct {
	*ygot.NodePath
}

// Mode (leaf): When set to a value other than DISABLE, the local system should
// respond to ARP requests that are for target addresses other than
// those that are configured on the local subinterface using its own
// MAC address as the target hardware address. If the REMOTE_ONLY
// value is specified, replies are only sent when the target address
// falls outside the locally configured subnets on the interface,
// whereas with the ALL value, all requests, regardless of their
// target address are replied to.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/mode"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/proxy-arp/state/mode"
func (n *Interface_RoutedVlan_Ipv4_ProxyArpPath) Mode() *Interface_RoutedVlan_Ipv4_ProxyArp_ModePath {
	return &Interface_RoutedVlan_Ipv4_ProxyArp_ModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): When set to a value other than DISABLE, the local system should
// respond to ARP requests that are for target addresses other than
// those that are configured on the local subinterface using its own
// MAC address as the target hardware address. If the REMOTE_ONLY
// value is specified, replies are only sent when the target address
// falls outside the locally configured subnets on the interface,
// whereas with the ALL value, all requests, regardless of their
// target address are replied to.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/mode"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/proxy-arp/state/mode"
func (n *Interface_RoutedVlan_Ipv4_ProxyArpPathAny) Mode() *Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny {
	return &Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv4_UnnumberedPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv4_UnnumberedPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/state/enabled"
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPath) Enabled() *Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/state/enabled"
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPathAny) Enabled() *Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref"
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPath) InterfaceRef() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref"
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPathAny) InterfaceRef() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/interface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath) Interface() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/interface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny) Interface() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/subinterface"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/subinterface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath) Subinterface() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/subinterface"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/subinterface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6Path represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6 YANG schema element.
type Interface_RoutedVlan_Ipv6Path struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6PathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6 YANG schema element.
type Interface_RoutedVlan_Ipv6PathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_DhcpClientPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/dhcp-client YANG schema element.
type Interface_RoutedVlan_Ipv6_DhcpClientPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_DhcpClientPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/dhcp-client YANG schema element.
type Interface_RoutedVlan_Ipv6_DhcpClientPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/dup-addr-detect-transmits YANG schema element.
type Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/dup-addr-detect-transmits YANG schema element.
type Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_EnabledPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_EnabledPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_MtuPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/mtu YANG schema element.
type Interface_RoutedVlan_Ipv6_MtuPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/mtu YANG schema element.
type Interface_RoutedVlan_Ipv6_MtuPathAny struct {
	*ygot.NodePath
}

// AddressAny (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv6Path) AddressAny() *Interface_RoutedVlan_Ipv6_AddressPathAny {
	return &Interface_RoutedVlan_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// AddressAny (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv6PathAny) AddressAny() *Interface_RoutedVlan_Ipv6_AddressPathAny {
	return &Interface_RoutedVlan_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Address (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address"
// Ip: string
func (n *Interface_RoutedVlan_Ipv6Path) Address(Ip string) *Interface_RoutedVlan_Ipv6_AddressPath {
	return &Interface_RoutedVlan_Ipv6_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Address (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address"
// Ip: string
func (n *Interface_RoutedVlan_Ipv6PathAny) Address(Ip string) *Interface_RoutedVlan_Ipv6_AddressPathAny {
	return &Interface_RoutedVlan_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters"
func (n *Interface_RoutedVlan_Ipv6Path) Counters() *Interface_RoutedVlan_Ipv6_CountersPath {
	return &Interface_RoutedVlan_Ipv6_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters"
func (n *Interface_RoutedVlan_Ipv6PathAny) Counters() *Interface_RoutedVlan_Ipv6_CountersPathAny {
	return &Interface_RoutedVlan_Ipv6_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/dhcp-client"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/dhcp-client"
func (n *Interface_RoutedVlan_Ipv6Path) DhcpClient() *Interface_RoutedVlan_Ipv6_DhcpClientPath {
	return &Interface_RoutedVlan_Ipv6_DhcpClientPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/dhcp-client"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/dhcp-client"
func (n *Interface_RoutedVlan_Ipv6PathAny) DhcpClient() *Interface_RoutedVlan_Ipv6_DhcpClientPathAny {
	return &Interface_RoutedVlan_Ipv6_DhcpClientPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DupAddrDetectTransmits (leaf): The number of consecutive Neighbor Solicitation messages
// sent while performing Duplicate Address Detection on a
// tentative address.  A value of zero indicates that
// Duplicate Address Detection is not performed on
// tentative addresses.  A value of one indicates a single
// transmission with no follow-up retransmissions.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/dup-addr-detect-transmits"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/dup-addr-detect-transmits"
func (n *Interface_RoutedVlan_Ipv6Path) DupAddrDetectTransmits() *Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath {
	return &Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dup-addr-detect-transmits"},
			map[string]interface{}{},
			n,
		),
	}
}

// DupAddrDetectTransmits (leaf): The number of consecutive Neighbor Solicitation messages
// sent while performing Duplicate Address Detection on a
// tentative address.  A value of zero indicates that
// Duplicate Address Detection is not performed on
// tentative addresses.  A value of one indicates a single
// transmission with no follow-up retransmissions.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/dup-addr-detect-transmits"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/dup-addr-detect-transmits"
func (n *Interface_RoutedVlan_Ipv6PathAny) DupAddrDetectTransmits() *Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny {
	return &Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dup-addr-detect-transmits"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv6 is enabled or disabled on this
// interface.  When IPv6 is enabled, this interface is
// connected to an IPv6 stack, and the interface can send
// and receive IPv6 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/enabled"
func (n *Interface_RoutedVlan_Ipv6Path) Enabled() *Interface_RoutedVlan_Ipv6_EnabledPath {
	return &Interface_RoutedVlan_Ipv6_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv6 is enabled or disabled on this
// interface.  When IPv6 is enabled, this interface is
// connected to an IPv6 stack, and the interface can send
// and receive IPv6 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/enabled"
func (n *Interface_RoutedVlan_Ipv6PathAny) Enabled() *Interface_RoutedVlan_Ipv6_EnabledPathAny {
	return &Interface_RoutedVlan_Ipv6_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv6 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/mtu"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/mtu"
func (n *Interface_RoutedVlan_Ipv6Path) Mtu() *Interface_RoutedVlan_Ipv6_MtuPath {
	return &Interface_RoutedVlan_Ipv6_MtuPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv6 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/mtu"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/mtu"
func (n *Interface_RoutedVlan_Ipv6PathAny) Mtu() *Interface_RoutedVlan_Ipv6_MtuPathAny {
	return &Interface_RoutedVlan_Ipv6_MtuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv6Path) NeighborAny() *Interface_RoutedVlan_Ipv6_NeighborPathAny {
	return &Interface_RoutedVlan_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// NeighborAny (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv6PathAny) NeighborAny() *Interface_RoutedVlan_Ipv6_NeighborPathAny {
	return &Interface_RoutedVlan_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Neighbor (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
// Ip: string
func (n *Interface_RoutedVlan_Ipv6Path) Neighbor(Ip string) *Interface_RoutedVlan_Ipv6_NeighborPath {
	return &Interface_RoutedVlan_Ipv6_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Neighbor (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
// Ip: string
func (n *Interface_RoutedVlan_Ipv6PathAny) Neighbor(Ip string) *Interface_RoutedVlan_Ipv6_NeighborPathAny {
	return &Interface_RoutedVlan_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// RouterAdvertisement (container): Configuration and operational state parameters relating to
// router advertisements.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "router-advertisement"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement"
func (n *Interface_RoutedVlan_Ipv6Path) RouterAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisementPath{
		NodePath: ygot.NewNodePath(
			[]string{"router-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouterAdvertisement (container): Configuration and operational state parameters relating to
// router advertisements.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "router-advertisement"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement"
func (n *Interface_RoutedVlan_Ipv6PathAny) RouterAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"router-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered"
func (n *Interface_RoutedVlan_Ipv6Path) Unnumbered() *Interface_RoutedVlan_Ipv6_UnnumberedPath {
	return &Interface_RoutedVlan_Ipv6_UnnumberedPath{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered"
func (n *Interface_RoutedVlan_Ipv6PathAny) Unnumbered() *Interface_RoutedVlan_Ipv6_UnnumberedPathAny {
	return &Interface_RoutedVlan_Ipv6_UnnumberedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_AddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv6_AddressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_AddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv6_AddressPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_IpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/ip YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_IpPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/ip YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_IpPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_OriginPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_OriginPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_OriginPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/prefix-length YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/prefix-length YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_StatusPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/status YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_StatusPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_StatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/status YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_StatusPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv6 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/ip"
func (n *Interface_RoutedVlan_Ipv6_AddressPath) Ip() *Interface_RoutedVlan_Ipv6_Address_IpPath {
	return &Interface_RoutedVlan_Ipv6_Address_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv6 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/ip"
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) Ip() *Interface_RoutedVlan_Ipv6_Address_IpPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., static, dhcp, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv6_AddressPath) Origin() *Interface_RoutedVlan_Ipv6_Address_OriginPath {
	return &Interface_RoutedVlan_Ipv6_Address_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., static, dhcp, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) Origin() *Interface_RoutedVlan_Ipv6_Address_OriginPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/prefix-length"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/prefix-length"
func (n *Interface_RoutedVlan_Ipv6_AddressPath) PrefixLength() *Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath {
	return &Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/prefix-length"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/prefix-length"
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) PrefixLength() *Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// Status (leaf): The status of an address.  Most of the states correspond
// to states from the IPv6 Stateless Address
// Autoconfiguration protocol.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/status"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/status"
func (n *Interface_RoutedVlan_Ipv6_AddressPath) Status() *Interface_RoutedVlan_Ipv6_Address_StatusPath {
	return &Interface_RoutedVlan_Ipv6_Address_StatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Status (leaf): The status of an address.  Most of the states correspond
// to states from the IPv6 Stateless Address
// Autoconfiguration protocol.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/status"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/status"
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) Status() *Interface_RoutedVlan_Ipv6_Address_StatusPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_StatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_RoutedVlan_Ipv6_AddressPath) VrrpGroupAny() *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) VrrpGroupAny() *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_RoutedVlan_Ipv6_AddressPath) VrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) VrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/accept-mode YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/accept-mode YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/advertisement-interval YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/advertisement-interval YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/preempt YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/preempt YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/preempt-delay YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/preempt-delay YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/priority YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/priority YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-address YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-address YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-link-local YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-link-local YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-router-id YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-router-id YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny struct {
	*ygot.NodePath
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/accept-mode"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/accept-mode"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) AcceptMode() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/accept-mode"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/accept-mode"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) AcceptMode() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/advertisement-interval"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) AdvertisementInterval() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/advertisement-interval"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) AdvertisementInterval() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) CurrentPriority() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) CurrentPriority() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) InterfaceTracking() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) InterfaceTracking() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/preempt"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/preempt"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) Preempt() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/preempt"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/preempt"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) Preempt() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/preempt-delay"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/preempt-delay"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) PreemptDelay() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/preempt-delay"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/preempt-delay"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) PreemptDelay() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) Priority() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) Priority() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/virtual-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-address"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) VirtualAddress() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/virtual-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-address"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) VirtualAddress() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualLinkLocal (leaf): For VRRP on IPv6 interfaces, sets the virtual link local
// address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/virtual-link-local"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-link-local"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) VirtualLinkLocal() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-link-local"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualLinkLocal (leaf): For VRRP on IPv6 interfaces, sets the virtual link local
// address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/virtual-link-local"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-link-local"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) VirtualLinkLocal() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-link-local"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/virtual-router-id"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) VirtualRouterId() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/virtual-router-id"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) VirtualRouterId() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny struct {
	*ygot.NodePath
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/priority-decrement"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) PriorityDecrement() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/priority-decrement"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) PriorityDecrement() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/track-interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) TrackInterface() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/track-interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) TrackInterface() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_CountersPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv6_CountersPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv6_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InDiscardedPkts() *Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InDiscardedPkts() *Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InErrorPkts() *Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InErrorPkts() *Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InForwardedOctets() *Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InForwardedOctets() *Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InForwardedPkts() *Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InForwardedPkts() *Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InOctets() *Interface_RoutedVlan_Ipv6_Counters_InOctetsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InOctets() *Interface_RoutedVlan_Ipv6_Counters_InOctetsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InPkts() *Interface_RoutedVlan_Ipv6_Counters_InPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InPkts() *Interface_RoutedVlan_Ipv6_Counters_InPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutDiscardedPkts() *Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutDiscardedPkts() *Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutErrorPkts() *Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutErrorPkts() *Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutForwardedOctets() *Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutForwardedOctets() *Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutForwardedPkts() *Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutForwardedPkts() *Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutOctets() *Interface_RoutedVlan_Ipv6_Counters_OutOctetsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutOctets() *Interface_RoutedVlan_Ipv6_Counters_OutOctetsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutPkts() *Interface_RoutedVlan_Ipv6_Counters_OutPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutPkts() *Interface_RoutedVlan_Ipv6_Counters_OutPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_NeighborPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv6_NeighborPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_NeighborPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv6_NeighborPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_IpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/ip YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_IpPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/ip YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_IpPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/is-router YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/is-router YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/link-layer-address YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/link-layer-address YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/neighbor-state YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/neighbor-state YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_OriginPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_OriginPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_OriginPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv6 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/ip"
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) Ip() *Interface_RoutedVlan_Ipv6_Neighbor_IpPath {
	return &Interface_RoutedVlan_Ipv6_Neighbor_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv6 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/ip"
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) Ip() *Interface_RoutedVlan_Ipv6_Neighbor_IpPathAny {
	return &Interface_RoutedVlan_Ipv6_Neighbor_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// IsRouter (leaf): Indicates that the neighbor node acts as a router.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/is-router"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) IsRouter() *Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPath {
	return &Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "is-router"},
			map[string]interface{}{},
			n,
		),
	}
}

// IsRouter (leaf): Indicates that the neighbor node acts as a router.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/is-router"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) IsRouter() *Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPathAny {
	return &Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "is-router"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/link-layer-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/link-layer-address"
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) LinkLayerAddress() *Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPath {
	return &Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/link-layer-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/link-layer-address"
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) LinkLayerAddress() *Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPathAny {
	return &Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborState (leaf): The Neighbor Unreachability Detection state of this
// entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/neighbor-state"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) NeighborState() *Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePath {
	return &Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborState (leaf): The Neighbor Unreachability Detection state of this
// entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/neighbor-state"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) NeighborState() *Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePathAny {
	return &Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) Origin() *Interface_RoutedVlan_Ipv6_Neighbor_OriginPath {
	return &Interface_RoutedVlan_Ipv6_Neighbor_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) Origin() *Interface_RoutedVlan_Ipv6_Neighbor_OriginPathAny {
	return &Interface_RoutedVlan_Ipv6_Neighbor_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisementPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisementPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/interval YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/interval YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/lifetime YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/lifetime YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/suppress YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/suppress YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPathAny struct {
	*ygot.NodePath
}

// Interval (leaf): The interval between periodic router advertisement neighbor
// discovery messages sent on this interface expressed in
// seconds.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/interval"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/interval"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Interval() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): The interval between periodic router advertisement neighbor
// discovery messages sent on this interface expressed in
// seconds.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/interval"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/interval"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Interval() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lifetime (leaf): The lifetime advertised in the router advertisement neighbor
// discovery message on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/lifetime"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Lifetime() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lifetime (leaf): The lifetime advertised in the router advertisement neighbor
// discovery message on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/lifetime"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Lifetime() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Suppress (leaf): When set to true, router advertisement neighbor discovery
// messages are not transmitted on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/suppress"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/suppress"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Suppress() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "suppress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Suppress (leaf): When set to true, router advertisement neighbor discovery
// messages are not transmitted on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/suppress"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/state/suppress"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Suppress() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "suppress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv6_UnnumberedPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv6_UnnumberedPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/state/enabled"
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPath) Enabled() *Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/state/enabled"
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPathAny) Enabled() *Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref"
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPath) InterfaceRef() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref"
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPathAny) InterfaceRef() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/interface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath) Interface() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/interface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny) Interface() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/subinterface"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/subinterface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath) Subinterface() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/subinterface"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/subinterface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_SubinterfacePath struct {
	*ygot.NodePath
}

// Interface_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_AdminStatusPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/admin-status YANG schema element.
type Interface_Subinterface_AdminStatusPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_AdminStatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/admin-status YANG schema element.
type Interface_Subinterface_AdminStatusPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_CpuPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/cpu YANG schema element.
type Interface_Subinterface_CpuPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_CpuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/cpu YANG schema element.
type Interface_Subinterface_CpuPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_DescriptionPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/description YANG schema element.
type Interface_Subinterface_DescriptionPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_DescriptionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/description YANG schema element.
type Interface_Subinterface_DescriptionPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/enabled YANG schema element.
type Interface_Subinterface_EnabledPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/enabled YANG schema element.
type Interface_Subinterface_EnabledPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_IfindexPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/ifindex YANG schema element.
type Interface_Subinterface_IfindexPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_IfindexPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/ifindex YANG schema element.
type Interface_Subinterface_IfindexPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_IndexPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/index YANG schema element.
type Interface_Subinterface_IndexPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_IndexPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/index YANG schema element.
type Interface_Subinterface_IndexPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_LastChangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/last-change YANG schema element.
type Interface_Subinterface_LastChangePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_LastChangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/last-change YANG schema element.
type Interface_Subinterface_LastChangePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_LogicalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/logical YANG schema element.
type Interface_Subinterface_LogicalPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_LogicalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/logical YANG schema element.
type Interface_Subinterface_LogicalPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_ManagementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/management YANG schema element.
type Interface_Subinterface_ManagementPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_ManagementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/management YANG schema element.
type Interface_Subinterface_ManagementPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_NamePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/name YANG schema element.
type Interface_Subinterface_NamePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_NamePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/name YANG schema element.
type Interface_Subinterface_NamePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_OperStatusPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/oper-status YANG schema element.
type Interface_Subinterface_OperStatusPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_OperStatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/oper-status YANG schema element.
type Interface_Subinterface_OperStatusPathAny struct {
	*ygot.NodePath
}

// AdminStatus (leaf): The desired state of the interface.  In RFC 7223 this leaf
// has the same read semantics as ifAdminStatus.  Here, it
// reflects the administrative state as set by enabling or
// disabling the interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/admin-status"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/admin-status"
func (n *Interface_SubinterfacePath) AdminStatus() *Interface_Subinterface_AdminStatusPath {
	return &Interface_Subinterface_AdminStatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminStatus (leaf): The desired state of the interface.  In RFC 7223 this leaf
// has the same read semantics as ifAdminStatus.  Here, it
// reflects the administrative state as set by enabling or
// disabling the interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/admin-status"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/admin-status"
func (n *Interface_SubinterfacePathAny) AdminStatus() *Interface_Subinterface_AdminStatusPathAny {
	return &Interface_Subinterface_AdminStatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): A collection of interface-related statistics objects.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters"
func (n *Interface_SubinterfacePath) Counters() *Interface_Subinterface_CountersPath {
	return &Interface_Subinterface_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): A collection of interface-related statistics objects.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters"
func (n *Interface_SubinterfacePathAny) Counters() *Interface_Subinterface_CountersPathAny {
	return &Interface_Subinterface_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cpu (leaf): When set to true, the interface is for traffic
// that is handled by the system CPU, sometimes also called the
// control plane interface.  On systems that represent the CPU
// interface as an Ethernet interface, for example, this leaf
// should be used to distinguish the CPU interface from dataplane
// interfaces.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/cpu"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/cpu"
func (n *Interface_SubinterfacePath) Cpu() *Interface_Subinterface_CpuPath {
	return &Interface_Subinterface_CpuPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cpu (leaf): When set to true, the interface is for traffic
// that is handled by the system CPU, sometimes also called the
// control plane interface.  On systems that represent the CPU
// interface as an Ethernet interface, for example, this leaf
// should be used to distinguish the CPU interface from dataplane
// interfaces.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/cpu"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/cpu"
func (n *Interface_SubinterfacePathAny) Cpu() *Interface_Subinterface_CpuPathAny {
	return &Interface_Subinterface_CpuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): A textual description of the interface.
//
// A server implementation MAY map this leaf to the ifAlias
// MIB object.  Such an implementation needs to use some
// mechanism to handle the differences in size and characters
// allowed between this leaf and ifAlias.  The definition of
// such a mechanism is outside the scope of this document.
//
// Since ifAlias is defined to be stored in non-volatile
// storage, the MIB implementation MUST map ifAlias to the
// value of 'description' in the persistently stored
// datastore.
//
// Specifically, if the device supports ':startup', when
// ifAlias is read the device MUST return the value of
// 'description' in the 'startup' datastore, and when it is
// written, it MUST be written to the 'running' and 'startup'
// datastores.  Note that it is up to the implementation to
//
// decide whether to modify this single leaf in 'startup' or
// perform an implicit copy-config from 'running' to
// 'startup'.
//
// If the device does not support ':startup', ifAlias MUST
// be mapped to the 'description' leaf in the 'running'
// datastore.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/description"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/description"
func (n *Interface_SubinterfacePath) Description() *Interface_Subinterface_DescriptionPath {
	return &Interface_Subinterface_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): A textual description of the interface.
//
// A server implementation MAY map this leaf to the ifAlias
// MIB object.  Such an implementation needs to use some
// mechanism to handle the differences in size and characters
// allowed between this leaf and ifAlias.  The definition of
// such a mechanism is outside the scope of this document.
//
// Since ifAlias is defined to be stored in non-volatile
// storage, the MIB implementation MUST map ifAlias to the
// value of 'description' in the persistently stored
// datastore.
//
// Specifically, if the device supports ':startup', when
// ifAlias is read the device MUST return the value of
// 'description' in the 'startup' datastore, and when it is
// written, it MUST be written to the 'running' and 'startup'
// datastores.  Note that it is up to the implementation to
//
// decide whether to modify this single leaf in 'startup' or
// perform an implicit copy-config from 'running' to
// 'startup'.
//
// If the device does not support ':startup', ifAlias MUST
// be mapped to the 'description' leaf in the 'running'
// datastore.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/description"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/description"
func (n *Interface_SubinterfacePathAny) Description() *Interface_Subinterface_DescriptionPathAny {
	return &Interface_Subinterface_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): This leaf contains the configured, desired state of the
// interface.
//
// Systems that implement the IF-MIB use the value of this
// leaf in the 'running' datastore to set
// IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
// has been initialized, as described in RFC 2863.
//
// Changes in this leaf in the 'running' datastore are
// reflected in ifAdminStatus, but if ifAdminStatus is
// changed over SNMP, this leaf is not affected.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/enabled"
func (n *Interface_SubinterfacePath) Enabled() *Interface_Subinterface_EnabledPath {
	return &Interface_Subinterface_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): This leaf contains the configured, desired state of the
// interface.
//
// Systems that implement the IF-MIB use the value of this
// leaf in the 'running' datastore to set
// IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
// has been initialized, as described in RFC 2863.
//
// Changes in this leaf in the 'running' datastore are
// reflected in ifAdminStatus, but if ifAdminStatus is
// changed over SNMP, this leaf is not affected.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/enabled"
func (n *Interface_SubinterfacePathAny) Enabled() *Interface_Subinterface_EnabledPathAny {
	return &Interface_Subinterface_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ifindex (leaf): System assigned number for each interface.  Corresponds to
// ifIndex object in SNMP Interface MIB
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ifindex"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/ifindex"
func (n *Interface_SubinterfacePath) Ifindex() *Interface_Subinterface_IfindexPath {
	return &Interface_Subinterface_IfindexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ifindex"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ifindex (leaf): System assigned number for each interface.  Corresponds to
// ifIndex object in SNMP Interface MIB
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ifindex"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/ifindex"
func (n *Interface_SubinterfacePathAny) Ifindex() *Interface_Subinterface_IfindexPathAny {
	return &Interface_Subinterface_IfindexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ifindex"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): The index of the subinterface, or logical interface number.
// On systems with no support for subinterfaces, or not using
// subinterfaces, this value should default to 0, i.e., the
// default subinterface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/index"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/index"
func (n *Interface_SubinterfacePath) Index() *Interface_Subinterface_IndexPath {
	return &Interface_Subinterface_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): The index of the subinterface, or logical interface number.
// On systems with no support for subinterfaces, or not using
// subinterfaces, this value should default to 0, i.e., the
// default subinterface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/index"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/index"
func (n *Interface_SubinterfacePathAny) Index() *Interface_Subinterface_IndexPathAny {
	return &Interface_Subinterface_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4 (container): Parameters for the IPv4 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv4"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4"
func (n *Interface_SubinterfacePath) Ipv4() *Interface_Subinterface_Ipv4Path {
	return &Interface_Subinterface_Ipv4Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4 (container): Parameters for the IPv4 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv4"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4"
func (n *Interface_SubinterfacePathAny) Ipv4() *Interface_Subinterface_Ipv4PathAny {
	return &Interface_Subinterface_Ipv4PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Parameters for the IPv6 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv6"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6"
func (n *Interface_SubinterfacePath) Ipv6() *Interface_Subinterface_Ipv6Path {
	return &Interface_Subinterface_Ipv6Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Parameters for the IPv6 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv6"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6"
func (n *Interface_SubinterfacePathAny) Ipv6() *Interface_Subinterface_Ipv6PathAny {
	return &Interface_Subinterface_Ipv6PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastChange (leaf): This timestamp indicates the absolute time of the last
// state change of the interface (e.g., up-to-down transition).
// This is different than the SNMP ifLastChange object in the
// standard interface MIB in that it is not relative to the
// system boot time (i.e,. sysUpTime).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/last-change"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/last-change"
func (n *Interface_SubinterfacePath) LastChange() *Interface_Subinterface_LastChangePath {
	return &Interface_Subinterface_LastChangePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastChange (leaf): This timestamp indicates the absolute time of the last
// state change of the interface (e.g., up-to-down transition).
// This is different than the SNMP ifLastChange object in the
// standard interface MIB in that it is not relative to the
// system boot time (i.e,. sysUpTime).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/last-change"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/last-change"
func (n *Interface_SubinterfacePathAny) LastChange() *Interface_Subinterface_LastChangePathAny {
	return &Interface_Subinterface_LastChangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
	}
}

// Logical (leaf): When set to true, the interface is a logical interface
// which does not have an associated physical port or
// channel on the system.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/logical"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/logical"
func (n *Interface_SubinterfacePath) Logical() *Interface_Subinterface_LogicalPath {
	return &Interface_Subinterface_LogicalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "logical"},
			map[string]interface{}{},
			n,
		),
	}
}

// Logical (leaf): When set to true, the interface is a logical interface
// which does not have an associated physical port or
// channel on the system.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/logical"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/logical"
func (n *Interface_SubinterfacePathAny) Logical() *Interface_Subinterface_LogicalPathAny {
	return &Interface_Subinterface_LogicalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "logical"},
			map[string]interface{}{},
			n,
		),
	}
}

// Management (leaf): When set to true, the interface is a dedicated
// management interface that is not connected to dataplane
// interfaces.  It may be used to connect the system to an
// out-of-band management network, for example.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/management"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/management"
func (n *Interface_SubinterfacePath) Management() *Interface_Subinterface_ManagementPath {
	return &Interface_Subinterface_ManagementPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management"},
			map[string]interface{}{},
			n,
		),
	}
}

// Management (leaf): When set to true, the interface is a dedicated
// management interface that is not connected to dataplane
// interfaces.  It may be used to connect the system to an
// out-of-band management network, for example.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/management"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/management"
func (n *Interface_SubinterfacePathAny) Management() *Interface_Subinterface_ManagementPathAny {
	return &Interface_Subinterface_ManagementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The system-assigned name for the sub-interface.  This MAY
// be a combination of the base interface name and the
// subinterface index, or some other convention used by the
// system.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/name"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/name"
func (n *Interface_SubinterfacePath) Name() *Interface_Subinterface_NamePath {
	return &Interface_Subinterface_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The system-assigned name for the sub-interface.  This MAY
// be a combination of the base interface name and the
// subinterface index, or some other convention used by the
// system.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/name"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/name"
func (n *Interface_SubinterfacePathAny) Name() *Interface_Subinterface_NamePathAny {
	return &Interface_Subinterface_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperStatus (leaf): The current operational state of the interface.
//
// This leaf has the same semantics as ifOperStatus.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/oper-status"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/oper-status"
func (n *Interface_SubinterfacePath) OperStatus() *Interface_Subinterface_OperStatusPath {
	return &Interface_Subinterface_OperStatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperStatus (leaf): The current operational state of the interface.
//
// This leaf has the same semantics as ifOperStatus.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/oper-status"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/oper-status"
func (n *Interface_SubinterfacePathAny) OperStatus() *Interface_Subinterface_OperStatusPathAny {
	return &Interface_Subinterface_OperStatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (container): Enclosing container for VLAN interface-specific
// data on subinterfaces
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vlan"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan"
func (n *Interface_SubinterfacePath) Vlan() *Interface_Subinterface_VlanPath {
	return &Interface_Subinterface_VlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (container): Enclosing container for VLAN interface-specific
// data on subinterfaces
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vlan"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan"
func (n *Interface_SubinterfacePathAny) Vlan() *Interface_Subinterface_VlanPathAny {
	return &Interface_Subinterface_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_CountersPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type Interface_Subinterface_CountersPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type Interface_Subinterface_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_CarrierTransitionsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions YANG schema element.
type Interface_Subinterface_Counters_CarrierTransitionsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_CarrierTransitionsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions YANG schema element.
type Interface_Subinterface_Counters_CarrierTransitionsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InBroadcastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts YANG schema element.
type Interface_Subinterface_Counters_InBroadcastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InBroadcastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts YANG schema element.
type Interface_Subinterface_Counters_InBroadcastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InDiscardsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards YANG schema element.
type Interface_Subinterface_Counters_InDiscardsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InDiscardsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards YANG schema element.
type Interface_Subinterface_Counters_InDiscardsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InErrorsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors YANG schema element.
type Interface_Subinterface_Counters_InErrorsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors YANG schema element.
type Interface_Subinterface_Counters_InErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InFcsErrorsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors YANG schema element.
type Interface_Subinterface_Counters_InFcsErrorsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InFcsErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors YANG schema element.
type Interface_Subinterface_Counters_InFcsErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts YANG schema element.
type Interface_Subinterface_Counters_InMulticastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts YANG schema element.
type Interface_Subinterface_Counters_InMulticastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InUnicastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts YANG schema element.
type Interface_Subinterface_Counters_InUnicastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InUnicastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts YANG schema element.
type Interface_Subinterface_Counters_InUnicastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InUnknownProtosPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos YANG schema element.
type Interface_Subinterface_Counters_InUnknownProtosPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InUnknownProtosPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos YANG schema element.
type Interface_Subinterface_Counters_InUnknownProtosPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_LastClearPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear YANG schema element.
type Interface_Subinterface_Counters_LastClearPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_LastClearPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear YANG schema element.
type Interface_Subinterface_Counters_LastClearPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutBroadcastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutBroadcastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutBroadcastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutBroadcastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutDiscardsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards YANG schema element.
type Interface_Subinterface_Counters_OutDiscardsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutDiscardsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards YANG schema element.
type Interface_Subinterface_Counters_OutDiscardsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutErrorsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors YANG schema element.
type Interface_Subinterface_Counters_OutErrorsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors YANG schema element.
type Interface_Subinterface_Counters_OutErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutMulticastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutMulticastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutUnicastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutUnicastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutUnicastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutUnicastPktsPathAny struct {
	*ygot.NodePath
}

// CarrierTransitions (leaf): Number of times the interface state has transitioned
// between up and down since the time the device restarted
// or the last-clear time, whichever is most recent.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "carrier-transitions"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions"
func (n *Interface_Subinterface_CountersPath) CarrierTransitions() *Interface_Subinterface_Counters_CarrierTransitionsPath {
	return &Interface_Subinterface_Counters_CarrierTransitionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"carrier-transitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// CarrierTransitions (leaf): Number of times the interface state has transitioned
// between up and down since the time the device restarted
// or the last-clear time, whichever is most recent.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "carrier-transitions"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions"
func (n *Interface_Subinterface_CountersPathAny) CarrierTransitions() *Interface_Subinterface_Counters_CarrierTransitionsPathAny {
	return &Interface_Subinterface_Counters_CarrierTransitionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"carrier-transitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// InBroadcastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a broadcast
// address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-broadcast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts"
func (n *Interface_Subinterface_CountersPath) InBroadcastPkts() *Interface_Subinterface_Counters_InBroadcastPktsPath {
	return &Interface_Subinterface_Counters_InBroadcastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InBroadcastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a broadcast
// address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-broadcast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts"
func (n *Interface_Subinterface_CountersPathAny) InBroadcastPkts() *Interface_Subinterface_Counters_InBroadcastPktsPathAny {
	return &Interface_Subinterface_Counters_InBroadcastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscards (leaf): The number of inbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being deliverable to a higher-layer
// protocol.  One possible reason for discarding such a
// packet could be to free up buffer space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discards"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards"
func (n *Interface_Subinterface_CountersPath) InDiscards() *Interface_Subinterface_Counters_InDiscardsPath {
	return &Interface_Subinterface_Counters_InDiscardsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-discards"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscards (leaf): The number of inbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being deliverable to a higher-layer
// protocol.  One possible reason for discarding such a
// packet could be to free up buffer space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discards"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards"
func (n *Interface_Subinterface_CountersPathAny) InDiscards() *Interface_Subinterface_Counters_InDiscardsPathAny {
	return &Interface_Subinterface_Counters_InDiscardsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-discards"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrors (leaf): For packet-oriented interfaces, the number of inbound
// packets that contained errors preventing them from being
// deliverable to a higher-layer protocol.  For character-
// oriented or fixed-length interfaces, the number of
// inbound transmission units that contained errors
// preventing them from being deliverable to a higher-layer
// protocol.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-errors"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors"
func (n *Interface_Subinterface_CountersPath) InErrors() *Interface_Subinterface_Counters_InErrorsPath {
	return &Interface_Subinterface_Counters_InErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrors (leaf): For packet-oriented interfaces, the number of inbound
// packets that contained errors preventing them from being
// deliverable to a higher-layer protocol.  For character-
// oriented or fixed-length interfaces, the number of
// inbound transmission units that contained errors
// preventing them from being deliverable to a higher-layer
// protocol.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-errors"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors"
func (n *Interface_Subinterface_CountersPathAny) InErrors() *Interface_Subinterface_Counters_InErrorsPathAny {
	return &Interface_Subinterface_Counters_InErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFcsErrors (leaf): Number of received packets which had errors in the
// frame check sequence (FCS), i.e., framing errors.
//
// Discontinuities in the value of this counter can occur
// when the device is re-initialization as indicated by the
// value of 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-fcs-errors"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors"
func (n *Interface_Subinterface_CountersPath) InFcsErrors() *Interface_Subinterface_Counters_InFcsErrorsPath {
	return &Interface_Subinterface_Counters_InFcsErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-fcs-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFcsErrors (leaf): Number of received packets which had errors in the
// frame check sequence (FCS), i.e., framing errors.
//
// Discontinuities in the value of this counter can occur
// when the device is re-initialization as indicated by the
// value of 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-fcs-errors"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors"
func (n *Interface_Subinterface_CountersPathAny) InFcsErrors() *Interface_Subinterface_Counters_InFcsErrorsPathAny {
	return &Interface_Subinterface_Counters_InFcsErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-fcs-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a multicast
// address at this sub-layer.  For a MAC-layer protocol,
// this includes both Group and Functional addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_CountersPath) InMulticastPkts() *Interface_Subinterface_Counters_InMulticastPktsPath {
	return &Interface_Subinterface_Counters_InMulticastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a multicast
// address at this sub-layer.  For a MAC-layer protocol,
// this includes both Group and Functional addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_CountersPathAny) InMulticastPkts() *Interface_Subinterface_Counters_InMulticastPktsPathAny {
	return &Interface_Subinterface_Counters_InMulticastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received on the interface,
// including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets"
func (n *Interface_Subinterface_CountersPath) InOctets() *Interface_Subinterface_Counters_InOctetsPath {
	return &Interface_Subinterface_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received on the interface,
// including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets"
func (n *Interface_Subinterface_CountersPathAny) InOctets() *Interface_Subinterface_Counters_InOctetsPathAny {
	return &Interface_Subinterface_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of packets received on the interface,
// including all unicast, multicast, broadcast and bad packets
// etc.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts"
func (n *Interface_Subinterface_CountersPath) InPkts() *Interface_Subinterface_Counters_InPktsPath {
	return &Interface_Subinterface_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of packets received on the interface,
// including all unicast, multicast, broadcast and bad packets
// etc.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts"
func (n *Interface_Subinterface_CountersPathAny) InPkts() *Interface_Subinterface_Counters_InPktsPathAny {
	return &Interface_Subinterface_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUnicastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were not addressed to a
// multicast or broadcast address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-unicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts"
func (n *Interface_Subinterface_CountersPath) InUnicastPkts() *Interface_Subinterface_Counters_InUnicastPktsPath {
	return &Interface_Subinterface_Counters_InUnicastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUnicastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were not addressed to a
// multicast or broadcast address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-unicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts"
func (n *Interface_Subinterface_CountersPathAny) InUnicastPkts() *Interface_Subinterface_Counters_InUnicastPktsPathAny {
	return &Interface_Subinterface_Counters_InUnicastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUnknownProtos (leaf): For packet-oriented interfaces, the number of packets
// received via the interface that were discarded because
// of an unknown or unsupported protocol.  For
// character-oriented or fixed-length interfaces that
// support protocol multiplexing, the number of
// transmission units received via the interface that were
// discarded because of an unknown or unsupported protocol.
// For any interface that does not support protocol
// multiplexing, this counter is not present.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-unknown-protos"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos"
func (n *Interface_Subinterface_CountersPath) InUnknownProtos() *Interface_Subinterface_Counters_InUnknownProtosPath {
	return &Interface_Subinterface_Counters_InUnknownProtosPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-unknown-protos"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUnknownProtos (leaf): For packet-oriented interfaces, the number of packets
// received via the interface that were discarded because
// of an unknown or unsupported protocol.  For
// character-oriented or fixed-length interfaces that
// support protocol multiplexing, the number of
// transmission units received via the interface that were
// discarded because of an unknown or unsupported protocol.
// For any interface that does not support protocol
// multiplexing, this counter is not present.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-unknown-protos"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos"
func (n *Interface_Subinterface_CountersPathAny) InUnknownProtos() *Interface_Subinterface_Counters_InUnknownProtosPathAny {
	return &Interface_Subinterface_Counters_InUnknownProtosPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-unknown-protos"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastClear (leaf): Timestamp of the last time the interface counters were
// cleared.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "last-clear"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear"
func (n *Interface_Subinterface_CountersPath) LastClear() *Interface_Subinterface_Counters_LastClearPath {
	return &Interface_Subinterface_Counters_LastClearPath{
		NodePath: ygot.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastClear (leaf): Timestamp of the last time the interface counters were
// cleared.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "last-clear"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear"
func (n *Interface_Subinterface_CountersPathAny) LastClear() *Interface_Subinterface_Counters_LastClearPathAny {
	return &Interface_Subinterface_Counters_LastClearPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutBroadcastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// broadcast address at this sub-layer, including those
// that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-broadcast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts"
func (n *Interface_Subinterface_CountersPath) OutBroadcastPkts() *Interface_Subinterface_Counters_OutBroadcastPktsPath {
	return &Interface_Subinterface_Counters_OutBroadcastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutBroadcastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// broadcast address at this sub-layer, including those
// that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-broadcast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts"
func (n *Interface_Subinterface_CountersPathAny) OutBroadcastPkts() *Interface_Subinterface_Counters_OutBroadcastPktsPathAny {
	return &Interface_Subinterface_Counters_OutBroadcastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscards (leaf): The number of outbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being transmitted.  One possible reason
// for discarding such a packet could be to free up buffer
// space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discards"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards"
func (n *Interface_Subinterface_CountersPath) OutDiscards() *Interface_Subinterface_Counters_OutDiscardsPath {
	return &Interface_Subinterface_Counters_OutDiscardsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-discards"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscards (leaf): The number of outbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being transmitted.  One possible reason
// for discarding such a packet could be to free up buffer
// space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discards"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards"
func (n *Interface_Subinterface_CountersPathAny) OutDiscards() *Interface_Subinterface_Counters_OutDiscardsPathAny {
	return &Interface_Subinterface_Counters_OutDiscardsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-discards"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrors (leaf): For packet-oriented interfaces, the number of outbound
// packets that could not be transmitted because of errors.
// For character-oriented or fixed-length interfaces, the
// number of outbound transmission units that could not be
// transmitted because of errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-errors"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors"
func (n *Interface_Subinterface_CountersPath) OutErrors() *Interface_Subinterface_Counters_OutErrorsPath {
	return &Interface_Subinterface_Counters_OutErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrors (leaf): For packet-oriented interfaces, the number of outbound
// packets that could not be transmitted because of errors.
// For character-oriented or fixed-length interfaces, the
// number of outbound transmission units that could not be
// transmitted because of errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-errors"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors"
func (n *Interface_Subinterface_CountersPathAny) OutErrors() *Interface_Subinterface_Counters_OutErrorsPathAny {
	return &Interface_Subinterface_Counters_OutErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// multicast address at this sub-layer, including those
// that were discarded or not sent.  For a MAC-layer
// protocol, this includes both Group and Functional
// addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_CountersPath) OutMulticastPkts() *Interface_Subinterface_Counters_OutMulticastPktsPath {
	return &Interface_Subinterface_Counters_OutMulticastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// multicast address at this sub-layer, including those
// that were discarded or not sent.  For a MAC-layer
// protocol, this includes both Group and Functional
// addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_CountersPathAny) OutMulticastPkts() *Interface_Subinterface_Counters_OutMulticastPktsPathAny {
	return &Interface_Subinterface_Counters_OutMulticastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets transmitted out of the
// interface, including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets"
func (n *Interface_Subinterface_CountersPath) OutOctets() *Interface_Subinterface_Counters_OutOctetsPath {
	return &Interface_Subinterface_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets transmitted out of the
// interface, including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets"
func (n *Interface_Subinterface_CountersPathAny) OutOctets() *Interface_Subinterface_Counters_OutOctetsPathAny {
	return &Interface_Subinterface_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of packets transmitted out of the
// interface, including all unicast, multicast, broadcast,
// and bad packets etc.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts"
func (n *Interface_Subinterface_CountersPath) OutPkts() *Interface_Subinterface_Counters_OutPktsPath {
	return &Interface_Subinterface_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of packets transmitted out of the
// interface, including all unicast, multicast, broadcast,
// and bad packets etc.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts"
func (n *Interface_Subinterface_CountersPathAny) OutPkts() *Interface_Subinterface_Counters_OutPktsPathAny {
	return &Interface_Subinterface_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutUnicastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were not addressed
// to a multicast or broadcast address at this sub-layer,
// including those that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-unicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts"
func (n *Interface_Subinterface_CountersPath) OutUnicastPkts() *Interface_Subinterface_Counters_OutUnicastPktsPath {
	return &Interface_Subinterface_Counters_OutUnicastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutUnicastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were not addressed
// to a multicast or broadcast address at this sub-layer,
// including those that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-unicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts"
func (n *Interface_Subinterface_CountersPathAny) OutUnicastPkts() *Interface_Subinterface_Counters_OutUnicastPktsPathAny {
	return &Interface_Subinterface_Counters_OutUnicastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4Path represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4 YANG schema element.
type Interface_Subinterface_Ipv4Path struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4PathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4 YANG schema element.
type Interface_Subinterface_Ipv4PathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_DhcpClientPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/dhcp-client YANG schema element.
type Interface_Subinterface_Ipv4_DhcpClientPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_DhcpClientPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/dhcp-client YANG schema element.
type Interface_Subinterface_Ipv4_DhcpClientPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/enabled YANG schema element.
type Interface_Subinterface_Ipv4_EnabledPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/enabled YANG schema element.
type Interface_Subinterface_Ipv4_EnabledPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_MtuPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/mtu YANG schema element.
type Interface_Subinterface_Ipv4_MtuPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/mtu YANG schema element.
type Interface_Subinterface_Ipv4_MtuPathAny struct {
	*ygot.NodePath
}

// AddressAny (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv4Path) AddressAny() *Interface_Subinterface_Ipv4_AddressPathAny {
	return &Interface_Subinterface_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// AddressAny (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv4PathAny) AddressAny() *Interface_Subinterface_Ipv4_AddressPathAny {
	return &Interface_Subinterface_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Address (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
// Ip: string
func (n *Interface_Subinterface_Ipv4Path) Address(Ip string) *Interface_Subinterface_Ipv4_AddressPath {
	return &Interface_Subinterface_Ipv4_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Address (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
// Ip: string
func (n *Interface_Subinterface_Ipv4PathAny) Address(Ip string) *Interface_Subinterface_Ipv4_AddressPathAny {
	return &Interface_Subinterface_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters"
func (n *Interface_Subinterface_Ipv4Path) Counters() *Interface_Subinterface_Ipv4_CountersPath {
	return &Interface_Subinterface_Ipv4_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters"
func (n *Interface_Subinterface_Ipv4PathAny) Counters() *Interface_Subinterface_Ipv4_CountersPathAny {
	return &Interface_Subinterface_Ipv4_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/dhcp-client"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/dhcp-client"
func (n *Interface_Subinterface_Ipv4Path) DhcpClient() *Interface_Subinterface_Ipv4_DhcpClientPath {
	return &Interface_Subinterface_Ipv4_DhcpClientPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/dhcp-client"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/dhcp-client"
func (n *Interface_Subinterface_Ipv4PathAny) DhcpClient() *Interface_Subinterface_Ipv4_DhcpClientPathAny {
	return &Interface_Subinterface_Ipv4_DhcpClientPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv4 is enabled or disabled on this
// interface.  When IPv4 is enabled, this interface is
// connected to an IPv4 stack, and the interface can send
// and receive IPv4 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/enabled"
func (n *Interface_Subinterface_Ipv4Path) Enabled() *Interface_Subinterface_Ipv4_EnabledPath {
	return &Interface_Subinterface_Ipv4_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv4 is enabled or disabled on this
// interface.  When IPv4 is enabled, this interface is
// connected to an IPv4 stack, and the interface can send
// and receive IPv4 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/enabled"
func (n *Interface_Subinterface_Ipv4PathAny) Enabled() *Interface_Subinterface_Ipv4_EnabledPathAny {
	return &Interface_Subinterface_Ipv4_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv4 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/mtu"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/mtu"
func (n *Interface_Subinterface_Ipv4Path) Mtu() *Interface_Subinterface_Ipv4_MtuPath {
	return &Interface_Subinterface_Ipv4_MtuPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv4 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/mtu"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/mtu"
func (n *Interface_Subinterface_Ipv4PathAny) Mtu() *Interface_Subinterface_Ipv4_MtuPathAny {
	return &Interface_Subinterface_Ipv4_MtuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv4Path) NeighborAny() *Interface_Subinterface_Ipv4_NeighborPathAny {
	return &Interface_Subinterface_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// NeighborAny (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv4PathAny) NeighborAny() *Interface_Subinterface_Ipv4_NeighborPathAny {
	return &Interface_Subinterface_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Neighbor (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
// Ip: string
func (n *Interface_Subinterface_Ipv4Path) Neighbor(Ip string) *Interface_Subinterface_Ipv4_NeighborPath {
	return &Interface_Subinterface_Ipv4_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Neighbor (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
// Ip: string
func (n *Interface_Subinterface_Ipv4PathAny) Neighbor(Ip string) *Interface_Subinterface_Ipv4_NeighborPathAny {
	return &Interface_Subinterface_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// ProxyArp (container): Configuration and operational state parameters
// relating to proxy ARP. This functionality allows a
// system to respond to ARP requests that are not
// explicitly destined to the local system.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "proxy-arp"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp"
func (n *Interface_Subinterface_Ipv4Path) ProxyArp() *Interface_Subinterface_Ipv4_ProxyArpPath {
	return &Interface_Subinterface_Ipv4_ProxyArpPath{
		NodePath: ygot.NewNodePath(
			[]string{"proxy-arp"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProxyArp (container): Configuration and operational state parameters
// relating to proxy ARP. This functionality allows a
// system to respond to ARP requests that are not
// explicitly destined to the local system.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "proxy-arp"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp"
func (n *Interface_Subinterface_Ipv4PathAny) ProxyArp() *Interface_Subinterface_Ipv4_ProxyArpPathAny {
	return &Interface_Subinterface_Ipv4_ProxyArpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"proxy-arp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered"
func (n *Interface_Subinterface_Ipv4Path) Unnumbered() *Interface_Subinterface_Ipv4_UnnumberedPath {
	return &Interface_Subinterface_Ipv4_UnnumberedPath{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered"
func (n *Interface_Subinterface_Ipv4PathAny) Unnumbered() *Interface_Subinterface_Ipv4_UnnumberedPathAny {
	return &Interface_Subinterface_Ipv4_UnnumberedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_AddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address YANG schema element.
type Interface_Subinterface_Ipv4_AddressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_AddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address YANG schema element.
type Interface_Subinterface_Ipv4_AddressPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_IpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/ip YANG schema element.
type Interface_Subinterface_Ipv4_Address_IpPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/ip YANG schema element.
type Interface_Subinterface_Ipv4_Address_IpPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_OriginPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin YANG schema element.
type Interface_Subinterface_Ipv4_Address_OriginPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin YANG schema element.
type Interface_Subinterface_Ipv4_Address_OriginPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/prefix-length YANG schema element.
type Interface_Subinterface_Ipv4_Address_PrefixLengthPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/prefix-length YANG schema element.
type Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv4 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/ip"
func (n *Interface_Subinterface_Ipv4_AddressPath) Ip() *Interface_Subinterface_Ipv4_Address_IpPath {
	return &Interface_Subinterface_Ipv4_Address_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv4 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/ip"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) Ip() *Interface_Subinterface_Ipv4_Address_IpPathAny {
	return &Interface_Subinterface_Ipv4_Address_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv4_AddressPath) Origin() *Interface_Subinterface_Ipv4_Address_OriginPath {
	return &Interface_Subinterface_Ipv4_Address_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) Origin() *Interface_Subinterface_Ipv4_Address_OriginPathAny {
	return &Interface_Subinterface_Ipv4_Address_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/prefix-length"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/prefix-length"
func (n *Interface_Subinterface_Ipv4_AddressPath) PrefixLength() *Interface_Subinterface_Ipv4_Address_PrefixLengthPath {
	return &Interface_Subinterface_Ipv4_Address_PrefixLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/prefix-length"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/prefix-length"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) PrefixLength() *Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny {
	return &Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_Subinterface_Ipv4_AddressPath) VrrpGroupAny() *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_Subinterface_Ipv4_AddressPathAny) VrrpGroupAny() *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_Subinterface_Ipv4_AddressPath) VrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv4_Address_VrrpGroupPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_Subinterface_Ipv4_AddressPathAny) VrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

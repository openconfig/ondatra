/*
Package acl is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/alexmasi/go/pkg/mod/github.com/openconfig/ygot@v0.23.1/genutil/names.go
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package acl

import (
	oc "github.com/openconfig/ondatra/telemetry"
	"github.com/openconfig/ygot/ygot"
)

// Acl_AclSet_AclEntry_MplsPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls YANG schema element.
type Acl_AclSet_AclEntry_MplsPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_MplsPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls YANG schema element.
type Acl_AclSet_AclEntry_MplsPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Mpls_EndLabelValuePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/end-label-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_EndLabelValuePath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Mpls_EndLabelValuePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/end-label-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_EndLabelValuePathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Mpls_StartLabelValuePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/start-label-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_StartLabelValuePath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Mpls_StartLabelValuePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/start-label-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_StartLabelValuePathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Mpls_TrafficClassPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/traffic-class YANG schema element.
type Acl_AclSet_AclEntry_Mpls_TrafficClassPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Mpls_TrafficClassPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/traffic-class YANG schema element.
type Acl_AclSet_AclEntry_Mpls_TrafficClassPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Mpls_TtlValuePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/ttl-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_TtlValuePath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Mpls_TtlValuePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/ttl-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_TtlValuePathAny struct {
	*ygot.NodePath
}

// EndLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/end-label-value"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/end-label-value"
func (n *Acl_AclSet_AclEntry_MplsPath) EndLabelValue() *Acl_AclSet_AclEntry_Mpls_EndLabelValuePath {
	return &Acl_AclSet_AclEntry_Mpls_EndLabelValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "end-label-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// EndLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/end-label-value"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/end-label-value"
func (n *Acl_AclSet_AclEntry_MplsPathAny) EndLabelValue() *Acl_AclSet_AclEntry_Mpls_EndLabelValuePathAny {
	return &Acl_AclSet_AclEntry_Mpls_EndLabelValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "end-label-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/start-label-value"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/start-label-value"
func (n *Acl_AclSet_AclEntry_MplsPath) StartLabelValue() *Acl_AclSet_AclEntry_Mpls_StartLabelValuePath {
	return &Acl_AclSet_AclEntry_Mpls_StartLabelValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "start-label-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/start-label-value"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/start-label-value"
func (n *Acl_AclSet_AclEntry_MplsPathAny) StartLabelValue() *Acl_AclSet_AclEntry_Mpls_StartLabelValuePathAny {
	return &Acl_AclSet_AclEntry_Mpls_StartLabelValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "start-label-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrafficClass (leaf): The value of the MPLS traffic class (TC) bits,
// formerly known as the EXP bits.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/traffic-class"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/traffic-class"
func (n *Acl_AclSet_AclEntry_MplsPath) TrafficClass() *Acl_AclSet_AclEntry_Mpls_TrafficClassPath {
	return &Acl_AclSet_AclEntry_Mpls_TrafficClassPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "traffic-class"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrafficClass (leaf): The value of the MPLS traffic class (TC) bits,
// formerly known as the EXP bits.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/traffic-class"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/traffic-class"
func (n *Acl_AclSet_AclEntry_MplsPathAny) TrafficClass() *Acl_AclSet_AclEntry_Mpls_TrafficClassPathAny {
	return &Acl_AclSet_AclEntry_Mpls_TrafficClassPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "traffic-class"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtlValue (leaf): Time-to-live MPLS packet value match.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/ttl-value"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/ttl-value"
func (n *Acl_AclSet_AclEntry_MplsPath) TtlValue() *Acl_AclSet_AclEntry_Mpls_TtlValuePath {
	return &Acl_AclSet_AclEntry_Mpls_TtlValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ttl-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtlValue (leaf): Time-to-live MPLS packet value match.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/ttl-value"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/ttl-value"
func (n *Acl_AclSet_AclEntry_MplsPathAny) TtlValue() *Acl_AclSet_AclEntry_Mpls_TtlValuePathAny {
	return &Acl_AclSet_AclEntry_Mpls_TtlValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ttl-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_AclSet_AclEntry_TransportPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport YANG schema element.
type Acl_AclSet_AclEntry_TransportPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_TransportPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport YANG schema element.
type Acl_AclSet_AclEntry_TransportPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Transport_DestinationPortPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port YANG schema element.
type Acl_AclSet_AclEntry_Transport_DestinationPortPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Transport_DestinationPortPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port YANG schema element.
type Acl_AclSet_AclEntry_Transport_DestinationPortPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Transport_SourcePortPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port YANG schema element.
type Acl_AclSet_AclEntry_Transport_SourcePortPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Transport_SourcePortPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port YANG schema element.
type Acl_AclSet_AclEntry_Transport_SourcePortPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Transport_TcpFlagsPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/tcp-flags YANG schema element.
type Acl_AclSet_AclEntry_Transport_TcpFlagsPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Transport_TcpFlagsPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/tcp-flags YANG schema element.
type Acl_AclSet_AclEntry_Transport_TcpFlagsPathAny struct {
	*ygot.NodePath
}

// DestinationPort (leaf): Destination port or range
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/destination-port"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port"
func (n *Acl_AclSet_AclEntry_TransportPath) DestinationPort() *Acl_AclSet_AclEntry_Transport_DestinationPortPath {
	return &Acl_AclSet_AclEntry_Transport_DestinationPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationPort (leaf): Destination port or range
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/destination-port"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port"
func (n *Acl_AclSet_AclEntry_TransportPathAny) DestinationPort() *Acl_AclSet_AclEntry_Transport_DestinationPortPathAny {
	return &Acl_AclSet_AclEntry_Transport_DestinationPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourcePort (leaf): Source port or range
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/source-port"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port"
func (n *Acl_AclSet_AclEntry_TransportPath) SourcePort() *Acl_AclSet_AclEntry_Transport_SourcePortPath {
	return &Acl_AclSet_AclEntry_Transport_SourcePortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourcePort (leaf): Source port or range
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/source-port"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port"
func (n *Acl_AclSet_AclEntry_TransportPathAny) SourcePort() *Acl_AclSet_AclEntry_Transport_SourcePortPathAny {
	return &Acl_AclSet_AclEntry_Transport_SourcePortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// TcpFlags (leaf-list): List of TCP flags to match
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/tcp-flags"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/tcp-flags"
func (n *Acl_AclSet_AclEntry_TransportPath) TcpFlags() *Acl_AclSet_AclEntry_Transport_TcpFlagsPath {
	return &Acl_AclSet_AclEntry_Transport_TcpFlagsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tcp-flags"},
			map[string]interface{}{},
			n,
		),
	}
}

// TcpFlags (leaf-list): List of TCP flags to match
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/tcp-flags"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/tcp-flags"
func (n *Acl_AclSet_AclEntry_TransportPathAny) TcpFlags() *Acl_AclSet_AclEntry_Transport_TcpFlagsPathAny {
	return &Acl_AclSet_AclEntry_Transport_TcpFlagsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tcp-flags"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_InterfacePath represents the /openconfig-acl/acl/interfaces/interface YANG schema element.
type Acl_InterfacePath struct {
	*ygot.NodePath
}

// Acl_InterfacePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface YANG schema element.
type Acl_InterfacePathAny struct {
	*ygot.NodePath
}

// Acl_Interface_IdPath represents the /openconfig-acl/acl/interfaces/interface/state/id YANG schema element.
type Acl_Interface_IdPath struct {
	*ygot.NodePath
}

// Acl_Interface_IdPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/state/id YANG schema element.
type Acl_Interface_IdPathAny struct {
	*ygot.NodePath
}

// EgressAclSetAny (list): List of egress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "egress-acl-sets/egress-acl-set"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
// SetName (wildcarded): string
// Type (wildcarded): oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePath) EgressAclSetAny() *Acl_Interface_EgressAclSetPathAny {
	return &Acl_Interface_EgressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": "*"},
			n,
		),
	}
}

// EgressAclSetAny (list): List of egress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "egress-acl-sets/egress-acl-set"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
// SetName (wildcarded): string
// Type (wildcarded): oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePathAny) EgressAclSetAny() *Acl_Interface_EgressAclSetPathAny {
	return &Acl_Interface_EgressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": "*"},
			n,
		),
	}
}

// EgressAclSetAnyType (list): List of egress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "egress-acl-sets/egress-acl-set"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
// SetName: string
// Type (wildcarded): oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePath) EgressAclSetAnyType(SetName string) *Acl_Interface_EgressAclSetPathAny {
	return &Acl_Interface_EgressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": "*"},
			n,
		),
	}
}

// EgressAclSetAnyType (list): List of egress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "egress-acl-sets/egress-acl-set"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
// SetName: string
// Type (wildcarded): oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePathAny) EgressAclSetAnyType(SetName string) *Acl_Interface_EgressAclSetPathAny {
	return &Acl_Interface_EgressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": "*"},
			n,
		),
	}
}

// EgressAclSetAnySetName (list): List of egress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "egress-acl-sets/egress-acl-set"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
// SetName (wildcarded): string
// Type: oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePath) EgressAclSetAnySetName(Type oc.E_Acl_ACL_TYPE) *Acl_Interface_EgressAclSetPathAny {
	return &Acl_Interface_EgressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": Type},
			n,
		),
	}
}

// EgressAclSetAnySetName (list): List of egress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "egress-acl-sets/egress-acl-set"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
// SetName (wildcarded): string
// Type: oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePathAny) EgressAclSetAnySetName(Type oc.E_Acl_ACL_TYPE) *Acl_Interface_EgressAclSetPathAny {
	return &Acl_Interface_EgressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": Type},
			n,
		),
	}
}

// EgressAclSet (list): List of egress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "egress-acl-sets/egress-acl-set"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
// SetName: string
// Type: oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePath) EgressAclSet(SetName string, Type oc.E_Acl_ACL_TYPE) *Acl_Interface_EgressAclSetPath {
	return &Acl_Interface_EgressAclSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": Type},
			n,
		),
	}
}

// EgressAclSet (list): List of egress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "egress-acl-sets/egress-acl-set"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
// SetName: string
// Type: oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePathAny) EgressAclSet(SetName string, Type oc.E_Acl_ACL_TYPE) *Acl_Interface_EgressAclSetPathAny {
	return &Acl_Interface_EgressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": Type},
			n,
		),
	}
}

// Id (leaf): User-defined identifier for the interface -- a common
// convention could be '<if name>.<subif index>'
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/id"
// Path from root: "/acl/interfaces/interface/state/id"
func (n *Acl_InterfacePath) Id() *Acl_Interface_IdPath {
	return &Acl_Interface_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): User-defined identifier for the interface -- a common
// convention could be '<if name>.<subif index>'
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/id"
// Path from root: "/acl/interfaces/interface/state/id"
func (n *Acl_InterfacePathAny) Id() *Acl_Interface_IdPathAny {
	return &Acl_Interface_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// IngressAclSetAny (list): List of ingress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "ingress-acl-sets/ingress-acl-set"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
// SetName (wildcarded): string
// Type (wildcarded): oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePath) IngressAclSetAny() *Acl_Interface_IngressAclSetPathAny {
	return &Acl_Interface_IngressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": "*"},
			n,
		),
	}
}

// IngressAclSetAny (list): List of ingress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "ingress-acl-sets/ingress-acl-set"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
// SetName (wildcarded): string
// Type (wildcarded): oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePathAny) IngressAclSetAny() *Acl_Interface_IngressAclSetPathAny {
	return &Acl_Interface_IngressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": "*"},
			n,
		),
	}
}

// IngressAclSetAnyType (list): List of ingress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "ingress-acl-sets/ingress-acl-set"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
// SetName: string
// Type (wildcarded): oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePath) IngressAclSetAnyType(SetName string) *Acl_Interface_IngressAclSetPathAny {
	return &Acl_Interface_IngressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": "*"},
			n,
		),
	}
}

// IngressAclSetAnyType (list): List of ingress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "ingress-acl-sets/ingress-acl-set"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
// SetName: string
// Type (wildcarded): oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePathAny) IngressAclSetAnyType(SetName string) *Acl_Interface_IngressAclSetPathAny {
	return &Acl_Interface_IngressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": "*"},
			n,
		),
	}
}

// IngressAclSetAnySetName (list): List of ingress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "ingress-acl-sets/ingress-acl-set"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
// SetName (wildcarded): string
// Type: oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePath) IngressAclSetAnySetName(Type oc.E_Acl_ACL_TYPE) *Acl_Interface_IngressAclSetPathAny {
	return &Acl_Interface_IngressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": Type},
			n,
		),
	}
}

// IngressAclSetAnySetName (list): List of ingress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "ingress-acl-sets/ingress-acl-set"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
// SetName (wildcarded): string
// Type: oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePathAny) IngressAclSetAnySetName(Type oc.E_Acl_ACL_TYPE) *Acl_Interface_IngressAclSetPathAny {
	return &Acl_Interface_IngressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": Type},
			n,
		),
	}
}

// IngressAclSet (list): List of ingress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "ingress-acl-sets/ingress-acl-set"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
// SetName: string
// Type: oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePath) IngressAclSet(SetName string, Type oc.E_Acl_ACL_TYPE) *Acl_Interface_IngressAclSetPath {
	return &Acl_Interface_IngressAclSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": Type},
			n,
		),
	}
}

// IngressAclSet (list): List of ingress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "ingress-acl-sets/ingress-acl-set"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
// SetName: string
// Type: oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePathAny) IngressAclSet(SetName string, Type oc.E_Acl_ACL_TYPE) *Acl_Interface_IngressAclSetPathAny {
	return &Acl_Interface_IngressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": Type},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-acl"
// Path from parent: "interface-ref"
// Path from root: "/acl/interfaces/interface/interface-ref"
func (n *Acl_InterfacePath) InterfaceRef() *Acl_Interface_InterfaceRefPath {
	return &Acl_Interface_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-acl"
// Path from parent: "interface-ref"
// Path from root: "/acl/interfaces/interface/interface-ref"
func (n *Acl_InterfacePathAny) InterfaceRef() *Acl_Interface_InterfaceRefPathAny {
	return &Acl_Interface_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_Interface_EgressAclSetPath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set YANG schema element.
type Acl_Interface_EgressAclSetPath struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSetPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set YANG schema element.
type Acl_Interface_EgressAclSetPathAny struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_SetNamePath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/set-name YANG schema element.
type Acl_Interface_EgressAclSet_SetNamePath struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_SetNamePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/set-name YANG schema element.
type Acl_Interface_EgressAclSet_SetNamePathAny struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_TypePath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/type YANG schema element.
type Acl_Interface_EgressAclSet_TypePath struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_TypePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/type YANG schema element.
type Acl_Interface_EgressAclSet_TypePathAny struct {
	*ygot.NodePath
}

// AclEntryAny (list): List of ACL entries assigned to an interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry"
// SequenceId (wildcarded): uint32
func (n *Acl_Interface_EgressAclSetPath) AclEntryAny() *Acl_Interface_EgressAclSet_AclEntryPathAny {
	return &Acl_Interface_EgressAclSet_AclEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
}

// AclEntryAny (list): List of ACL entries assigned to an interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry"
// SequenceId (wildcarded): uint32
func (n *Acl_Interface_EgressAclSetPathAny) AclEntryAny() *Acl_Interface_EgressAclSet_AclEntryPathAny {
	return &Acl_Interface_EgressAclSet_AclEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
}

// AclEntry (list): List of ACL entries assigned to an interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry"
// SequenceId: uint32
func (n *Acl_Interface_EgressAclSetPath) AclEntry(SequenceId uint32) *Acl_Interface_EgressAclSet_AclEntryPath {
	return &Acl_Interface_EgressAclSet_AclEntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
}

// AclEntry (list): List of ACL entries assigned to an interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry"
// SequenceId: uint32
func (n *Acl_Interface_EgressAclSetPathAny) AclEntry(SequenceId uint32) *Acl_Interface_EgressAclSet_AclEntryPathAny {
	return &Acl_Interface_EgressAclSet_AclEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
}

// SetName (leaf): Reference to the ACL set name applied on egress
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/set-name"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/set-name"
func (n *Acl_Interface_EgressAclSetPath) SetName() *Acl_Interface_EgressAclSet_SetNamePath {
	return &Acl_Interface_EgressAclSet_SetNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetName (leaf): Reference to the ACL set name applied on egress
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/set-name"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/set-name"
func (n *Acl_Interface_EgressAclSetPathAny) SetName() *Acl_Interface_EgressAclSet_SetNamePathAny {
	return &Acl_Interface_EgressAclSet_SetNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Reference to the ACL set type applied on egress.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/type"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/type"
func (n *Acl_Interface_EgressAclSetPath) Type() *Acl_Interface_EgressAclSet_TypePath {
	return &Acl_Interface_EgressAclSet_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Reference to the ACL set type applied on egress.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/type"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/type"
func (n *Acl_Interface_EgressAclSetPathAny) Type() *Acl_Interface_EgressAclSet_TypePathAny {
	return &Acl_Interface_EgressAclSet_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_Interface_EgressAclSet_AclEntryPath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_EgressAclSet_AclEntryPath struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_AclEntryPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_EgressAclSet_AclEntryPathAny struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPath struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPathAny struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPath struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPathAny struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_AclEntry_SequenceIdPath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/sequence-id YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_SequenceIdPath struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_AclEntry_SequenceIdPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/sequence-id YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_SequenceIdPathAny struct {
	*ygot.NodePath
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-octets"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_EgressAclSet_AclEntryPath) MatchedOctets() *Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPath {
	return &Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-octets"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_EgressAclSet_AclEntryPathAny) MatchedOctets() *Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPathAny {
	return &Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-packets"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_EgressAclSet_AclEntryPath) MatchedPackets() *Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPath {
	return &Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-packets"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_EgressAclSet_AclEntryPathAny) MatchedPackets() *Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPathAny {
	return &Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
	}
}

// SequenceId (leaf): Reference to an entry in the ACL set applied to an
// interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/sequence-id"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/sequence-id"
func (n *Acl_Interface_EgressAclSet_AclEntryPath) SequenceId() *Acl_Interface_EgressAclSet_AclEntry_SequenceIdPath {
	return &Acl_Interface_EgressAclSet_AclEntry_SequenceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sequence-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// SequenceId (leaf): Reference to an entry in the ACL set applied to an
// interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/sequence-id"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/sequence-id"
func (n *Acl_Interface_EgressAclSet_AclEntryPathAny) SequenceId() *Acl_Interface_EgressAclSet_AclEntry_SequenceIdPathAny {
	return &Acl_Interface_EgressAclSet_AclEntry_SequenceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sequence-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_Interface_IngressAclSetPath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set YANG schema element.
type Acl_Interface_IngressAclSetPath struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSetPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set YANG schema element.
type Acl_Interface_IngressAclSetPathAny struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_SetNamePath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/set-name YANG schema element.
type Acl_Interface_IngressAclSet_SetNamePath struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_SetNamePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/set-name YANG schema element.
type Acl_Interface_IngressAclSet_SetNamePathAny struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_TypePath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/type YANG schema element.
type Acl_Interface_IngressAclSet_TypePath struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_TypePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/type YANG schema element.
type Acl_Interface_IngressAclSet_TypePathAny struct {
	*ygot.NodePath
}

// AclEntryAny (list): List of ACL entries assigned to an interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry"
// SequenceId (wildcarded): uint32
func (n *Acl_Interface_IngressAclSetPath) AclEntryAny() *Acl_Interface_IngressAclSet_AclEntryPathAny {
	return &Acl_Interface_IngressAclSet_AclEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
}

// AclEntryAny (list): List of ACL entries assigned to an interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry"
// SequenceId (wildcarded): uint32
func (n *Acl_Interface_IngressAclSetPathAny) AclEntryAny() *Acl_Interface_IngressAclSet_AclEntryPathAny {
	return &Acl_Interface_IngressAclSet_AclEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
}

// AclEntry (list): List of ACL entries assigned to an interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry"
// SequenceId: uint32
func (n *Acl_Interface_IngressAclSetPath) AclEntry(SequenceId uint32) *Acl_Interface_IngressAclSet_AclEntryPath {
	return &Acl_Interface_IngressAclSet_AclEntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
}

// AclEntry (list): List of ACL entries assigned to an interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry"
// SequenceId: uint32
func (n *Acl_Interface_IngressAclSetPathAny) AclEntry(SequenceId uint32) *Acl_Interface_IngressAclSet_AclEntryPathAny {
	return &Acl_Interface_IngressAclSet_AclEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
}

// SetName (leaf): Reference to the ACL set name applied on ingress
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/set-name"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/set-name"
func (n *Acl_Interface_IngressAclSetPath) SetName() *Acl_Interface_IngressAclSet_SetNamePath {
	return &Acl_Interface_IngressAclSet_SetNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetName (leaf): Reference to the ACL set name applied on ingress
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/set-name"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/set-name"
func (n *Acl_Interface_IngressAclSetPathAny) SetName() *Acl_Interface_IngressAclSet_SetNamePathAny {
	return &Acl_Interface_IngressAclSet_SetNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Reference to the ACL set type applied on ingress
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/type"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/type"
func (n *Acl_Interface_IngressAclSetPath) Type() *Acl_Interface_IngressAclSet_TypePath {
	return &Acl_Interface_IngressAclSet_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Reference to the ACL set type applied on ingress
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/type"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/type"
func (n *Acl_Interface_IngressAclSetPathAny) Type() *Acl_Interface_IngressAclSet_TypePathAny {
	return &Acl_Interface_IngressAclSet_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_Interface_IngressAclSet_AclEntryPath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_IngressAclSet_AclEntryPath struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_AclEntryPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_IngressAclSet_AclEntryPathAny struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPath struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPathAny struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPath struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPathAny struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_AclEntry_SequenceIdPath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/sequence-id YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_SequenceIdPath struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_AclEntry_SequenceIdPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/sequence-id YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_SequenceIdPathAny struct {
	*ygot.NodePath
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-octets"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_IngressAclSet_AclEntryPath) MatchedOctets() *Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPath {
	return &Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-octets"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_IngressAclSet_AclEntryPathAny) MatchedOctets() *Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPathAny {
	return &Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-packets"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_IngressAclSet_AclEntryPath) MatchedPackets() *Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPath {
	return &Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-packets"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_IngressAclSet_AclEntryPathAny) MatchedPackets() *Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPathAny {
	return &Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
	}
}

// SequenceId (leaf): Reference to an entry in the ACL set applied to an
// interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/sequence-id"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/sequence-id"
func (n *Acl_Interface_IngressAclSet_AclEntryPath) SequenceId() *Acl_Interface_IngressAclSet_AclEntry_SequenceIdPath {
	return &Acl_Interface_IngressAclSet_AclEntry_SequenceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sequence-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// SequenceId (leaf): Reference to an entry in the ACL set applied to an
// interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/sequence-id"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/sequence-id"
func (n *Acl_Interface_IngressAclSet_AclEntryPathAny) SequenceId() *Acl_Interface_IngressAclSet_AclEntry_SequenceIdPathAny {
	return &Acl_Interface_IngressAclSet_AclEntry_SequenceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sequence-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_Interface_InterfaceRefPath represents the /openconfig-acl/acl/interfaces/interface/interface-ref YANG schema element.
type Acl_Interface_InterfaceRefPath struct {
	*ygot.NodePath
}

// Acl_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/interface-ref YANG schema element.
type Acl_Interface_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// Acl_Interface_InterfaceRef_InterfacePath represents the /openconfig-acl/acl/interfaces/interface/interface-ref/state/interface YANG schema element.
type Acl_Interface_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// Acl_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/interface-ref/state/interface YANG schema element.
type Acl_Interface_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// Acl_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-acl/acl/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type Acl_Interface_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// Acl_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type Acl_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/interface"
// Path from root: "/acl/interfaces/interface/interface-ref/state/interface"
func (n *Acl_Interface_InterfaceRefPath) Interface() *Acl_Interface_InterfaceRef_InterfacePath {
	return &Acl_Interface_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/interface"
// Path from root: "/acl/interfaces/interface/interface-ref/state/interface"
func (n *Acl_Interface_InterfaceRefPathAny) Interface() *Acl_Interface_InterfaceRef_InterfacePathAny {
	return &Acl_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/subinterface"
// Path from root: "/acl/interfaces/interface/interface-ref/state/subinterface"
func (n *Acl_Interface_InterfaceRefPath) Subinterface() *Acl_Interface_InterfaceRef_SubinterfacePath {
	return &Acl_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/subinterface"
// Path from root: "/acl/interfaces/interface/interface-ref/state/subinterface"
func (n *Acl_Interface_InterfaceRefPathAny) Subinterface() *Acl_Interface_InterfaceRef_SubinterfacePathAny {
	return &Acl_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

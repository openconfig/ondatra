/*
Package routingpolicy is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/alexmasi/go/pkg/mod/github.com/openconfig/ygot@v0.23.1/genutil/names.go
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package routingpolicy

import (
	"github.com/openconfig/ygot/ygot"
)

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/state/community-set-ref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/state/community-set-ref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny struct {
	*ygot.NodePath
}

// CommunitySetRef (leaf): References a defined community set by name
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/community-set-ref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/state/community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath) CommunitySetRef() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "community-set-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunitySetRef (leaf): References a defined community set by name
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/community-set-ref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/state/community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny) CommunitySetRef() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "community-set-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/method YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/method YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny struct {
	*ygot.NodePath
}

// Inline (container): Set the extended community values for the action inline with
// a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Inline (container): Set the extended community values for the action inline with
// a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Method (leaf): Indicates the method used to specify the extended
// communities for the set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/method"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Method() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "method"},
			map[string]interface{}{},
			n,
		),
	}
}

// Method (leaf): Indicates the method used to specify the extended
// communities for the set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/method"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Method() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "method"},
			map[string]interface{}{},
			n,
		),
	}
}

// Options (leaf): Options for modifying the community attribute with
// the specified values.  These options apply to both
// methods of setting the community attribute.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Options() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "options"},
			map[string]interface{}{},
			n,
		),
	}
}

// Options (leaf): Options for modifying the community attribute with
// the specified values.  These options apply to both
// methods of setting the community attribute.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Options() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "options"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): Provide a reference to an extended community set for the
// set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): Provide a reference to an extended community set for the
// set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/state/communities YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/state/communities YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny struct {
	*ygot.NodePath
}

// Communities (leaf-list): Set the extended community values for the update inline
// with a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/communities"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/state/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath) Communities() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "communities"},
			map[string]interface{}{},
			n,
		),
	}
}

// Communities (leaf-list): Set the extended community values for the update inline
// with a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/communities"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/state/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny) Communities() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "communities"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/state/ext-community-set-ref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/state/ext-community-set-ref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny struct {
	*ygot.NodePath
}

// ExtCommunitySetRef (leaf): References a defined extended community set by
// name
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/ext-community-set-ref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/state/ext-community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath) ExtCommunitySetRef() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ext-community-set-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunitySetRef (leaf): References a defined extended community set by
// name
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/ext-community-set-ref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/state/ext-community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny) ExtCommunitySetRef() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ext-community-set-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/state/mode YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/state/mode YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny struct {
	*ygot.NodePath
}

// Inline (container): The tags specified in this container are set on a route using
// the values directly. It is applicable when the mode of application
// is explicitly specified as INLINE.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Inline (container): The tags specified in this container are set on a route using
// the values directly. It is applicable when the mode of application
// is explicitly specified as INLINE.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): This leaf controls the source of the tags that are set as a result
// of the action. In the case that the INLINE value is specified, the
// list of tags specified within the action is applied to matching prefixes.
// In the case that the REFERENCE value is specified, a pre-defined set of
// tags is utilised.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/mode"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/state/mode"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) Mode() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): This leaf controls the source of the tags that are set as a result
// of the action. In the case that the INLINE value is specified, the
// list of tags specified within the action is applied to matching prefixes.
// In the case that the REFERENCE value is specified, a pre-defined set of
// tags is utilised.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/mode"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/state/mode"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) Mode() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): This container is applicable when the mode of application is explicitly
// specified to as REFERENCE. The tags set on a route are those that are
// specified within the tag-set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): This container is applicable when the mode of application is explicitly
// specified to as REFERENCE. The tags set on a route are those that are
// specified within the tag-set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/state/tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/state/tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny struct {
	*ygot.NodePath
}

// Tag (leaf-list): Set one or more tags for prefixes that match the specified condition(s)
// using the specified tag values. When a tag is set it MUST be possible to
// match the value set in subsequent policies on the local device. Where the
// protocol that is carrying the prefix has a tag field (OSPF, and IS-IS in
// particular) the tag MUST be set in the corresponding protocol advertisements
// of the prefix.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/tag"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/state/tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath) Tag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tag"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tag (leaf-list): Set one or more tags for prefixes that match the specified condition(s)
// using the specified tag values. When a tag is set it MUST be possible to
// match the value set in subsequent policies on the local device. Where the
// protocol that is carrying the prefix has a tag field (OSPF, and IS-IS in
// particular) the tag MUST be set in the corresponding protocol advertisements
// of the prefix.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/tag"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/state/tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny) Tag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tag"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/state/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/state/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny struct {
	*ygot.NodePath
}

// TagSet (leaf): Use the referenced tag-set to set tags on the prefixes that match the
// specified conditions. When a tag is set it MUST be possible to match the
// value set in subsequent policies on the local device. where the protocol that
// is carrying the prefix has a tag field (OSPF, and IS-IS for in particular)
// the tag MUST be set in the corresponding protocol advertisements of the
// prefix.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/state/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// TagSet (leaf): Use the referenced tag-set to set tags on the prefixes that match the
// specified conditions. When a tag is set it MUST be possible to match the
// value set in subsequent policies on the local device. where the protocol that
// is carrying the prefix has a tag field (OSPF, and IS-IS for in particular)
// the tag MUST be set in the corresponding protocol advertisements of the
// prefix.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/state/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_ConditionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ConditionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/call-policy YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/call-policy YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/install-protocol-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/install-protocol-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny struct {
	*ygot.NodePath
}

// BgpConditions (container): Top-level container
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "bgp-conditions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) BgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-conditions"},
			map[string]interface{}{},
			n,
		),
	}
}

// BgpConditions (container): Top-level container
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "bgp-conditions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) BgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-conditions"},
			map[string]interface{}{},
			n,
		),
	}
}

// CallPolicy (leaf): Applies the statements from the specified policy
// definition and then returns control the current
// policy statement. Note that the called policy may
// itself call other policies (subject to
// implementation limitations). This is intended to
// provide a policy 'subroutine' capability.  The
// called policy should contain an explicit or a
// default route disposition that returns an
// effective true (accept-route) or false
// (reject-route), otherwise the behavior may be
// ambiguous and implementation dependent
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/call-policy"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/call-policy"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) CallPolicy() *RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "call-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// CallPolicy (leaf): Applies the statements from the specified policy
// definition and then returns control the current
// policy statement. Note that the called policy may
// itself call other policies (subject to
// implementation limitations). This is intended to
// provide a policy 'subroutine' capability.  The
// called policy should contain an explicit or a
// default route disposition that returns an
// effective true (accept-route) or false
// (reject-route), otherwise the behavior may be
// ambiguous and implementation dependent
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/call-policy"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/call-policy"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) CallPolicy() *RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "call-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// InstallProtocolEq (leaf): Condition to check the protocol / method used to install
// the route into the local routing table
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/install-protocol-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/install-protocol-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) InstallProtocolEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "install-protocol-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// InstallProtocolEq (leaf): Condition to check the protocol / method used to install
// the route into the local routing table
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/install-protocol-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/install-protocol-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) InstallProtocolEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "install-protocol-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchInterface (container): Top-level container for interface match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-interface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"match-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchInterface (container): Top-level container for interface match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-interface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchNeighborSet (container): Match a referenced neighbor set according to the logic
// defined in the match-set-options-leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-neighbor-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"match-neighbor-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchNeighborSet (container): Match a referenced neighbor set according to the logic
// defined in the match-set-options-leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-neighbor-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match-neighbor-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchPrefixSet (container): Match a referenced prefix-set according to the logic
// defined in the match-set-options leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-prefix-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"match-prefix-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchPrefixSet (container): Match a referenced prefix-set according to the logic
// defined in the match-set-options leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-prefix-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match-prefix-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchTagSet (container): Match a referenced tag set according to the logic defined
// in the match-options-set leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"match-tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchTagSet (container): Match a referenced tag set according to the logic defined
// in the match-options-set leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match-tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/afi-safi-in YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/afi-safi-in YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/ext-community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/ext-community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/local-pref-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/local-pref-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/med-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/med-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/next-hop-in YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/next-hop-in YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/origin-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/origin-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/route-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/route-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny struct {
	*ygot.NodePath
}

// AfiSafiIn (leaf-list): List of address families which the NLRI may be
// within
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/afi-safi-in"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/afi-safi-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) AfiSafiIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "afi-safi-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// AfiSafiIn (leaf-list): List of address families which the NLRI may be
// within
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/afi-safi-in"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/afi-safi-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) AfiSafiIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "afi-safi-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathLength (container): Value and comparison operations for conditions based on the
// length of the AS path in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "as-path-length"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) AsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"as-path-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathLength (container): Value and comparison operations for conditions based on the
// length of the AS path in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "as-path-length"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) AsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"as-path-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunityCount (container): Value and comparison operations for conditions based on the
// number of communities in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "community-count"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) CommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath{
		NodePath: ygot.NewNodePath(
			[]string{"community-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunityCount (container): Value and comparison operations for conditions based on the
// number of communities in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "community-count"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) CommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"community-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunitySet (leaf): References a defined community set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/community-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) CommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "community-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunitySet (leaf): References a defined community set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/community-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) CommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "community-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunitySet (leaf): References a defined extended community set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/ext-community-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) ExtCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ext-community-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunitySet (leaf): References a defined extended community set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/ext-community-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) ExtCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ext-community-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalPrefEq (leaf): Condition to check if the local pref attribute is equal to
// the specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/local-pref-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/local-pref-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) LocalPrefEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "local-pref-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalPrefEq (leaf): Condition to check if the local pref attribute is equal to
// the specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/local-pref-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/local-pref-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) LocalPrefEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "local-pref-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchAsPathSet (container): Match a referenced as-path set according to the logic
// defined in the match-set-options leaf
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-as-path-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) MatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"match-as-path-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchAsPathSet (container): Match a referenced as-path set according to the logic
// defined in the match-set-options leaf
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-as-path-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) MatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match-as-path-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MedEq (leaf): Condition to check if the received MED value is equal to
// the specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/med-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/med-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) MedEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "med-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// MedEq (leaf): Condition to check if the received MED value is equal to
// the specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/med-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/med-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) MedEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "med-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHopIn (leaf-list): List of next hop addresses to check for in the route
// update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/next-hop-in"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/next-hop-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) NextHopIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHopIn (leaf-list): List of next hop addresses to check for in the route
// update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/next-hop-in"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/next-hop-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) NextHopIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginEq (leaf): Condition to check if the route origin is equal to the
// specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/origin-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/origin-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) OriginEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginEq (leaf): Condition to check if the route origin is equal to the
// specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/origin-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/origin-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) OriginEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouteType (leaf): Condition to check the route type in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/route-type"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/route-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) RouteType() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "route-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouteType (leaf): Condition to check the route type in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/route-type"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/route-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) RouteType() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "route-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny struct {
	*ygot.NodePath
}

// Operator (leaf): type of comparison to be performed
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/operator"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "operator"},
			map[string]interface{}{},
			n,
		),
	}
}

// Operator (leaf): type of comparison to be performed
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/operator"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "operator"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): value to compare with the community count
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/value"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): value to compare with the community count
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/value"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny struct {
	*ygot.NodePath
}

// Operator (leaf): type of comparison to be performed
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/operator"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "operator"},
			map[string]interface{}{},
			n,
		),
	}
}

// Operator (leaf): type of comparison to be performed
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/operator"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "operator"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): value to compare with the community count
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/value"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): value to compare with the community count
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/value"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// AsPathSet (leaf): References a defined AS path set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/as-path-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath) AsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "as-path-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathSet (leaf): References a defined AS path set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/as-path-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny) AsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "as-path-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/subinterface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/subinterface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/interface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath) Interface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/interface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny) Interface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/subinterface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/subinterface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath) Subinterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/subinterface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/subinterface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny) Subinterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny struct {
	*ygot.NodePath
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborSet (leaf): References a defined neighbor set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/neighbor-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath) NeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborSet (leaf): References a defined neighbor set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/neighbor-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny) NeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny struct {
	*ygot.NodePath
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixSet (leaf): References a defined prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/prefix-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath) PrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixSet (leaf): References a defined prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/prefix-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny) PrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny struct {
	*ygot.NodePath
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// TagSet (leaf): References a defined tag set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// TagSet (leaf): References a defined tag set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

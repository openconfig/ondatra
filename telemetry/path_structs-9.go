/*
Package telemetry is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /home/athena/go/pkg/mod/github.com/openconfig/ygot@v0.16.2/genutil/names.go
using the following YANG input files:
	- gnmi-collector-metadata.yang
	- public/release/models/acl/openconfig-acl.yang
	- public/release/models/acl/openconfig-packet-match.yang
	- public/release/models/aft/openconfig-aft.yang
	- public/release/models/ate/openconfig-ate-flow.yang
	- public/release/models/ate/openconfig-ate-intf.yang
	- public/release/models/bfd/openconfig-bfd.yang
	- public/release/models/bgp/openconfig-bgp-policy.yang
	- public/release/models/bgp/openconfig-bgp-types.yang
	- public/release/models/interfaces/openconfig-if-aggregate.yang
	- public/release/models/interfaces/openconfig-if-ethernet.yang
	- public/release/models/interfaces/openconfig-if-ip-ext.yang
	- public/release/models/interfaces/openconfig-if-ip.yang
	- public/release/models/interfaces/openconfig-interfaces.yang
	- public/release/models/isis/openconfig-isis.yang
	- public/release/models/lacp/openconfig-lacp.yang
	- public/release/models/lldp/openconfig-lldp-types.yang
	- public/release/models/lldp/openconfig-lldp.yang
	- public/release/models/local-routing/openconfig-local-routing.yang
	- public/release/models/mpls/openconfig-mpls-types.yang
	- public/release/models/multicast/openconfig-pim.yang
	- public/release/models/network-instance/openconfig-network-instance.yang
	- public/release/models/openconfig-extensions.yang
	- public/release/models/optical-transport/openconfig-transport-types.yang
	- public/release/models/ospf/openconfig-ospfv2.yang
	- public/release/models/platform/openconfig-platform-cpu.yang
	- public/release/models/platform/openconfig-platform-integrated-circuit.yang
	- public/release/models/platform/openconfig-platform-software.yang
	- public/release/models/platform/openconfig-platform-transceiver.yang
	- public/release/models/platform/openconfig-platform.yang
	- public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
	- public/release/models/policy/openconfig-policy-types.yang
	- public/release/models/qos/openconfig-qos-elements.yang
	- public/release/models/qos/openconfig-qos-interfaces.yang
	- public/release/models/qos/openconfig-qos-types.yang
	- public/release/models/qos/openconfig-qos.yang
	- public/release/models/rib/openconfig-rib-bgp.yang
	- public/release/models/segment-routing/openconfig-segment-routing-types.yang
	- public/release/models/system/openconfig-system.yang
	- public/release/models/types/openconfig-inet-types.yang
	- public/release/models/types/openconfig-types.yang
	- public/release/models/types/openconfig-yang-types.yang
	- public/release/models/vlan/openconfig-vlan.yang
	- public/third_party/ietf/iana-if-type.yang
	- public/third_party/ietf/ietf-inet-types.yang
	- public/third_party/ietf/ietf-interfaces.yang
	- public/third_party/ietf/ietf-yang-types.yang
Imported modules were sourced from:
	- public/release/models/...
	- public/third_party/ietf/...
*/
package telemetry

import (
	"github.com/openconfig/ygot/ygot"
)

// Qos_Interface_Output_InterfaceRefPath represents the /openconfig-qos/qos/interfaces/interface/output/interface-ref YANG schema element.
type Qos_Interface_Output_InterfaceRefPath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_InterfaceRefPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/interface-ref YANG schema element.
type Qos_Interface_Output_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// Qos_Interface_Output_InterfaceRef_InterfacePath represents the /openconfig-qos/qos/interfaces/interface/output/interface-ref/state/interface YANG schema element.
type Qos_Interface_Output_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/interface-ref/state/interface YANG schema element.
type Qos_Interface_Output_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// Qos_Interface_Output_InterfaceRef_SubinterfacePath represents the /openconfig-qos/qos/interfaces/interface/output/interface-ref/state/subinterface YANG schema element.
type Qos_Interface_Output_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/interface-ref/state/subinterface YANG schema element.
type Qos_Interface_Output_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/interface"
// Path from root: "/qos/interfaces/interface/output/interface-ref/state/interface"
func (n *Qos_Interface_Output_InterfaceRefPath) Interface() *Qos_Interface_Output_InterfaceRef_InterfacePath {
	return &Qos_Interface_Output_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/interface"
// Path from root: "/qos/interfaces/interface/output/interface-ref/state/interface"
func (n *Qos_Interface_Output_InterfaceRefPathAny) Interface() *Qos_Interface_Output_InterfaceRef_InterfacePathAny {
	return &Qos_Interface_Output_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/subinterface"
// Path from root: "/qos/interfaces/interface/output/interface-ref/state/subinterface"
func (n *Qos_Interface_Output_InterfaceRefPath) Subinterface() *Qos_Interface_Output_InterfaceRef_SubinterfacePath {
	return &Qos_Interface_Output_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/subinterface"
// Path from root: "/qos/interfaces/interface/output/interface-ref/state/subinterface"
func (n *Qos_Interface_Output_InterfaceRefPathAny) Subinterface() *Qos_Interface_Output_InterfaceRef_SubinterfacePathAny {
	return &Qos_Interface_Output_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_Interface_Output_QueuePath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue YANG schema element.
type Qos_Interface_Output_QueuePath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_QueuePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue YANG schema element.
type Qos_Interface_Output_QueuePathAny struct {
	*ygot.NodePath
}

// Qos_Interface_Output_Queue_AvgQueueLenPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/avg-queue-len YANG schema element.
type Qos_Interface_Output_Queue_AvgQueueLenPath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_Queue_AvgQueueLenPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/avg-queue-len YANG schema element.
type Qos_Interface_Output_Queue_AvgQueueLenPathAny struct {
	*ygot.NodePath
}

// Qos_Interface_Output_Queue_DroppedPktsPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/dropped-pkts YANG schema element.
type Qos_Interface_Output_Queue_DroppedPktsPath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_Queue_DroppedPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/dropped-pkts YANG schema element.
type Qos_Interface_Output_Queue_DroppedPktsPathAny struct {
	*ygot.NodePath
}

// Qos_Interface_Output_Queue_MaxQueueLenPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/max-queue-len YANG schema element.
type Qos_Interface_Output_Queue_MaxQueueLenPath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_Queue_MaxQueueLenPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/max-queue-len YANG schema element.
type Qos_Interface_Output_Queue_MaxQueueLenPathAny struct {
	*ygot.NodePath
}

// Qos_Interface_Output_Queue_NamePath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/name YANG schema element.
type Qos_Interface_Output_Queue_NamePath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_Queue_NamePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/name YANG schema element.
type Qos_Interface_Output_Queue_NamePathAny struct {
	*ygot.NodePath
}

// Qos_Interface_Output_Queue_QueueManagementProfilePath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/queue-management-profile YANG schema element.
type Qos_Interface_Output_Queue_QueueManagementProfilePath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_Queue_QueueManagementProfilePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/queue-management-profile YANG schema element.
type Qos_Interface_Output_Queue_QueueManagementProfilePathAny struct {
	*ygot.NodePath
}

// Qos_Interface_Output_Queue_TransmitOctetsPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/transmit-octets YANG schema element.
type Qos_Interface_Output_Queue_TransmitOctetsPath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_Queue_TransmitOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/transmit-octets YANG schema element.
type Qos_Interface_Output_Queue_TransmitOctetsPathAny struct {
	*ygot.NodePath
}

// Qos_Interface_Output_Queue_TransmitPktsPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/transmit-pkts YANG schema element.
type Qos_Interface_Output_Queue_TransmitPktsPath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_Queue_TransmitPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/transmit-pkts YANG schema element.
type Qos_Interface_Output_Queue_TransmitPktsPathAny struct {
	*ygot.NodePath
}

// AvgQueueLen (leaf): Average observed queue length
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/avg-queue-len"
// Path from root: "/qos/interfaces/interface/output/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Output_QueuePath) AvgQueueLen() *Qos_Interface_Output_Queue_AvgQueueLenPath {
	return &Qos_Interface_Output_Queue_AvgQueueLenPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "avg-queue-len"},
			map[string]interface{}{},
			n,
		),
	}
}

// AvgQueueLen (leaf): Average observed queue length
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/avg-queue-len"
// Path from root: "/qos/interfaces/interface/output/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Output_QueuePathAny) AvgQueueLen() *Qos_Interface_Output_Queue_AvgQueueLenPathAny {
	return &Qos_Interface_Output_Queue_AvgQueueLenPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "avg-queue-len"},
			map[string]interface{}{},
			n,
		),
	}
}

// DroppedPkts (leaf): Number of packets dropped by the queue due to overrun
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/dropped-pkts"
// Path from root: "/qos/interfaces/interface/output/queues/queue/state/dropped-pkts"
func (n *Qos_Interface_Output_QueuePath) DroppedPkts() *Qos_Interface_Output_Queue_DroppedPktsPath {
	return &Qos_Interface_Output_Queue_DroppedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dropped-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// DroppedPkts (leaf): Number of packets dropped by the queue due to overrun
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/dropped-pkts"
// Path from root: "/qos/interfaces/interface/output/queues/queue/state/dropped-pkts"
func (n *Qos_Interface_Output_QueuePathAny) DroppedPkts() *Qos_Interface_Output_Queue_DroppedPktsPathAny {
	return &Qos_Interface_Output_Queue_DroppedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dropped-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxQueueLen (leaf): Maximum observed queue length
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/max-queue-len"
// Path from root: "/qos/interfaces/interface/output/queues/queue/state/max-queue-len"
func (n *Qos_Interface_Output_QueuePath) MaxQueueLen() *Qos_Interface_Output_Queue_MaxQueueLenPath {
	return &Qos_Interface_Output_Queue_MaxQueueLenPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-queue-len"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxQueueLen (leaf): Maximum observed queue length
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/max-queue-len"
// Path from root: "/qos/interfaces/interface/output/queues/queue/state/max-queue-len"
func (n *Qos_Interface_Output_QueuePathAny) MaxQueueLen() *Qos_Interface_Output_Queue_MaxQueueLenPathAny {
	return &Qos_Interface_Output_Queue_MaxQueueLenPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-queue-len"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the queue associated with this interface.
// A queue may be explicitly configured, or implicitly created
// by the system based on default queues that are instantiated
// by a hardware component, or are assumed to be default on
// the system.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/name"
// Path from root: "/qos/interfaces/interface/output/queues/queue/state/name"
func (n *Qos_Interface_Output_QueuePath) Name() *Qos_Interface_Output_Queue_NamePath {
	return &Qos_Interface_Output_Queue_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the queue associated with this interface.
// A queue may be explicitly configured, or implicitly created
// by the system based on default queues that are instantiated
// by a hardware component, or are assumed to be default on
// the system.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/name"
// Path from root: "/qos/interfaces/interface/output/queues/queue/state/name"
func (n *Qos_Interface_Output_QueuePathAny) Name() *Qos_Interface_Output_Queue_NamePathAny {
	return &Qos_Interface_Output_Queue_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// QueueManagementProfile (leaf): The queue management profile that is to be used for the queue
// on the interface.
//
// For example, the system may use a profile which specifies that
// WRED curves are used for setting an ECN mark in the IP header
// instead of dropping a packet in order to signal impending
// congestion and for determining when there is sufficient
// congestion to tail drop packets.
//
// A single profile is available per queue - which applies to all packets
// that are enqueued to the specified queue, whether they are unicast or
// multicast.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/queue-management-profile"
// Path from root: "/qos/interfaces/interface/output/queues/queue/state/queue-management-profile"
func (n *Qos_Interface_Output_QueuePath) QueueManagementProfile() *Qos_Interface_Output_Queue_QueueManagementProfilePath {
	return &Qos_Interface_Output_Queue_QueueManagementProfilePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "queue-management-profile"},
			map[string]interface{}{},
			n,
		),
	}
}

// QueueManagementProfile (leaf): The queue management profile that is to be used for the queue
// on the interface.
//
// For example, the system may use a profile which specifies that
// WRED curves are used for setting an ECN mark in the IP header
// instead of dropping a packet in order to signal impending
// congestion and for determining when there is sufficient
// congestion to tail drop packets.
//
// A single profile is available per queue - which applies to all packets
// that are enqueued to the specified queue, whether they are unicast or
// multicast.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/queue-management-profile"
// Path from root: "/qos/interfaces/interface/output/queues/queue/state/queue-management-profile"
func (n *Qos_Interface_Output_QueuePathAny) QueueManagementProfile() *Qos_Interface_Output_Queue_QueueManagementProfilePathAny {
	return &Qos_Interface_Output_Queue_QueueManagementProfilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "queue-management-profile"},
			map[string]interface{}{},
			n,
		),
	}
}

// TransmitOctets (leaf): Number of octets trasmitted by this queue
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/transmit-octets"
// Path from root: "/qos/interfaces/interface/output/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Output_QueuePath) TransmitOctets() *Qos_Interface_Output_Queue_TransmitOctetsPath {
	return &Qos_Interface_Output_Queue_TransmitOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "transmit-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// TransmitOctets (leaf): Number of octets trasmitted by this queue
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/transmit-octets"
// Path from root: "/qos/interfaces/interface/output/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Output_QueuePathAny) TransmitOctets() *Qos_Interface_Output_Queue_TransmitOctetsPathAny {
	return &Qos_Interface_Output_Queue_TransmitOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "transmit-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// TransmitPkts (leaf): Number of packets transmitted by this queue
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/transmit-pkts"
// Path from root: "/qos/interfaces/interface/output/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Output_QueuePath) TransmitPkts() *Qos_Interface_Output_Queue_TransmitPktsPath {
	return &Qos_Interface_Output_Queue_TransmitPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "transmit-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// TransmitPkts (leaf): Number of packets transmitted by this queue
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/transmit-pkts"
// Path from root: "/qos/interfaces/interface/output/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Output_QueuePathAny) TransmitPkts() *Qos_Interface_Output_Queue_TransmitPktsPathAny {
	return &Qos_Interface_Output_Queue_TransmitPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "transmit-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_Interface_Output_SchedulerPolicyPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy YANG schema element.
type Qos_Interface_Output_SchedulerPolicyPath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_SchedulerPolicyPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy YANG schema element.
type Qos_Interface_Output_SchedulerPolicyPathAny struct {
	*ygot.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_NamePath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/state/name YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_NamePath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_NamePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/state/name YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_NamePathAny struct {
	*ygot.NodePath
}

// Name (leaf): The scheduler policy to be applied to traffic on this interface.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/name"
// Path from root: "/qos/interfaces/interface/output/scheduler-policy/state/name"
func (n *Qos_Interface_Output_SchedulerPolicyPath) Name() *Qos_Interface_Output_SchedulerPolicy_NamePath {
	return &Qos_Interface_Output_SchedulerPolicy_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The scheduler policy to be applied to traffic on this interface.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/name"
// Path from root: "/qos/interfaces/interface/output/scheduler-policy/state/name"
func (n *Qos_Interface_Output_SchedulerPolicyPathAny) Name() *Qos_Interface_Output_SchedulerPolicy_NamePathAny {
	return &Qos_Interface_Output_SchedulerPolicy_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SchedulerAny (list): List of the schedulers that are part of the scheduler-policy
// specified.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "schedulers/scheduler"
// Path from root: "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"
// Sequence (wildcarded): uint32
func (n *Qos_Interface_Output_SchedulerPolicyPath) SchedulerAny() *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny {
	return &Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": "*"},
			n,
		),
	}
}

// SchedulerAny (list): List of the schedulers that are part of the scheduler-policy
// specified.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "schedulers/scheduler"
// Path from root: "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"
// Sequence (wildcarded): uint32
func (n *Qos_Interface_Output_SchedulerPolicyPathAny) SchedulerAny() *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny {
	return &Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": "*"},
			n,
		),
	}
}

// Scheduler (list): List of the schedulers that are part of the scheduler-policy
// specified.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "schedulers/scheduler"
// Path from root: "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"
// Sequence: uint32
func (n *Qos_Interface_Output_SchedulerPolicyPath) Scheduler(Sequence uint32) *Qos_Interface_Output_SchedulerPolicy_SchedulerPath {
	return &Qos_Interface_Output_SchedulerPolicy_SchedulerPath{
		NodePath: ygot.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": Sequence},
			n,
		),
	}
}

// Scheduler (list): List of the schedulers that are part of the scheduler-policy
// specified.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "schedulers/scheduler"
// Path from root: "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"
// Sequence: uint32
func (n *Qos_Interface_Output_SchedulerPolicyPathAny) Scheduler(Sequence uint32) *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny {
	return &Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": Sequence},
			n,
		),
	}
}

// Qos_Interface_Output_SchedulerPolicy_SchedulerPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_SchedulerPath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny struct {
	*ygot.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPathAny struct {
	*ygot.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPathAny struct {
	*ygot.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPathAny struct {
	*ygot.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPathAny struct {
	*ygot.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/sequence YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/sequence YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePathAny struct {
	*ygot.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPathAny struct {
	*ygot.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPath struct {
	*ygot.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPathAny struct {
	*ygot.NodePath
}

// ConformingOctets (leaf): The number of octets in packets that were considered
// conforming by the scheduler.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/conforming-octets"
// Path from root: "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) ConformingOctets() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPath {
	return &Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "conforming-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConformingOctets (leaf): The number of octets in packets that were considered
// conforming by the scheduler.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/conforming-octets"
// Path from root: "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) ConformingOctets() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPathAny {
	return &Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "conforming-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConformingPkts (leaf): The number of packets that were considered conforming by
// the scheduler.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/conforming-pkts"
// Path from root: "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) ConformingPkts() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPath {
	return &Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "conforming-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConformingPkts (leaf): The number of packets that were considered conforming by
// the scheduler.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/conforming-pkts"
// Path from root: "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) ConformingPkts() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPathAny {
	return &Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "conforming-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExceedingOctets (leaf): The number of octets in packets that were considered
// exceeding by the scheduler.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/exceeding-octets"
// Path from root: "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) ExceedingOctets() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPath {
	return &Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "exceeding-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExceedingOctets (leaf): The number of octets in packets that were considered
// exceeding by the scheduler.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/exceeding-octets"
// Path from root: "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) ExceedingOctets() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPathAny {
	return &Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "exceeding-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExceedingPkts (leaf): The number of packets that were considered exceeding by
// the scheduler.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/exceeding-pkts"
// Path from root: "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) ExceedingPkts() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPath {
	return &Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "exceeding-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExceedingPkts (leaf): The number of packets that were considered exceeding by
// the scheduler.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/exceeding-pkts"
// Path from root: "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) ExceedingPkts() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPathAny {
	return &Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "exceeding-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sequence (leaf): Reference to the sequence ID of the scheduler within
// the current scheduler policy.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/sequence"
// Path from root: "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/sequence"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) Sequence() *Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePath {
	return &Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sequence"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sequence (leaf): Reference to the sequence ID of the scheduler within
// the current scheduler policy.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/sequence"
// Path from root: "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/sequence"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) Sequence() *Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePathAny {
	return &Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sequence"},
			map[string]interface{}{},
			n,
		),
	}
}

// ViolatingOctets (leaf): The number of octets in packets that were considered
// violating by the policer.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/violating-octets"
// Path from root: "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) ViolatingOctets() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPath {
	return &Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "violating-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// ViolatingOctets (leaf): The number of octets in packets that were considered
// violating by the policer.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/violating-octets"
// Path from root: "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) ViolatingOctets() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPathAny {
	return &Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "violating-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// ViolatingPkts (leaf): The number of packets that were considered violating by
// the policer.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/violating-pkts"
// Path from root: "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) ViolatingPkts() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPath {
	return &Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "violating-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// ViolatingPkts (leaf): The number of packets that were considered violating by
// the policer.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/violating-pkts"
// Path from root: "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) ViolatingPkts() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPathAny {
	return &Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "violating-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_QueuePath represents the /openconfig-qos/qos/queues/queue YANG schema element.
type Qos_QueuePath struct {
	*ygot.NodePath
}

// Qos_QueuePathAny represents the wildcard version of the /openconfig-qos/qos/queues/queue YANG schema element.
type Qos_QueuePathAny struct {
	*ygot.NodePath
}

// Qos_Queue_NamePath represents the /openconfig-qos/qos/queues/queue/state/name YANG schema element.
type Qos_Queue_NamePath struct {
	*ygot.NodePath
}

// Qos_Queue_NamePathAny represents the wildcard version of the /openconfig-qos/qos/queues/queue/state/name YANG schema element.
type Qos_Queue_NamePathAny struct {
	*ygot.NodePath
}

// Name (leaf): User-defined name of the queue
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/name"
// Path from root: "/qos/queues/queue/state/name"
func (n *Qos_QueuePath) Name() *Qos_Queue_NamePath {
	return &Qos_Queue_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): User-defined name of the queue
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/name"
// Path from root: "/qos/queues/queue/state/name"
func (n *Qos_QueuePathAny) Name() *Qos_Queue_NamePathAny {
	return &Qos_Queue_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_QueueManagementProfilePath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile YANG schema element.
type Qos_QueueManagementProfilePath struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfilePathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile YANG schema element.
type Qos_QueueManagementProfilePathAny struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_NamePath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/state/name YANG schema element.
type Qos_QueueManagementProfile_NamePath struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_NamePathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/state/name YANG schema element.
type Qos_QueueManagementProfile_NamePathAny struct {
	*ygot.NodePath
}

// Name (leaf): Unique string name used for the queue management profile.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/name"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/state/name"
func (n *Qos_QueueManagementProfilePath) Name() *Qos_QueueManagementProfile_NamePath {
	return &Qos_QueueManagementProfile_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Unique string name used for the queue management profile.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/name"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/state/name"
func (n *Qos_QueueManagementProfilePathAny) Name() *Qos_QueueManagementProfile_NamePathAny {
	return &Qos_QueueManagementProfile_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Red (container): Configuration and operational state parameters
// relating to Random Early Detection (RED).
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "red"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/red"
func (n *Qos_QueueManagementProfilePath) Red() *Qos_QueueManagementProfile_RedPath {
	return &Qos_QueueManagementProfile_RedPath{
		NodePath: ygot.NewNodePath(
			[]string{"red"},
			map[string]interface{}{},
			n,
		),
	}
}

// Red (container): Configuration and operational state parameters
// relating to Random Early Detection (RED).
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "red"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/red"
func (n *Qos_QueueManagementProfilePathAny) Red() *Qos_QueueManagementProfile_RedPathAny {
	return &Qos_QueueManagementProfile_RedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"red"},
			map[string]interface{}{},
			n,
		),
	}
}

// Wred (container): Configuration and operational state parameters relating to
// Weighted Random Early Detection (WRED).
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "wred"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/wred"
func (n *Qos_QueueManagementProfilePath) Wred() *Qos_QueueManagementProfile_WredPath {
	return &Qos_QueueManagementProfile_WredPath{
		NodePath: ygot.NewNodePath(
			[]string{"wred"},
			map[string]interface{}{},
			n,
		),
	}
}

// Wred (container): Configuration and operational state parameters relating to
// Weighted Random Early Detection (WRED).
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "wred"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/wred"
func (n *Qos_QueueManagementProfilePathAny) Wred() *Qos_QueueManagementProfile_WredPathAny {
	return &Qos_QueueManagementProfile_WredPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"wred"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_QueueManagementProfile_RedPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red YANG schema element.
type Qos_QueueManagementProfile_RedPath struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_RedPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red YANG schema element.
type Qos_QueueManagementProfile_RedPathAny struct {
	*ygot.NodePath
}

// Uniform (container): Uniform RED parameters. These parameters are applied to all
// the traffic coming into system.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "uniform"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/red/uniform"
func (n *Qos_QueueManagementProfile_RedPath) Uniform() *Qos_QueueManagementProfile_Red_UniformPath {
	return &Qos_QueueManagementProfile_Red_UniformPath{
		NodePath: ygot.NewNodePath(
			[]string{"uniform"},
			map[string]interface{}{},
			n,
		),
	}
}

// Uniform (container): Uniform RED parameters. These parameters are applied to all
// the traffic coming into system.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "uniform"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/red/uniform"
func (n *Qos_QueueManagementProfile_RedPathAny) Uniform() *Qos_QueueManagementProfile_Red_UniformPathAny {
	return &Qos_QueueManagementProfile_Red_UniformPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"uniform"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_QueueManagementProfile_Red_UniformPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform YANG schema element.
type Qos_QueueManagementProfile_Red_UniformPath struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Red_UniformPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform YANG schema element.
type Qos_QueueManagementProfile_Red_UniformPathAny struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Red_Uniform_DropPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/drop YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_DropPath struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Red_Uniform_DropPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/drop YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_DropPathAny struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Red_Uniform_EnableEcnPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/enable-ecn YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_EnableEcnPath struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Red_Uniform_EnableEcnPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/enable-ecn YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_EnableEcnPathAny struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/max-threshold YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPath struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/max-threshold YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPathAny struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Red_Uniform_MinThresholdPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/min-threshold YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_MinThresholdPath struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Red_Uniform_MinThresholdPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/min-threshold YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_MinThresholdPathAny struct {
	*ygot.NodePath
}

// Drop (leaf): When this leaf is true and the packet and if the ECN field in
// the packet indicates that the endpoints are not ECN capable and
// the and the WRED algorithm determines that the packet should
// have been dropped based on the drop probability, the packet
// is dropped.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/drop"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/drop"
func (n *Qos_QueueManagementProfile_Red_UniformPath) Drop() *Qos_QueueManagementProfile_Red_Uniform_DropPath {
	return &Qos_QueueManagementProfile_Red_Uniform_DropPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "drop"},
			map[string]interface{}{},
			n,
		),
	}
}

// Drop (leaf): When this leaf is true and the packet and if the ECN field in
// the packet indicates that the endpoints are not ECN capable and
// the and the WRED algorithm determines that the packet should
// have been dropped based on the drop probability, the packet
// is dropped.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/drop"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/drop"
func (n *Qos_QueueManagementProfile_Red_UniformPathAny) Drop() *Qos_QueueManagementProfile_Red_Uniform_DropPathAny {
	return &Qos_QueueManagementProfile_Red_Uniform_DropPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "drop"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableEcn (leaf): When this leaf is true and the number of packets in the queue
// is between the minimum threshold and the maximum threshold, if
// the ECN field on the packet indicates that the endpoints are ECN
// capable (that is, the ECT bit is set to 1 and the CE bit is set
// to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
// the WRED algorithm determines that the packet should have been
// dropped based on the drop probability, the ECT and CE bits for
// the packet are changed to 1, and the packet is transmitted.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/enable-ecn"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/enable-ecn"
func (n *Qos_QueueManagementProfile_Red_UniformPath) EnableEcn() *Qos_QueueManagementProfile_Red_Uniform_EnableEcnPath {
	return &Qos_QueueManagementProfile_Red_Uniform_EnableEcnPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable-ecn"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableEcn (leaf): When this leaf is true and the number of packets in the queue
// is between the minimum threshold and the maximum threshold, if
// the ECN field on the packet indicates that the endpoints are ECN
// capable (that is, the ECT bit is set to 1 and the CE bit is set
// to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
// the WRED algorithm determines that the packet should have been
// dropped based on the drop probability, the ECT and CE bits for
// the packet are changed to 1, and the packet is transmitted.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/enable-ecn"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/enable-ecn"
func (n *Qos_QueueManagementProfile_Red_UniformPathAny) EnableEcn() *Qos_QueueManagementProfile_Red_Uniform_EnableEcnPathAny {
	return &Qos_QueueManagementProfile_Red_Uniform_EnableEcnPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable-ecn"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxThreshold (leaf): The maximum threshold parameter for a RED-managed queue. When the
// average queue length exceeds the maxth value, all packets are
// dropped (or marked if ECN is enabled).
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/max-threshold"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/max-threshold"
func (n *Qos_QueueManagementProfile_Red_UniformPath) MaxThreshold() *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPath {
	return &Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxThreshold (leaf): The maximum threshold parameter for a RED-managed queue. When the
// average queue length exceeds the maxth value, all packets are
// dropped (or marked if ECN is enabled).
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/max-threshold"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/max-threshold"
func (n *Qos_QueueManagementProfile_Red_UniformPathAny) MaxThreshold() *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPathAny {
	return &Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinThreshold (leaf): The mininum threshold parameter for a RED-managed queue. When the
// average queue length is less than minth, all packets are admitted
// to the queue.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/min-threshold"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/min-threshold"
func (n *Qos_QueueManagementProfile_Red_UniformPath) MinThreshold() *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPath {
	return &Qos_QueueManagementProfile_Red_Uniform_MinThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "min-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinThreshold (leaf): The mininum threshold parameter for a RED-managed queue. When the
// average queue length is less than minth, all packets are admitted
// to the queue.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/min-threshold"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/min-threshold"
func (n *Qos_QueueManagementProfile_Red_UniformPathAny) MinThreshold() *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPathAny {
	return &Qos_QueueManagementProfile_Red_Uniform_MinThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "min-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_QueueManagementProfile_WredPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred YANG schema element.
type Qos_QueueManagementProfile_WredPath struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_WredPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred YANG schema element.
type Qos_QueueManagementProfile_WredPathAny struct {
	*ygot.NodePath
}

// Uniform (container): Uniform WRED parameters. These parameters are applied to all the
// traffic coming into system.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "uniform"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/wred/uniform"
func (n *Qos_QueueManagementProfile_WredPath) Uniform() *Qos_QueueManagementProfile_Wred_UniformPath {
	return &Qos_QueueManagementProfile_Wred_UniformPath{
		NodePath: ygot.NewNodePath(
			[]string{"uniform"},
			map[string]interface{}{},
			n,
		),
	}
}

// Uniform (container): Uniform WRED parameters. These parameters are applied to all the
// traffic coming into system.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "uniform"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/wred/uniform"
func (n *Qos_QueueManagementProfile_WredPathAny) Uniform() *Qos_QueueManagementProfile_Wred_UniformPathAny {
	return &Qos_QueueManagementProfile_Wred_UniformPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"uniform"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_QueueManagementProfile_Wred_UniformPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform YANG schema element.
type Qos_QueueManagementProfile_Wred_UniformPath struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Wred_UniformPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform YANG schema element.
type Qos_QueueManagementProfile_Wred_UniformPathAny struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Wred_Uniform_DropPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/drop YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_DropPath struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Wred_Uniform_DropPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/drop YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_DropPathAny struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/enable-ecn YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPath struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/enable-ecn YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPathAny struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-drop-probability-percent YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPath struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-drop-probability-percent YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPathAny struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPath struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPathAny struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPath struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPathAny struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Wred_Uniform_WeightPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/weight YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_WeightPath struct {
	*ygot.NodePath
}

// Qos_QueueManagementProfile_Wred_Uniform_WeightPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/weight YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_WeightPathAny struct {
	*ygot.NodePath
}

// Drop (leaf): When this leaf is true and the packet and if the ECN field in
// the packet indicates that the endpoints are not ECN capable and
// the and the WRED algorithm determines that the packet should
// have been dropped based on the drop probability, the packet
// is dropped.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/drop"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/drop"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) Drop() *Qos_QueueManagementProfile_Wred_Uniform_DropPath {
	return &Qos_QueueManagementProfile_Wred_Uniform_DropPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "drop"},
			map[string]interface{}{},
			n,
		),
	}
}

// Drop (leaf): When this leaf is true and the packet and if the ECN field in
// the packet indicates that the endpoints are not ECN capable and
// the and the WRED algorithm determines that the packet should
// have been dropped based on the drop probability, the packet
// is dropped.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/drop"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/drop"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) Drop() *Qos_QueueManagementProfile_Wred_Uniform_DropPathAny {
	return &Qos_QueueManagementProfile_Wred_Uniform_DropPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "drop"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableEcn (leaf): When this leaf is true and the number of packets in the queue
// is between the minimum threshold and the maximum threshold, if
// the ECN field on the packet indicates that the endpoints are ECN
// capable (that is, the ECT bit is set to 1 and the CE bit is set
// to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
// the WRED algorithm determines that the packet should have been
// dropped based on the drop probability, the ECT and CE bits for
// the packet are changed to 1, and the packet is transmitted.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/enable-ecn"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/enable-ecn"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) EnableEcn() *Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPath {
	return &Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable-ecn"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableEcn (leaf): When this leaf is true and the number of packets in the queue
// is between the minimum threshold and the maximum threshold, if
// the ECN field on the packet indicates that the endpoints are ECN
// capable (that is, the ECT bit is set to 1 and the CE bit is set
// to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
// the WRED algorithm determines that the packet should have been
// dropped based on the drop probability, the ECT and CE bits for
// the packet are changed to 1, and the packet is transmitted.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/enable-ecn"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/enable-ecn"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) EnableEcn() *Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPathAny {
	return &Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable-ecn"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxDropProbabilityPercent (leaf): If the queue depth is between min and max threshold then this
// the probability with which packets are dropped or marked.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/max-drop-probability-percent"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-drop-probability-percent"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) MaxDropProbabilityPercent() *Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPath {
	return &Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-drop-probability-percent"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxDropProbabilityPercent (leaf): If the queue depth is between min and max threshold then this
// the probability with which packets are dropped or marked.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/max-drop-probability-percent"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-drop-probability-percent"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) MaxDropProbabilityPercent() *Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPathAny {
	return &Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-drop-probability-percent"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxThreshold (leaf): The maximum threshold parameter for a RED-managed queue. When the
// average queue length exceeds the maxth value, all packets are
// dropped (or marked if ECN is enabled).
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/max-threshold"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) MaxThreshold() *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPath {
	return &Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxThreshold (leaf): The maximum threshold parameter for a RED-managed queue. When the
// average queue length exceeds the maxth value, all packets are
// dropped (or marked if ECN is enabled).
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/max-threshold"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) MaxThreshold() *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPathAny {
	return &Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinThreshold (leaf): The mininum threshold parameter for a RED-managed queue. When the
// average queue length is less than minth, all packets are admitted
// to the queue.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/min-threshold"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) MinThreshold() *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPath {
	return &Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "min-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinThreshold (leaf): The mininum threshold parameter for a RED-managed queue. When the
// average queue length is less than minth, all packets are admitted
// to the queue.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/min-threshold"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) MinThreshold() *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPathAny {
	return &Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "min-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// Weight (leaf): The average queue size depends on the previous average as well as
// the current size of the queue.
//
// average queue size = (previous average queue size)*(1-2^{-n})+
//                     (current queue size)*(2^{-n})
//
// where n is the user-configurable exponential weight factor.
//
// The previous average is more important for high values of n. Peaks
// and lows in queue size are smoothed by a high value. For low values
// of n, the average queue size is close to the current queue size.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/weight"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/weight"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) Weight() *Qos_QueueManagementProfile_Wred_Uniform_WeightPath {
	return &Qos_QueueManagementProfile_Wred_Uniform_WeightPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "weight"},
			map[string]interface{}{},
			n,
		),
	}
}

// Weight (leaf): The average queue size depends on the previous average as well as
// the current size of the queue.
//
// average queue size = (previous average queue size)*(1-2^{-n})+
//                     (current queue size)*(2^{-n})
//
// where n is the user-configurable exponential weight factor.
//
// The previous average is more important for high values of n. Peaks
// and lows in queue size are smoothed by a high value. For low values
// of n, the average queue size is close to the current queue size.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/weight"
// Path from root: "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/weight"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) Weight() *Qos_QueueManagementProfile_Wred_Uniform_WeightPathAny {
	return &Qos_QueueManagementProfile_Wred_Uniform_WeightPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "weight"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_SchedulerPolicyPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy YANG schema element.
type Qos_SchedulerPolicyPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicyPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy YANG schema element.
type Qos_SchedulerPolicyPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_NamePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/state/name YANG schema element.
type Qos_SchedulerPolicy_NamePath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_NamePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/state/name YANG schema element.
type Qos_SchedulerPolicy_NamePathAny struct {
	*ygot.NodePath
}

// Name (leaf): Name for the scheduler policy.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/name"
// Path from root: "/qos/scheduler-policies/scheduler-policy/state/name"
func (n *Qos_SchedulerPolicyPath) Name() *Qos_SchedulerPolicy_NamePath {
	return &Qos_SchedulerPolicy_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Name for the scheduler policy.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/name"
// Path from root: "/qos/scheduler-policies/scheduler-policy/state/name"
func (n *Qos_SchedulerPolicyPathAny) Name() *Qos_SchedulerPolicy_NamePathAny {
	return &Qos_SchedulerPolicy_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SchedulerAny (list): List of defined QoS traffic schedulers.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "schedulers/scheduler"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"
// Sequence (wildcarded): uint32
func (n *Qos_SchedulerPolicyPath) SchedulerAny() *Qos_SchedulerPolicy_SchedulerPathAny {
	return &Qos_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": "*"},
			n,
		),
	}
}

// SchedulerAny (list): List of defined QoS traffic schedulers.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "schedulers/scheduler"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"
// Sequence (wildcarded): uint32
func (n *Qos_SchedulerPolicyPathAny) SchedulerAny() *Qos_SchedulerPolicy_SchedulerPathAny {
	return &Qos_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": "*"},
			n,
		),
	}
}

// Scheduler (list): List of defined QoS traffic schedulers.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "schedulers/scheduler"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"
// Sequence: uint32
func (n *Qos_SchedulerPolicyPath) Scheduler(Sequence uint32) *Qos_SchedulerPolicy_SchedulerPath {
	return &Qos_SchedulerPolicy_SchedulerPath{
		NodePath: ygot.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": Sequence},
			n,
		),
	}
}

// Scheduler (list): List of defined QoS traffic schedulers.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "schedulers/scheduler"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"
// Sequence: uint32
func (n *Qos_SchedulerPolicyPathAny) Scheduler(Sequence uint32) *Qos_SchedulerPolicy_SchedulerPathAny {
	return &Qos_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": Sequence},
			n,
		),
	}
}

// Qos_SchedulerPolicy_SchedulerPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_SchedulerPolicy_SchedulerPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_SchedulerPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_SchedulerPolicy_SchedulerPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_PriorityPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/priority YANG schema element.
type Qos_SchedulerPolicy_Scheduler_PriorityPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_PriorityPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/priority YANG schema element.
type Qos_SchedulerPolicy_Scheduler_PriorityPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_SequencePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/sequence YANG schema element.
type Qos_SchedulerPolicy_Scheduler_SequencePath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_SequencePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/sequence YANG schema element.
type Qos_SchedulerPolicy_Scheduler_SequencePathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TypePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/type YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TypePath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TypePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/type YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TypePathAny struct {
	*ygot.NodePath
}

// InputAny (list): List of input sources for the scheduler.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "inputs/input"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"
// Id (wildcarded): string
func (n *Qos_SchedulerPolicy_SchedulerPath) InputAny() *Qos_SchedulerPolicy_Scheduler_InputPathAny {
	return &Qos_SchedulerPolicy_Scheduler_InputPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"inputs", "input"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// InputAny (list): List of input sources for the scheduler.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "inputs/input"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"
// Id (wildcarded): string
func (n *Qos_SchedulerPolicy_SchedulerPathAny) InputAny() *Qos_SchedulerPolicy_Scheduler_InputPathAny {
	return &Qos_SchedulerPolicy_Scheduler_InputPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"inputs", "input"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// Input (list): List of input sources for the scheduler.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "inputs/input"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"
// Id: string
func (n *Qos_SchedulerPolicy_SchedulerPath) Input(Id string) *Qos_SchedulerPolicy_Scheduler_InputPath {
	return &Qos_SchedulerPolicy_Scheduler_InputPath{
		NodePath: ygot.NewNodePath(
			[]string{"inputs", "input"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Input (list): List of input sources for the scheduler.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "inputs/input"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"
// Id: string
func (n *Qos_SchedulerPolicy_SchedulerPathAny) Input(Id string) *Qos_SchedulerPolicy_Scheduler_InputPathAny {
	return &Qos_SchedulerPolicy_Scheduler_InputPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"inputs", "input"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// OneRateTwoColor (container): Top-level container for data related to a 1 rate, 2 color
// shaper.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "one-rate-two-color"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color"
func (n *Qos_SchedulerPolicy_SchedulerPath) OneRateTwoColor() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath{
		NodePath: ygot.NewNodePath(
			[]string{"one-rate-two-color"},
			map[string]interface{}{},
			n,
		),
	}
}

// OneRateTwoColor (container): Top-level container for data related to a 1 rate, 2 color
// shaper.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "one-rate-two-color"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) OneRateTwoColor() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"one-rate-two-color"},
			map[string]interface{}{},
			n,
		),
	}
}

// Output (container): Top-level container for scheduler output data
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "output"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output"
func (n *Qos_SchedulerPolicy_SchedulerPath) Output() *Qos_SchedulerPolicy_Scheduler_OutputPath {
	return &Qos_SchedulerPolicy_Scheduler_OutputPath{
		NodePath: ygot.NewNodePath(
			[]string{"output"},
			map[string]interface{}{},
			n,
		),
	}
}

// Output (container): Top-level container for scheduler output data
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "output"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) Output() *Qos_SchedulerPolicy_Scheduler_OutputPathAny {
	return &Qos_SchedulerPolicy_Scheduler_OutputPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"output"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Priority of the scheduler within the scheduler policy.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/priority"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/priority"
func (n *Qos_SchedulerPolicy_SchedulerPath) Priority() *Qos_SchedulerPolicy_Scheduler_PriorityPath {
	return &Qos_SchedulerPolicy_Scheduler_PriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Priority of the scheduler within the scheduler policy.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/priority"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/priority"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) Priority() *Qos_SchedulerPolicy_Scheduler_PriorityPathAny {
	return &Qos_SchedulerPolicy_Scheduler_PriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sequence (leaf): Sequence number for the scheduler within the scheduler
// policy. Schedulers are processed from lowest sequence
// to highest.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/sequence"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/sequence"
func (n *Qos_SchedulerPolicy_SchedulerPath) Sequence() *Qos_SchedulerPolicy_Scheduler_SequencePath {
	return &Qos_SchedulerPolicy_Scheduler_SequencePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sequence"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sequence (leaf): Sequence number for the scheduler within the scheduler
// policy. Schedulers are processed from lowest sequence
// to highest.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/sequence"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/sequence"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) Sequence() *Qos_SchedulerPolicy_Scheduler_SequencePathAny {
	return &Qos_SchedulerPolicy_Scheduler_SequencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sequence"},
			map[string]interface{}{},
			n,
		),
	}
}

// TwoRateThreeColor (container): Top-level container for data for a 2 rate, 3 color policer.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "two-rate-three-color"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color"
func (n *Qos_SchedulerPolicy_SchedulerPath) TwoRateThreeColor() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath{
		NodePath: ygot.NewNodePath(
			[]string{"two-rate-three-color"},
			map[string]interface{}{},
			n,
		),
	}
}

// TwoRateThreeColor (container): Top-level container for data for a 2 rate, 3 color policer.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "two-rate-three-color"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) TwoRateThreeColor() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"two-rate-three-color"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Sets the type of scheduler, i.e. the scheduling algorithm
// used to serve inputs.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/type"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/type"
func (n *Qos_SchedulerPolicy_SchedulerPath) Type() *Qos_SchedulerPolicy_Scheduler_TypePath {
	return &Qos_SchedulerPolicy_Scheduler_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Sets the type of scheduler, i.e. the scheduling algorithm
// used to serve inputs.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/type"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/type"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) Type() *Qos_SchedulerPolicy_Scheduler_TypePathAny {
	return &Qos_SchedulerPolicy_Scheduler_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_SchedulerPolicy_Scheduler_InputPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input YANG schema element.
type Qos_SchedulerPolicy_Scheduler_InputPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_InputPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input YANG schema element.
type Qos_SchedulerPolicy_Scheduler_InputPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_Input_IdPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/id YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_IdPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_Input_IdPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/id YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_IdPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_Input_InputTypePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/input-type YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_InputTypePath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_Input_InputTypePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/input-type YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_InputTypePathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_Input_QueuePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/queue YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_QueuePath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_Input_QueuePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/queue YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_QueuePathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_Input_WeightPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/weight YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_WeightPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_Input_WeightPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/weight YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_WeightPathAny struct {
	*ygot.NodePath
}

// Id (leaf): User-defined identifier for the scheduler input
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/id"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/id"
func (n *Qos_SchedulerPolicy_Scheduler_InputPath) Id() *Qos_SchedulerPolicy_Scheduler_Input_IdPath {
	return &Qos_SchedulerPolicy_Scheduler_Input_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): User-defined identifier for the scheduler input
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/id"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/id"
func (n *Qos_SchedulerPolicy_Scheduler_InputPathAny) Id() *Qos_SchedulerPolicy_Scheduler_Input_IdPathAny {
	return &Qos_SchedulerPolicy_Scheduler_Input_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InputType (leaf): Describes the type of input source for the scheduler
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/input-type"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/input-type"
func (n *Qos_SchedulerPolicy_Scheduler_InputPath) InputType() *Qos_SchedulerPolicy_Scheduler_Input_InputTypePath {
	return &Qos_SchedulerPolicy_Scheduler_Input_InputTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "input-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// InputType (leaf): Describes the type of input source for the scheduler
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/input-type"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/input-type"
func (n *Qos_SchedulerPolicy_Scheduler_InputPathAny) InputType() *Qos_SchedulerPolicy_Scheduler_Input_InputTypePathAny {
	return &Qos_SchedulerPolicy_Scheduler_Input_InputTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "input-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Queue (leaf): Reference to a queue that is an input source for the
// scheduler
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/queue"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/queue"
func (n *Qos_SchedulerPolicy_Scheduler_InputPath) Queue() *Qos_SchedulerPolicy_Scheduler_Input_QueuePath {
	return &Qos_SchedulerPolicy_Scheduler_Input_QueuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "queue"},
			map[string]interface{}{},
			n,
		),
	}
}

// Queue (leaf): Reference to a queue that is an input source for the
// scheduler
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/queue"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/queue"
func (n *Qos_SchedulerPolicy_Scheduler_InputPathAny) Queue() *Qos_SchedulerPolicy_Scheduler_Input_QueuePathAny {
	return &Qos_SchedulerPolicy_Scheduler_Input_QueuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "queue"},
			map[string]interface{}{},
			n,
		),
	}
}

// Weight (leaf): For priority schedulers, this indicates the priority of
// the corresponding input.  Higher values indicate higher
// priority.  For weighted round-robin schedulers, this leaf
// indicates the weight of the corresponding input.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/weight"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/weight"
func (n *Qos_SchedulerPolicy_Scheduler_InputPath) Weight() *Qos_SchedulerPolicy_Scheduler_Input_WeightPath {
	return &Qos_SchedulerPolicy_Scheduler_Input_WeightPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "weight"},
			map[string]interface{}{},
			n,
		),
	}
}

// Weight (leaf): For priority schedulers, this indicates the priority of
// the corresponding input.  Higher values indicate higher
// priority.  For weighted round-robin schedulers, this leaf
// indicates the weight of the corresponding input.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/weight"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/weight"
func (n *Qos_SchedulerPolicy_Scheduler_InputPathAny) Weight() *Qos_SchedulerPolicy_Scheduler_Input_WeightPathAny {
	return &Qos_SchedulerPolicy_Scheduler_Input_WeightPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "weight"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/bc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/bc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct-remaining YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct-remaining YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-bytes YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-bytes YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-packets YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-packets YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-percent YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-percent YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/queuing-behavior YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/queuing-behavior YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPathAny struct {
	*ygot.NodePath
}

// Bc (leaf): Committed burst size for the single-rate token bucket
// scheduler.  This value represents the depth of the token
// bucket.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/bc"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/bc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) Bc() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPath {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "bc"},
			map[string]interface{}{},
			n,
		),
	}
}

// Bc (leaf): Committed burst size for the single-rate token bucket
// scheduler.  This value represents the depth of the token
// bucket.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/bc"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/bc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) Bc() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPathAny {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "bc"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cir (leaf): Committed information rate for the single-rate token
// bucket scheduler.  This value represents the rate at which
// tokens are added to the bucket.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/cir"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) Cir() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPath {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cir"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cir (leaf): Committed information rate for the single-rate token
// bucket scheduler.  This value represents the rate at which
// tokens are added to the bucket.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/cir"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) Cir() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPathAny {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cir"},
			map[string]interface{}{},
			n,
		),
	}
}

// CirPct (leaf): Committed information rate for the single-rate token
// bucket scheduler. This value represents the rate at which
// tokens are added to the bucket. It is expressed as a
// percentage of the total bandwidth allocated to the
// context in which the scheduler is referenced.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/cir-pct"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) CirPct() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPath {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cir-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// CirPct (leaf): Committed information rate for the single-rate token
// bucket scheduler. This value represents the rate at which
// tokens are added to the bucket. It is expressed as a
// percentage of the total bandwidth allocated to the
// context in which the scheduler is referenced.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/cir-pct"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) CirPct() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPathAny {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cir-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// CirPctRemaining (leaf): Committed information rate for the single-rate token
// bucket scheduler. This value represents the rate at which
// tokens are added to the bucket. It is expressed as a
// percentage of the unallocated bandwidth available in the
// context in which the scheduled is referenced.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/cir-pct-remaining"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) CirPctRemaining() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPath {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cir-pct-remaining"},
			map[string]interface{}{},
			n,
		),
	}
}

// CirPctRemaining (leaf): Committed information rate for the single-rate token
// bucket scheduler. This value represents the rate at which
// tokens are added to the bucket. It is expressed as a
// percentage of the unallocated bandwidth available in the
// context in which the scheduled is referenced.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/cir-pct-remaining"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) CirPctRemaining() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPathAny {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cir-pct-remaining"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConformAction (container): Action to be applied to packets that are scheduled within the
// CIR of the one-rate, two-colour scheduler. Packets that receive
// a token from the in-CIR bucket are said to be conforming and
// have all of the specified actions applied.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "conform-action"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) ConformAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath{
		NodePath: ygot.NewNodePath(
			[]string{"conform-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConformAction (container): Action to be applied to packets that are scheduled within the
// CIR of the one-rate, two-colour scheduler. Packets that receive
// a token from the in-CIR bucket are said to be conforming and
// have all of the specified actions applied.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "conform-action"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) ConformAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"conform-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExceedAction (container): Action to be applied to packets that are scheduled above the CIR
// of the one-rate, two-colour shaper. Packets that do not receive a
// token from the in-CIR bucket are said to be exceeding, and have
// all of the specified actions applied.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "exceed-action"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) ExceedAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath{
		NodePath: ygot.NewNodePath(
			[]string{"exceed-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExceedAction (container): Action to be applied to packets that are scheduled above the CIR
// of the one-rate, two-colour shaper. Packets that do not receive a
// token from the in-CIR bucket are said to be exceeding, and have
// all of the specified actions applied.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "exceed-action"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) ExceedAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"exceed-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxQueueDepthBytes (leaf): When the scheduler is specified to be a shaper - the
// maximum depth of the queue in bytes is the value
// specified by this leaf.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/max-queue-depth-bytes"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-bytes"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) MaxQueueDepthBytes() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPath {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-queue-depth-bytes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxQueueDepthBytes (leaf): When the scheduler is specified to be a shaper - the
// maximum depth of the queue in bytes is the value
// specified by this leaf.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/max-queue-depth-bytes"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-bytes"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) MaxQueueDepthBytes() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPathAny {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-queue-depth-bytes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxQueueDepthPackets (leaf): When the scheduler is specified to be a shaper - the
// maximum depth of the queue in packets is the value
// specified by this leaf.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/max-queue-depth-packets"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-packets"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) MaxQueueDepthPackets() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPath {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-queue-depth-packets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxQueueDepthPackets (leaf): When the scheduler is specified to be a shaper - the
// maximum depth of the queue in packets is the value
// specified by this leaf.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/max-queue-depth-packets"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-packets"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) MaxQueueDepthPackets() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPathAny {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-queue-depth-packets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxQueueDepthPercent (leaf): The queue depth specified as a percentage of the total
// available buffer that is avaialble.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/max-queue-depth-percent"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-percent"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) MaxQueueDepthPercent() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPath {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-queue-depth-percent"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxQueueDepthPercent (leaf): The queue depth specified as a percentage of the total
// available buffer that is avaialble.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/max-queue-depth-percent"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-percent"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) MaxQueueDepthPercent() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPathAny {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-queue-depth-percent"},
			map[string]interface{}{},
			n,
		),
	}
}

// QueuingBehavior (leaf): The type of scheduler that is being configured.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/queuing-behavior"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/queuing-behavior"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) QueuingBehavior() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPath {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "queuing-behavior"},
			map[string]interface{}{},
			n,
		),
	}
}

// QueuingBehavior (leaf): The type of scheduler that is being configured.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/queuing-behavior"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/queuing-behavior"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) QueuingBehavior() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPathAny {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "queuing-behavior"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPathAny struct {
	*ygot.NodePath
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dot1p"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath) SetDot1P() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPath {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dot1p"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny) SetDot1P() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPathAny {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dscp"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath) SetDscp() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPath {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dscp"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny) SetDscp() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPathAny {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-mpls-tc"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPath {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-mpls-tc"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPathAny {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/drop YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/drop YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPathAny struct {
	*ygot.NodePath
}

// Drop (leaf): If set to true, packets within this context are dropped.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/drop"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/drop"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath) Drop() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPath {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "drop"},
			map[string]interface{}{},
			n,
		),
	}
}

// Drop (leaf): If set to true, packets within this context are dropped.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/drop"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/drop"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny) Drop() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPathAny {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "drop"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dot1p"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath) SetDot1P() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPath {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dot1p"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny) SetDot1P() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPathAny {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dscp"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath) SetDscp() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPath {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dscp"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny) SetDscp() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPathAny {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-mpls-tc"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPath {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-mpls-tc"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPathAny {
	return &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_SchedulerPolicy_Scheduler_OutputPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OutputPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OutputPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OutputPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/child-scheduler YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/child-scheduler YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-fwd-group YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-fwd-group YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_Output_OutputTypePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-type YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output_OutputTypePath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_Output_OutputTypePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-type YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output_OutputTypePathAny struct {
	*ygot.NodePath
}

// ChildScheduler (leaf): When the scheduler output type is a child scheduler,
// this leaf provides a reference to the downstream
// scheduler.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/child-scheduler"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/child-scheduler"
func (n *Qos_SchedulerPolicy_Scheduler_OutputPath) ChildScheduler() *Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPath {
	return &Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "child-scheduler"},
			map[string]interface{}{},
			n,
		),
	}
}

// ChildScheduler (leaf): When the scheduler output type is a child scheduler,
// this leaf provides a reference to the downstream
// scheduler.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/child-scheduler"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/child-scheduler"
func (n *Qos_SchedulerPolicy_Scheduler_OutputPathAny) ChildScheduler() *Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPathAny {
	return &Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "child-scheduler"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutputFwdGroup (leaf): When the scheduler output type is a forwarding group,
// this leaf provides a reference to the forwarding group.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/output-fwd-group"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-fwd-group"
func (n *Qos_SchedulerPolicy_Scheduler_OutputPath) OutputFwdGroup() *Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPath {
	return &Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "output-fwd-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutputFwdGroup (leaf): When the scheduler output type is a forwarding group,
// this leaf provides a reference to the forwarding group.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/output-fwd-group"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-fwd-group"
func (n *Qos_SchedulerPolicy_Scheduler_OutputPathAny) OutputFwdGroup() *Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPathAny {
	return &Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "output-fwd-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutputType (leaf): Describes the type of output sink for the scheduler.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/output-type"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-type"
func (n *Qos_SchedulerPolicy_Scheduler_OutputPath) OutputType() *Qos_SchedulerPolicy_Scheduler_Output_OutputTypePath {
	return &Qos_SchedulerPolicy_Scheduler_Output_OutputTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "output-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutputType (leaf): Describes the type of output sink for the scheduler.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/output-type"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-type"
func (n *Qos_SchedulerPolicy_Scheduler_OutputPathAny) OutputType() *Qos_SchedulerPolicy_Scheduler_Output_OutputTypePathAny {
	return &Qos_SchedulerPolicy_Scheduler_Output_OutputTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "output-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/bc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/bc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/be YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/be YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct-remaining YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct-remaining YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct-remaining YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct-remaining YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPathAny struct {
	*ygot.NodePath
}

// Bc (leaf): Committed burst size for the dual-rate token bucket
// policer.  This value represents the depth of the token
// bucket.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/bc"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/bc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) Bc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "bc"},
			map[string]interface{}{},
			n,
		),
	}
}

// Bc (leaf): Committed burst size for the dual-rate token bucket
// policer.  This value represents the depth of the token
// bucket.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/bc"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/bc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) Bc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "bc"},
			map[string]interface{}{},
			n,
		),
	}
}

// Be (leaf): Excess burst size for the dual-rate token bucket policer.
// This value represents the depth of the secondary bucket.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/be"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/be"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) Be() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "be"},
			map[string]interface{}{},
			n,
		),
	}
}

// Be (leaf): Excess burst size for the dual-rate token bucket policer.
// This value represents the depth of the secondary bucket.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/be"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/be"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) Be() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "be"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cir (leaf): Committed information rate for the dual-rate token
// bucket policer.  This value represents the rate at which
// tokens are added to the primary bucket.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/cir"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) Cir() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cir"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cir (leaf): Committed information rate for the dual-rate token
// bucket policer.  This value represents the rate at which
// tokens are added to the primary bucket.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/cir"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) Cir() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cir"},
			map[string]interface{}{},
			n,
		),
	}
}

// CirPct (leaf): Committed information rate for the dual-rate token bucket
// policer. This value represents the rate at which tokens
// are added to the primary bucket. It is expressed as a
// percentage of the total bandwidth available within the
// context the scheduler is instantiated.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/cir-pct"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) CirPct() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cir-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// CirPct (leaf): Committed information rate for the dual-rate token bucket
// policer. This value represents the rate at which tokens
// are added to the primary bucket. It is expressed as a
// percentage of the total bandwidth available within the
// context the scheduler is instantiated.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/cir-pct"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) CirPct() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cir-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// CirPctRemaining (leaf): Committed information rate for the dual-rate token
// bucket policer. This value represents the rate at which
// tokens are added to the primary bucket. It is expressed
// as a percentage of the remaining bandwidth within the
// context the scheduler is instantiated.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/cir-pct-remaining"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) CirPctRemaining() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cir-pct-remaining"},
			map[string]interface{}{},
			n,
		),
	}
}

// CirPctRemaining (leaf): Committed information rate for the dual-rate token
// bucket policer. This value represents the rate at which
// tokens are added to the primary bucket. It is expressed
// as a percentage of the remaining bandwidth within the
// context the scheduler is instantiated.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/cir-pct-remaining"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) CirPctRemaining() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cir-pct-remaining"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConformAction (container): Action to be applied to the packets that are scheduled
// within the CIR of the policer. All packets that receive
// a token from this bucket have all actions specified
// applied to them
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "conform-action"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) ConformAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath{
		NodePath: ygot.NewNodePath(
			[]string{"conform-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConformAction (container): Action to be applied to the packets that are scheduled
// within the CIR of the policer. All packets that receive
// a token from this bucket have all actions specified
// applied to them
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "conform-action"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) ConformAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"conform-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExceedAction (container): Action to be applied to the packets that are scheduled
// within the PIR of the policer. Packets that receive a
// token from within the PIR allocation have all the
// specified actions applied to them
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "exceed-action"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) ExceedAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath{
		NodePath: ygot.NewNodePath(
			[]string{"exceed-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExceedAction (container): Action to be applied to the packets that are scheduled
// within the PIR of the policer. Packets that receive a
// token from within the PIR allocation have all the
// specified actions applied to them
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "exceed-action"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) ExceedAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"exceed-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// Pir (leaf): Peak information rate for the dual-rate token bucket
// policer.  This value represents the rate at which tokens
// are added to the secondary bucket.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/pir"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) Pir() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pir"},
			map[string]interface{}{},
			n,
		),
	}
}

// Pir (leaf): Peak information rate for the dual-rate token bucket
// policer.  This value represents the rate at which tokens
// are added to the secondary bucket.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/pir"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) Pir() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pir"},
			map[string]interface{}{},
			n,
		),
	}
}

// PirPct (leaf): Peak information rate for the dual-rate token bucket
// policer. This value represents the rate at which tokens
// are added to the secondary bucket. The value is expressed
// as a percentage of the total bandwidth available in the
// context in which the scheduler is instantiated.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/pir-pct"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) PirPct() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pir-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// PirPct (leaf): Peak information rate for the dual-rate token bucket
// policer. This value represents the rate at which tokens
// are added to the secondary bucket. The value is expressed
// as a percentage of the total bandwidth available in the
// context in which the scheduler is instantiated.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/pir-pct"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) PirPct() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pir-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// PirPctRemaining (leaf): Peak information rate for the dual-rate token
// bucket policer. This value represents the rate at which
// tokens are added to the secondary bucket. It is expressed
// as a percentage of the remaining bandwidth within the
// context the scheduler is instantiated.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/pir-pct-remaining"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) PirPctRemaining() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pir-pct-remaining"},
			map[string]interface{}{},
			n,
		),
	}
}

// PirPctRemaining (leaf): Peak information rate for the dual-rate token
// bucket policer. This value represents the rate at which
// tokens are added to the secondary bucket. It is expressed
// as a percentage of the remaining bandwidth within the
// context the scheduler is instantiated.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/pir-pct-remaining"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) PirPctRemaining() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pir-pct-remaining"},
			map[string]interface{}{},
			n,
		),
	}
}

// ViolateAction (container): Action to be applied to the packets that are scheduled
// above the PIR of the policer. Packets that do not receive
// a token from either bucket have all specified actions
// applied to them.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "violate-action"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) ViolateAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath{
		NodePath: ygot.NewNodePath(
			[]string{"violate-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// ViolateAction (container): Action to be applied to the packets that are scheduled
// above the PIR of the policer. Packets that do not receive
// a token from either bucket have all specified actions
// applied to them.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "violate-action"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) ViolateAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"violate-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPathAny struct {
	*ygot.NodePath
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dot1p"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath) SetDot1P() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dot1p"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny) SetDot1P() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dscp"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath) SetDscp() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dscp"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny) SetDscp() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-mpls-tc"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-mpls-tc"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/drop YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/drop YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPathAny struct {
	*ygot.NodePath
}

// Drop (leaf): If set to true, packets within this context are dropped.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/drop"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath) Drop() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "drop"},
			map[string]interface{}{},
			n,
		),
	}
}

// Drop (leaf): If set to true, packets within this context are dropped.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/drop"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny) Drop() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "drop"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dot1p"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath) SetDot1P() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dot1p"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny) SetDot1P() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dscp"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath) SetDscp() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dscp"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny) SetDscp() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-mpls-tc"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-mpls-tc"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/drop YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/drop YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPathAny struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPath struct {
	*ygot.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPathAny struct {
	*ygot.NodePath
}

// Drop (leaf): If set to true, packets within this context are dropped.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/drop"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath) Drop() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "drop"},
			map[string]interface{}{},
			n,
		),
	}
}

// Drop (leaf): If set to true, packets within this context are dropped.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/drop"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny) Drop() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "drop"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dot1p"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath) SetDot1P() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dot1p"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny) SetDot1P() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dscp"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath) SetDscp() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dscp"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny) SetDscp() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-mpls-tc"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPath {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-mpls-tc"
// Path from root: "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPathAny {
	return &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicyPath represents the /openconfig-routing-policy/routing-policy YANG schema element.
type RoutingPolicyPath struct {
	*ygot.NodePath
}

// RoutingPolicyPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy YANG schema element.
type RoutingPolicyPathAny struct {
	*ygot.NodePath
}

// DefinedSets (container): Predefined sets of attributes used in policy match
// statements
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "defined-sets"
// Path from root: "/routing-policy/defined-sets"
func (n *RoutingPolicyPath) DefinedSets() *RoutingPolicy_DefinedSetsPath {
	return &RoutingPolicy_DefinedSetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"defined-sets"},
			map[string]interface{}{},
			n,
		),
	}
}

// DefinedSets (container): Predefined sets of attributes used in policy match
// statements
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "defined-sets"
// Path from root: "/routing-policy/defined-sets"
func (n *RoutingPolicyPathAny) DefinedSets() *RoutingPolicy_DefinedSetsPathAny {
	return &RoutingPolicy_DefinedSetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"defined-sets"},
			map[string]interface{}{},
			n,
		),
	}
}

// PolicyDefinitionAny (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "policy-definitions/policy-definition"
// Path from root: "/routing-policy/policy-definitions/policy-definition"
// Name (wildcarded): string
func (n *RoutingPolicyPath) PolicyDefinitionAny() *RoutingPolicy_PolicyDefinitionPathAny {
	return &RoutingPolicy_PolicyDefinitionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policy-definitions", "policy-definition"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// PolicyDefinitionAny (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "policy-definitions/policy-definition"
// Path from root: "/routing-policy/policy-definitions/policy-definition"
// Name (wildcarded): string
func (n *RoutingPolicyPathAny) PolicyDefinitionAny() *RoutingPolicy_PolicyDefinitionPathAny {
	return &RoutingPolicy_PolicyDefinitionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policy-definitions", "policy-definition"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// PolicyDefinition (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "policy-definitions/policy-definition"
// Path from root: "/routing-policy/policy-definitions/policy-definition"
// Name: string
func (n *RoutingPolicyPath) PolicyDefinition(Name string) *RoutingPolicy_PolicyDefinitionPath {
	return &RoutingPolicy_PolicyDefinitionPath{
		NodePath: ygot.NewNodePath(
			[]string{"policy-definitions", "policy-definition"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// PolicyDefinition (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "policy-definitions/policy-definition"
// Path from root: "/routing-policy/policy-definitions/policy-definition"
// Name: string
func (n *RoutingPolicyPathAny) PolicyDefinition(Name string) *RoutingPolicy_PolicyDefinitionPathAny {
	return &RoutingPolicy_PolicyDefinitionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policy-definitions", "policy-definition"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// RoutingPolicy_DefinedSetsPath represents the /openconfig-routing-policy/routing-policy/defined-sets YANG schema element.
type RoutingPolicy_DefinedSetsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSetsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets YANG schema element.
type RoutingPolicy_DefinedSetsPathAny struct {
	*ygot.NodePath
}

// BgpDefinedSets (container): BGP-related set definitions for policy match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "bgp-defined-sets"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets"
func (n *RoutingPolicy_DefinedSetsPath) BgpDefinedSets() *RoutingPolicy_DefinedSets_BgpDefinedSetsPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-defined-sets"},
			map[string]interface{}{},
			n,
		),
	}
}

// BgpDefinedSets (container): BGP-related set definitions for policy match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "bgp-defined-sets"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets"
func (n *RoutingPolicy_DefinedSetsPathAny) BgpDefinedSets() *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-defined-sets"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborSetAny (list): List of defined neighbor sets for use in policies.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "neighbor-sets/neighbor-set"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
// Name (wildcarded): string
func (n *RoutingPolicy_DefinedSetsPath) NeighborSetAny() *RoutingPolicy_DefinedSets_NeighborSetPathAny {
	return &RoutingPolicy_DefinedSets_NeighborSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbor-sets", "neighbor-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// NeighborSetAny (list): List of defined neighbor sets for use in policies.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "neighbor-sets/neighbor-set"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
// Name (wildcarded): string
func (n *RoutingPolicy_DefinedSetsPathAny) NeighborSetAny() *RoutingPolicy_DefinedSets_NeighborSetPathAny {
	return &RoutingPolicy_DefinedSets_NeighborSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbor-sets", "neighbor-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// NeighborSet (list): List of defined neighbor sets for use in policies.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "neighbor-sets/neighbor-set"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
// Name: string
func (n *RoutingPolicy_DefinedSetsPath) NeighborSet(Name string) *RoutingPolicy_DefinedSets_NeighborSetPath {
	return &RoutingPolicy_DefinedSets_NeighborSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbor-sets", "neighbor-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// NeighborSet (list): List of defined neighbor sets for use in policies.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "neighbor-sets/neighbor-set"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
// Name: string
func (n *RoutingPolicy_DefinedSetsPathAny) NeighborSet(Name string) *RoutingPolicy_DefinedSets_NeighborSetPathAny {
	return &RoutingPolicy_DefinedSets_NeighborSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbor-sets", "neighbor-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// PrefixSetAny (list): List of the defined prefix sets
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefix-sets/prefix-set"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set"
// Name (wildcarded): string
func (n *RoutingPolicy_DefinedSetsPath) PrefixSetAny() *RoutingPolicy_DefinedSets_PrefixSetPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-sets", "prefix-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// PrefixSetAny (list): List of the defined prefix sets
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefix-sets/prefix-set"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set"
// Name (wildcarded): string
func (n *RoutingPolicy_DefinedSetsPathAny) PrefixSetAny() *RoutingPolicy_DefinedSets_PrefixSetPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-sets", "prefix-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// PrefixSet (list): List of the defined prefix sets
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefix-sets/prefix-set"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set"
// Name: string
func (n *RoutingPolicy_DefinedSetsPath) PrefixSet(Name string) *RoutingPolicy_DefinedSets_PrefixSetPath {
	return &RoutingPolicy_DefinedSets_PrefixSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-sets", "prefix-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// PrefixSet (list): List of the defined prefix sets
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefix-sets/prefix-set"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set"
// Name: string
func (n *RoutingPolicy_DefinedSetsPathAny) PrefixSet(Name string) *RoutingPolicy_DefinedSets_PrefixSetPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-sets", "prefix-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// TagSetAny (list): List of tag set definitions.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "tag-sets/tag-set"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set"
// Name (wildcarded): string
func (n *RoutingPolicy_DefinedSetsPath) TagSetAny() *RoutingPolicy_DefinedSets_TagSetPathAny {
	return &RoutingPolicy_DefinedSets_TagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tag-sets", "tag-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// TagSetAny (list): List of tag set definitions.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "tag-sets/tag-set"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set"
// Name (wildcarded): string
func (n *RoutingPolicy_DefinedSetsPathAny) TagSetAny() *RoutingPolicy_DefinedSets_TagSetPathAny {
	return &RoutingPolicy_DefinedSets_TagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tag-sets", "tag-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// TagSet (list): List of tag set definitions.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "tag-sets/tag-set"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set"
// Name: string
func (n *RoutingPolicy_DefinedSetsPath) TagSet(Name string) *RoutingPolicy_DefinedSets_TagSetPath {
	return &RoutingPolicy_DefinedSets_TagSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"tag-sets", "tag-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// TagSet (list): List of tag set definitions.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "tag-sets/tag-set"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set"
// Name: string
func (n *RoutingPolicy_DefinedSetsPathAny) TagSet(Name string) *RoutingPolicy_DefinedSets_TagSetPathAny {
	return &RoutingPolicy_DefinedSets_TagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tag-sets", "tag-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_BgpDefinedSetsPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSetsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny struct {
	*ygot.NodePath
}

// AsPathSetAny (list): List of defined AS path sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "as-path-sets/as-path-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
// AsPathSetName (wildcarded): string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) AsPathSetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"as-path-sets", "as-path-set"},
			map[string]interface{}{"as-path-set-name": "*"},
			n,
		),
	}
}

// AsPathSetAny (list): List of defined AS path sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "as-path-sets/as-path-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
// AsPathSetName (wildcarded): string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) AsPathSetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"as-path-sets", "as-path-set"},
			map[string]interface{}{"as-path-set-name": "*"},
			n,
		),
	}
}

// AsPathSet (list): List of defined AS path sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "as-path-sets/as-path-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
// AsPathSetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) AsPathSet(AsPathSetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"as-path-sets", "as-path-set"},
			map[string]interface{}{"as-path-set-name": AsPathSetName},
			n,
		),
	}
}

// AsPathSet (list): List of defined AS path sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "as-path-sets/as-path-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
// AsPathSetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) AsPathSet(AsPathSetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"as-path-sets", "as-path-set"},
			map[string]interface{}{"as-path-set-name": AsPathSetName},
			n,
		),
	}
}

// CommunitySetAny (list): List of defined BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "community-sets/community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
// CommunitySetName (wildcarded): string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) CommunitySetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"community-sets", "community-set"},
			map[string]interface{}{"community-set-name": "*"},
			n,
		),
	}
}

// CommunitySetAny (list): List of defined BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "community-sets/community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
// CommunitySetName (wildcarded): string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) CommunitySetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"community-sets", "community-set"},
			map[string]interface{}{"community-set-name": "*"},
			n,
		),
	}
}

// CommunitySet (list): List of defined BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "community-sets/community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
// CommunitySetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) CommunitySet(CommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath{
		NodePath: ygot.NewNodePath(
			[]string{"community-sets", "community-set"},
			map[string]interface{}{"community-set-name": CommunitySetName},
			n,
		),
	}
}

// CommunitySet (list): List of defined BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "community-sets/community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
// CommunitySetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) CommunitySet(CommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"community-sets", "community-set"},
			map[string]interface{}{"community-set-name": CommunitySetName},
			n,
		),
	}
}

// ExtCommunitySetAny (list): List of defined extended BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "ext-community-sets/ext-community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
// ExtCommunitySetName (wildcarded): string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) ExtCommunitySetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ext-community-sets", "ext-community-set"},
			map[string]interface{}{"ext-community-set-name": "*"},
			n,
		),
	}
}

// ExtCommunitySetAny (list): List of defined extended BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "ext-community-sets/ext-community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
// ExtCommunitySetName (wildcarded): string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) ExtCommunitySetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ext-community-sets", "ext-community-set"},
			map[string]interface{}{"ext-community-set-name": "*"},
			n,
		),
	}
}

// ExtCommunitySet (list): List of defined extended BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "ext-community-sets/ext-community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
// ExtCommunitySetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) ExtCommunitySet(ExtCommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath{
		NodePath: ygot.NewNodePath(
			[]string{"ext-community-sets", "ext-community-set"},
			map[string]interface{}{"ext-community-set-name": ExtCommunitySetName},
			n,
		),
	}
}

// ExtCommunitySet (list): List of defined extended BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "ext-community-sets/ext-community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
// ExtCommunitySetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) ExtCommunitySet(ExtCommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ext-community-sets", "ext-community-set"},
			map[string]interface{}{"ext-community-set-name": ExtCommunitySetName},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny struct {
	*ygot.NodePath
}

// AsPathSetMember (leaf): AS path expression -- list of ASes in the set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/as-path-set-member"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath) AsPathSetMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "as-path-set-member"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathSetMember (leaf): AS path expression -- list of ASes in the set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/as-path-set-member"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny) AsPathSetMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "as-path-set-member"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathSetName (leaf): name of the AS path set -- this is used to reference
// the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/as-path-set-name"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath) AsPathSetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "as-path-set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathSetName (leaf): name of the AS path set -- this is used to reference
// the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/as-path-set-name"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny) AsPathSetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "as-path-set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/match-set-options YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/match-set-options YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// CommunityMember (leaf): members of the community set.
// For an ADD operation these are the communities that will be added;
// the regexp type is not valid in this operation.
// For REMOVE or REPLACE operations then matching communities will
// be removed unless match-set-options is INVERT which will
// reverse this to mean that anything that does not match will be
// removed.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/community-member"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath) CommunityMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "community-member"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunityMember (leaf): members of the community set.
// For an ADD operation these are the communities that will be added;
// the regexp type is not valid in this operation.
// For REMOVE or REPLACE operations then matching communities will
// be removed unless match-set-options is INVERT which will
// reverse this to mean that anything that does not match will be
// removed.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/community-member"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny) CommunityMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "community-member"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunitySetName (leaf): name / label of the community set -- this is used to
// reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/community-set-name"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath) CommunitySetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "community-set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunitySetName (leaf): name / label of the community set -- this is used to
// reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/community-set-name"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny) CommunitySetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "community-set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath) MatchSetOptions() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny) MatchSetOptions() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/match-set-options YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/match-set-options YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// ExtCommunityMember (leaf): members of the extended community set
// For an ADD operation these are the communities that will be added;
// the regexp type is not valid in this operation.
// For REMOVE or REPLACE operations then matching communities will
// be removed unless match-set-options is INVERT which will
// reverse this to mean that anything that does not match will be
// removed.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/ext-community-member"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath) ExtCommunityMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ext-community-member"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunityMember (leaf): members of the extended community set
// For an ADD operation these are the communities that will be added;
// the regexp type is not valid in this operation.
// For REMOVE or REPLACE operations then matching communities will
// be removed unless match-set-options is INVERT which will
// reverse this to mean that anything that does not match will be
// removed.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/ext-community-member"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny) ExtCommunityMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ext-community-member"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunitySetName (leaf): name / label of the extended community set -- this is
// used to reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/ext-community-set-name"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath) ExtCommunitySetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ext-community-set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunitySetName (leaf): name / label of the extended community set -- this is
// used to reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/ext-community-set-name"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny) ExtCommunitySetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ext-community-set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath) MatchSetOptions() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny) MatchSetOptions() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_NeighborSetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSet_AddressPath represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/address YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet_AddressPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/address YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSet_NamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet_NamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSet_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet_NamePathAny struct {
	*ygot.NodePath
}

// Address (leaf): List of IP addresses in the neighbor set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/address"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/address"
func (n *RoutingPolicy_DefinedSets_NeighborSetPath) Address() *RoutingPolicy_DefinedSets_NeighborSet_AddressPath {
	return &RoutingPolicy_DefinedSets_NeighborSet_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): List of IP addresses in the neighbor set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/address"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/address"
func (n *RoutingPolicy_DefinedSets_NeighborSetPathAny) Address() *RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny {
	return &RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name / label of the neighbor set -- this is used to
// reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/name"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/name"
func (n *RoutingPolicy_DefinedSets_NeighborSetPath) Name() *RoutingPolicy_DefinedSets_NeighborSet_NamePath {
	return &RoutingPolicy_DefinedSets_NeighborSet_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name / label of the neighbor set -- this is used to
// reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/name"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/name"
func (n *RoutingPolicy_DefinedSets_NeighborSetPathAny) Name() *RoutingPolicy_DefinedSets_NeighborSet_NamePathAny {
	return &RoutingPolicy_DefinedSets_NeighborSet_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_PrefixSetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_ModePath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/state/mode YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_ModePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_ModePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/state/mode YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_ModePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_NamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_NamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_NamePathAny struct {
	*ygot.NodePath
}

// Mode (leaf): Indicates the mode of the prefix set, in terms of which
// address families (IPv4, IPv6, or both) are present.  The
// mode provides a hint, but the device must validate that all
// prefixes are of the indicated type, and is expected to
// reject the configuration if there is a discrepancy.  The
// MIXED mode may not be supported on devices that require
// prefix sets to be of only one address family.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/mode"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/state/mode"
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) Mode() *RoutingPolicy_DefinedSets_PrefixSet_ModePath {
	return &RoutingPolicy_DefinedSets_PrefixSet_ModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): Indicates the mode of the prefix set, in terms of which
// address families (IPv4, IPv6, or both) are present.  The
// mode provides a hint, but the device must validate that all
// prefixes are of the indicated type, and is expected to
// reject the configuration if there is a discrepancy.  The
// MIXED mode may not be supported on devices that require
// prefix sets to be of only one address family.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/mode"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/state/mode"
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) Mode() *RoutingPolicy_DefinedSets_PrefixSet_ModePathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name / label of the prefix set -- this is used to
// reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/name"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/state/name"
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) Name() *RoutingPolicy_DefinedSets_PrefixSet_NamePath {
	return &RoutingPolicy_DefinedSets_PrefixSet_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name / label of the prefix set -- this is used to
// reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/name"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/state/name"
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) Name() *RoutingPolicy_DefinedSets_PrefixSet_NamePathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixAny (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix (wildcarded): string
// MasklengthRange (wildcarded): string
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) PrefixAny() *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": "*", "masklength-range": "*"},
			n,
		),
	}
}

// PrefixAny (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix (wildcarded): string
// MasklengthRange (wildcarded): string
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) PrefixAny() *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": "*", "masklength-range": "*"},
			n,
		),
	}
}

// PrefixAnyMasklengthRange (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix: string
// MasklengthRange (wildcarded): string
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) PrefixAnyMasklengthRange(IpPrefix string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": IpPrefix, "masklength-range": "*"},
			n,
		),
	}
}

// PrefixAnyMasklengthRange (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix: string
// MasklengthRange (wildcarded): string
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) PrefixAnyMasklengthRange(IpPrefix string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": IpPrefix, "masklength-range": "*"},
			n,
		),
	}
}

// PrefixAnyIpPrefix (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix (wildcarded): string
// MasklengthRange: string
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) PrefixAnyIpPrefix(MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": "*", "masklength-range": MasklengthRange},
			n,
		),
	}
}

// PrefixAnyIpPrefix (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix (wildcarded): string
// MasklengthRange: string
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) PrefixAnyIpPrefix(MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": "*", "masklength-range": MasklengthRange},
			n,
		),
	}
}

// Prefix (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix: string
// MasklengthRange: string
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) Prefix(IpPrefix string, MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPath {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": IpPrefix, "masklength-range": MasklengthRange},
			n,
		),
	}
}

// Prefix (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix: string
// MasklengthRange: string
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) Prefix(IpPrefix string, MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": IpPrefix, "masklength-range": MasklengthRange},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_PrefixSet_PrefixPath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_PrefixPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/ip-prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/ip-prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/masklength-range YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/masklength-range YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny struct {
	*ygot.NodePath
}

// IpPrefix (leaf): The prefix member in CIDR notation -- while the
// prefix may be either IPv4 or IPv6, most
// implementations require all members of the prefix set
// to be the same address family.  Mixing address types in
// the same prefix set is likely to cause an error.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/ip-prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/ip-prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPath) IpPrefix() *RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath {
	return &RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpPrefix (leaf): The prefix member in CIDR notation -- while the
// prefix may be either IPv4 or IPv6, most
// implementations require all members of the prefix set
// to be the same address family.  Mixing address types in
// the same prefix set is likely to cause an error.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/ip-prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/ip-prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny) IpPrefix() *RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// MasklengthRange (leaf): Defines a range for the masklength, or 'exact' if
// the prefix has an exact length.
//
// Example: 10.3.192.0/21 through 10.3.192.0/24 would be
// expressed as prefix: 10.3.192.0/21,
// masklength-range: 21..24.
//
// Example: 10.3.192.0/21 would be expressed as
// prefix: 10.3.192.0/21,
// masklength-range: exact
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/masklength-range"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/masklength-range"
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPath) MasklengthRange() *RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath {
	return &RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "masklength-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// MasklengthRange (leaf): Defines a range for the masklength, or 'exact' if
// the prefix has an exact length.
//
// Example: 10.3.192.0/21 through 10.3.192.0/24 would be
// expressed as prefix: 10.3.192.0/21,
// masklength-range: 21..24.
//
// Example: 10.3.192.0/21 would be expressed as
// prefix: 10.3.192.0/21,
// masklength-range: exact
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/masklength-range"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/masklength-range"
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny) MasklengthRange() *RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "masklength-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_TagSetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set YANG schema element.
type RoutingPolicy_DefinedSets_TagSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_TagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set YANG schema element.
type RoutingPolicy_DefinedSets_TagSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_TagSet_NamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_TagSet_NamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_TagSet_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_TagSet_NamePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_TagSet_TagValuePath represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/state/tag-value YANG schema element.
type RoutingPolicy_DefinedSets_TagSet_TagValuePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_TagSet_TagValuePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/state/tag-value YANG schema element.
type RoutingPolicy_DefinedSets_TagSet_TagValuePathAny struct {
	*ygot.NodePath
}

// Name (leaf): name / label of the tag set -- this is used to reference
// the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/name"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set/state/name"
func (n *RoutingPolicy_DefinedSets_TagSetPath) Name() *RoutingPolicy_DefinedSets_TagSet_NamePath {
	return &RoutingPolicy_DefinedSets_TagSet_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name / label of the tag set -- this is used to reference
// the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/name"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set/state/name"
func (n *RoutingPolicy_DefinedSets_TagSetPathAny) Name() *RoutingPolicy_DefinedSets_TagSet_NamePathAny {
	return &RoutingPolicy_DefinedSets_TagSet_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// TagValue (leaf): Value of the tag set member
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/tag-value"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set/state/tag-value"
func (n *RoutingPolicy_DefinedSets_TagSetPath) TagValue() *RoutingPolicy_DefinedSets_TagSet_TagValuePath {
	return &RoutingPolicy_DefinedSets_TagSet_TagValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tag-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// TagValue (leaf): Value of the tag set member
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/tag-value"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set/state/tag-value"
func (n *RoutingPolicy_DefinedSets_TagSetPathAny) TagValue() *RoutingPolicy_DefinedSets_TagSet_TagValuePathAny {
	return &RoutingPolicy_DefinedSets_TagSet_TagValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tag-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinitionPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition YANG schema element.
type RoutingPolicy_PolicyDefinitionPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinitionPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition YANG schema element.
type RoutingPolicy_PolicyDefinitionPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_NamePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/state/name YANG schema element.
type RoutingPolicy_PolicyDefinition_NamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/state/name YANG schema element.
type RoutingPolicy_PolicyDefinition_NamePathAny struct {
	*ygot.NodePath
}

// Name (leaf): Name of the top-level policy definition -- this name
// is used in references to the current policy
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/name"
// Path from root: "/routing-policy/policy-definitions/policy-definition/state/name"
func (n *RoutingPolicy_PolicyDefinitionPath) Name() *RoutingPolicy_PolicyDefinition_NamePath {
	return &RoutingPolicy_PolicyDefinition_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Name of the top-level policy definition -- this name
// is used in references to the current policy
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/name"
// Path from root: "/routing-policy/policy-definitions/policy-definition/state/name"
func (n *RoutingPolicy_PolicyDefinitionPathAny) Name() *RoutingPolicy_PolicyDefinition_NamePathAny {
	return &RoutingPolicy_PolicyDefinition_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// StatementAny (list): Policy statements group conditions and actions
// within a policy definition.  They are evaluated in
// the order specified (see the description of policy
// evaluation at the top of this module.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "statements/statement"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement"
// Name (wildcarded): string
func (n *RoutingPolicy_PolicyDefinitionPath) StatementAny() *RoutingPolicy_PolicyDefinition_StatementPathAny {
	return &RoutingPolicy_PolicyDefinition_StatementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"statements", "statement"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// StatementAny (list): Policy statements group conditions and actions
// within a policy definition.  They are evaluated in
// the order specified (see the description of policy
// evaluation at the top of this module.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "statements/statement"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement"
// Name (wildcarded): string
func (n *RoutingPolicy_PolicyDefinitionPathAny) StatementAny() *RoutingPolicy_PolicyDefinition_StatementPathAny {
	return &RoutingPolicy_PolicyDefinition_StatementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"statements", "statement"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Statement (list): Policy statements group conditions and actions
// within a policy definition.  They are evaluated in
// the order specified (see the description of policy
// evaluation at the top of this module.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "statements/statement"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement"
// Name: string
func (n *RoutingPolicy_PolicyDefinitionPath) Statement(Name string) *RoutingPolicy_PolicyDefinition_StatementPath {
	return &RoutingPolicy_PolicyDefinition_StatementPath{
		NodePath: ygot.NewNodePath(
			[]string{"statements", "statement"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Statement (list): Policy statements group conditions and actions
// within a policy definition.  They are evaluated in
// the order specified (see the description of policy
// evaluation at the top of this module.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "statements/statement"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement"
// Name: string
func (n *RoutingPolicy_PolicyDefinitionPathAny) Statement(Name string) *RoutingPolicy_PolicyDefinition_StatementPathAny {
	return &RoutingPolicy_PolicyDefinition_StatementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"statements", "statement"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_StatementPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement YANG schema element.
type RoutingPolicy_PolicyDefinition_StatementPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_StatementPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement YANG schema element.
type RoutingPolicy_PolicyDefinition_StatementPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_NamePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/state/name YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_NamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/state/name YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_NamePathAny struct {
	*ygot.NodePath
}

// Actions (container): Top-level container for policy action statements
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "actions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions"
func (n *RoutingPolicy_PolicyDefinition_StatementPath) Actions() *RoutingPolicy_PolicyDefinition_Statement_ActionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_ActionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Actions (container): Top-level container for policy action statements
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "actions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions"
func (n *RoutingPolicy_PolicyDefinition_StatementPathAny) Actions() *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Conditions (container): Condition statements for the current policy statement
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "conditions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions"
func (n *RoutingPolicy_PolicyDefinition_StatementPath) Conditions() *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_ConditionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"conditions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Conditions (container): Condition statements for the current policy statement
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "conditions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions"
func (n *RoutingPolicy_PolicyDefinition_StatementPathAny) Conditions() *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"conditions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name of the policy statement
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/name"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/state/name"
func (n *RoutingPolicy_PolicyDefinition_StatementPath) Name() *RoutingPolicy_PolicyDefinition_Statement_NamePath {
	return &RoutingPolicy_PolicyDefinition_Statement_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name of the policy statement
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/name"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/state/name"
func (n *RoutingPolicy_PolicyDefinition_StatementPathAny) Name() *RoutingPolicy_PolicyDefinition_Statement_NamePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_ActionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ActionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/state/policy-result YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/state/policy-result YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny struct {
	*ygot.NodePath
}

// BgpActions (container): Top-level container for BGP-specific actions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "bgp-actions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) BgpActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// BgpActions (container): Top-level container for BGP-specific actions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "bgp-actions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) BgpActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// PolicyResult (leaf): Select the final disposition for the route, either
// accept or reject.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/policy-result"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/state/policy-result"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) PolicyResult() *RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "policy-result"},
			map[string]interface{}{},
			n,
		),
	}
}

// PolicyResult (leaf): Select the final disposition for the route, either
// accept or reject.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/policy-result"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/state/policy-result"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) PolicyResult() *RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "policy-result"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetTag (container): Policy actions associated with setting tags for a particular
// route. A tag is an abstract entity which can be mapped to underlying
// protocol attributes where applicable.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-tag"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) SetTag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath{
		NodePath: ygot.NewNodePath(
			[]string{"set-tag"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetTag (container): Policy actions associated with setting tags for a particular
// route. A tag is an abstract entity which can be mapped to underlying
// protocol attributes where applicable.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-tag"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) SetTag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"set-tag"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-local-pref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-local-pref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-med YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-med YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-next-hop YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-next-hop YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-route-origin YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-route-origin YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny struct {
	*ygot.NodePath
}

// SetAsPathPrepend (container): Action to prepend the specified AS number to the AS-path a
// specified number of times
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-as-path-prepend"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetAsPathPrepend() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath{
		NodePath: ygot.NewNodePath(
			[]string{"set-as-path-prepend"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetAsPathPrepend (container): Action to prepend the specified AS number to the AS-path a
// specified number of times
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-as-path-prepend"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetAsPathPrepend() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"set-as-path-prepend"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetCommunity (container): Action to set the community attributes of the route, along
// with options to modify how the community is modified.
// Communities may be set using an inline list OR
// reference to an existing defined set (not both).
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-community"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath{
		NodePath: ygot.NewNodePath(
			[]string{"set-community"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetCommunity (container): Action to set the community attributes of the route, along
// with options to modify how the community is modified.
// Communities may be set using an inline list OR
// reference to an existing defined set (not both).
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-community"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"set-community"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetExtCommunity (container): Action to set the extended community attributes of the
// route, along with options to modify how the community is
// modified. Extended communities may be set using an inline
// list OR a reference to an existing defined set (but not
// both).
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-ext-community"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetExtCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath{
		NodePath: ygot.NewNodePath(
			[]string{"set-ext-community"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetExtCommunity (container): Action to set the extended community attributes of the
// route, along with options to modify how the community is
// modified. Extended communities may be set using an inline
// list OR a reference to an existing defined set (but not
// both).
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-ext-community"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetExtCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"set-ext-community"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetLocalPref (leaf): set the local pref attribute on the route
// update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/set-local-pref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-local-pref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetLocalPref() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-local-pref"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetLocalPref (leaf): set the local pref attribute on the route
// update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/set-local-pref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-local-pref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetLocalPref() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-local-pref"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMed (leaf): set the med metric attribute in the route
// update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/set-med"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-med"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetMed() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-med"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMed (leaf): set the med metric attribute in the route
// update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/set-med"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-med"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetMed() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-med"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetNextHop (leaf): set the next-hop attribute in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/set-next-hop"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-next-hop"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetNextHop() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetNextHop (leaf): set the next-hop attribute in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/set-next-hop"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-next-hop"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetNextHop() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetRouteOrigin (leaf): set the origin attribute to the specified
// value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/set-route-origin"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-route-origin"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetRouteOrigin() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-route-origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetRouteOrigin (leaf): set the origin attribute to the specified
// value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/set-route-origin"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-route-origin"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetRouteOrigin() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-route-origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/asn YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/asn YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/repeat-n YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/repeat-n YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny struct {
	*ygot.NodePath
}

// Asn (leaf): The AS number to prepend to the AS path. If this leaf is
// not specified and repeat-n is set, then the local AS
// number will be used for prepending.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/asn"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/asn"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath) Asn() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "asn"},
			map[string]interface{}{},
			n,
		),
	}
}

// Asn (leaf): The AS number to prepend to the AS path. If this leaf is
// not specified and repeat-n is set, then the local AS
// number will be used for prepending.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/asn"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/asn"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny) Asn() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "asn"},
			map[string]interface{}{},
			n,
		),
	}
}

// RepeatN (leaf): Number of times to prepend the value specified in the asn
// leaf to the AS path. If no value is specified by the asn
// leaf, the local AS number of the system is used. The value
// should be between 1 and the maximum supported by the
// implementation.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/repeat-n"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/repeat-n"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath) RepeatN() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "repeat-n"},
			map[string]interface{}{},
			n,
		),
	}
}

// RepeatN (leaf): Number of times to prepend the value specified in the asn
// leaf to the AS path. If no value is specified by the asn
// leaf, the local AS number of the system is used. The value
// should be between 1 and the maximum supported by the
// implementation.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/repeat-n"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/repeat-n"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny) RepeatN() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "repeat-n"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/method YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/method YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny struct {
	*ygot.NodePath
}

// Inline (container): Set the community values for the action inline with
// a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Inline (container): Set the community values for the action inline with
// a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Method (leaf): Indicates the method used to specify the extended
// communities for the set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/method"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Method() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "method"},
			map[string]interface{}{},
			n,
		),
	}
}

// Method (leaf): Indicates the method used to specify the extended
// communities for the set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/method"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Method() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "method"},
			map[string]interface{}{},
			n,
		),
	}
}

// Options (leaf): Options for modifying the community attribute with
// the specified values.  These options apply to both
// methods of setting the community attribute.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Options() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "options"},
			map[string]interface{}{},
			n,
		),
	}
}

// Options (leaf): Options for modifying the community attribute with
// the specified values.  These options apply to both
// methods of setting the community attribute.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Options() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "options"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): Provide a reference to a defined community set for the
// set-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): Provide a reference to a defined community set for the
// set-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/state/communities YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/state/communities YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny struct {
	*ygot.NodePath
}

// Communities (leaf): Set the community values for the update inline with
// a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/communities"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/state/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath) Communities() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "communities"},
			map[string]interface{}{},
			n,
		),
	}
}

// Communities (leaf): Set the community values for the update inline with
// a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/communities"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/state/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny) Communities() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "communities"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/state/community-set-ref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/state/community-set-ref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny struct {
	*ygot.NodePath
}

// CommunitySetRef (leaf): References a defined community set by name
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/community-set-ref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/state/community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath) CommunitySetRef() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "community-set-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunitySetRef (leaf): References a defined community set by name
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/community-set-ref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/state/community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny) CommunitySetRef() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "community-set-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/method YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/method YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny struct {
	*ygot.NodePath
}

// Inline (container): Set the extended community values for the action inline with
// a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Inline (container): Set the extended community values for the action inline with
// a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Method (leaf): Indicates the method used to specify the extended
// communities for the set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/method"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Method() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "method"},
			map[string]interface{}{},
			n,
		),
	}
}

// Method (leaf): Indicates the method used to specify the extended
// communities for the set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/method"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Method() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "method"},
			map[string]interface{}{},
			n,
		),
	}
}

// Options (leaf): Options for modifying the community attribute with
// the specified values.  These options apply to both
// methods of setting the community attribute.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Options() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "options"},
			map[string]interface{}{},
			n,
		),
	}
}

// Options (leaf): Options for modifying the community attribute with
// the specified values.  These options apply to both
// methods of setting the community attribute.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/state/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Options() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "options"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): Provide a reference to an extended community set for the
// set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): Provide a reference to an extended community set for the
// set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/state/communities YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/state/communities YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny struct {
	*ygot.NodePath
}

// Communities (leaf): Set the extended community values for the update inline
// with a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/communities"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/state/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath) Communities() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "communities"},
			map[string]interface{}{},
			n,
		),
	}
}

// Communities (leaf): Set the extended community values for the update inline
// with a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/communities"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/state/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny) Communities() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "communities"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/state/ext-community-set-ref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/state/ext-community-set-ref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny struct {
	*ygot.NodePath
}

// ExtCommunitySetRef (leaf): References a defined extended community set by
// name
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/ext-community-set-ref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/state/ext-community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath) ExtCommunitySetRef() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ext-community-set-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunitySetRef (leaf): References a defined extended community set by
// name
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/ext-community-set-ref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/state/ext-community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny) ExtCommunitySetRef() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ext-community-set-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/state/mode YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/state/mode YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny struct {
	*ygot.NodePath
}

// Inline (container): The tags specified in this container are set on a route using
// the values directly. It is applicable when the mode of application
// is explicitly specified as INLINE.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Inline (container): The tags specified in this container are set on a route using
// the values directly. It is applicable when the mode of application
// is explicitly specified as INLINE.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): This leaf controls the source of the tags that are set as a result
// of the action. In the case that the INLINE value is specified, the
// list of tags specified within the action is applied to matching prefixes.
// In the case that the REFERENCE value is specified, a pre-defined set of
// tags is utilised.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/mode"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/state/mode"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) Mode() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): This leaf controls the source of the tags that are set as a result
// of the action. In the case that the INLINE value is specified, the
// list of tags specified within the action is applied to matching prefixes.
// In the case that the REFERENCE value is specified, a pre-defined set of
// tags is utilised.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/mode"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/state/mode"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) Mode() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): This container is applicable when the mode of application is explicitly
// specified to as REFERENCE. The tags set on a route are those that are
// specified within the tag-set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): This container is applicable when the mode of application is explicitly
// specified to as REFERENCE. The tags set on a route are those that are
// specified within the tag-set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/state/tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/state/tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny struct {
	*ygot.NodePath
}

// Tag (leaf): Set one or more tags for prefixes that match the specified condition(s)
// using the specified tag values. When a tag is set it MUST be possible to
// match the value set in subsequent policies on the local device. Where the
// protocol that is carrying the prefix has a tag field (OSPF, and IS-IS in
// particular) the tag MUST be set in the corresponding protocol advertisements
// of the prefix.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/tag"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/state/tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath) Tag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tag"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tag (leaf): Set one or more tags for prefixes that match the specified condition(s)
// using the specified tag values. When a tag is set it MUST be possible to
// match the value set in subsequent policies on the local device. Where the
// protocol that is carrying the prefix has a tag field (OSPF, and IS-IS in
// particular) the tag MUST be set in the corresponding protocol advertisements
// of the prefix.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/tag"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/state/tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny) Tag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tag"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/state/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/state/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny struct {
	*ygot.NodePath
}

// TagSet (leaf): Use the referenced tag-set to set tags on the prefixes that match the
// specified conditions. When a tag is set it MUST be possible to match the
// value set in subsequent policies on the local device. where the protocol that
// is carrying the prefix has a tag field (OSPF, and IS-IS for in particular)
// the tag MUST be set in the corresponding protocol advertisements of the
// prefix.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/state/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// TagSet (leaf): Use the referenced tag-set to set tags on the prefixes that match the
// specified conditions. When a tag is set it MUST be possible to match the
// value set in subsequent policies on the local device. where the protocol that
// is carrying the prefix has a tag field (OSPF, and IS-IS for in particular)
// the tag MUST be set in the corresponding protocol advertisements of the
// prefix.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/state/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_ConditionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ConditionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/call-policy YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/call-policy YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/install-protocol-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/install-protocol-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny struct {
	*ygot.NodePath
}

// BgpConditions (container): Top-level container
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "bgp-conditions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) BgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-conditions"},
			map[string]interface{}{},
			n,
		),
	}
}

// BgpConditions (container): Top-level container
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "bgp-conditions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) BgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-conditions"},
			map[string]interface{}{},
			n,
		),
	}
}

// CallPolicy (leaf): Applies the statements from the specified policy
// definition and then returns control the current
// policy statement. Note that the called policy may
// itself call other policies (subject to
// implementation limitations). This is intended to
// provide a policy 'subroutine' capability.  The
// called policy should contain an explicit or a
// default route disposition that returns an
// effective true (accept-route) or false
// (reject-route), otherwise the behavior may be
// ambiguous and implementation dependent
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/call-policy"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/call-policy"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) CallPolicy() *RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "call-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// CallPolicy (leaf): Applies the statements from the specified policy
// definition and then returns control the current
// policy statement. Note that the called policy may
// itself call other policies (subject to
// implementation limitations). This is intended to
// provide a policy 'subroutine' capability.  The
// called policy should contain an explicit or a
// default route disposition that returns an
// effective true (accept-route) or false
// (reject-route), otherwise the behavior may be
// ambiguous and implementation dependent
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/call-policy"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/call-policy"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) CallPolicy() *RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "call-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// InstallProtocolEq (leaf): Condition to check the protocol / method used to install
// the route into the local routing table
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/install-protocol-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/install-protocol-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) InstallProtocolEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "install-protocol-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// InstallProtocolEq (leaf): Condition to check the protocol / method used to install
// the route into the local routing table
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/install-protocol-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/install-protocol-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) InstallProtocolEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "install-protocol-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchInterface (container): Top-level container for interface match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-interface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"match-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchInterface (container): Top-level container for interface match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-interface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchNeighborSet (container): Match a referenced neighbor set according to the logic
// defined in the match-set-options-leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-neighbor-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"match-neighbor-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchNeighborSet (container): Match a referenced neighbor set according to the logic
// defined in the match-set-options-leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-neighbor-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match-neighbor-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchPrefixSet (container): Match a referenced prefix-set according to the logic
// defined in the match-set-options leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-prefix-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"match-prefix-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchPrefixSet (container): Match a referenced prefix-set according to the logic
// defined in the match-set-options leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-prefix-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match-prefix-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchTagSet (container): Match a referenced tag set according to the logic defined
// in the match-options-set leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"match-tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchTagSet (container): Match a referenced tag set according to the logic defined
// in the match-options-set leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match-tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/afi-safi-in YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/afi-safi-in YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/ext-community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/ext-community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/local-pref-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/local-pref-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/med-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/med-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/next-hop-in YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/next-hop-in YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/origin-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/origin-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/route-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/route-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny struct {
	*ygot.NodePath
}

// AfiSafiIn (leaf): List of address families which the NLRI may be
// within
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/afi-safi-in"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/afi-safi-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) AfiSafiIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "afi-safi-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// AfiSafiIn (leaf): List of address families which the NLRI may be
// within
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/afi-safi-in"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/afi-safi-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) AfiSafiIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "afi-safi-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathLength (container): Value and comparison operations for conditions based on the
// length of the AS path in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "as-path-length"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) AsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"as-path-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathLength (container): Value and comparison operations for conditions based on the
// length of the AS path in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "as-path-length"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) AsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"as-path-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunityCount (container): Value and comparison operations for conditions based on the
// number of communities in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "community-count"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) CommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath{
		NodePath: ygot.NewNodePath(
			[]string{"community-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunityCount (container): Value and comparison operations for conditions based on the
// number of communities in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "community-count"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) CommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"community-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunitySet (leaf): References a defined community set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/community-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) CommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "community-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunitySet (leaf): References a defined community set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/community-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) CommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "community-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunitySet (leaf): References a defined extended community set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/ext-community-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) ExtCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ext-community-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunitySet (leaf): References a defined extended community set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/ext-community-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) ExtCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ext-community-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalPrefEq (leaf): Condition to check if the local pref attribute is equal to
// the specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/local-pref-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/local-pref-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) LocalPrefEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "local-pref-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalPrefEq (leaf): Condition to check if the local pref attribute is equal to
// the specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/local-pref-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/local-pref-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) LocalPrefEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "local-pref-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchAsPathSet (container): Match a referenced as-path set according to the logic
// defined in the match-set-options leaf
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-as-path-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) MatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"match-as-path-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchAsPathSet (container): Match a referenced as-path set according to the logic
// defined in the match-set-options leaf
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-as-path-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) MatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match-as-path-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MedEq (leaf): Condition to check if the received MED value is equal to
// the specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/med-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/med-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) MedEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "med-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// MedEq (leaf): Condition to check if the received MED value is equal to
// the specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/med-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/med-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) MedEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "med-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHopIn (leaf): List of next hop addresses to check for in the route
// update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/next-hop-in"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/next-hop-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) NextHopIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHopIn (leaf): List of next hop addresses to check for in the route
// update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/next-hop-in"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/next-hop-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) NextHopIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginEq (leaf): Condition to check if the route origin is equal to the
// specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/origin-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/origin-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) OriginEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginEq (leaf): Condition to check if the route origin is equal to the
// specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/origin-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/origin-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) OriginEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouteType (leaf): Condition to check the route type in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/route-type"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/route-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) RouteType() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "route-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouteType (leaf): Condition to check the route type in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/route-type"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/state/route-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) RouteType() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "route-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny struct {
	*ygot.NodePath
}

// Operator (leaf): type of comparison to be performed
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/operator"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "operator"},
			map[string]interface{}{},
			n,
		),
	}
}

// Operator (leaf): type of comparison to be performed
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/operator"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "operator"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): value to compare with the community count
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/value"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): value to compare with the community count
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/value"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny struct {
	*ygot.NodePath
}

// Operator (leaf): type of comparison to be performed
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/operator"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "operator"},
			map[string]interface{}{},
			n,
		),
	}
}

// Operator (leaf): type of comparison to be performed
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/operator"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "operator"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): value to compare with the community count
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/value"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): value to compare with the community count
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/value"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// AsPathSet (leaf): References a defined AS path set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/as-path-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath) AsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "as-path-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathSet (leaf): References a defined AS path set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/as-path-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny) AsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "as-path-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/subinterface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/subinterface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/interface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath) Interface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/interface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny) Interface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/subinterface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/subinterface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath) Subinterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/subinterface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/subinterface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny) Subinterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny struct {
	*ygot.NodePath
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborSet (leaf): References a defined neighbor set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/neighbor-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath) NeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborSet (leaf): References a defined neighbor set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/neighbor-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny) NeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny struct {
	*ygot.NodePath
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixSet (leaf): References a defined prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/prefix-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath) PrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixSet (leaf): References a defined prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/prefix-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny) PrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny struct {
	*ygot.NodePath
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// TagSet (leaf): References a defined tag set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// TagSet (leaf): References a defined tag set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemPath represents the /openconfig-system/system YANG schema element.
type SystemPath struct {
	*ygot.NodePath
}

// SystemPathAny represents the wildcard version of the /openconfig-system/system YANG schema element.
type SystemPathAny struct {
	*ygot.NodePath
}

// System_BootTimePath represents the /openconfig-system/system/state/boot-time YANG schema element.
type System_BootTimePath struct {
	*ygot.NodePath
}

// System_BootTimePathAny represents the wildcard version of the /openconfig-system/system/state/boot-time YANG schema element.
type System_BootTimePathAny struct {
	*ygot.NodePath
}

// System_CurrentDatetimePath represents the /openconfig-system/system/state/current-datetime YANG schema element.
type System_CurrentDatetimePath struct {
	*ygot.NodePath
}

// System_CurrentDatetimePathAny represents the wildcard version of the /openconfig-system/system/state/current-datetime YANG schema element.
type System_CurrentDatetimePathAny struct {
	*ygot.NodePath
}

// System_DomainNamePath represents the /openconfig-system/system/state/domain-name YANG schema element.
type System_DomainNamePath struct {
	*ygot.NodePath
}

// System_DomainNamePathAny represents the wildcard version of the /openconfig-system/system/state/domain-name YANG schema element.
type System_DomainNamePathAny struct {
	*ygot.NodePath
}

// System_HostnamePath represents the /openconfig-system/system/state/hostname YANG schema element.
type System_HostnamePath struct {
	*ygot.NodePath
}

// System_HostnamePathAny represents the wildcard version of the /openconfig-system/system/state/hostname YANG schema element.
type System_HostnamePathAny struct {
	*ygot.NodePath
}

// System_LoginBannerPath represents the /openconfig-system/system/state/login-banner YANG schema element.
type System_LoginBannerPath struct {
	*ygot.NodePath
}

// System_LoginBannerPathAny represents the wildcard version of the /openconfig-system/system/state/login-banner YANG schema element.
type System_LoginBannerPathAny struct {
	*ygot.NodePath
}

// System_MotdBannerPath represents the /openconfig-system/system/state/motd-banner YANG schema element.
type System_MotdBannerPath struct {
	*ygot.NodePath
}

// System_MotdBannerPathAny represents the wildcard version of the /openconfig-system/system/state/motd-banner YANG schema element.
type System_MotdBannerPathAny struct {
	*ygot.NodePath
}

// Aaa (container): Top-level container for AAA services
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "aaa"
// Path from root: "/system/aaa"
func (n *SystemPath) Aaa() *System_AaaPath {
	return &System_AaaPath{
		NodePath: ygot.NewNodePath(
			[]string{"aaa"},
			map[string]interface{}{},
			n,
		),
	}
}

// Aaa (container): Top-level container for AAA services
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "aaa"
// Path from root: "/system/aaa"
func (n *SystemPathAny) Aaa() *System_AaaPathAny {
	return &System_AaaPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"aaa"},
			map[string]interface{}{},
			n,
		),
	}
}

// AlarmAny (list): List of alarms, keyed by a unique id
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "alarms/alarm"
// Path from root: "/system/alarms/alarm"
// Id (wildcarded): string
func (n *SystemPath) AlarmAny() *System_AlarmPathAny {
	return &System_AlarmPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"alarms", "alarm"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// AlarmAny (list): List of alarms, keyed by a unique id
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "alarms/alarm"
// Path from root: "/system/alarms/alarm"
// Id (wildcarded): string
func (n *SystemPathAny) AlarmAny() *System_AlarmPathAny {
	return &System_AlarmPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"alarms", "alarm"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// Alarm (list): List of alarms, keyed by a unique id
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "alarms/alarm"
// Path from root: "/system/alarms/alarm"
// Id: string
func (n *SystemPath) Alarm(Id string) *System_AlarmPath {
	return &System_AlarmPath{
		NodePath: ygot.NewNodePath(
			[]string{"alarms", "alarm"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Alarm (list): List of alarms, keyed by a unique id
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "alarms/alarm"
// Path from root: "/system/alarms/alarm"
// Id: string
func (n *SystemPathAny) Alarm(Id string) *System_AlarmPathAny {
	return &System_AlarmPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"alarms", "alarm"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// BootTime (leaf): This timestamp indicates the time that the system was last
// restarted.  The value is the timestamp in nanoseconds relative
// to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/boot-time"
// Path from root: "/system/state/boot-time"
func (n *SystemPath) BootTime() *System_BootTimePath {
	return &System_BootTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "boot-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// BootTime (leaf): This timestamp indicates the time that the system was last
// restarted.  The value is the timestamp in nanoseconds relative
// to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/boot-time"
// Path from root: "/system/state/boot-time"
func (n *SystemPathAny) BootTime() *System_BootTimePathAny {
	return &System_BootTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "boot-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Clock (container): Top-level container for clock configuration data
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "clock"
// Path from root: "/system/clock"
func (n *SystemPath) Clock() *System_ClockPath {
	return &System_ClockPath{
		NodePath: ygot.NewNodePath(
			[]string{"clock"},
			map[string]interface{}{},
			n,
		),
	}
}

// Clock (container): Top-level container for clock configuration data
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "clock"
// Path from root: "/system/clock"
func (n *SystemPathAny) Clock() *System_ClockPathAny {
	return &System_ClockPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"clock"},
			map[string]interface{}{},
			n,
		),
	}
}

// CpuAny (list): List of CPU cores on the system (including logical CPUs
// on hyperthreaded systems), keyed by either a numerical
// index, or the ALL value for an entry representing the
// aggregation across all CPUs.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "cpus/cpu"
// Path from root: "/system/cpus/cpu"
// Index (wildcarded): [E_Cpu_Index_Enum, UnionUint32]
func (n *SystemPath) CpuAny() *System_CpuPathAny {
	return &System_CpuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"cpus", "cpu"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// CpuAny (list): List of CPU cores on the system (including logical CPUs
// on hyperthreaded systems), keyed by either a numerical
// index, or the ALL value for an entry representing the
// aggregation across all CPUs.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "cpus/cpu"
// Path from root: "/system/cpus/cpu"
// Index (wildcarded): [E_Cpu_Index_Enum, UnionUint32]
func (n *SystemPathAny) CpuAny() *System_CpuPathAny {
	return &System_CpuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"cpus", "cpu"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// Cpu (list): List of CPU cores on the system (including logical CPUs
// on hyperthreaded systems), keyed by either a numerical
// index, or the ALL value for an entry representing the
// aggregation across all CPUs.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "cpus/cpu"
// Path from root: "/system/cpus/cpu"
// Index: [E_Cpu_Index_Enum, UnionUint32]
func (n *SystemPath) Cpu(Index System_Cpu_Index_Union) *System_CpuPath {
	return &System_CpuPath{
		NodePath: ygot.NewNodePath(
			[]string{"cpus", "cpu"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Cpu (list): List of CPU cores on the system (including logical CPUs
// on hyperthreaded systems), keyed by either a numerical
// index, or the ALL value for an entry representing the
// aggregation across all CPUs.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "cpus/cpu"
// Path from root: "/system/cpus/cpu"
// Index: [E_Cpu_Index_Enum, UnionUint32]
func (n *SystemPathAny) Cpu(Index System_Cpu_Index_Union) *System_CpuPathAny {
	return &System_CpuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"cpus", "cpu"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// CurrentDatetime (leaf): The current system date and time.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/current-datetime"
// Path from root: "/system/state/current-datetime"
func (n *SystemPath) CurrentDatetime() *System_CurrentDatetimePath {
	return &System_CurrentDatetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-datetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentDatetime (leaf): The current system date and time.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/current-datetime"
// Path from root: "/system/state/current-datetime"
func (n *SystemPathAny) CurrentDatetime() *System_CurrentDatetimePathAny {
	return &System_CurrentDatetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-datetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dns (container): Enclosing container for DNS resolver data
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "dns"
// Path from root: "/system/dns"
func (n *SystemPath) Dns() *System_DnsPath {
	return &System_DnsPath{
		NodePath: ygot.NewNodePath(
			[]string{"dns"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dns (container): Enclosing container for DNS resolver data
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "dns"
// Path from root: "/system/dns"
func (n *SystemPathAny) Dns() *System_DnsPathAny {
	return &System_DnsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"dns"},
			map[string]interface{}{},
			n,
		),
	}
}

// DomainName (leaf): Specifies the domain name used to form fully qualified name
// for unqualified hostnames.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/domain-name"
// Path from root: "/system/state/domain-name"
func (n *SystemPath) DomainName() *System_DomainNamePath {
	return &System_DomainNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "domain-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// DomainName (leaf): Specifies the domain name used to form fully qualified name
// for unqualified hostnames.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/domain-name"
// Path from root: "/system/state/domain-name"
func (n *SystemPathAny) DomainName() *System_DomainNamePathAny {
	return &System_DomainNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "domain-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Hostname (leaf): The hostname of the device -- should be a single domain
// label, without the domain.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/hostname"
// Path from root: "/system/state/hostname"
func (n *SystemPath) Hostname() *System_HostnamePath {
	return &System_HostnamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hostname"},
			map[string]interface{}{},
			n,
		),
	}
}

// Hostname (leaf): The hostname of the device -- should be a single domain
// label, without the domain.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/hostname"
// Path from root: "/system/state/hostname"
func (n *SystemPathAny) Hostname() *System_HostnamePathAny {
	return &System_HostnamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hostname"},
			map[string]interface{}{},
			n,
		),
	}
}

// License (container): Container for license model
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "license"
// Path from root: "/system/license"
func (n *SystemPath) License() *System_LicensePath {
	return &System_LicensePath{
		NodePath: ygot.NewNodePath(
			[]string{"license"},
			map[string]interface{}{},
			n,
		),
	}
}

// License (container): Container for license model
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "license"
// Path from root: "/system/license"
func (n *SystemPathAny) License() *System_LicensePathAny {
	return &System_LicensePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"license"},
			map[string]interface{}{},
			n,
		),
	}
}

// Logging (container): Top-level container for data related to logging / syslog
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "logging"
// Path from root: "/system/logging"
func (n *SystemPath) Logging() *System_LoggingPath {
	return &System_LoggingPath{
		NodePath: ygot.NewNodePath(
			[]string{"logging"},
			map[string]interface{}{},
			n,
		),
	}
}

// Logging (container): Top-level container for data related to logging / syslog
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "logging"
// Path from root: "/system/logging"
func (n *SystemPathAny) Logging() *System_LoggingPathAny {
	return &System_LoggingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logging"},
			map[string]interface{}{},
			n,
		),
	}
}

// LoginBanner (leaf): The console login message displayed before the login prompt,
// i.e., before a user logs into the system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/login-banner"
// Path from root: "/system/state/login-banner"
func (n *SystemPath) LoginBanner() *System_LoginBannerPath {
	return &System_LoginBannerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "login-banner"},
			map[string]interface{}{},
			n,
		),
	}
}

// LoginBanner (leaf): The console login message displayed before the login prompt,
// i.e., before a user logs into the system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/login-banner"
// Path from root: "/system/state/login-banner"
func (n *SystemPathAny) LoginBanner() *System_LoginBannerPathAny {
	return &System_LoginBannerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "login-banner"},
			map[string]interface{}{},
			n,
		),
	}
}

// Memory (container): Top-level container for system memory data
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "memory"
// Path from root: "/system/memory"
func (n *SystemPath) Memory() *System_MemoryPath {
	return &System_MemoryPath{
		NodePath: ygot.NewNodePath(
			[]string{"memory"},
			map[string]interface{}{},
			n,
		),
	}
}

// Memory (container): Top-level container for system memory data
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "memory"
// Path from root: "/system/memory"
func (n *SystemPathAny) Memory() *System_MemoryPathAny {
	return &System_MemoryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"memory"},
			map[string]interface{}{},
			n,
		),
	}
}

// Messages (container): Top-level container for Syslog messages.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "messages"
// Path from root: "/system/messages"
func (n *SystemPath) Messages() *System_MessagesPath {
	return &System_MessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// Messages (container): Top-level container for Syslog messages.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "messages"
// Path from root: "/system/messages"
func (n *SystemPathAny) Messages() *System_MessagesPathAny {
	return &System_MessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// MotdBanner (leaf): The console message displayed after a user logs into the
// system.  They system may append additional standard
// information such as the current system date and time, uptime,
// last login timestamp, etc.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/motd-banner"
// Path from root: "/system/state/motd-banner"
func (n *SystemPath) MotdBanner() *System_MotdBannerPath {
	return &System_MotdBannerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "motd-banner"},
			map[string]interface{}{},
			n,
		),
	}
}

// MotdBanner (leaf): The console message displayed after a user logs into the
// system.  They system may append additional standard
// information such as the current system date and time, uptime,
// last login timestamp, etc.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/motd-banner"
// Path from root: "/system/state/motd-banner"
func (n *SystemPathAny) MotdBanner() *System_MotdBannerPathAny {
	return &System_MotdBannerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "motd-banner"},
			map[string]interface{}{},
			n,
		),
	}
}

// MountPointAny (list): List of mount points in the system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "mount-points/mount-point"
// Path from root: "/system/mount-points/mount-point"
// Name (wildcarded): string
func (n *SystemPath) MountPointAny() *System_MountPointPathAny {
	return &System_MountPointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mount-points", "mount-point"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// MountPointAny (list): List of mount points in the system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "mount-points/mount-point"
// Path from root: "/system/mount-points/mount-point"
// Name (wildcarded): string
func (n *SystemPathAny) MountPointAny() *System_MountPointPathAny {
	return &System_MountPointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mount-points", "mount-point"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// MountPoint (list): List of mount points in the system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "mount-points/mount-point"
// Path from root: "/system/mount-points/mount-point"
// Name: string
func (n *SystemPath) MountPoint(Name string) *System_MountPointPath {
	return &System_MountPointPath{
		NodePath: ygot.NewNodePath(
			[]string{"mount-points", "mount-point"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// MountPoint (list): List of mount points in the system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "mount-points/mount-point"
// Path from root: "/system/mount-points/mount-point"
// Name: string
func (n *SystemPathAny) MountPoint(Name string) *System_MountPointPathAny {
	return &System_MountPointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mount-points", "mount-point"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Ntp (container): Top-level container for NTP configuration and state
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp"
// Path from root: "/system/ntp"
func (n *SystemPath) Ntp() *System_NtpPath {
	return &System_NtpPath{
		NodePath: ygot.NewNodePath(
			[]string{"ntp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ntp (container): Top-level container for NTP configuration and state
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp"
// Path from root: "/system/ntp"
func (n *SystemPathAny) Ntp() *System_NtpPathAny {
	return &System_NtpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ntp"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProcessAny (list): List of monitored processes
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "processes/process"
// Path from root: "/system/processes/process"
// Pid (wildcarded): uint64
func (n *SystemPath) ProcessAny() *System_ProcessPathAny {
	return &System_ProcessPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"processes", "process"},
			map[string]interface{}{"pid": "*"},
			n,
		),
	}
}

// ProcessAny (list): List of monitored processes
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "processes/process"
// Path from root: "/system/processes/process"
// Pid (wildcarded): uint64
func (n *SystemPathAny) ProcessAny() *System_ProcessPathAny {
	return &System_ProcessPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"processes", "process"},
			map[string]interface{}{"pid": "*"},
			n,
		),
	}
}

// Process (list): List of monitored processes
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "processes/process"
// Path from root: "/system/processes/process"
// Pid: uint64
func (n *SystemPath) Process(Pid uint64) *System_ProcessPath {
	return &System_ProcessPath{
		NodePath: ygot.NewNodePath(
			[]string{"processes", "process"},
			map[string]interface{}{"pid": Pid},
			n,
		),
	}
}

// Process (list): List of monitored processes
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "processes/process"
// Path from root: "/system/processes/process"
// Pid: uint64
func (n *SystemPathAny) Process(Pid uint64) *System_ProcessPathAny {
	return &System_ProcessPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"processes", "process"},
			map[string]interface{}{"pid": Pid},
			n,
		),
	}
}

// SshServer (container): Top-level container for ssh server
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "ssh-server"
// Path from root: "/system/ssh-server"
func (n *SystemPath) SshServer() *System_SshServerPath {
	return &System_SshServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"ssh-server"},
			map[string]interface{}{},
			n,
		),
	}
}

// SshServer (container): Top-level container for ssh server
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "ssh-server"
// Path from root: "/system/ssh-server"
func (n *SystemPathAny) SshServer() *System_SshServerPathAny {
	return &System_SshServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ssh-server"},
			map[string]interface{}{},
			n,
		),
	}
}

// TelnetServer (container): Top-level container for telnet terminal servers
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "telnet-server"
// Path from root: "/system/telnet-server"
func (n *SystemPath) TelnetServer() *System_TelnetServerPath {
	return &System_TelnetServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"telnet-server"},
			map[string]interface{}{},
			n,
		),
	}
}

// TelnetServer (container): Top-level container for telnet terminal servers
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "telnet-server"
// Path from root: "/system/telnet-server"
func (n *SystemPathAny) TelnetServer() *System_TelnetServerPathAny {
	return &System_TelnetServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"telnet-server"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_AaaPath represents the /openconfig-system/system/aaa YANG schema element.
type System_AaaPath struct {
	*ygot.NodePath
}

// System_AaaPathAny represents the wildcard version of the /openconfig-system/system/aaa YANG schema element.
type System_AaaPathAny struct {
	*ygot.NodePath
}

// Accounting (container): Top-level container for AAA accounting
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "accounting"
// Path from root: "/system/aaa/accounting"
func (n *System_AaaPath) Accounting() *System_Aaa_AccountingPath {
	return &System_Aaa_AccountingPath{
		NodePath: ygot.NewNodePath(
			[]string{"accounting"},
			map[string]interface{}{},
			n,
		),
	}
}

// Accounting (container): Top-level container for AAA accounting
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "accounting"
// Path from root: "/system/aaa/accounting"
func (n *System_AaaPathAny) Accounting() *System_Aaa_AccountingPathAny {
	return &System_Aaa_AccountingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"accounting"},
			map[string]interface{}{},
			n,
		),
	}
}

// Authentication (container): Top-level container for global authentication data
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "authentication"
// Path from root: "/system/aaa/authentication"
func (n *System_AaaPath) Authentication() *System_Aaa_AuthenticationPath {
	return &System_Aaa_AuthenticationPath{
		NodePath: ygot.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
}

// Authentication (container): Top-level container for global authentication data
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "authentication"
// Path from root: "/system/aaa/authentication"
func (n *System_AaaPathAny) Authentication() *System_Aaa_AuthenticationPathAny {
	return &System_Aaa_AuthenticationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
}

// Authorization (container): Top-level container for AAA authorization configuration
// and operational state data
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "authorization"
// Path from root: "/system/aaa/authorization"
func (n *System_AaaPath) Authorization() *System_Aaa_AuthorizationPath {
	return &System_Aaa_AuthorizationPath{
		NodePath: ygot.NewNodePath(
			[]string{"authorization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Authorization (container): Top-level container for AAA authorization configuration
// and operational state data
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "authorization"
// Path from root: "/system/aaa/authorization"
func (n *System_AaaPathAny) Authorization() *System_Aaa_AuthorizationPathAny {
	return &System_Aaa_AuthorizationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"authorization"},
			map[string]interface{}{},
			n,
		),
	}
}

// ServerGroupAny (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "server-groups/server-group"
// Path from root: "/system/aaa/server-groups/server-group"
// Name (wildcarded): string
func (n *System_AaaPath) ServerGroupAny() *System_Aaa_ServerGroupPathAny {
	return &System_Aaa_ServerGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"server-groups", "server-group"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// ServerGroupAny (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "server-groups/server-group"
// Path from root: "/system/aaa/server-groups/server-group"
// Name (wildcarded): string
func (n *System_AaaPathAny) ServerGroupAny() *System_Aaa_ServerGroupPathAny {
	return &System_Aaa_ServerGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"server-groups", "server-group"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// ServerGroup (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "server-groups/server-group"
// Path from root: "/system/aaa/server-groups/server-group"
// Name: string
func (n *System_AaaPath) ServerGroup(Name string) *System_Aaa_ServerGroupPath {
	return &System_Aaa_ServerGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"server-groups", "server-group"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// ServerGroup (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "server-groups/server-group"
// Path from root: "/system/aaa/server-groups/server-group"
// Name: string
func (n *System_AaaPathAny) ServerGroup(Name string) *System_Aaa_ServerGroupPathAny {
	return &System_Aaa_ServerGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"server-groups", "server-group"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// System_Aaa_AccountingPath represents the /openconfig-system/system/aaa/accounting YANG schema element.
type System_Aaa_AccountingPath struct {
	*ygot.NodePath
}

// System_Aaa_AccountingPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting YANG schema element.
type System_Aaa_AccountingPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_AccountingMethodPath represents the /openconfig-system/system/aaa/accounting/state/accounting-method YANG schema element.
type System_Aaa_Accounting_AccountingMethodPath struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_AccountingMethodPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/state/accounting-method YANG schema element.
type System_Aaa_Accounting_AccountingMethodPathAny struct {
	*ygot.NodePath
}

// AccountingMethod (leaf): An ordered list of methods used for AAA accounting for this
// event type.  The method is defined by the destination for
// accounting data, which may be specified as the group of
// all TACACS+/RADIUS servers, a defined server group, or
// the local system.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/accounting-method"
// Path from root: "/system/aaa/accounting/state/accounting-method"
func (n *System_Aaa_AccountingPath) AccountingMethod() *System_Aaa_Accounting_AccountingMethodPath {
	return &System_Aaa_Accounting_AccountingMethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "accounting-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// AccountingMethod (leaf): An ordered list of methods used for AAA accounting for this
// event type.  The method is defined by the destination for
// accounting data, which may be specified as the group of
// all TACACS+/RADIUS servers, a defined server group, or
// the local system.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/accounting-method"
// Path from root: "/system/aaa/accounting/state/accounting-method"
func (n *System_Aaa_AccountingPathAny) AccountingMethod() *System_Aaa_Accounting_AccountingMethodPathAny {
	return &System_Aaa_Accounting_AccountingMethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "accounting-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// EventAny (list): List of events subject to accounting
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/accounting/events/event"
// EventType (wildcarded): E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE
func (n *System_Aaa_AccountingPath) EventAny() *System_Aaa_Accounting_EventPathAny {
	return &System_Aaa_Accounting_EventPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": "*"},
			n,
		),
	}
}

// EventAny (list): List of events subject to accounting
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/accounting/events/event"
// EventType (wildcarded): E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE
func (n *System_Aaa_AccountingPathAny) EventAny() *System_Aaa_Accounting_EventPathAny {
	return &System_Aaa_Accounting_EventPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": "*"},
			n,
		),
	}
}

// Event (list): List of events subject to accounting
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/accounting/events/event"
// EventType: E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE
func (n *System_Aaa_AccountingPath) Event(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *System_Aaa_Accounting_EventPath {
	return &System_Aaa_Accounting_EventPath{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": EventType},
			n,
		),
	}
}

// Event (list): List of events subject to accounting
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/accounting/events/event"
// EventType: E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE
func (n *System_Aaa_AccountingPathAny) Event(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *System_Aaa_Accounting_EventPathAny {
	return &System_Aaa_Accounting_EventPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": EventType},
			n,
		),
	}
}

// System_Aaa_Accounting_EventPath represents the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type System_Aaa_Accounting_EventPath struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_EventPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type System_Aaa_Accounting_EventPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_Event_EventTypePath represents the /openconfig-system/system/aaa/accounting/events/event/state/event-type YANG schema element.
type System_Aaa_Accounting_Event_EventTypePath struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_Event_EventTypePathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/events/event/state/event-type YANG schema element.
type System_Aaa_Accounting_Event_EventTypePathAny struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_Event_RecordPath represents the /openconfig-system/system/aaa/accounting/events/event/state/record YANG schema element.
type System_Aaa_Accounting_Event_RecordPath struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_Event_RecordPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/events/event/state/record YANG schema element.
type System_Aaa_Accounting_Event_RecordPathAny struct {
	*ygot.NodePath
}

// EventType (leaf): The type of activity to record at the AAA accounting
// server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/event-type"
// Path from root: "/system/aaa/accounting/events/event/state/event-type"
func (n *System_Aaa_Accounting_EventPath) EventType() *System_Aaa_Accounting_Event_EventTypePath {
	return &System_Aaa_Accounting_Event_EventTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "event-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// EventType (leaf): The type of activity to record at the AAA accounting
// server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/event-type"
// Path from root: "/system/aaa/accounting/events/event/state/event-type"
func (n *System_Aaa_Accounting_EventPathAny) EventType() *System_Aaa_Accounting_Event_EventTypePathAny {
	return &System_Aaa_Accounting_Event_EventTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "event-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Record (leaf): Type of record to send to the accounting server for this
// activity type
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/record"
// Path from root: "/system/aaa/accounting/events/event/state/record"
func (n *System_Aaa_Accounting_EventPath) Record() *System_Aaa_Accounting_Event_RecordPath {
	return &System_Aaa_Accounting_Event_RecordPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "record"},
			map[string]interface{}{},
			n,
		),
	}
}

// Record (leaf): Type of record to send to the accounting server for this
// activity type
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/record"
// Path from root: "/system/aaa/accounting/events/event/state/record"
func (n *System_Aaa_Accounting_EventPathAny) Record() *System_Aaa_Accounting_Event_RecordPathAny {
	return &System_Aaa_Accounting_Event_RecordPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "record"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_AuthenticationPath represents the /openconfig-system/system/aaa/authentication YANG schema element.
type System_Aaa_AuthenticationPath struct {
	*ygot.NodePath
}

// System_Aaa_AuthenticationPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication YANG schema element.
type System_Aaa_AuthenticationPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AuthenticationMethodPath represents the /openconfig-system/system/aaa/authentication/state/authentication-method YANG schema element.
type System_Aaa_Authentication_AuthenticationMethodPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AuthenticationMethodPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/state/authentication-method YANG schema element.
type System_Aaa_Authentication_AuthenticationMethodPathAny struct {
	*ygot.NodePath
}

// AdminUser (container): Top-level container for the system root or admin user
// configuration and operational state
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "admin-user"
// Path from root: "/system/aaa/authentication/admin-user"
func (n *System_Aaa_AuthenticationPath) AdminUser() *System_Aaa_Authentication_AdminUserPath {
	return &System_Aaa_Authentication_AdminUserPath{
		NodePath: ygot.NewNodePath(
			[]string{"admin-user"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminUser (container): Top-level container for the system root or admin user
// configuration and operational state
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "admin-user"
// Path from root: "/system/aaa/authentication/admin-user"
func (n *System_Aaa_AuthenticationPathAny) AdminUser() *System_Aaa_Authentication_AdminUserPathAny {
	return &System_Aaa_Authentication_AdminUserPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"admin-user"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthenticationMethod (leaf): Ordered list of authentication methods for users.  This
// can be either a reference to a server group, or a well-
// defined designation in the AAA_METHOD_TYPE identity.  If
// authentication fails with one method, the next defined
// method is tried -- failure of all methods results in the
// user being denied access.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/authentication-method"
// Path from root: "/system/aaa/authentication/state/authentication-method"
func (n *System_Aaa_AuthenticationPath) AuthenticationMethod() *System_Aaa_Authentication_AuthenticationMethodPath {
	return &System_Aaa_Authentication_AuthenticationMethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "authentication-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthenticationMethod (leaf): Ordered list of authentication methods for users.  This
// can be either a reference to a server group, or a well-
// defined designation in the AAA_METHOD_TYPE identity.  If
// authentication fails with one method, the next defined
// method is tried -- failure of all methods results in the
// user being denied access.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/authentication-method"
// Path from root: "/system/aaa/authentication/state/authentication-method"
func (n *System_Aaa_AuthenticationPathAny) AuthenticationMethod() *System_Aaa_Authentication_AuthenticationMethodPathAny {
	return &System_Aaa_Authentication_AuthenticationMethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "authentication-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// UserAny (list): List of local users on the system
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "users/user"
// Path from root: "/system/aaa/authentication/users/user"
// Username (wildcarded): string
func (n *System_Aaa_AuthenticationPath) UserAny() *System_Aaa_Authentication_UserPathAny {
	return &System_Aaa_Authentication_UserPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"users", "user"},
			map[string]interface{}{"username": "*"},
			n,
		),
	}
}

// UserAny (list): List of local users on the system
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "users/user"
// Path from root: "/system/aaa/authentication/users/user"
// Username (wildcarded): string
func (n *System_Aaa_AuthenticationPathAny) UserAny() *System_Aaa_Authentication_UserPathAny {
	return &System_Aaa_Authentication_UserPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"users", "user"},
			map[string]interface{}{"username": "*"},
			n,
		),
	}
}

// User (list): List of local users on the system
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "users/user"
// Path from root: "/system/aaa/authentication/users/user"
// Username: string
func (n *System_Aaa_AuthenticationPath) User(Username string) *System_Aaa_Authentication_UserPath {
	return &System_Aaa_Authentication_UserPath{
		NodePath: ygot.NewNodePath(
			[]string{"users", "user"},
			map[string]interface{}{"username": Username},
			n,
		),
	}
}

// User (list): List of local users on the system
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "users/user"
// Path from root: "/system/aaa/authentication/users/user"
// Username: string
func (n *System_Aaa_AuthenticationPathAny) User(Username string) *System_Aaa_Authentication_UserPathAny {
	return &System_Aaa_Authentication_UserPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"users", "user"},
			map[string]interface{}{"username": Username},
			n,
		),
	}
}

// System_Aaa_Authentication_AdminUserPath represents the /openconfig-system/system/aaa/authentication/admin-user YANG schema element.
type System_Aaa_Authentication_AdminUserPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AdminUserPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user YANG schema element.
type System_Aaa_Authentication_AdminUserPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AdminUser_AdminPasswordPath represents the /openconfig-system/system/aaa/authentication/admin-user/state/admin-password YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminPasswordPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AdminUser_AdminPasswordPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user/state/admin-password YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminPasswordPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath represents the /openconfig-system/system/aaa/authentication/admin-user/state/admin-password-hashed YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user/state/admin-password-hashed YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AdminUser_AdminUsernamePath represents the /openconfig-system/system/aaa/authentication/admin-user/state/admin-username YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminUsernamePath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AdminUser_AdminUsernamePathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user/state/admin-username YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminUsernamePathAny struct {
	*ygot.NodePath
}

// AdminPassword (leaf): The admin/root password, supplied as a cleartext string.
// The system should hash and only store the password as a
// hashed value.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/admin-password"
// Path from root: "/system/aaa/authentication/admin-user/state/admin-password"
func (n *System_Aaa_Authentication_AdminUserPath) AdminPassword() *System_Aaa_Authentication_AdminUser_AdminPasswordPath {
	return &System_Aaa_Authentication_AdminUser_AdminPasswordPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-password"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminPassword (leaf): The admin/root password, supplied as a cleartext string.
// The system should hash and only store the password as a
// hashed value.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/admin-password"
// Path from root: "/system/aaa/authentication/admin-user/state/admin-password"
func (n *System_Aaa_Authentication_AdminUserPathAny) AdminPassword() *System_Aaa_Authentication_AdminUser_AdminPasswordPathAny {
	return &System_Aaa_Authentication_AdminUser_AdminPasswordPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-password"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminPasswordHashed (leaf): The admin/root password, supplied as a hashed value
// using the notation described in the definition of the
// crypt-password-type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/admin-password-hashed"
// Path from root: "/system/aaa/authentication/admin-user/state/admin-password-hashed"
func (n *System_Aaa_Authentication_AdminUserPath) AdminPasswordHashed() *System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath {
	return &System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-password-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminPasswordHashed (leaf): The admin/root password, supplied as a hashed value
// using the notation described in the definition of the
// crypt-password-type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/admin-password-hashed"
// Path from root: "/system/aaa/authentication/admin-user/state/admin-password-hashed"
func (n *System_Aaa_Authentication_AdminUserPathAny) AdminPasswordHashed() *System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny {
	return &System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-password-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminUsername (leaf): Name of the administrator user account, e.g., admin, root,
// etc.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/admin-username"
// Path from root: "/system/aaa/authentication/admin-user/state/admin-username"
func (n *System_Aaa_Authentication_AdminUserPath) AdminUsername() *System_Aaa_Authentication_AdminUser_AdminUsernamePath {
	return &System_Aaa_Authentication_AdminUser_AdminUsernamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-username"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminUsername (leaf): Name of the administrator user account, e.g., admin, root,
// etc.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/admin-username"
// Path from root: "/system/aaa/authentication/admin-user/state/admin-username"
func (n *System_Aaa_Authentication_AdminUserPathAny) AdminUsername() *System_Aaa_Authentication_AdminUser_AdminUsernamePathAny {
	return &System_Aaa_Authentication_AdminUser_AdminUsernamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-username"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_Authentication_UserPath represents the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type System_Aaa_Authentication_UserPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_UserPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type System_Aaa_Authentication_UserPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_PasswordPath represents the /openconfig-system/system/aaa/authentication/users/user/state/password YANG schema element.
type System_Aaa_Authentication_User_PasswordPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_PasswordPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/password YANG schema element.
type System_Aaa_Authentication_User_PasswordPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_PasswordHashedPath represents the /openconfig-system/system/aaa/authentication/users/user/state/password-hashed YANG schema element.
type System_Aaa_Authentication_User_PasswordHashedPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_PasswordHashedPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/password-hashed YANG schema element.
type System_Aaa_Authentication_User_PasswordHashedPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_RolePath represents the /openconfig-system/system/aaa/authentication/users/user/state/role YANG schema element.
type System_Aaa_Authentication_User_RolePath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_RolePathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/role YANG schema element.
type System_Aaa_Authentication_User_RolePathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_SshKeyPath represents the /openconfig-system/system/aaa/authentication/users/user/state/ssh-key YANG schema element.
type System_Aaa_Authentication_User_SshKeyPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_SshKeyPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/ssh-key YANG schema element.
type System_Aaa_Authentication_User_SshKeyPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_UsernamePath represents the /openconfig-system/system/aaa/authentication/users/user/state/username YANG schema element.
type System_Aaa_Authentication_User_UsernamePath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_UsernamePathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/username YANG schema element.
type System_Aaa_Authentication_User_UsernamePathAny struct {
	*ygot.NodePath
}

// Password (leaf): The user password, supplied as cleartext.  The system
// must hash the value and only store the hashed value.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/password"
// Path from root: "/system/aaa/authentication/users/user/state/password"
func (n *System_Aaa_Authentication_UserPath) Password() *System_Aaa_Authentication_User_PasswordPath {
	return &System_Aaa_Authentication_User_PasswordPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "password"},
			map[string]interface{}{},
			n,
		),
	}
}

// Password (leaf): The user password, supplied as cleartext.  The system
// must hash the value and only store the hashed value.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/password"
// Path from root: "/system/aaa/authentication/users/user/state/password"
func (n *System_Aaa_Authentication_UserPathAny) Password() *System_Aaa_Authentication_User_PasswordPathAny {
	return &System_Aaa_Authentication_User_PasswordPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "password"},
			map[string]interface{}{},
			n,
		),
	}
}

// PasswordHashed (leaf): The user password, supplied as a hashed value
// using the notation described in the definition of the
// crypt-password-type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/password-hashed"
// Path from root: "/system/aaa/authentication/users/user/state/password-hashed"
func (n *System_Aaa_Authentication_UserPath) PasswordHashed() *System_Aaa_Authentication_User_PasswordHashedPath {
	return &System_Aaa_Authentication_User_PasswordHashedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "password-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// PasswordHashed (leaf): The user password, supplied as a hashed value
// using the notation described in the definition of the
// crypt-password-type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/password-hashed"
// Path from root: "/system/aaa/authentication/users/user/state/password-hashed"
func (n *System_Aaa_Authentication_UserPathAny) PasswordHashed() *System_Aaa_Authentication_User_PasswordHashedPathAny {
	return &System_Aaa_Authentication_User_PasswordHashedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "password-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// Role (leaf): Role assigned to the user.  The role may be supplied
// as a string or a role defined by the SYSTEM_DEFINED_ROLES
// identity.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/role"
// Path from root: "/system/aaa/authentication/users/user/state/role"
func (n *System_Aaa_Authentication_UserPath) Role() *System_Aaa_Authentication_User_RolePath {
	return &System_Aaa_Authentication_User_RolePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "role"},
			map[string]interface{}{},
			n,
		),
	}
}

// Role (leaf): Role assigned to the user.  The role may be supplied
// as a string or a role defined by the SYSTEM_DEFINED_ROLES
// identity.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/role"
// Path from root: "/system/aaa/authentication/users/user/state/role"
func (n *System_Aaa_Authentication_UserPathAny) Role() *System_Aaa_Authentication_User_RolePathAny {
	return &System_Aaa_Authentication_User_RolePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "role"},
			map[string]interface{}{},
			n,
		),
	}
}

// SshKey (leaf): SSH public key for the user (RSA or DSA)
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/ssh-key"
// Path from root: "/system/aaa/authentication/users/user/state/ssh-key"
func (n *System_Aaa_Authentication_UserPath) SshKey() *System_Aaa_Authentication_User_SshKeyPath {
	return &System_Aaa_Authentication_User_SshKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ssh-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SshKey (leaf): SSH public key for the user (RSA or DSA)
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/ssh-key"
// Path from root: "/system/aaa/authentication/users/user/state/ssh-key"
func (n *System_Aaa_Authentication_UserPathAny) SshKey() *System_Aaa_Authentication_User_SshKeyPathAny {
	return &System_Aaa_Authentication_User_SshKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ssh-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// Username (leaf): Assigned username for this user
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/username"
// Path from root: "/system/aaa/authentication/users/user/state/username"
func (n *System_Aaa_Authentication_UserPath) Username() *System_Aaa_Authentication_User_UsernamePath {
	return &System_Aaa_Authentication_User_UsernamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "username"},
			map[string]interface{}{},
			n,
		),
	}
}

// Username (leaf): Assigned username for this user
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/username"
// Path from root: "/system/aaa/authentication/users/user/state/username"
func (n *System_Aaa_Authentication_UserPathAny) Username() *System_Aaa_Authentication_User_UsernamePathAny {
	return &System_Aaa_Authentication_User_UsernamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "username"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_AuthorizationPath represents the /openconfig-system/system/aaa/authorization YANG schema element.
type System_Aaa_AuthorizationPath struct {
	*ygot.NodePath
}

// System_Aaa_AuthorizationPathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization YANG schema element.
type System_Aaa_AuthorizationPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authorization_AuthorizationMethodPath represents the /openconfig-system/system/aaa/authorization/state/authorization-method YANG schema element.
type System_Aaa_Authorization_AuthorizationMethodPath struct {
	*ygot.NodePath
}

// System_Aaa_Authorization_AuthorizationMethodPathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization/state/authorization-method YANG schema element.
type System_Aaa_Authorization_AuthorizationMethodPathAny struct {
	*ygot.NodePath
}

// AuthorizationMethod (leaf): Ordered list of methods for authorizing commands.  The first
// method that provides a response (positive or negative) should
// be used.  The list may contain a well-defined method such
// as the set of all TACACS or RADIUS servers, or the name of
// a defined AAA server group.  The system must validate
// that the named server group exists.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/authorization-method"
// Path from root: "/system/aaa/authorization/state/authorization-method"
func (n *System_Aaa_AuthorizationPath) AuthorizationMethod() *System_Aaa_Authorization_AuthorizationMethodPath {
	return &System_Aaa_Authorization_AuthorizationMethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "authorization-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthorizationMethod (leaf): Ordered list of methods for authorizing commands.  The first
// method that provides a response (positive or negative) should
// be used.  The list may contain a well-defined method such
// as the set of all TACACS or RADIUS servers, or the name of
// a defined AAA server group.  The system must validate
// that the named server group exists.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/authorization-method"
// Path from root: "/system/aaa/authorization/state/authorization-method"
func (n *System_Aaa_AuthorizationPathAny) AuthorizationMethod() *System_Aaa_Authorization_AuthorizationMethodPathAny {
	return &System_Aaa_Authorization_AuthorizationMethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "authorization-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// EventAny (list): List of events subject to AAA authorization
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/authorization/events/event"
// EventType (wildcarded): E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
func (n *System_Aaa_AuthorizationPath) EventAny() *System_Aaa_Authorization_EventPathAny {
	return &System_Aaa_Authorization_EventPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": "*"},
			n,
		),
	}
}

// EventAny (list): List of events subject to AAA authorization
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/authorization/events/event"
// EventType (wildcarded): E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
func (n *System_Aaa_AuthorizationPathAny) EventAny() *System_Aaa_Authorization_EventPathAny {
	return &System_Aaa_Authorization_EventPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": "*"},
			n,
		),
	}
}

// Event (list): List of events subject to AAA authorization
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/authorization/events/event"
// EventType: E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
func (n *System_Aaa_AuthorizationPath) Event(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *System_Aaa_Authorization_EventPath {
	return &System_Aaa_Authorization_EventPath{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": EventType},
			n,
		),
	}
}

// Event (list): List of events subject to AAA authorization
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/authorization/events/event"
// EventType: E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
func (n *System_Aaa_AuthorizationPathAny) Event(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *System_Aaa_Authorization_EventPathAny {
	return &System_Aaa_Authorization_EventPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": EventType},
			n,
		),
	}
}

// System_Aaa_Authorization_EventPath represents the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type System_Aaa_Authorization_EventPath struct {
	*ygot.NodePath
}

// System_Aaa_Authorization_EventPathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type System_Aaa_Authorization_EventPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authorization_Event_EventTypePath represents the /openconfig-system/system/aaa/authorization/events/event/state/event-type YANG schema element.
type System_Aaa_Authorization_Event_EventTypePath struct {
	*ygot.NodePath
}

// System_Aaa_Authorization_Event_EventTypePathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization/events/event/state/event-type YANG schema element.
type System_Aaa_Authorization_Event_EventTypePathAny struct {
	*ygot.NodePath
}

// EventType (leaf): The type of event to record at the AAA authorization
// server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/event-type"
// Path from root: "/system/aaa/authorization/events/event/state/event-type"
func (n *System_Aaa_Authorization_EventPath) EventType() *System_Aaa_Authorization_Event_EventTypePath {
	return &System_Aaa_Authorization_Event_EventTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "event-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// EventType (leaf): The type of event to record at the AAA authorization
// server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/event-type"
// Path from root: "/system/aaa/authorization/events/event/state/event-type"
func (n *System_Aaa_Authorization_EventPathAny) EventType() *System_Aaa_Authorization_Event_EventTypePathAny {
	return &System_Aaa_Authorization_Event_EventTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "event-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_ServerGroupPath represents the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type System_Aaa_ServerGroupPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroupPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type System_Aaa_ServerGroupPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_NamePath represents the /openconfig-system/system/aaa/server-groups/server-group/state/name YANG schema element.
type System_Aaa_ServerGroup_NamePath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_NamePathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/state/name YANG schema element.
type System_Aaa_ServerGroup_NamePathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_TypePath represents the /openconfig-system/system/aaa/server-groups/server-group/state/type YANG schema element.
type System_Aaa_ServerGroup_TypePath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_TypePathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/state/type YANG schema element.
type System_Aaa_ServerGroup_TypePathAny struct {
	*ygot.NodePath
}

// Name (leaf): Name for the server group
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/name"
// Path from root: "/system/aaa/server-groups/server-group/state/name"
func (n *System_Aaa_ServerGroupPath) Name() *System_Aaa_ServerGroup_NamePath {
	return &System_Aaa_ServerGroup_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Name for the server group
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/name"
// Path from root: "/system/aaa/server-groups/server-group/state/name"
func (n *System_Aaa_ServerGroupPathAny) Name() *System_Aaa_ServerGroup_NamePathAny {
	return &System_Aaa_ServerGroup_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// ServerAny (list): List of AAA servers
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/aaa/server-groups/server-group/servers/server"
// Address (wildcarded): string
func (n *System_Aaa_ServerGroupPath) ServerAny() *System_Aaa_ServerGroup_ServerPathAny {
	return &System_Aaa_ServerGroup_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// ServerAny (list): List of AAA servers
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/aaa/server-groups/server-group/servers/server"
// Address (wildcarded): string
func (n *System_Aaa_ServerGroupPathAny) ServerAny() *System_Aaa_ServerGroup_ServerPathAny {
	return &System_Aaa_ServerGroup_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// Server (list): List of AAA servers
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/aaa/server-groups/server-group/servers/server"
// Address: string
func (n *System_Aaa_ServerGroupPath) Server(Address string) *System_Aaa_ServerGroup_ServerPath {
	return &System_Aaa_ServerGroup_ServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// Server (list): List of AAA servers
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/aaa/server-groups/server-group/servers/server"
// Address: string
func (n *System_Aaa_ServerGroupPathAny) Server(Address string) *System_Aaa_ServerGroup_ServerPathAny {
	return &System_Aaa_ServerGroup_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// Type (leaf): AAA server type -- all servers in the group must be of this
// type
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/type"
// Path from root: "/system/aaa/server-groups/server-group/state/type"
func (n *System_Aaa_ServerGroupPath) Type() *System_Aaa_ServerGroup_TypePath {
	return &System_Aaa_ServerGroup_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): AAA server type -- all servers in the group must be of this
// type
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/type"
// Path from root: "/system/aaa/server-groups/server-group/state/type"
func (n *System_Aaa_ServerGroupPathAny) Type() *System_Aaa_ServerGroup_TypePathAny {
	return &System_Aaa_ServerGroup_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_ServerGroup_ServerPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type System_Aaa_ServerGroup_ServerPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_ServerPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type System_Aaa_ServerGroup_ServerPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_AddressPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/address YANG schema element.
type System_Aaa_ServerGroup_Server_AddressPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_AddressPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/address YANG schema element.
type System_Aaa_ServerGroup_Server_AddressPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ConnectionAbortsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-aborts YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionAbortsPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ConnectionAbortsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-aborts YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionAbortsPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ConnectionClosesPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-closes YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionClosesPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ConnectionClosesPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-closes YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionClosesPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ConnectionFailuresPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-failures YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionFailuresPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ConnectionFailuresPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-failures YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionFailuresPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ConnectionOpensPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-opens YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionOpensPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ConnectionOpensPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-opens YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionOpensPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ConnectionTimeoutsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-timeouts YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionTimeoutsPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ConnectionTimeoutsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-timeouts YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionTimeoutsPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ErrorsReceivedPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/errors-received YANG schema element.
type System_Aaa_ServerGroup_Server_ErrorsReceivedPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ErrorsReceivedPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/errors-received YANG schema element.
type System_Aaa_ServerGroup_Server_ErrorsReceivedPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_MessagesReceivedPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/messages-received YANG schema element.
type System_Aaa_ServerGroup_Server_MessagesReceivedPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_MessagesReceivedPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/messages-received YANG schema element.
type System_Aaa_ServerGroup_Server_MessagesReceivedPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_MessagesSentPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/messages-sent YANG schema element.
type System_Aaa_ServerGroup_Server_MessagesSentPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_MessagesSentPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/messages-sent YANG schema element.
type System_Aaa_ServerGroup_Server_MessagesSentPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_NamePath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/name YANG schema element.
type System_Aaa_ServerGroup_Server_NamePath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_NamePathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/name YANG schema element.
type System_Aaa_ServerGroup_Server_NamePathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_TimeoutPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/timeout YANG schema element.
type System_Aaa_ServerGroup_Server_TimeoutPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_TimeoutPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/timeout YANG schema element.
type System_Aaa_ServerGroup_Server_TimeoutPathAny struct {
	*ygot.NodePath
}

// Address (leaf): Address of the authentication server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/address"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/address"
func (n *System_Aaa_ServerGroup_ServerPath) Address() *System_Aaa_ServerGroup_Server_AddressPath {
	return &System_Aaa_ServerGroup_Server_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): Address of the authentication server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/address"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/address"
func (n *System_Aaa_ServerGroup_ServerPathAny) Address() *System_Aaa_ServerGroup_Server_AddressPathAny {
	return &System_Aaa_ServerGroup_Server_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionAborts (leaf): Number of aborted connections to the server.  These do
// not include connections that are close gracefully.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/connection-aborts"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/connection-aborts"
func (n *System_Aaa_ServerGroup_ServerPath) ConnectionAborts() *System_Aaa_ServerGroup_Server_ConnectionAbortsPath {
	return &System_Aaa_ServerGroup_Server_ConnectionAbortsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-aborts"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionAborts (leaf): Number of aborted connections to the server.  These do
// not include connections that are close gracefully.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/connection-aborts"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/connection-aborts"
func (n *System_Aaa_ServerGroup_ServerPathAny) ConnectionAborts() *System_Aaa_ServerGroup_Server_ConnectionAbortsPathAny {
	return &System_Aaa_ServerGroup_Server_ConnectionAbortsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-aborts"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionCloses (leaf): Number of connection close requests sent to the server, e.g.
// socket close
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/connection-closes"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/connection-closes"
func (n *System_Aaa_ServerGroup_ServerPath) ConnectionCloses() *System_Aaa_ServerGroup_Server_ConnectionClosesPath {
	return &System_Aaa_ServerGroup_Server_ConnectionClosesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-closes"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionCloses (leaf): Number of connection close requests sent to the server, e.g.
// socket close
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/connection-closes"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/connection-closes"
func (n *System_Aaa_ServerGroup_ServerPathAny) ConnectionCloses() *System_Aaa_ServerGroup_Server_ConnectionClosesPathAny {
	return &System_Aaa_ServerGroup_Server_ConnectionClosesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-closes"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionFailures (leaf): Number of connection failures to the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/connection-failures"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/connection-failures"
func (n *System_Aaa_ServerGroup_ServerPath) ConnectionFailures() *System_Aaa_ServerGroup_Server_ConnectionFailuresPath {
	return &System_Aaa_ServerGroup_Server_ConnectionFailuresPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-failures"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionFailures (leaf): Number of connection failures to the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/connection-failures"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/connection-failures"
func (n *System_Aaa_ServerGroup_ServerPathAny) ConnectionFailures() *System_Aaa_ServerGroup_Server_ConnectionFailuresPathAny {
	return &System_Aaa_ServerGroup_Server_ConnectionFailuresPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-failures"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionOpens (leaf): Number of new connection requests sent to the server, e.g.
// socket open
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/connection-opens"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/connection-opens"
func (n *System_Aaa_ServerGroup_ServerPath) ConnectionOpens() *System_Aaa_ServerGroup_Server_ConnectionOpensPath {
	return &System_Aaa_ServerGroup_Server_ConnectionOpensPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-opens"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionOpens (leaf): Number of new connection requests sent to the server, e.g.
// socket open
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/connection-opens"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/connection-opens"
func (n *System_Aaa_ServerGroup_ServerPathAny) ConnectionOpens() *System_Aaa_ServerGroup_Server_ConnectionOpensPathAny {
	return &System_Aaa_ServerGroup_Server_ConnectionOpensPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-opens"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionTimeouts (leaf): Number of connection timeouts to the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/connection-timeouts"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/connection-timeouts"
func (n *System_Aaa_ServerGroup_ServerPath) ConnectionTimeouts() *System_Aaa_ServerGroup_Server_ConnectionTimeoutsPath {
	return &System_Aaa_ServerGroup_Server_ConnectionTimeoutsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-timeouts"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionTimeouts (leaf): Number of connection timeouts to the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/connection-timeouts"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/connection-timeouts"
func (n *System_Aaa_ServerGroup_ServerPathAny) ConnectionTimeouts() *System_Aaa_ServerGroup_Server_ConnectionTimeoutsPathAny {
	return &System_Aaa_ServerGroup_Server_ConnectionTimeoutsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-timeouts"},
			map[string]interface{}{},
			n,
		),
	}
}

// ErrorsReceived (leaf): Number of error messages received from the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/errors-received"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/errors-received"
func (n *System_Aaa_ServerGroup_ServerPath) ErrorsReceived() *System_Aaa_ServerGroup_Server_ErrorsReceivedPath {
	return &System_Aaa_ServerGroup_Server_ErrorsReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "errors-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// ErrorsReceived (leaf): Number of error messages received from the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/errors-received"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/errors-received"
func (n *System_Aaa_ServerGroup_ServerPathAny) ErrorsReceived() *System_Aaa_ServerGroup_Server_ErrorsReceivedPathAny {
	return &System_Aaa_ServerGroup_Server_ErrorsReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "errors-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// MessagesReceived (leaf): Number of messages received by the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/messages-received"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/messages-received"
func (n *System_Aaa_ServerGroup_ServerPath) MessagesReceived() *System_Aaa_ServerGroup_Server_MessagesReceivedPath {
	return &System_Aaa_ServerGroup_Server_MessagesReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "messages-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// MessagesReceived (leaf): Number of messages received by the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/messages-received"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/messages-received"
func (n *System_Aaa_ServerGroup_ServerPathAny) MessagesReceived() *System_Aaa_ServerGroup_Server_MessagesReceivedPathAny {
	return &System_Aaa_ServerGroup_Server_MessagesReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "messages-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// MessagesSent (leaf): Number of messages sent to the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/messages-sent"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/messages-sent"
func (n *System_Aaa_ServerGroup_ServerPath) MessagesSent() *System_Aaa_ServerGroup_Server_MessagesSentPath {
	return &System_Aaa_ServerGroup_Server_MessagesSentPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "messages-sent"},
			map[string]interface{}{},
			n,
		),
	}
}

// MessagesSent (leaf): Number of messages sent to the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/messages-sent"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/messages-sent"
func (n *System_Aaa_ServerGroup_ServerPathAny) MessagesSent() *System_Aaa_ServerGroup_Server_MessagesSentPathAny {
	return &System_Aaa_ServerGroup_Server_MessagesSentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "messages-sent"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Name assigned to the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/name"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/name"
func (n *System_Aaa_ServerGroup_ServerPath) Name() *System_Aaa_ServerGroup_Server_NamePath {
	return &System_Aaa_ServerGroup_Server_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Name assigned to the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/name"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/name"
func (n *System_Aaa_ServerGroup_ServerPathAny) Name() *System_Aaa_ServerGroup_Server_NamePathAny {
	return &System_Aaa_ServerGroup_Server_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Radius (container): Top-level container for RADIUS server data
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "radius"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius"
func (n *System_Aaa_ServerGroup_ServerPath) Radius() *System_Aaa_ServerGroup_Server_RadiusPath {
	return &System_Aaa_ServerGroup_Server_RadiusPath{
		NodePath: ygot.NewNodePath(
			[]string{"radius"},
			map[string]interface{}{},
			n,
		),
	}
}

// Radius (container): Top-level container for RADIUS server data
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "radius"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius"
func (n *System_Aaa_ServerGroup_ServerPathAny) Radius() *System_Aaa_ServerGroup_Server_RadiusPathAny {
	return &System_Aaa_ServerGroup_Server_RadiusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"radius"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tacacs (container): Top-level container for TACACS+ server data
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "tacacs"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs"
func (n *System_Aaa_ServerGroup_ServerPath) Tacacs() *System_Aaa_ServerGroup_Server_TacacsPath {
	return &System_Aaa_ServerGroup_Server_TacacsPath{
		NodePath: ygot.NewNodePath(
			[]string{"tacacs"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tacacs (container): Top-level container for TACACS+ server data
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "tacacs"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs"
func (n *System_Aaa_ServerGroup_ServerPathAny) Tacacs() *System_Aaa_ServerGroup_Server_TacacsPathAny {
	return &System_Aaa_ServerGroup_Server_TacacsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tacacs"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the timeout in seconds on responses from the AAA
// server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/timeout"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/timeout"
func (n *System_Aaa_ServerGroup_ServerPath) Timeout() *System_Aaa_ServerGroup_Server_TimeoutPath {
	return &System_Aaa_ServerGroup_Server_TimeoutPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the timeout in seconds on responses from the AAA
// server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/timeout"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/timeout"
func (n *System_Aaa_ServerGroup_ServerPathAny) Timeout() *System_Aaa_ServerGroup_Server_TimeoutPathAny {
	return &System_Aaa_ServerGroup_Server_TimeoutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_ServerGroup_Server_RadiusPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type System_Aaa_ServerGroup_Server_RadiusPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_RadiusPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type System_Aaa_ServerGroup_Server_RadiusPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_AcctPortPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/acct-port YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_AcctPortPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/acct-port YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_AuthPortPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/auth-port YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_AuthPortPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/auth-port YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/retransmit-attempts YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/retransmit-attempts YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_SecretKeyPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SecretKeyPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key-hashed YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key-hashed YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_SourceAddressPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/source-address YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SourceAddressPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/source-address YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny struct {
	*ygot.NodePath
}

// AcctPort (leaf): Port number for accounting requests
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "state/acct-port"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/acct-port"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) AcctPort() *System_Aaa_ServerGroup_Server_Radius_AcctPortPath {
	return &System_Aaa_ServerGroup_Server_Radius_AcctPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "acct-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// AcctPort (leaf): Port number for accounting requests
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "state/acct-port"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/acct-port"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) AcctPort() *System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "acct-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthPort (leaf): Port number for authentication requests
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "state/auth-port"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/auth-port"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) AuthPort() *System_Aaa_ServerGroup_Server_Radius_AuthPortPath {
	return &System_Aaa_ServerGroup_Server_Radius_AuthPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "auth-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthPort (leaf): Port number for authentication requests
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "state/auth-port"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/auth-port"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) AuthPort() *System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "auth-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): A collection of RADIUS related state objects.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "state/counters"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/counters"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) Counters() *System_Aaa_ServerGroup_Server_Radius_CountersPath {
	return &System_Aaa_ServerGroup_Server_Radius_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): A collection of RADIUS related state objects.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "state/counters"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/counters"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) Counters() *System_Aaa_ServerGroup_Server_Radius_CountersPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// RetransmitAttempts (leaf): Number of times the system may resend a request to the
// RADIUS server when it is unresponsive
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "state/retransmit-attempts"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/retransmit-attempts"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) RetransmitAttempts() *System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath {
	return &System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "retransmit-attempts"},
			map[string]interface{}{},
			n,
		),
	}
}

// RetransmitAttempts (leaf): Number of times the system may resend a request to the
// RADIUS server when it is unresponsive
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "state/retransmit-attempts"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/retransmit-attempts"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) RetransmitAttempts() *System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "retransmit-attempts"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKey (leaf): The unencrypted shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "state/secret-key"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) SecretKey() *System_Aaa_ServerGroup_Server_Radius_SecretKeyPath {
	return &System_Aaa_ServerGroup_Server_Radius_SecretKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "secret-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKey (leaf): The unencrypted shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "state/secret-key"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) SecretKey() *System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "secret-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKeyHashed (leaf): The hashed shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "state/secret-key-hashed"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) SecretKeyHashed() *System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath {
	return &System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "secret-key-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKeyHashed (leaf): The hashed shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "state/secret-key-hashed"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) SecretKeyHashed() *System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "secret-key-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address to use in messages to the RADIUS server
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "state/source-address"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/source-address"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) SourceAddress() *System_Aaa_ServerGroup_Server_Radius_SourceAddressPath {
	return &System_Aaa_ServerGroup_Server_Radius_SourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address to use in messages to the RADIUS server
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "state/source-address"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/source-address"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) SourceAddress() *System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_ServerGroup_Server_Radius_CountersPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_CountersPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_CountersPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_CountersPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-accepts YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-accepts YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-rejects YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-rejects YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/retried-access-requests YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/retried-access-requests YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/timeout-access-requests YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/timeout-access-requests YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPathAny struct {
	*ygot.NodePath
}

// AccessAccepts (leaf): Received Access-Accept messages.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "access-accepts"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-accepts"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPath) AccessAccepts() *System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPath {
	return &System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPath{
		NodePath: ygot.NewNodePath(
			[]string{"access-accepts"},
			map[string]interface{}{},
			n,
		),
	}
}

// AccessAccepts (leaf): Received Access-Accept messages.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "access-accepts"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-accepts"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPathAny) AccessAccepts() *System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"access-accepts"},
			map[string]interface{}{},
			n,
		),
	}
}

// AccessRejects (leaf): Received Access-Reject messages.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "access-rejects"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-rejects"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPath) AccessRejects() *System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPath {
	return &System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPath{
		NodePath: ygot.NewNodePath(
			[]string{"access-rejects"},
			map[string]interface{}{},
			n,
		),
	}
}

// AccessRejects (leaf): Received Access-Reject messages.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "access-rejects"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-rejects"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPathAny) AccessRejects() *System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"access-rejects"},
			map[string]interface{}{},
			n,
		),
	}
}

// RetriedAccessRequests (leaf): Retransmitted Access-Request messages.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "retried-access-requests"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/retried-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPath) RetriedAccessRequests() *System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPath {
	return &System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPath{
		NodePath: ygot.NewNodePath(
			[]string{"retried-access-requests"},
			map[string]interface{}{},
			n,
		),
	}
}

// RetriedAccessRequests (leaf): Retransmitted Access-Request messages.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "retried-access-requests"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/retried-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPathAny) RetriedAccessRequests() *System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"retried-access-requests"},
			map[string]interface{}{},
			n,
		),
	}
}

// TimeoutAccessRequests (leaf): Access-Request messages that have timed-out,
// requiring retransmission.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "timeout-access-requests"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/timeout-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPath) TimeoutAccessRequests() *System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPath {
	return &System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPath{
		NodePath: ygot.NewNodePath(
			[]string{"timeout-access-requests"},
			map[string]interface{}{},
			n,
		),
	}
}

// TimeoutAccessRequests (leaf): Access-Request messages that have timed-out,
// requiring retransmission.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "timeout-access-requests"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/timeout-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPathAny) TimeoutAccessRequests() *System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"timeout-access-requests"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_ServerGroup_Server_TacacsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type System_Aaa_ServerGroup_Server_TacacsPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_TacacsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type System_Aaa_ServerGroup_Server_TacacsPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_PortPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/port YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_PortPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_PortPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/port YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_PortPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key-hashed YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key-hashed YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/source-address YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/source-address YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny struct {
	*ygot.NodePath
}

// Port (leaf): The port number on which to contact the TACACS server
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "state/port"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/state/port"
func (n *System_Aaa_ServerGroup_Server_TacacsPath) Port() *System_Aaa_ServerGroup_Server_Tacacs_PortPath {
	return &System_Aaa_ServerGroup_Server_Tacacs_PortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number on which to contact the TACACS server
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "state/port"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/state/port"
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) Port() *System_Aaa_ServerGroup_Server_Tacacs_PortPathAny {
	return &System_Aaa_ServerGroup_Server_Tacacs_PortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKey (leaf): The unencrypted shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "state/secret-key"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key"
func (n *System_Aaa_ServerGroup_Server_TacacsPath) SecretKey() *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath {
	return &System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "secret-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKey (leaf): The unencrypted shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "state/secret-key"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key"
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) SecretKey() *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny {
	return &System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "secret-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKeyHashed (leaf): The hashed shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "state/secret-key-hashed"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_TacacsPath) SecretKeyHashed() *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath {
	return &System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "secret-key-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKeyHashed (leaf): The hashed shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "state/secret-key-hashed"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) SecretKeyHashed() *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny {
	return &System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "secret-key-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address to use in messages to the TACACS server
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "state/source-address"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/state/source-address"
func (n *System_Aaa_ServerGroup_Server_TacacsPath) SourceAddress() *System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath {
	return &System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address to use in messages to the TACACS server
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "state/source-address"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/state/source-address"
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) SourceAddress() *System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny {
	return &System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_AlarmPath represents the /openconfig-system/system/alarms/alarm YANG schema element.
type System_AlarmPath struct {
	*ygot.NodePath
}

// System_AlarmPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm YANG schema element.
type System_AlarmPathAny struct {
	*ygot.NodePath
}

// System_Alarm_IdPath represents the /openconfig-system/system/alarms/alarm/state/id YANG schema element.
type System_Alarm_IdPath struct {
	*ygot.NodePath
}

// System_Alarm_IdPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/id YANG schema element.
type System_Alarm_IdPathAny struct {
	*ygot.NodePath
}

// System_Alarm_ResourcePath represents the /openconfig-system/system/alarms/alarm/state/resource YANG schema element.
type System_Alarm_ResourcePath struct {
	*ygot.NodePath
}

// System_Alarm_ResourcePathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/resource YANG schema element.
type System_Alarm_ResourcePathAny struct {
	*ygot.NodePath
}

// System_Alarm_SeverityPath represents the /openconfig-system/system/alarms/alarm/state/severity YANG schema element.
type System_Alarm_SeverityPath struct {
	*ygot.NodePath
}

// System_Alarm_SeverityPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/severity YANG schema element.
type System_Alarm_SeverityPathAny struct {
	*ygot.NodePath
}

// System_Alarm_TextPath represents the /openconfig-system/system/alarms/alarm/state/text YANG schema element.
type System_Alarm_TextPath struct {
	*ygot.NodePath
}

// System_Alarm_TextPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/text YANG schema element.
type System_Alarm_TextPathAny struct {
	*ygot.NodePath
}

// System_Alarm_TimeCreatedPath represents the /openconfig-system/system/alarms/alarm/state/time-created YANG schema element.
type System_Alarm_TimeCreatedPath struct {
	*ygot.NodePath
}

// System_Alarm_TimeCreatedPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/time-created YANG schema element.
type System_Alarm_TimeCreatedPathAny struct {
	*ygot.NodePath
}

// System_Alarm_TypeIdPath represents the /openconfig-system/system/alarms/alarm/state/type-id YANG schema element.
type System_Alarm_TypeIdPath struct {
	*ygot.NodePath
}

// System_Alarm_TypeIdPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/type-id YANG schema element.
type System_Alarm_TypeIdPathAny struct {
	*ygot.NodePath
}

// Id (leaf): Unique ID for the alarm -- this will not be a
// configurable parameter on many implementations
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/id"
// Path from root: "/system/alarms/alarm/state/id"
func (n *System_AlarmPath) Id() *System_Alarm_IdPath {
	return &System_Alarm_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): Unique ID for the alarm -- this will not be a
// configurable parameter on many implementations
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/id"
// Path from root: "/system/alarms/alarm/state/id"
func (n *System_AlarmPathAny) Id() *System_Alarm_IdPathAny {
	return &System_Alarm_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Resource (leaf): The item that is under alarm within the device. The
// resource may be a reference to an item which is
// defined elsewhere in the model. For example, it
// may be a platform/component, interfaces/interface,
// terminal-device/logical-channels/channel, etc. In this
// case the system should match the name of the referenced
// item exactly. The referenced item could alternatively be
// the path of the item within the model.
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/resource"
// Path from root: "/system/alarms/alarm/state/resource"
func (n *System_AlarmPath) Resource() *System_Alarm_ResourcePath {
	return &System_Alarm_ResourcePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "resource"},
			map[string]interface{}{},
			n,
		),
	}
}

// Resource (leaf): The item that is under alarm within the device. The
// resource may be a reference to an item which is
// defined elsewhere in the model. For example, it
// may be a platform/component, interfaces/interface,
// terminal-device/logical-channels/channel, etc. In this
// case the system should match the name of the referenced
// item exactly. The referenced item could alternatively be
// the path of the item within the model.
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/resource"
// Path from root: "/system/alarms/alarm/state/resource"
func (n *System_AlarmPathAny) Resource() *System_Alarm_ResourcePathAny {
	return &System_Alarm_ResourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "resource"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): The severity level indicating the criticality and impact
// of the alarm
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/severity"
// Path from root: "/system/alarms/alarm/state/severity"
func (n *System_AlarmPath) Severity() *System_Alarm_SeverityPath {
	return &System_Alarm_SeverityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): The severity level indicating the criticality and impact
// of the alarm
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/severity"
// Path from root: "/system/alarms/alarm/state/severity"
func (n *System_AlarmPathAny) Severity() *System_Alarm_SeverityPathAny {
	return &System_Alarm_SeverityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Text (leaf): The string used to inform operators about the alarm. This
// MUST contain enough information for an operator to be able
// to understand the problem. If this string contains structure,
// this format should be clearly documented for programs to be
// able to parse that information
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/text"
// Path from root: "/system/alarms/alarm/state/text"
func (n *System_AlarmPath) Text() *System_Alarm_TextPath {
	return &System_Alarm_TextPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "text"},
			map[string]interface{}{},
			n,
		),
	}
}

// Text (leaf): The string used to inform operators about the alarm. This
// MUST contain enough information for an operator to be able
// to understand the problem. If this string contains structure,
// this format should be clearly documented for programs to be
// able to parse that information
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/text"
// Path from root: "/system/alarms/alarm/state/text"
func (n *System_AlarmPathAny) Text() *System_Alarm_TextPathAny {
	return &System_Alarm_TextPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "text"},
			map[string]interface{}{},
			n,
		),
	}
}

// TimeCreated (leaf): The time at which the alarm was raised by the system.
// This value is expressed relative to the Unix Epoch.
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/time-created"
// Path from root: "/system/alarms/alarm/state/time-created"
func (n *System_AlarmPath) TimeCreated() *System_Alarm_TimeCreatedPath {
	return &System_Alarm_TimeCreatedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "time-created"},
			map[string]interface{}{},
			n,
		),
	}
}

// TimeCreated (leaf): The time at which the alarm was raised by the system.
// This value is expressed relative to the Unix Epoch.
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/time-created"
// Path from root: "/system/alarms/alarm/state/time-created"
func (n *System_AlarmPathAny) TimeCreated() *System_Alarm_TimeCreatedPathAny {
	return &System_Alarm_TimeCreatedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "time-created"},
			map[string]interface{}{},
			n,
		),
	}
}

// TypeId (leaf): The abbreviated name of the alarm, for example LOS,
// EQPT, or OTS. Also referred to in different systems as
// condition type, alarm identifier, or alarm mnemonic. It
// is recommended to use the OPENCONFIG_ALARM_TYPE_ID
// identities where possible and only use the string type
// when the desired identityref is not yet defined
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/type-id"
// Path from root: "/system/alarms/alarm/state/type-id"
func (n *System_AlarmPath) TypeId() *System_Alarm_TypeIdPath {
	return &System_Alarm_TypeIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// TypeId (leaf): The abbreviated name of the alarm, for example LOS,
// EQPT, or OTS. Also referred to in different systems as
// condition type, alarm identifier, or alarm mnemonic. It
// is recommended to use the OPENCONFIG_ALARM_TYPE_ID
// identities where possible and only use the string type
// when the desired identityref is not yet defined
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/type-id"
// Path from root: "/system/alarms/alarm/state/type-id"
func (n *System_AlarmPathAny) TypeId() *System_Alarm_TypeIdPathAny {
	return &System_Alarm_TypeIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_ClockPath represents the /openconfig-system/system/clock YANG schema element.
type System_ClockPath struct {
	*ygot.NodePath
}

// System_ClockPathAny represents the wildcard version of the /openconfig-system/system/clock YANG schema element.
type System_ClockPathAny struct {
	*ygot.NodePath
}

// System_Clock_TimezoneNamePath represents the /openconfig-system/system/clock/state/timezone-name YANG schema element.
type System_Clock_TimezoneNamePath struct {
	*ygot.NodePath
}

// System_Clock_TimezoneNamePathAny represents the wildcard version of the /openconfig-system/system/clock/state/timezone-name YANG schema element.
type System_Clock_TimezoneNamePathAny struct {
	*ygot.NodePath
}

// TimezoneName (leaf): The TZ database name to use for the system, such
// as 'Europe/Stockholm'.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/timezone-name"
// Path from root: "/system/clock/state/timezone-name"
func (n *System_ClockPath) TimezoneName() *System_Clock_TimezoneNamePath {
	return &System_Clock_TimezoneNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "timezone-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// TimezoneName (leaf): The TZ database name to use for the system, such
// as 'Europe/Stockholm'.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/timezone-name"
// Path from root: "/system/clock/state/timezone-name"
func (n *System_ClockPathAny) TimezoneName() *System_Clock_TimezoneNamePathAny {
	return &System_Clock_TimezoneNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "timezone-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_CpuPath represents the /openconfig-system/system/cpus/cpu YANG schema element.
type System_CpuPath struct {
	*ygot.NodePath
}

// System_CpuPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu YANG schema element.
type System_CpuPathAny struct {
	*ygot.NodePath
}

// System_Cpu_IndexPath represents the /openconfig-system/system/cpus/cpu/state/index YANG schema element.
type System_Cpu_IndexPath struct {
	*ygot.NodePath
}

// System_Cpu_IndexPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/index YANG schema element.
type System_Cpu_IndexPathAny struct {
	*ygot.NodePath
}

// HardwareInterrupt (container): Percentage of CPU time spent servicing hardware interrupts.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/hardware-interrupt"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt"
func (n *System_CpuPath) HardwareInterrupt() *System_Cpu_HardwareInterruptPath {
	return &System_Cpu_HardwareInterruptPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hardware-interrupt"},
			map[string]interface{}{},
			n,
		),
	}
}

// HardwareInterrupt (container): Percentage of CPU time spent servicing hardware interrupts.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/hardware-interrupt"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt"
func (n *System_CpuPathAny) HardwareInterrupt() *System_Cpu_HardwareInterruptPathAny {
	return &System_Cpu_HardwareInterruptPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hardware-interrupt"},
			map[string]interface{}{},
			n,
		),
	}
}

// Idle (container): Percentage of CPU time spent idle.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/idle"
// Path from root: "/system/cpus/cpu/state/idle"
func (n *System_CpuPath) Idle() *System_Cpu_IdlePath {
	return &System_Cpu_IdlePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "idle"},
			map[string]interface{}{},
			n,
		),
	}
}

// Idle (container): Percentage of CPU time spent idle.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/idle"
// Path from root: "/system/cpus/cpu/state/idle"
func (n *System_CpuPathAny) Idle() *System_Cpu_IdlePathAny {
	return &System_Cpu_IdlePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "idle"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): The CPU index for each processor core on the system.  On a
// single-core system, the index should be zero.  The ALL
// index signifies an aggregation of the CPU utilization
// statistics over all cores in the system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/index"
// Path from root: "/system/cpus/cpu/state/index"
func (n *System_CpuPath) Index() *System_Cpu_IndexPath {
	return &System_Cpu_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): The CPU index for each processor core on the system.  On a
// single-core system, the index should be zero.  The ALL
// index signifies an aggregation of the CPU utilization
// statistics over all cores in the system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/index"
// Path from root: "/system/cpus/cpu/state/index"
func (n *System_CpuPathAny) Index() *System_Cpu_IndexPathAny {
	return &System_Cpu_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Kernel (container): Percentage of CPU time spent running in kernel space.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/kernel"
// Path from root: "/system/cpus/cpu/state/kernel"
func (n *System_CpuPath) Kernel() *System_Cpu_KernelPath {
	return &System_Cpu_KernelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "kernel"},
			map[string]interface{}{},
			n,
		),
	}
}

// Kernel (container): Percentage of CPU time spent running in kernel space.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/kernel"
// Path from root: "/system/cpus/cpu/state/kernel"
func (n *System_CpuPathAny) Kernel() *System_Cpu_KernelPathAny {
	return &System_Cpu_KernelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "kernel"},
			map[string]interface{}{},
			n,
		),
	}
}

// Nice (container): Percentage of CPU time spent running low-priority (niced)
// user processes.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/nice"
// Path from root: "/system/cpus/cpu/state/nice"
func (n *System_CpuPath) Nice() *System_Cpu_NicePath {
	return &System_Cpu_NicePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "nice"},
			map[string]interface{}{},
			n,
		),
	}
}

// Nice (container): Percentage of CPU time spent running low-priority (niced)
// user processes.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/nice"
// Path from root: "/system/cpus/cpu/state/nice"
func (n *System_CpuPathAny) Nice() *System_Cpu_NicePathAny {
	return &System_Cpu_NicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "nice"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftwareInterrupt (container): Percentage of CPU time spent servicing software interrupts
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/software-interrupt"
// Path from root: "/system/cpus/cpu/state/software-interrupt"
func (n *System_CpuPath) SoftwareInterrupt() *System_Cpu_SoftwareInterruptPath {
	return &System_Cpu_SoftwareInterruptPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "software-interrupt"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftwareInterrupt (container): Percentage of CPU time spent servicing software interrupts
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/software-interrupt"
// Path from root: "/system/cpus/cpu/state/software-interrupt"
func (n *System_CpuPathAny) SoftwareInterrupt() *System_Cpu_SoftwareInterruptPathAny {
	return &System_Cpu_SoftwareInterruptPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "software-interrupt"},
			map[string]interface{}{},
			n,
		),
	}
}

// Total (container): Total CPU utilization.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/total"
// Path from root: "/system/cpus/cpu/state/total"
func (n *System_CpuPath) Total() *System_Cpu_TotalPath {
	return &System_Cpu_TotalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "total"},
			map[string]interface{}{},
			n,
		),
	}
}

// Total (container): Total CPU utilization.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/total"
// Path from root: "/system/cpus/cpu/state/total"
func (n *System_CpuPathAny) Total() *System_Cpu_TotalPathAny {
	return &System_Cpu_TotalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "total"},
			map[string]interface{}{},
			n,
		),
	}
}

// User (container): Percentage of CPU time spent running in user space.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/user"
// Path from root: "/system/cpus/cpu/state/user"
func (n *System_CpuPath) User() *System_Cpu_UserPath {
	return &System_Cpu_UserPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "user"},
			map[string]interface{}{},
			n,
		),
	}
}

// User (container): Percentage of CPU time spent running in user space.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/user"
// Path from root: "/system/cpus/cpu/state/user"
func (n *System_CpuPathAny) User() *System_Cpu_UserPathAny {
	return &System_Cpu_UserPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "user"},
			map[string]interface{}{},
			n,
		),
	}
}

// Wait (container): Percentage of CPU time spent waiting for I/O.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/wait"
// Path from root: "/system/cpus/cpu/state/wait"
func (n *System_CpuPath) Wait() *System_Cpu_WaitPath {
	return &System_Cpu_WaitPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "wait"},
			map[string]interface{}{},
			n,
		),
	}
}

// Wait (container): Percentage of CPU time spent waiting for I/O.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/wait"
// Path from root: "/system/cpus/cpu/state/wait"
func (n *System_CpuPathAny) Wait() *System_Cpu_WaitPathAny {
	return &System_Cpu_WaitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "wait"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Cpu_HardwareInterruptPath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt YANG schema element.
type System_Cpu_HardwareInterruptPath struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterruptPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt YANG schema element.
type System_Cpu_HardwareInterruptPathAny struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_AvgPath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/avg YANG schema element.
type System_Cpu_HardwareInterrupt_AvgPath struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/avg YANG schema element.
type System_Cpu_HardwareInterrupt_AvgPathAny struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_InstantPath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/instant YANG schema element.
type System_Cpu_HardwareInterrupt_InstantPath struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/instant YANG schema element.
type System_Cpu_HardwareInterrupt_InstantPathAny struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/interval YANG schema element.
type System_Cpu_HardwareInterrupt_IntervalPath struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/interval YANG schema element.
type System_Cpu_HardwareInterrupt_IntervalPathAny struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_MaxPath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/max YANG schema element.
type System_Cpu_HardwareInterrupt_MaxPath struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/max YANG schema element.
type System_Cpu_HardwareInterrupt_MaxPathAny struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/max-time YANG schema element.
type System_Cpu_HardwareInterrupt_MaxTimePath struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/max-time YANG schema element.
type System_Cpu_HardwareInterrupt_MaxTimePathAny struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_MinPath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/min YANG schema element.
type System_Cpu_HardwareInterrupt_MinPath struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/min YANG schema element.
type System_Cpu_HardwareInterrupt_MinPathAny struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/min-time YANG schema element.
type System_Cpu_HardwareInterrupt_MinTimePath struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/min-time YANG schema element.
type System_Cpu_HardwareInterrupt_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/avg"
func (n *System_Cpu_HardwareInterruptPath) Avg() *System_Cpu_HardwareInterrupt_AvgPath {
	return &System_Cpu_HardwareInterrupt_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/avg"
func (n *System_Cpu_HardwareInterruptPathAny) Avg() *System_Cpu_HardwareInterrupt_AvgPathAny {
	return &System_Cpu_HardwareInterrupt_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/instant"
func (n *System_Cpu_HardwareInterruptPath) Instant() *System_Cpu_HardwareInterrupt_InstantPath {
	return &System_Cpu_HardwareInterrupt_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/instant"
func (n *System_Cpu_HardwareInterruptPathAny) Instant() *System_Cpu_HardwareInterrupt_InstantPathAny {
	return &System_Cpu_HardwareInterrupt_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/interval"
func (n *System_Cpu_HardwareInterruptPath) Interval() *System_Cpu_HardwareInterrupt_IntervalPath {
	return &System_Cpu_HardwareInterrupt_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/interval"
func (n *System_Cpu_HardwareInterruptPathAny) Interval() *System_Cpu_HardwareInterrupt_IntervalPathAny {
	return &System_Cpu_HardwareInterrupt_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/max"
func (n *System_Cpu_HardwareInterruptPath) Max() *System_Cpu_HardwareInterrupt_MaxPath {
	return &System_Cpu_HardwareInterrupt_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/max"
func (n *System_Cpu_HardwareInterruptPathAny) Max() *System_Cpu_HardwareInterrupt_MaxPathAny {
	return &System_Cpu_HardwareInterrupt_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/max-time"
func (n *System_Cpu_HardwareInterruptPath) MaxTime() *System_Cpu_HardwareInterrupt_MaxTimePath {
	return &System_Cpu_HardwareInterrupt_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/max-time"
func (n *System_Cpu_HardwareInterruptPathAny) MaxTime() *System_Cpu_HardwareInterrupt_MaxTimePathAny {
	return &System_Cpu_HardwareInterrupt_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/min"
func (n *System_Cpu_HardwareInterruptPath) Min() *System_Cpu_HardwareInterrupt_MinPath {
	return &System_Cpu_HardwareInterrupt_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/min"
func (n *System_Cpu_HardwareInterruptPathAny) Min() *System_Cpu_HardwareInterrupt_MinPathAny {
	return &System_Cpu_HardwareInterrupt_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/min-time"
func (n *System_Cpu_HardwareInterruptPath) MinTime() *System_Cpu_HardwareInterrupt_MinTimePath {
	return &System_Cpu_HardwareInterrupt_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/min-time"
func (n *System_Cpu_HardwareInterruptPathAny) MinTime() *System_Cpu_HardwareInterrupt_MinTimePathAny {
	return &System_Cpu_HardwareInterrupt_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Cpu_IdlePath represents the /openconfig-system/system/cpus/cpu/state/idle YANG schema element.
type System_Cpu_IdlePath struct {
	*ygot.NodePath
}

// System_Cpu_IdlePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle YANG schema element.
type System_Cpu_IdlePathAny struct {
	*ygot.NodePath
}

// System_Cpu_Idle_AvgPath represents the /openconfig-system/system/cpus/cpu/state/idle/avg YANG schema element.
type System_Cpu_Idle_AvgPath struct {
	*ygot.NodePath
}

// System_Cpu_Idle_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/avg YANG schema element.
type System_Cpu_Idle_AvgPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Idle_InstantPath represents the /openconfig-system/system/cpus/cpu/state/idle/instant YANG schema element.
type System_Cpu_Idle_InstantPath struct {
	*ygot.NodePath
}

// System_Cpu_Idle_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/instant YANG schema element.
type System_Cpu_Idle_InstantPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Idle_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/idle/interval YANG schema element.
type System_Cpu_Idle_IntervalPath struct {
	*ygot.NodePath
}

// System_Cpu_Idle_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/interval YANG schema element.
type System_Cpu_Idle_IntervalPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Idle_MaxPath represents the /openconfig-system/system/cpus/cpu/state/idle/max YANG schema element.
type System_Cpu_Idle_MaxPath struct {
	*ygot.NodePath
}

// System_Cpu_Idle_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/max YANG schema element.
type System_Cpu_Idle_MaxPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Idle_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/idle/max-time YANG schema element.
type System_Cpu_Idle_MaxTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Idle_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/max-time YANG schema element.
type System_Cpu_Idle_MaxTimePathAny struct {
	*ygot.NodePath
}

// System_Cpu_Idle_MinPath represents the /openconfig-system/system/cpus/cpu/state/idle/min YANG schema element.
type System_Cpu_Idle_MinPath struct {
	*ygot.NodePath
}

// System_Cpu_Idle_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/min YANG schema element.
type System_Cpu_Idle_MinPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Idle_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/idle/min-time YANG schema element.
type System_Cpu_Idle_MinTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Idle_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/min-time YANG schema element.
type System_Cpu_Idle_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/idle/avg"
func (n *System_Cpu_IdlePath) Avg() *System_Cpu_Idle_AvgPath {
	return &System_Cpu_Idle_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/idle/avg"
func (n *System_Cpu_IdlePathAny) Avg() *System_Cpu_Idle_AvgPathAny {
	return &System_Cpu_Idle_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/idle/instant"
func (n *System_Cpu_IdlePath) Instant() *System_Cpu_Idle_InstantPath {
	return &System_Cpu_Idle_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/idle/instant"
func (n *System_Cpu_IdlePathAny) Instant() *System_Cpu_Idle_InstantPathAny {
	return &System_Cpu_Idle_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/idle/interval"
func (n *System_Cpu_IdlePath) Interval() *System_Cpu_Idle_IntervalPath {
	return &System_Cpu_Idle_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/idle/interval"
func (n *System_Cpu_IdlePathAny) Interval() *System_Cpu_Idle_IntervalPathAny {
	return &System_Cpu_Idle_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/idle/max"
func (n *System_Cpu_IdlePath) Max() *System_Cpu_Idle_MaxPath {
	return &System_Cpu_Idle_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/idle/max"
func (n *System_Cpu_IdlePathAny) Max() *System_Cpu_Idle_MaxPathAny {
	return &System_Cpu_Idle_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/idle/max-time"
func (n *System_Cpu_IdlePath) MaxTime() *System_Cpu_Idle_MaxTimePath {
	return &System_Cpu_Idle_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/idle/max-time"
func (n *System_Cpu_IdlePathAny) MaxTime() *System_Cpu_Idle_MaxTimePathAny {
	return &System_Cpu_Idle_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/idle/min"
func (n *System_Cpu_IdlePath) Min() *System_Cpu_Idle_MinPath {
	return &System_Cpu_Idle_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/idle/min"
func (n *System_Cpu_IdlePathAny) Min() *System_Cpu_Idle_MinPathAny {
	return &System_Cpu_Idle_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/idle/min-time"
func (n *System_Cpu_IdlePath) MinTime() *System_Cpu_Idle_MinTimePath {
	return &System_Cpu_Idle_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/idle/min-time"
func (n *System_Cpu_IdlePathAny) MinTime() *System_Cpu_Idle_MinTimePathAny {
	return &System_Cpu_Idle_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Cpu_KernelPath represents the /openconfig-system/system/cpus/cpu/state/kernel YANG schema element.
type System_Cpu_KernelPath struct {
	*ygot.NodePath
}

// System_Cpu_KernelPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel YANG schema element.
type System_Cpu_KernelPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_AvgPath represents the /openconfig-system/system/cpus/cpu/state/kernel/avg YANG schema element.
type System_Cpu_Kernel_AvgPath struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/avg YANG schema element.
type System_Cpu_Kernel_AvgPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_InstantPath represents the /openconfig-system/system/cpus/cpu/state/kernel/instant YANG schema element.
type System_Cpu_Kernel_InstantPath struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/instant YANG schema element.
type System_Cpu_Kernel_InstantPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/kernel/interval YANG schema element.
type System_Cpu_Kernel_IntervalPath struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/interval YANG schema element.
type System_Cpu_Kernel_IntervalPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_MaxPath represents the /openconfig-system/system/cpus/cpu/state/kernel/max YANG schema element.
type System_Cpu_Kernel_MaxPath struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/max YANG schema element.
type System_Cpu_Kernel_MaxPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/kernel/max-time YANG schema element.
type System_Cpu_Kernel_MaxTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/max-time YANG schema element.
type System_Cpu_Kernel_MaxTimePathAny struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_MinPath represents the /openconfig-system/system/cpus/cpu/state/kernel/min YANG schema element.
type System_Cpu_Kernel_MinPath struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/min YANG schema element.
type System_Cpu_Kernel_MinPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/kernel/min-time YANG schema element.
type System_Cpu_Kernel_MinTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/min-time YANG schema element.
type System_Cpu_Kernel_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/kernel/avg"
func (n *System_Cpu_KernelPath) Avg() *System_Cpu_Kernel_AvgPath {
	return &System_Cpu_Kernel_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/kernel/avg"
func (n *System_Cpu_KernelPathAny) Avg() *System_Cpu_Kernel_AvgPathAny {
	return &System_Cpu_Kernel_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/kernel/instant"
func (n *System_Cpu_KernelPath) Instant() *System_Cpu_Kernel_InstantPath {
	return &System_Cpu_Kernel_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/kernel/instant"
func (n *System_Cpu_KernelPathAny) Instant() *System_Cpu_Kernel_InstantPathAny {
	return &System_Cpu_Kernel_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/kernel/interval"
func (n *System_Cpu_KernelPath) Interval() *System_Cpu_Kernel_IntervalPath {
	return &System_Cpu_Kernel_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/kernel/interval"
func (n *System_Cpu_KernelPathAny) Interval() *System_Cpu_Kernel_IntervalPathAny {
	return &System_Cpu_Kernel_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/kernel/max"
func (n *System_Cpu_KernelPath) Max() *System_Cpu_Kernel_MaxPath {
	return &System_Cpu_Kernel_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/kernel/max"
func (n *System_Cpu_KernelPathAny) Max() *System_Cpu_Kernel_MaxPathAny {
	return &System_Cpu_Kernel_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/kernel/max-time"
func (n *System_Cpu_KernelPath) MaxTime() *System_Cpu_Kernel_MaxTimePath {
	return &System_Cpu_Kernel_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/kernel/max-time"
func (n *System_Cpu_KernelPathAny) MaxTime() *System_Cpu_Kernel_MaxTimePathAny {
	return &System_Cpu_Kernel_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/kernel/min"
func (n *System_Cpu_KernelPath) Min() *System_Cpu_Kernel_MinPath {
	return &System_Cpu_Kernel_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/kernel/min"
func (n *System_Cpu_KernelPathAny) Min() *System_Cpu_Kernel_MinPathAny {
	return &System_Cpu_Kernel_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/kernel/min-time"
func (n *System_Cpu_KernelPath) MinTime() *System_Cpu_Kernel_MinTimePath {
	return &System_Cpu_Kernel_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/kernel/min-time"
func (n *System_Cpu_KernelPathAny) MinTime() *System_Cpu_Kernel_MinTimePathAny {
	return &System_Cpu_Kernel_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Cpu_NicePath represents the /openconfig-system/system/cpus/cpu/state/nice YANG schema element.
type System_Cpu_NicePath struct {
	*ygot.NodePath
}

// System_Cpu_NicePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice YANG schema element.
type System_Cpu_NicePathAny struct {
	*ygot.NodePath
}

// System_Cpu_Nice_AvgPath represents the /openconfig-system/system/cpus/cpu/state/nice/avg YANG schema element.
type System_Cpu_Nice_AvgPath struct {
	*ygot.NodePath
}

// System_Cpu_Nice_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/avg YANG schema element.
type System_Cpu_Nice_AvgPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Nice_InstantPath represents the /openconfig-system/system/cpus/cpu/state/nice/instant YANG schema element.
type System_Cpu_Nice_InstantPath struct {
	*ygot.NodePath
}

// System_Cpu_Nice_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/instant YANG schema element.
type System_Cpu_Nice_InstantPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Nice_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/nice/interval YANG schema element.
type System_Cpu_Nice_IntervalPath struct {
	*ygot.NodePath
}

// System_Cpu_Nice_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/interval YANG schema element.
type System_Cpu_Nice_IntervalPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Nice_MaxPath represents the /openconfig-system/system/cpus/cpu/state/nice/max YANG schema element.
type System_Cpu_Nice_MaxPath struct {
	*ygot.NodePath
}

// System_Cpu_Nice_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/max YANG schema element.
type System_Cpu_Nice_MaxPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Nice_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/nice/max-time YANG schema element.
type System_Cpu_Nice_MaxTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Nice_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/max-time YANG schema element.
type System_Cpu_Nice_MaxTimePathAny struct {
	*ygot.NodePath
}

// System_Cpu_Nice_MinPath represents the /openconfig-system/system/cpus/cpu/state/nice/min YANG schema element.
type System_Cpu_Nice_MinPath struct {
	*ygot.NodePath
}

// System_Cpu_Nice_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/min YANG schema element.
type System_Cpu_Nice_MinPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Nice_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/nice/min-time YANG schema element.
type System_Cpu_Nice_MinTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Nice_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/min-time YANG schema element.
type System_Cpu_Nice_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/nice/avg"
func (n *System_Cpu_NicePath) Avg() *System_Cpu_Nice_AvgPath {
	return &System_Cpu_Nice_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/nice/avg"
func (n *System_Cpu_NicePathAny) Avg() *System_Cpu_Nice_AvgPathAny {
	return &System_Cpu_Nice_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/nice/instant"
func (n *System_Cpu_NicePath) Instant() *System_Cpu_Nice_InstantPath {
	return &System_Cpu_Nice_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/nice/instant"
func (n *System_Cpu_NicePathAny) Instant() *System_Cpu_Nice_InstantPathAny {
	return &System_Cpu_Nice_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/nice/interval"
func (n *System_Cpu_NicePath) Interval() *System_Cpu_Nice_IntervalPath {
	return &System_Cpu_Nice_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/nice/interval"
func (n *System_Cpu_NicePathAny) Interval() *System_Cpu_Nice_IntervalPathAny {
	return &System_Cpu_Nice_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/nice/max"
func (n *System_Cpu_NicePath) Max() *System_Cpu_Nice_MaxPath {
	return &System_Cpu_Nice_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/nice/max"
func (n *System_Cpu_NicePathAny) Max() *System_Cpu_Nice_MaxPathAny {
	return &System_Cpu_Nice_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/nice/max-time"
func (n *System_Cpu_NicePath) MaxTime() *System_Cpu_Nice_MaxTimePath {
	return &System_Cpu_Nice_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/nice/max-time"
func (n *System_Cpu_NicePathAny) MaxTime() *System_Cpu_Nice_MaxTimePathAny {
	return &System_Cpu_Nice_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/nice/min"
func (n *System_Cpu_NicePath) Min() *System_Cpu_Nice_MinPath {
	return &System_Cpu_Nice_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/nice/min"
func (n *System_Cpu_NicePathAny) Min() *System_Cpu_Nice_MinPathAny {
	return &System_Cpu_Nice_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/nice/min-time"
func (n *System_Cpu_NicePath) MinTime() *System_Cpu_Nice_MinTimePath {
	return &System_Cpu_Nice_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/nice/min-time"
func (n *System_Cpu_NicePathAny) MinTime() *System_Cpu_Nice_MinTimePathAny {
	return &System_Cpu_Nice_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Cpu_SoftwareInterruptPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt YANG schema element.
type System_Cpu_SoftwareInterruptPath struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterruptPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt YANG schema element.
type System_Cpu_SoftwareInterruptPathAny struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_AvgPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/avg YANG schema element.
type System_Cpu_SoftwareInterrupt_AvgPath struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/avg YANG schema element.
type System_Cpu_SoftwareInterrupt_AvgPathAny struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_InstantPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/instant YANG schema element.
type System_Cpu_SoftwareInterrupt_InstantPath struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/instant YANG schema element.
type System_Cpu_SoftwareInterrupt_InstantPathAny struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/interval YANG schema element.
type System_Cpu_SoftwareInterrupt_IntervalPath struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/interval YANG schema element.
type System_Cpu_SoftwareInterrupt_IntervalPathAny struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_MaxPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/max YANG schema element.
type System_Cpu_SoftwareInterrupt_MaxPath struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/max YANG schema element.
type System_Cpu_SoftwareInterrupt_MaxPathAny struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/max-time YANG schema element.
type System_Cpu_SoftwareInterrupt_MaxTimePath struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/max-time YANG schema element.
type System_Cpu_SoftwareInterrupt_MaxTimePathAny struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_MinPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/min YANG schema element.
type System_Cpu_SoftwareInterrupt_MinPath struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/min YANG schema element.
type System_Cpu_SoftwareInterrupt_MinPathAny struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/min-time YANG schema element.
type System_Cpu_SoftwareInterrupt_MinTimePath struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/min-time YANG schema element.
type System_Cpu_SoftwareInterrupt_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/software-interrupt/avg"
func (n *System_Cpu_SoftwareInterruptPath) Avg() *System_Cpu_SoftwareInterrupt_AvgPath {
	return &System_Cpu_SoftwareInterrupt_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/software-interrupt/avg"
func (n *System_Cpu_SoftwareInterruptPathAny) Avg() *System_Cpu_SoftwareInterrupt_AvgPathAny {
	return &System_Cpu_SoftwareInterrupt_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/software-interrupt/instant"
func (n *System_Cpu_SoftwareInterruptPath) Instant() *System_Cpu_SoftwareInterrupt_InstantPath {
	return &System_Cpu_SoftwareInterrupt_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/software-interrupt/instant"
func (n *System_Cpu_SoftwareInterruptPathAny) Instant() *System_Cpu_SoftwareInterrupt_InstantPathAny {
	return &System_Cpu_SoftwareInterrupt_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/software-interrupt/interval"
func (n *System_Cpu_SoftwareInterruptPath) Interval() *System_Cpu_SoftwareInterrupt_IntervalPath {
	return &System_Cpu_SoftwareInterrupt_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/software-interrupt/interval"
func (n *System_Cpu_SoftwareInterruptPathAny) Interval() *System_Cpu_SoftwareInterrupt_IntervalPathAny {
	return &System_Cpu_SoftwareInterrupt_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/software-interrupt/max"
func (n *System_Cpu_SoftwareInterruptPath) Max() *System_Cpu_SoftwareInterrupt_MaxPath {
	return &System_Cpu_SoftwareInterrupt_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/software-interrupt/max"
func (n *System_Cpu_SoftwareInterruptPathAny) Max() *System_Cpu_SoftwareInterrupt_MaxPathAny {
	return &System_Cpu_SoftwareInterrupt_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/software-interrupt/max-time"
func (n *System_Cpu_SoftwareInterruptPath) MaxTime() *System_Cpu_SoftwareInterrupt_MaxTimePath {
	return &System_Cpu_SoftwareInterrupt_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/software-interrupt/max-time"
func (n *System_Cpu_SoftwareInterruptPathAny) MaxTime() *System_Cpu_SoftwareInterrupt_MaxTimePathAny {
	return &System_Cpu_SoftwareInterrupt_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/software-interrupt/min"
func (n *System_Cpu_SoftwareInterruptPath) Min() *System_Cpu_SoftwareInterrupt_MinPath {
	return &System_Cpu_SoftwareInterrupt_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/software-interrupt/min"
func (n *System_Cpu_SoftwareInterruptPathAny) Min() *System_Cpu_SoftwareInterrupt_MinPathAny {
	return &System_Cpu_SoftwareInterrupt_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/software-interrupt/min-time"
func (n *System_Cpu_SoftwareInterruptPath) MinTime() *System_Cpu_SoftwareInterrupt_MinTimePath {
	return &System_Cpu_SoftwareInterrupt_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/software-interrupt/min-time"
func (n *System_Cpu_SoftwareInterruptPathAny) MinTime() *System_Cpu_SoftwareInterrupt_MinTimePathAny {
	return &System_Cpu_SoftwareInterrupt_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Cpu_TotalPath represents the /openconfig-system/system/cpus/cpu/state/total YANG schema element.
type System_Cpu_TotalPath struct {
	*ygot.NodePath
}

// System_Cpu_TotalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total YANG schema element.
type System_Cpu_TotalPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Total_AvgPath represents the /openconfig-system/system/cpus/cpu/state/total/avg YANG schema element.
type System_Cpu_Total_AvgPath struct {
	*ygot.NodePath
}

// System_Cpu_Total_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/avg YANG schema element.
type System_Cpu_Total_AvgPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Total_InstantPath represents the /openconfig-system/system/cpus/cpu/state/total/instant YANG schema element.
type System_Cpu_Total_InstantPath struct {
	*ygot.NodePath
}

// System_Cpu_Total_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/instant YANG schema element.
type System_Cpu_Total_InstantPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Total_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/total/interval YANG schema element.
type System_Cpu_Total_IntervalPath struct {
	*ygot.NodePath
}

// System_Cpu_Total_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/interval YANG schema element.
type System_Cpu_Total_IntervalPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Total_MaxPath represents the /openconfig-system/system/cpus/cpu/state/total/max YANG schema element.
type System_Cpu_Total_MaxPath struct {
	*ygot.NodePath
}

// System_Cpu_Total_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/max YANG schema element.
type System_Cpu_Total_MaxPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Total_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/total/max-time YANG schema element.
type System_Cpu_Total_MaxTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Total_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/max-time YANG schema element.
type System_Cpu_Total_MaxTimePathAny struct {
	*ygot.NodePath
}

// System_Cpu_Total_MinPath represents the /openconfig-system/system/cpus/cpu/state/total/min YANG schema element.
type System_Cpu_Total_MinPath struct {
	*ygot.NodePath
}

// System_Cpu_Total_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/min YANG schema element.
type System_Cpu_Total_MinPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Total_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/total/min-time YANG schema element.
type System_Cpu_Total_MinTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Total_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/min-time YANG schema element.
type System_Cpu_Total_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/total/avg"
func (n *System_Cpu_TotalPath) Avg() *System_Cpu_Total_AvgPath {
	return &System_Cpu_Total_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/total/avg"
func (n *System_Cpu_TotalPathAny) Avg() *System_Cpu_Total_AvgPathAny {
	return &System_Cpu_Total_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/total/instant"
func (n *System_Cpu_TotalPath) Instant() *System_Cpu_Total_InstantPath {
	return &System_Cpu_Total_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/total/instant"
func (n *System_Cpu_TotalPathAny) Instant() *System_Cpu_Total_InstantPathAny {
	return &System_Cpu_Total_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/total/interval"
func (n *System_Cpu_TotalPath) Interval() *System_Cpu_Total_IntervalPath {
	return &System_Cpu_Total_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/total/interval"
func (n *System_Cpu_TotalPathAny) Interval() *System_Cpu_Total_IntervalPathAny {
	return &System_Cpu_Total_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/total/max"
func (n *System_Cpu_TotalPath) Max() *System_Cpu_Total_MaxPath {
	return &System_Cpu_Total_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/total/max"
func (n *System_Cpu_TotalPathAny) Max() *System_Cpu_Total_MaxPathAny {
	return &System_Cpu_Total_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/total/max-time"
func (n *System_Cpu_TotalPath) MaxTime() *System_Cpu_Total_MaxTimePath {
	return &System_Cpu_Total_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/total/max-time"
func (n *System_Cpu_TotalPathAny) MaxTime() *System_Cpu_Total_MaxTimePathAny {
	return &System_Cpu_Total_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/total/min"
func (n *System_Cpu_TotalPath) Min() *System_Cpu_Total_MinPath {
	return &System_Cpu_Total_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/total/min"
func (n *System_Cpu_TotalPathAny) Min() *System_Cpu_Total_MinPathAny {
	return &System_Cpu_Total_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/total/min-time"
func (n *System_Cpu_TotalPath) MinTime() *System_Cpu_Total_MinTimePath {
	return &System_Cpu_Total_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/total/min-time"
func (n *System_Cpu_TotalPathAny) MinTime() *System_Cpu_Total_MinTimePathAny {
	return &System_Cpu_Total_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Cpu_UserPath represents the /openconfig-system/system/cpus/cpu/state/user YANG schema element.
type System_Cpu_UserPath struct {
	*ygot.NodePath
}

// System_Cpu_UserPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user YANG schema element.
type System_Cpu_UserPathAny struct {
	*ygot.NodePath
}

// System_Cpu_User_AvgPath represents the /openconfig-system/system/cpus/cpu/state/user/avg YANG schema element.
type System_Cpu_User_AvgPath struct {
	*ygot.NodePath
}

// System_Cpu_User_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/avg YANG schema element.
type System_Cpu_User_AvgPathAny struct {
	*ygot.NodePath
}

// System_Cpu_User_InstantPath represents the /openconfig-system/system/cpus/cpu/state/user/instant YANG schema element.
type System_Cpu_User_InstantPath struct {
	*ygot.NodePath
}

// System_Cpu_User_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/instant YANG schema element.
type System_Cpu_User_InstantPathAny struct {
	*ygot.NodePath
}

// System_Cpu_User_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/user/interval YANG schema element.
type System_Cpu_User_IntervalPath struct {
	*ygot.NodePath
}

// System_Cpu_User_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/interval YANG schema element.
type System_Cpu_User_IntervalPathAny struct {
	*ygot.NodePath
}

// System_Cpu_User_MaxPath represents the /openconfig-system/system/cpus/cpu/state/user/max YANG schema element.
type System_Cpu_User_MaxPath struct {
	*ygot.NodePath
}

// System_Cpu_User_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/max YANG schema element.
type System_Cpu_User_MaxPathAny struct {
	*ygot.NodePath
}

// System_Cpu_User_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/user/max-time YANG schema element.
type System_Cpu_User_MaxTimePath struct {
	*ygot.NodePath
}

// System_Cpu_User_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/max-time YANG schema element.
type System_Cpu_User_MaxTimePathAny struct {
	*ygot.NodePath
}

// System_Cpu_User_MinPath represents the /openconfig-system/system/cpus/cpu/state/user/min YANG schema element.
type System_Cpu_User_MinPath struct {
	*ygot.NodePath
}

// System_Cpu_User_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/min YANG schema element.
type System_Cpu_User_MinPathAny struct {
	*ygot.NodePath
}

// System_Cpu_User_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/user/min-time YANG schema element.
type System_Cpu_User_MinTimePath struct {
	*ygot.NodePath
}

// System_Cpu_User_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/min-time YANG schema element.
type System_Cpu_User_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/user/avg"
func (n *System_Cpu_UserPath) Avg() *System_Cpu_User_AvgPath {
	return &System_Cpu_User_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/user/avg"
func (n *System_Cpu_UserPathAny) Avg() *System_Cpu_User_AvgPathAny {
	return &System_Cpu_User_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/user/instant"
func (n *System_Cpu_UserPath) Instant() *System_Cpu_User_InstantPath {
	return &System_Cpu_User_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/user/instant"
func (n *System_Cpu_UserPathAny) Instant() *System_Cpu_User_InstantPathAny {
	return &System_Cpu_User_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/user/interval"
func (n *System_Cpu_UserPath) Interval() *System_Cpu_User_IntervalPath {
	return &System_Cpu_User_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/user/interval"
func (n *System_Cpu_UserPathAny) Interval() *System_Cpu_User_IntervalPathAny {
	return &System_Cpu_User_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/user/max"
func (n *System_Cpu_UserPath) Max() *System_Cpu_User_MaxPath {
	return &System_Cpu_User_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/user/max"
func (n *System_Cpu_UserPathAny) Max() *System_Cpu_User_MaxPathAny {
	return &System_Cpu_User_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/user/max-time"
func (n *System_Cpu_UserPath) MaxTime() *System_Cpu_User_MaxTimePath {
	return &System_Cpu_User_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/user/max-time"
func (n *System_Cpu_UserPathAny) MaxTime() *System_Cpu_User_MaxTimePathAny {
	return &System_Cpu_User_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/user/min"
func (n *System_Cpu_UserPath) Min() *System_Cpu_User_MinPath {
	return &System_Cpu_User_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/user/min"
func (n *System_Cpu_UserPathAny) Min() *System_Cpu_User_MinPathAny {
	return &System_Cpu_User_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/user/min-time"
func (n *System_Cpu_UserPath) MinTime() *System_Cpu_User_MinTimePath {
	return &System_Cpu_User_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/user/min-time"
func (n *System_Cpu_UserPathAny) MinTime() *System_Cpu_User_MinTimePathAny {
	return &System_Cpu_User_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Cpu_WaitPath represents the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type System_Cpu_WaitPath struct {
	*ygot.NodePath
}

// System_Cpu_WaitPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type System_Cpu_WaitPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_AvgPath represents the /openconfig-system/system/cpus/cpu/state/wait/avg YANG schema element.
type System_Cpu_Wait_AvgPath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/avg YANG schema element.
type System_Cpu_Wait_AvgPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_InstantPath represents the /openconfig-system/system/cpus/cpu/state/wait/instant YANG schema element.
type System_Cpu_Wait_InstantPath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/instant YANG schema element.
type System_Cpu_Wait_InstantPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/wait/interval YANG schema element.
type System_Cpu_Wait_IntervalPath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/interval YANG schema element.
type System_Cpu_Wait_IntervalPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MaxPath represents the /openconfig-system/system/cpus/cpu/state/wait/max YANG schema element.
type System_Cpu_Wait_MaxPath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/max YANG schema element.
type System_Cpu_Wait_MaxPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/wait/max-time YANG schema element.
type System_Cpu_Wait_MaxTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/max-time YANG schema element.
type System_Cpu_Wait_MaxTimePathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MinPath represents the /openconfig-system/system/cpus/cpu/state/wait/min YANG schema element.
type System_Cpu_Wait_MinPath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/min YANG schema element.
type System_Cpu_Wait_MinPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/wait/min-time YANG schema element.
type System_Cpu_Wait_MinTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/min-time YANG schema element.
type System_Cpu_Wait_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/wait/avg"
func (n *System_Cpu_WaitPath) Avg() *System_Cpu_Wait_AvgPath {
	return &System_Cpu_Wait_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/wait/avg"
func (n *System_Cpu_WaitPathAny) Avg() *System_Cpu_Wait_AvgPathAny {
	return &System_Cpu_Wait_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/wait/instant"
func (n *System_Cpu_WaitPath) Instant() *System_Cpu_Wait_InstantPath {
	return &System_Cpu_Wait_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/wait/instant"
func (n *System_Cpu_WaitPathAny) Instant() *System_Cpu_Wait_InstantPathAny {
	return &System_Cpu_Wait_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/wait/interval"
func (n *System_Cpu_WaitPath) Interval() *System_Cpu_Wait_IntervalPath {
	return &System_Cpu_Wait_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/wait/interval"
func (n *System_Cpu_WaitPathAny) Interval() *System_Cpu_Wait_IntervalPathAny {
	return &System_Cpu_Wait_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/wait/max"
func (n *System_Cpu_WaitPath) Max() *System_Cpu_Wait_MaxPath {
	return &System_Cpu_Wait_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/wait/max"
func (n *System_Cpu_WaitPathAny) Max() *System_Cpu_Wait_MaxPathAny {
	return &System_Cpu_Wait_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/wait/max-time"
func (n *System_Cpu_WaitPath) MaxTime() *System_Cpu_Wait_MaxTimePath {
	return &System_Cpu_Wait_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/wait/max-time"
func (n *System_Cpu_WaitPathAny) MaxTime() *System_Cpu_Wait_MaxTimePathAny {
	return &System_Cpu_Wait_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/wait/min"
func (n *System_Cpu_WaitPath) Min() *System_Cpu_Wait_MinPath {
	return &System_Cpu_Wait_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/wait/min"
func (n *System_Cpu_WaitPathAny) Min() *System_Cpu_Wait_MinPathAny {
	return &System_Cpu_Wait_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/wait/min-time"
func (n *System_Cpu_WaitPath) MinTime() *System_Cpu_Wait_MinTimePath {
	return &System_Cpu_Wait_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/wait/min-time"
func (n *System_Cpu_WaitPathAny) MinTime() *System_Cpu_Wait_MinTimePathAny {
	return &System_Cpu_Wait_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_DnsPath represents the /openconfig-system/system/dns YANG schema element.
type System_DnsPath struct {
	*ygot.NodePath
}

// System_DnsPathAny represents the wildcard version of the /openconfig-system/system/dns YANG schema element.
type System_DnsPathAny struct {
	*ygot.NodePath
}

// System_Dns_SearchPath represents the /openconfig-system/system/dns/state/search YANG schema element.
type System_Dns_SearchPath struct {
	*ygot.NodePath
}

// System_Dns_SearchPathAny represents the wildcard version of the /openconfig-system/system/dns/state/search YANG schema element.
type System_Dns_SearchPathAny struct {
	*ygot.NodePath
}

// HostEntryAny (list): List of static host entries
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "host-entries/host-entry"
// Path from root: "/system/dns/host-entries/host-entry"
// Hostname (wildcarded): string
func (n *System_DnsPath) HostEntryAny() *System_Dns_HostEntryPathAny {
	return &System_Dns_HostEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": "*"},
			n,
		),
	}
}

// HostEntryAny (list): List of static host entries
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "host-entries/host-entry"
// Path from root: "/system/dns/host-entries/host-entry"
// Hostname (wildcarded): string
func (n *System_DnsPathAny) HostEntryAny() *System_Dns_HostEntryPathAny {
	return &System_Dns_HostEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": "*"},
			n,
		),
	}
}

// HostEntry (list): List of static host entries
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "host-entries/host-entry"
// Path from root: "/system/dns/host-entries/host-entry"
// Hostname: string
func (n *System_DnsPath) HostEntry(Hostname string) *System_Dns_HostEntryPath {
	return &System_Dns_HostEntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": Hostname},
			n,
		),
	}
}

// HostEntry (list): List of static host entries
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "host-entries/host-entry"
// Path from root: "/system/dns/host-entries/host-entry"
// Hostname: string
func (n *System_DnsPathAny) HostEntry(Hostname string) *System_Dns_HostEntryPathAny {
	return &System_Dns_HostEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": Hostname},
			n,
		),
	}
}

// Search (leaf): An ordered list of domains to search when resolving
// a host name.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/search"
// Path from root: "/system/dns/state/search"
func (n *System_DnsPath) Search() *System_Dns_SearchPath {
	return &System_Dns_SearchPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "search"},
			map[string]interface{}{},
			n,
		),
	}
}

// Search (leaf): An ordered list of domains to search when resolving
// a host name.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/search"
// Path from root: "/system/dns/state/search"
func (n *System_DnsPathAny) Search() *System_Dns_SearchPathAny {
	return &System_Dns_SearchPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "search"},
			map[string]interface{}{},
			n,
		),
	}
}

// ServerAny (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/dns/servers/server"
// Address (wildcarded): string
func (n *System_DnsPath) ServerAny() *System_Dns_ServerPathAny {
	return &System_Dns_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// ServerAny (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/dns/servers/server"
// Address (wildcarded): string
func (n *System_DnsPathAny) ServerAny() *System_Dns_ServerPathAny {
	return &System_Dns_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// Server (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/dns/servers/server"
// Address: string
func (n *System_DnsPath) Server(Address string) *System_Dns_ServerPath {
	return &System_Dns_ServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// Server (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/dns/servers/server"
// Address: string
func (n *System_DnsPathAny) Server(Address string) *System_Dns_ServerPathAny {
	return &System_Dns_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// System_Dns_HostEntryPath represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPath struct {
	*ygot.NodePath
}

// System_Dns_HostEntryPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPathAny struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_AliasPath represents the /openconfig-system/system/dns/host-entries/host-entry/state/alias YANG schema element.
type System_Dns_HostEntry_AliasPath struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_AliasPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/alias YANG schema element.
type System_Dns_HostEntry_AliasPathAny struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_HostnamePath represents the /openconfig-system/system/dns/host-entries/host-entry/state/hostname YANG schema element.
type System_Dns_HostEntry_HostnamePath struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_HostnamePathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/hostname YANG schema element.
type System_Dns_HostEntry_HostnamePathAny struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_Ipv4AddressPath represents the /openconfig-system/system/dns/host-entries/host-entry/state/ipv4-address YANG schema element.
type System_Dns_HostEntry_Ipv4AddressPath struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_Ipv4AddressPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/ipv4-address YANG schema element.
type System_Dns_HostEntry_Ipv4AddressPathAny struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_Ipv6AddressPath represents the /openconfig-system/system/dns/host-entries/host-entry/state/ipv6-address YANG schema element.
type System_Dns_HostEntry_Ipv6AddressPath struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_Ipv6AddressPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/ipv6-address YANG schema element.
type System_Dns_HostEntry_Ipv6AddressPathAny struct {
	*ygot.NodePath
}

// Alias (leaf): Additional aliases for the hostname
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/alias"
// Path from root: "/system/dns/host-entries/host-entry/state/alias"
func (n *System_Dns_HostEntryPath) Alias() *System_Dns_HostEntry_AliasPath {
	return &System_Dns_HostEntry_AliasPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "alias"},
			map[string]interface{}{},
			n,
		),
	}
}

// Alias (leaf): Additional aliases for the hostname
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/alias"
// Path from root: "/system/dns/host-entries/host-entry/state/alias"
func (n *System_Dns_HostEntryPathAny) Alias() *System_Dns_HostEntry_AliasPathAny {
	return &System_Dns_HostEntry_AliasPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "alias"},
			map[string]interface{}{},
			n,
		),
	}
}

// Hostname (leaf): Hostname for the static DNS entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/hostname"
// Path from root: "/system/dns/host-entries/host-entry/state/hostname"
func (n *System_Dns_HostEntryPath) Hostname() *System_Dns_HostEntry_HostnamePath {
	return &System_Dns_HostEntry_HostnamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hostname"},
			map[string]interface{}{},
			n,
		),
	}
}

// Hostname (leaf): Hostname for the static DNS entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/hostname"
// Path from root: "/system/dns/host-entries/host-entry/state/hostname"
func (n *System_Dns_HostEntryPathAny) Hostname() *System_Dns_HostEntry_HostnamePathAny {
	return &System_Dns_HostEntry_HostnamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hostname"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4Address (leaf): List of IPv4 addresses for the host entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/ipv4-address"
// Path from root: "/system/dns/host-entries/host-entry/state/ipv4-address"
func (n *System_Dns_HostEntryPath) Ipv4Address() *System_Dns_HostEntry_Ipv4AddressPath {
	return &System_Dns_HostEntry_Ipv4AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ipv4-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4Address (leaf): List of IPv4 addresses for the host entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/ipv4-address"
// Path from root: "/system/dns/host-entries/host-entry/state/ipv4-address"
func (n *System_Dns_HostEntryPathAny) Ipv4Address() *System_Dns_HostEntry_Ipv4AddressPathAny {
	return &System_Dns_HostEntry_Ipv4AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ipv4-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6Address (leaf): List of IPv6 addresses for the host entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/ipv6-address"
// Path from root: "/system/dns/host-entries/host-entry/state/ipv6-address"
func (n *System_Dns_HostEntryPath) Ipv6Address() *System_Dns_HostEntry_Ipv6AddressPath {
	return &System_Dns_HostEntry_Ipv6AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ipv6-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6Address (leaf): List of IPv6 addresses for the host entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/ipv6-address"
// Path from root: "/system/dns/host-entries/host-entry/state/ipv6-address"
func (n *System_Dns_HostEntryPathAny) Ipv6Address() *System_Dns_HostEntry_Ipv6AddressPathAny {
	return &System_Dns_HostEntry_Ipv6AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ipv6-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Dns_ServerPath represents the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPath struct {
	*ygot.NodePath
}

// System_Dns_ServerPathAny represents the wildcard version of the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPathAny struct {
	*ygot.NodePath
}

// System_Dns_Server_AddressPath represents the /openconfig-system/system/dns/servers/server/state/address YANG schema element.
type System_Dns_Server_AddressPath struct {
	*ygot.NodePath
}

// System_Dns_Server_AddressPathAny represents the wildcard version of the /openconfig-system/system/dns/servers/server/state/address YANG schema element.
type System_Dns_Server_AddressPathAny struct {
	*ygot.NodePath
}

// System_Dns_Server_PortPath represents the /openconfig-system/system/dns/servers/server/state/port YANG schema element.
type System_Dns_Server_PortPath struct {
	*ygot.NodePath
}

// System_Dns_Server_PortPathAny represents the wildcard version of the /openconfig-system/system/dns/servers/server/state/port YANG schema element.
type System_Dns_Server_PortPathAny struct {
	*ygot.NodePath
}

// Address (leaf): The address of the DNS server, can be either IPv4
// or IPv6.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/address"
// Path from root: "/system/dns/servers/server/state/address"
func (n *System_Dns_ServerPath) Address() *System_Dns_Server_AddressPath {
	return &System_Dns_Server_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): The address of the DNS server, can be either IPv4
// or IPv6.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/address"
// Path from root: "/system/dns/servers/server/state/address"
func (n *System_Dns_ServerPathAny) Address() *System_Dns_Server_AddressPathAny {
	return &System_Dns_Server_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number of the DNS server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/port"
// Path from root: "/system/dns/servers/server/state/port"
func (n *System_Dns_ServerPath) Port() *System_Dns_Server_PortPath {
	return &System_Dns_Server_PortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number of the DNS server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/port"
// Path from root: "/system/dns/servers/server/state/port"
func (n *System_Dns_ServerPathAny) Port() *System_Dns_Server_PortPathAny {
	return &System_Dns_Server_PortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_LicensePath represents the /openconfig-system/system/license YANG schema element.
type System_LicensePath struct {
	*ygot.NodePath
}

// System_LicensePathAny represents the wildcard version of the /openconfig-system/system/license YANG schema element.
type System_LicensePathAny struct {
	*ygot.NodePath
}

// LicenseAny (list): List of licenses.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "licenses/license"
// Path from root: "/system/license/licenses/license"
// LicenseId (wildcarded): string
func (n *System_LicensePath) LicenseAny() *System_License_LicensePathAny {
	return &System_License_LicensePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": "*"},
			n,
		),
	}
}

// LicenseAny (list): List of licenses.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "licenses/license"
// Path from root: "/system/license/licenses/license"
// LicenseId (wildcarded): string
func (n *System_LicensePathAny) LicenseAny() *System_License_LicensePathAny {
	return &System_License_LicensePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": "*"},
			n,
		),
	}
}

// License (list): List of licenses.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "licenses/license"
// Path from root: "/system/license/licenses/license"
// LicenseId: string
func (n *System_LicensePath) License(LicenseId string) *System_License_LicensePath {
	return &System_License_LicensePath{
		NodePath: ygot.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": LicenseId},
			n,
		),
	}
}

// License (list): List of licenses.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "licenses/license"
// Path from root: "/system/license/licenses/license"
// LicenseId: string
func (n *System_LicensePathAny) License(LicenseId string) *System_License_LicensePathAny {
	return &System_License_LicensePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": LicenseId},
			n,
		),
	}
}

// System_License_LicensePath represents the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePath struct {
	*ygot.NodePath
}

// System_License_LicensePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePathAny struct {
	*ygot.NodePath
}

// System_License_License_ActivePath represents the /openconfig-system/system/license/licenses/license/state/active YANG schema element.
type System_License_License_ActivePath struct {
	*ygot.NodePath
}

// System_License_License_ActivePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/active YANG schema element.
type System_License_License_ActivePathAny struct {
	*ygot.NodePath
}

// System_License_License_DescriptionPath represents the /openconfig-system/system/license/licenses/license/state/description YANG schema element.
type System_License_License_DescriptionPath struct {
	*ygot.NodePath
}

// System_License_License_DescriptionPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/description YANG schema element.
type System_License_License_DescriptionPathAny struct {
	*ygot.NodePath
}

// System_License_License_ExpirationDatePath represents the /openconfig-system/system/license/licenses/license/state/expiration-date YANG schema element.
type System_License_License_ExpirationDatePath struct {
	*ygot.NodePath
}

// System_License_License_ExpirationDatePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/expiration-date YANG schema element.
type System_License_License_ExpirationDatePathAny struct {
	*ygot.NodePath
}

// System_License_License_ExpiredPath represents the /openconfig-system/system/license/licenses/license/state/expired YANG schema element.
type System_License_License_ExpiredPath struct {
	*ygot.NodePath
}

// System_License_License_ExpiredPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/expired YANG schema element.
type System_License_License_ExpiredPathAny struct {
	*ygot.NodePath
}

// System_License_License_InUsePath represents the /openconfig-system/system/license/licenses/license/state/in-use YANG schema element.
type System_License_License_InUsePath struct {
	*ygot.NodePath
}

// System_License_License_InUsePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/in-use YANG schema element.
type System_License_License_InUsePathAny struct {
	*ygot.NodePath
}

// System_License_License_IssueDatePath represents the /openconfig-system/system/license/licenses/license/state/issue-date YANG schema element.
type System_License_License_IssueDatePath struct {
	*ygot.NodePath
}

// System_License_License_IssueDatePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/issue-date YANG schema element.
type System_License_License_IssueDatePathAny struct {
	*ygot.NodePath
}

// System_License_License_LicenseDataPath represents the /openconfig-system/system/license/licenses/license/state/license-data YANG schema element.
type System_License_License_LicenseDataPath struct {
	*ygot.NodePath
}

// System_License_License_LicenseDataPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/license-data YANG schema element.
type System_License_License_LicenseDataPathAny struct {
	*ygot.NodePath
}

// System_License_License_LicenseIdPath represents the /openconfig-system/system/license/licenses/license/state/license-id YANG schema element.
type System_License_License_LicenseIdPath struct {
	*ygot.NodePath
}

// System_License_License_LicenseIdPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/license-id YANG schema element.
type System_License_License_LicenseIdPathAny struct {
	*ygot.NodePath
}

// System_License_License_ValidPath represents the /openconfig-system/system/license/licenses/license/state/valid YANG schema element.
type System_License_License_ValidPath struct {
	*ygot.NodePath
}

// System_License_License_ValidPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/valid YANG schema element.
type System_License_License_ValidPathAny struct {
	*ygot.NodePath
}

// Active (leaf): The activation state of the license.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/active"
// Path from root: "/system/license/licenses/license/state/active"
func (n *System_License_LicensePath) Active() *System_License_License_ActivePath {
	return &System_License_License_ActivePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// Active (leaf): The activation state of the license.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/active"
// Path from root: "/system/license/licenses/license/state/active"
func (n *System_License_LicensePathAny) Active() *System_License_License_ActivePathAny {
	return &System_License_License_ActivePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): The license description.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/description"
// Path from root: "/system/license/licenses/license/state/description"
func (n *System_License_LicensePath) Description() *System_License_License_DescriptionPath {
	return &System_License_License_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): The license description.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/description"
// Path from root: "/system/license/licenses/license/state/description"
func (n *System_License_LicensePathAny) Description() *System_License_License_DescriptionPathAny {
	return &System_License_License_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExpirationDate (leaf): The date and time at which the license will expire, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC). Zero if it does not expire.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/expiration-date"
// Path from root: "/system/license/licenses/license/state/expiration-date"
func (n *System_License_LicensePath) ExpirationDate() *System_License_License_ExpirationDatePath {
	return &System_License_License_ExpirationDatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "expiration-date"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExpirationDate (leaf): The date and time at which the license will expire, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC). Zero if it does not expire.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/expiration-date"
// Path from root: "/system/license/licenses/license/state/expiration-date"
func (n *System_License_LicensePathAny) ExpirationDate() *System_License_License_ExpirationDatePathAny {
	return &System_License_License_ExpirationDatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "expiration-date"},
			map[string]interface{}{},
			n,
		),
	}
}

// Expired (leaf): The license has expired.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/expired"
// Path from root: "/system/license/licenses/license/state/expired"
func (n *System_License_LicensePath) Expired() *System_License_License_ExpiredPath {
	return &System_License_License_ExpiredPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "expired"},
			map[string]interface{}{},
			n,
		),
	}
}

// Expired (leaf): The license has expired.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/expired"
// Path from root: "/system/license/licenses/license/state/expired"
func (n *System_License_LicensePathAny) Expired() *System_License_License_ExpiredPathAny {
	return &System_License_License_ExpiredPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "expired"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUse (leaf): The license is in use. Different from active. This states that the
// license is effectively being used in addition to being active. If
// license for feature X was activated but feature X is not being used,
// then this should be false.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/in-use"
// Path from root: "/system/license/licenses/license/state/in-use"
func (n *System_License_LicensePath) InUse() *System_License_License_InUsePath {
	return &System_License_License_InUsePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-use"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUse (leaf): The license is in use. Different from active. This states that the
// license is effectively being used in addition to being active. If
// license for feature X was activated but feature X is not being used,
// then this should be false.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/in-use"
// Path from root: "/system/license/licenses/license/state/in-use"
func (n *System_License_LicensePathAny) InUse() *System_License_License_InUsePathAny {
	return &System_License_License_InUsePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-use"},
			map[string]interface{}{},
			n,
		),
	}
}

// IssueDate (leaf): The date and time at which the license was issued, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/issue-date"
// Path from root: "/system/license/licenses/license/state/issue-date"
func (n *System_License_LicensePath) IssueDate() *System_License_License_IssueDatePath {
	return &System_License_License_IssueDatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "issue-date"},
			map[string]interface{}{},
			n,
		),
	}
}

// IssueDate (leaf): The date and time at which the license was issued, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/issue-date"
// Path from root: "/system/license/licenses/license/state/issue-date"
func (n *System_License_LicensePathAny) IssueDate() *System_License_License_IssueDatePathAny {
	return &System_License_License_IssueDatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "issue-date"},
			map[string]interface{}{},
			n,
		),
	}
}

// LicenseData (leaf): The contents of the licence (if required) - which may be
// supplied as a binary blob, or a simple string value. If this
// value is considered sensitive, it may be read as an empty value.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/license-data"
// Path from root: "/system/license/licenses/license/state/license-data"
func (n *System_License_LicensePath) LicenseData() *System_License_License_LicenseDataPath {
	return &System_License_License_LicenseDataPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "license-data"},
			map[string]interface{}{},
			n,
		),
	}
}

// LicenseData (leaf): The contents of the licence (if required) - which may be
// supplied as a binary blob, or a simple string value. If this
// value is considered sensitive, it may be read as an empty value.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/license-data"
// Path from root: "/system/license/licenses/license/state/license-data"
func (n *System_License_LicensePathAny) LicenseData() *System_License_License_LicenseDataPathAny {
	return &System_License_License_LicenseDataPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "license-data"},
			map[string]interface{}{},
			n,
		),
	}
}

// LicenseId (leaf): License ID. A string that uniquelly identifies the license. The
// platform should list all the licenses it supports being activated.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/license-id"
// Path from root: "/system/license/licenses/license/state/license-id"
func (n *System_License_LicensePath) LicenseId() *System_License_License_LicenseIdPath {
	return &System_License_License_LicenseIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "license-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LicenseId (leaf): License ID. A string that uniquelly identifies the license. The
// platform should list all the licenses it supports being activated.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/license-id"
// Path from root: "/system/license/licenses/license/state/license-id"
func (n *System_License_LicensePathAny) LicenseId() *System_License_License_LicenseIdPathAny {
	return &System_License_License_LicenseIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "license-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Valid (leaf): The license is valid. Can be activated in the system or platform.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/valid"
// Path from root: "/system/license/licenses/license/state/valid"
func (n *System_License_LicensePath) Valid() *System_License_License_ValidPath {
	return &System_License_License_ValidPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "valid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Valid (leaf): The license is valid. Can be activated in the system or platform.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/valid"
// Path from root: "/system/license/licenses/license/state/valid"
func (n *System_License_LicensePathAny) Valid() *System_License_License_ValidPathAny {
	return &System_License_License_ValidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "valid"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_LoggingPath represents the /openconfig-system/system/logging YANG schema element.
type System_LoggingPath struct {
	*ygot.NodePath
}

// System_LoggingPathAny represents the wildcard version of the /openconfig-system/system/logging YANG schema element.
type System_LoggingPathAny struct {
	*ygot.NodePath
}

// Console (container): Top-level container for data related to console-based
// logging
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "console"
// Path from root: "/system/logging/console"
func (n *System_LoggingPath) Console() *System_Logging_ConsolePath {
	return &System_Logging_ConsolePath{
		NodePath: ygot.NewNodePath(
			[]string{"console"},
			map[string]interface{}{},
			n,
		),
	}
}

// Console (container): Top-level container for data related to console-based
// logging
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "console"
// Path from root: "/system/logging/console"
func (n *System_LoggingPathAny) Console() *System_Logging_ConsolePathAny {
	return &System_Logging_ConsolePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"console"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemoteServerAny (list): List of remote log servers
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "remote-servers/remote-server"
// Path from root: "/system/logging/remote-servers/remote-server"
// Host (wildcarded): string
func (n *System_LoggingPath) RemoteServerAny() *System_Logging_RemoteServerPathAny {
	return &System_Logging_RemoteServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": "*"},
			n,
		),
	}
}

// RemoteServerAny (list): List of remote log servers
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "remote-servers/remote-server"
// Path from root: "/system/logging/remote-servers/remote-server"
// Host (wildcarded): string
func (n *System_LoggingPathAny) RemoteServerAny() *System_Logging_RemoteServerPathAny {
	return &System_Logging_RemoteServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": "*"},
			n,
		),
	}
}

// RemoteServer (list): List of remote log servers
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "remote-servers/remote-server"
// Path from root: "/system/logging/remote-servers/remote-server"
// Host: string
func (n *System_LoggingPath) RemoteServer(Host string) *System_Logging_RemoteServerPath {
	return &System_Logging_RemoteServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": Host},
			n,
		),
	}
}

// RemoteServer (list): List of remote log servers
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "remote-servers/remote-server"
// Path from root: "/system/logging/remote-servers/remote-server"
// Host: string
func (n *System_LoggingPathAny) RemoteServer(Host string) *System_Logging_RemoteServerPathAny {
	return &System_Logging_RemoteServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": Host},
			n,
		),
	}
}

// System_Logging_ConsolePath represents the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_ConsolePath struct {
	*ygot.NodePath
}

// System_Logging_ConsolePathAny represents the wildcard version of the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_ConsolePathAny struct {
	*ygot.NodePath
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) SelectorAny() *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) SelectorAny() *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) SelectorAnySeverity(Facility E_SystemLogging_SYSLOG_FACILITY) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) SelectorAnySeverity(Facility E_SystemLogging_SYSLOG_FACILITY) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) SelectorAnyFacility(Severity E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) SelectorAnyFacility(Severity E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) Selector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPath {
	return &System_Logging_Console_SelectorPath{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) Selector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// System_Logging_Console_SelectorPath represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPath struct {
	*ygot.NodePath
}

// System_Logging_Console_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPathAny struct {
	*ygot.NodePath
}

// System_Logging_Console_Selector_FacilityPath represents the /openconfig-system/system/logging/console/selectors/selector/state/facility YANG schema element.
type System_Logging_Console_Selector_FacilityPath struct {
	*ygot.NodePath
}

// System_Logging_Console_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector/state/facility YANG schema element.
type System_Logging_Console_Selector_FacilityPathAny struct {
	*ygot.NodePath
}

// System_Logging_Console_Selector_SeverityPath represents the /openconfig-system/system/logging/console/selectors/selector/state/severity YANG schema element.
type System_Logging_Console_Selector_SeverityPath struct {
	*ygot.NodePath
}

// System_Logging_Console_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector/state/severity YANG schema element.
type System_Logging_Console_Selector_SeverityPathAny struct {
	*ygot.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/facility"
// Path from root: "/system/logging/console/selectors/selector/state/facility"
func (n *System_Logging_Console_SelectorPath) Facility() *System_Logging_Console_Selector_FacilityPath {
	return &System_Logging_Console_Selector_FacilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/facility"
// Path from root: "/system/logging/console/selectors/selector/state/facility"
func (n *System_Logging_Console_SelectorPathAny) Facility() *System_Logging_Console_Selector_FacilityPathAny {
	return &System_Logging_Console_Selector_FacilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/severity"
// Path from root: "/system/logging/console/selectors/selector/state/severity"
func (n *System_Logging_Console_SelectorPath) Severity() *System_Logging_Console_Selector_SeverityPath {
	return &System_Logging_Console_Selector_SeverityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/severity"
// Path from root: "/system/logging/console/selectors/selector/state/severity"
func (n *System_Logging_Console_SelectorPathAny) Severity() *System_Logging_Console_Selector_SeverityPathAny {
	return &System_Logging_Console_Selector_SeverityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Logging_RemoteServerPath represents the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServerPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServerPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServerPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_HostPath represents the /openconfig-system/system/logging/remote-servers/remote-server/state/host YANG schema element.
type System_Logging_RemoteServer_HostPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_HostPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/state/host YANG schema element.
type System_Logging_RemoteServer_HostPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_RemotePortPath represents the /openconfig-system/system/logging/remote-servers/remote-server/state/remote-port YANG schema element.
type System_Logging_RemoteServer_RemotePortPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_RemotePortPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/state/remote-port YANG schema element.
type System_Logging_RemoteServer_RemotePortPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_SourceAddressPath represents the /openconfig-system/system/logging/remote-servers/remote-server/state/source-address YANG schema element.
type System_Logging_RemoteServer_SourceAddressPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/state/source-address YANG schema element.
type System_Logging_RemoteServer_SourceAddressPathAny struct {
	*ygot.NodePath
}

// Host (leaf): IP address or hostname of the remote log server
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/host"
// Path from root: "/system/logging/remote-servers/remote-server/state/host"
func (n *System_Logging_RemoteServerPath) Host() *System_Logging_RemoteServer_HostPath {
	return &System_Logging_RemoteServer_HostPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "host"},
			map[string]interface{}{},
			n,
		),
	}
}

// Host (leaf): IP address or hostname of the remote log server
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/host"
// Path from root: "/system/logging/remote-servers/remote-server/state/host"
func (n *System_Logging_RemoteServerPathAny) Host() *System_Logging_RemoteServer_HostPathAny {
	return &System_Logging_RemoteServer_HostPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "host"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemotePort (leaf): Sets the destination port number for syslog UDP messages to
// the server.  The default for syslog is 514.
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/remote-port"
// Path from root: "/system/logging/remote-servers/remote-server/state/remote-port"
func (n *System_Logging_RemoteServerPath) RemotePort() *System_Logging_RemoteServer_RemotePortPath {
	return &System_Logging_RemoteServer_RemotePortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "remote-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemotePort (leaf): Sets the destination port number for syslog UDP messages to
// the server.  The default for syslog is 514.
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/remote-port"
// Path from root: "/system/logging/remote-servers/remote-server/state/remote-port"
func (n *System_Logging_RemoteServerPathAny) RemotePort() *System_Logging_RemoteServer_RemotePortPathAny {
	return &System_Logging_RemoteServer_RemotePortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "remote-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) SelectorAny() *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) SelectorAny() *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) SelectorAnySeverity(Facility E_SystemLogging_SYSLOG_FACILITY) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) SelectorAnySeverity(Facility E_SystemLogging_SYSLOG_FACILITY) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) SelectorAnyFacility(Severity E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) SelectorAnyFacility(Severity E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) Selector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPath {
	return &System_Logging_RemoteServer_SelectorPath{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) Selector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address for packets to the log server
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/source-address"
// Path from root: "/system/logging/remote-servers/remote-server/state/source-address"
func (n *System_Logging_RemoteServerPath) SourceAddress() *System_Logging_RemoteServer_SourceAddressPath {
	return &System_Logging_RemoteServer_SourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address for packets to the log server
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/source-address"
// Path from root: "/system/logging/remote-servers/remote-server/state/source-address"
func (n *System_Logging_RemoteServerPathAny) SourceAddress() *System_Logging_RemoteServer_SourceAddressPathAny {
	return &System_Logging_RemoteServer_SourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Logging_RemoteServer_SelectorPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_SelectorPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_SelectorPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_Selector_FacilityPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state/facility YANG schema element.
type System_Logging_RemoteServer_Selector_FacilityPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state/facility YANG schema element.
type System_Logging_RemoteServer_Selector_FacilityPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_Selector_SeverityPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state/severity YANG schema element.
type System_Logging_RemoteServer_Selector_SeverityPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state/severity YANG schema element.
type System_Logging_RemoteServer_Selector_SeverityPathAny struct {
	*ygot.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/facility"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector/state/facility"
func (n *System_Logging_RemoteServer_SelectorPath) Facility() *System_Logging_RemoteServer_Selector_FacilityPath {
	return &System_Logging_RemoteServer_Selector_FacilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/facility"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector/state/facility"
func (n *System_Logging_RemoteServer_SelectorPathAny) Facility() *System_Logging_RemoteServer_Selector_FacilityPathAny {
	return &System_Logging_RemoteServer_Selector_FacilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/severity"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector/state/severity"
func (n *System_Logging_RemoteServer_SelectorPath) Severity() *System_Logging_RemoteServer_Selector_SeverityPath {
	return &System_Logging_RemoteServer_Selector_SeverityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/severity"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector/state/severity"
func (n *System_Logging_RemoteServer_SelectorPathAny) Severity() *System_Logging_RemoteServer_Selector_SeverityPathAny {
	return &System_Logging_RemoteServer_Selector_SeverityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_MemoryPath represents the /openconfig-system/system/memory YANG schema element.
type System_MemoryPath struct {
	*ygot.NodePath
}

// System_MemoryPathAny represents the wildcard version of the /openconfig-system/system/memory YANG schema element.
type System_MemoryPathAny struct {
	*ygot.NodePath
}

// System_Memory_FreePath represents the /openconfig-system/system/memory/state/free YANG schema element.
type System_Memory_FreePath struct {
	*ygot.NodePath
}

// System_Memory_FreePathAny represents the wildcard version of the /openconfig-system/system/memory/state/free YANG schema element.
type System_Memory_FreePathAny struct {
	*ygot.NodePath
}

// System_Memory_PhysicalPath represents the /openconfig-system/system/memory/state/physical YANG schema element.
type System_Memory_PhysicalPath struct {
	*ygot.NodePath
}

// System_Memory_PhysicalPathAny represents the wildcard version of the /openconfig-system/system/memory/state/physical YANG schema element.
type System_Memory_PhysicalPathAny struct {
	*ygot.NodePath
}

// System_Memory_ReservedPath represents the /openconfig-system/system/memory/state/reserved YANG schema element.
type System_Memory_ReservedPath struct {
	*ygot.NodePath
}

// System_Memory_ReservedPathAny represents the wildcard version of the /openconfig-system/system/memory/state/reserved YANG schema element.
type System_Memory_ReservedPathAny struct {
	*ygot.NodePath
}

// System_Memory_UsedPath represents the /openconfig-system/system/memory/state/used YANG schema element.
type System_Memory_UsedPath struct {
	*ygot.NodePath
}

// System_Memory_UsedPathAny represents the wildcard version of the /openconfig-system/system/memory/state/used YANG schema element.
type System_Memory_UsedPathAny struct {
	*ygot.NodePath
}

// Counters (container): Counters for tracking system memory errors
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/counters"
// Path from root: "/system/memory/state/counters"
func (n *System_MemoryPath) Counters() *System_Memory_CountersPath {
	return &System_Memory_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Counters for tracking system memory errors
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/counters"
// Path from root: "/system/memory/state/counters"
func (n *System_MemoryPathAny) Counters() *System_Memory_CountersPathAny {
	return &System_Memory_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Free (leaf): Memory that is not used and is available for allocation.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/free"
// Path from root: "/system/memory/state/free"
func (n *System_MemoryPath) Free() *System_Memory_FreePath {
	return &System_Memory_FreePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
	}
}

// Free (leaf): Memory that is not used and is available for allocation.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/free"
// Path from root: "/system/memory/state/free"
func (n *System_MemoryPathAny) Free() *System_Memory_FreePathAny {
	return &System_Memory_FreePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
	}
}

// Physical (leaf): Reports the total physical memory available on the
// system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/physical"
// Path from root: "/system/memory/state/physical"
func (n *System_MemoryPath) Physical() *System_Memory_PhysicalPath {
	return &System_Memory_PhysicalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "physical"},
			map[string]interface{}{},
			n,
		),
	}
}

// Physical (leaf): Reports the total physical memory available on the
// system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/physical"
// Path from root: "/system/memory/state/physical"
func (n *System_MemoryPathAny) Physical() *System_Memory_PhysicalPathAny {
	return &System_Memory_PhysicalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "physical"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reserved (leaf): Memory reserved for system use
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/reserved"
// Path from root: "/system/memory/state/reserved"
func (n *System_MemoryPath) Reserved() *System_Memory_ReservedPath {
	return &System_Memory_ReservedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "reserved"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reserved (leaf): Memory reserved for system use
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/reserved"
// Path from root: "/system/memory/state/reserved"
func (n *System_MemoryPathAny) Reserved() *System_Memory_ReservedPathAny {
	return &System_Memory_ReservedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "reserved"},
			map[string]interface{}{},
			n,
		),
	}
}

// Used (leaf): Memory that has been used and not available for allocation.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/used"
// Path from root: "/system/memory/state/used"
func (n *System_MemoryPath) Used() *System_Memory_UsedPath {
	return &System_Memory_UsedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
	}
}

// Used (leaf): Memory that has been used and not available for allocation.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/used"
// Path from root: "/system/memory/state/used"
func (n *System_MemoryPathAny) Used() *System_Memory_UsedPathAny {
	return &System_Memory_UsedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Memory_CountersPath represents the /openconfig-system/system/memory/state/counters YANG schema element.
type System_Memory_CountersPath struct {
	*ygot.NodePath
}

// System_Memory_CountersPathAny represents the wildcard version of the /openconfig-system/system/memory/state/counters YANG schema element.
type System_Memory_CountersPathAny struct {
	*ygot.NodePath
}

// System_Memory_Counters_CorrectableEccErrorsPath represents the /openconfig-system/system/memory/state/counters/correctable-ecc-errors YANG schema element.
type System_Memory_Counters_CorrectableEccErrorsPath struct {
	*ygot.NodePath
}

// System_Memory_Counters_CorrectableEccErrorsPathAny represents the wildcard version of the /openconfig-system/system/memory/state/counters/correctable-ecc-errors YANG schema element.
type System_Memory_Counters_CorrectableEccErrorsPathAny struct {
	*ygot.NodePath
}

// System_Memory_Counters_TotalEccErrorsPath represents the /openconfig-system/system/memory/state/counters/total-ecc-errors YANG schema element.
type System_Memory_Counters_TotalEccErrorsPath struct {
	*ygot.NodePath
}

// System_Memory_Counters_TotalEccErrorsPathAny represents the wildcard version of the /openconfig-system/system/memory/state/counters/total-ecc-errors YANG schema element.
type System_Memory_Counters_TotalEccErrorsPathAny struct {
	*ygot.NodePath
}

// System_Memory_Counters_UncorrectableEccErrorsPath represents the /openconfig-system/system/memory/state/counters/uncorrectable-ecc-errors YANG schema element.
type System_Memory_Counters_UncorrectableEccErrorsPath struct {
	*ygot.NodePath
}

// System_Memory_Counters_UncorrectableEccErrorsPathAny represents the wildcard version of the /openconfig-system/system/memory/state/counters/uncorrectable-ecc-errors YANG schema element.
type System_Memory_Counters_UncorrectableEccErrorsPathAny struct {
	*ygot.NodePath
}

// CorrectableEccErrors (leaf): Count of correctable ECC errors. Systems with ECC memory
// are capable of correcting Single-bit ECC errors.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "correctable-ecc-errors"
// Path from root: "/system/memory/state/counters/correctable-ecc-errors"
func (n *System_Memory_CountersPath) CorrectableEccErrors() *System_Memory_Counters_CorrectableEccErrorsPath {
	return &System_Memory_Counters_CorrectableEccErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"correctable-ecc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// CorrectableEccErrors (leaf): Count of correctable ECC errors. Systems with ECC memory
// are capable of correcting Single-bit ECC errors.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "correctable-ecc-errors"
// Path from root: "/system/memory/state/counters/correctable-ecc-errors"
func (n *System_Memory_CountersPathAny) CorrectableEccErrors() *System_Memory_Counters_CorrectableEccErrorsPathAny {
	return &System_Memory_Counters_CorrectableEccErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"correctable-ecc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// TotalEccErrors (leaf): Count of total ECC errors, this includes both correctable
// and uncorrectable ECC errors.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "total-ecc-errors"
// Path from root: "/system/memory/state/counters/total-ecc-errors"
func (n *System_Memory_CountersPath) TotalEccErrors() *System_Memory_Counters_TotalEccErrorsPath {
	return &System_Memory_Counters_TotalEccErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"total-ecc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// TotalEccErrors (leaf): Count of total ECC errors, this includes both correctable
// and uncorrectable ECC errors.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "total-ecc-errors"
// Path from root: "/system/memory/state/counters/total-ecc-errors"
func (n *System_Memory_CountersPathAny) TotalEccErrors() *System_Memory_Counters_TotalEccErrorsPathAny {
	return &System_Memory_Counters_TotalEccErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"total-ecc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// UncorrectableEccErrors (leaf): Count of uncorrectable ECC errors. Systems with ECC
// memory are capable of detecting multi-bit ECC errors,
// but cannot correct them.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "uncorrectable-ecc-errors"
// Path from root: "/system/memory/state/counters/uncorrectable-ecc-errors"
func (n *System_Memory_CountersPath) UncorrectableEccErrors() *System_Memory_Counters_UncorrectableEccErrorsPath {
	return &System_Memory_Counters_UncorrectableEccErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"uncorrectable-ecc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// UncorrectableEccErrors (leaf): Count of uncorrectable ECC errors. Systems with ECC
// memory are capable of detecting multi-bit ECC errors,
// but cannot correct them.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "uncorrectable-ecc-errors"
// Path from root: "/system/memory/state/counters/uncorrectable-ecc-errors"
func (n *System_Memory_CountersPathAny) UncorrectableEccErrors() *System_Memory_Counters_UncorrectableEccErrorsPathAny {
	return &System_Memory_Counters_UncorrectableEccErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"uncorrectable-ecc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_MessagesPath represents the /openconfig-system/system/messages YANG schema element.
type System_MessagesPath struct {
	*ygot.NodePath
}

// System_MessagesPathAny represents the wildcard version of the /openconfig-system/system/messages YANG schema element.
type System_MessagesPathAny struct {
	*ygot.NodePath
}

// System_Messages_SeverityPath represents the /openconfig-system/system/messages/state/severity YANG schema element.
type System_Messages_SeverityPath struct {
	*ygot.NodePath
}

// System_Messages_SeverityPathAny represents the wildcard version of the /openconfig-system/system/messages/state/severity YANG schema element.
type System_Messages_SeverityPathAny struct {
	*ygot.NodePath
}

// DebugServiceAny (list): List of debugging entries.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "debug-entries/debug-service"
// Path from root: "/system/messages/debug-entries/debug-service"
// Service (wildcarded): E_Messages_DEBUG_SERVICE
func (n *System_MessagesPath) DebugServiceAny() *System_Messages_DebugServicePathAny {
	return &System_Messages_DebugServicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": "*"},
			n,
		),
	}
}

// DebugServiceAny (list): List of debugging entries.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "debug-entries/debug-service"
// Path from root: "/system/messages/debug-entries/debug-service"
// Service (wildcarded): E_Messages_DEBUG_SERVICE
func (n *System_MessagesPathAny) DebugServiceAny() *System_Messages_DebugServicePathAny {
	return &System_Messages_DebugServicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": "*"},
			n,
		),
	}
}

// DebugService (list): List of debugging entries.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "debug-entries/debug-service"
// Path from root: "/system/messages/debug-entries/debug-service"
// Service: E_Messages_DEBUG_SERVICE
func (n *System_MessagesPath) DebugService(Service E_Messages_DEBUG_SERVICE) *System_Messages_DebugServicePath {
	return &System_Messages_DebugServicePath{
		NodePath: ygot.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": Service},
			n,
		),
	}
}

// DebugService (list): List of debugging entries.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "debug-entries/debug-service"
// Path from root: "/system/messages/debug-entries/debug-service"
// Service: E_Messages_DEBUG_SERVICE
func (n *System_MessagesPathAny) DebugService(Service E_Messages_DEBUG_SERVICE) *System_Messages_DebugServicePathAny {
	return &System_Messages_DebugServicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": Service},
			n,
		),
	}
}

// Message (container): Syslog messages the client is Subscribing to. This is all
// messages currently configured to be sent according to
// syslog-severity.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "state/message"
// Path from root: "/system/messages/state/message"
func (n *System_MessagesPath) Message() *System_Messages_MessagePath {
	return &System_Messages_MessagePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "message"},
			map[string]interface{}{},
			n,
		),
	}
}

// Message (container): Syslog messages the client is Subscribing to. This is all
// messages currently configured to be sent according to
// syslog-severity.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "state/message"
// Path from root: "/system/messages/state/message"
func (n *System_MessagesPathAny) Message() *System_Messages_MessagePathAny {
	return &System_Messages_MessagePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "message"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) are sent over the RPC.
//
// This is analogous to differentiating which severity is to be
// sent to legacy Syslog servers, as opposed to local buffer or
// files.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "state/severity"
// Path from root: "/system/messages/state/severity"
func (n *System_MessagesPath) Severity() *System_Messages_SeverityPath {
	return &System_Messages_SeverityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) are sent over the RPC.
//
// This is analogous to differentiating which severity is to be
// sent to legacy Syslog servers, as opposed to local buffer or
// files.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "state/severity"
// Path from root: "/system/messages/state/severity"
func (n *System_MessagesPathAny) Severity() *System_Messages_SeverityPathAny {
	return &System_Messages_SeverityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Messages_DebugServicePath represents the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugServicePath struct {
	*ygot.NodePath
}

// System_Messages_DebugServicePathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugServicePathAny struct {
	*ygot.NodePath
}

// System_Messages_DebugService_EnabledPath represents the /openconfig-system/system/messages/debug-entries/debug-service/state/enabled YANG schema element.
type System_Messages_DebugService_EnabledPath struct {
	*ygot.NodePath
}

// System_Messages_DebugService_EnabledPathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service/state/enabled YANG schema element.
type System_Messages_DebugService_EnabledPathAny struct {
	*ygot.NodePath
}

// System_Messages_DebugService_ServicePath represents the /openconfig-system/system/messages/debug-entries/debug-service/state/service YANG schema element.
type System_Messages_DebugService_ServicePath struct {
	*ygot.NodePath
}

// System_Messages_DebugService_ServicePathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service/state/service YANG schema element.
type System_Messages_DebugService_ServicePathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Enable and disable debugging.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enabled"
// Path from root: "/system/messages/debug-entries/debug-service/state/enabled"
func (n *System_Messages_DebugServicePath) Enabled() *System_Messages_DebugService_EnabledPath {
	return &System_Messages_DebugService_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enable and disable debugging.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enabled"
// Path from root: "/system/messages/debug-entries/debug-service/state/enabled"
func (n *System_Messages_DebugServicePathAny) Enabled() *System_Messages_DebugService_EnabledPathAny {
	return &System_Messages_DebugService_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Service (leaf): Enumeration of all services which can have debugging enabled.
// Vendors are to augment this base identity with their platform
// or OS specific debug options.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "state/service"
// Path from root: "/system/messages/debug-entries/debug-service/state/service"
func (n *System_Messages_DebugServicePath) Service() *System_Messages_DebugService_ServicePath {
	return &System_Messages_DebugService_ServicePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "service"},
			map[string]interface{}{},
			n,
		),
	}
}

// Service (leaf): Enumeration of all services which can have debugging enabled.
// Vendors are to augment this base identity with their platform
// or OS specific debug options.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "state/service"
// Path from root: "/system/messages/debug-entries/debug-service/state/service"
func (n *System_Messages_DebugServicePathAny) Service() *System_Messages_DebugService_ServicePathAny {
	return &System_Messages_DebugService_ServicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "service"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Messages_MessagePath represents the /openconfig-system/system/messages/state/message YANG schema element.
type System_Messages_MessagePath struct {
	*ygot.NodePath
}

// System_Messages_MessagePathAny represents the wildcard version of the /openconfig-system/system/messages/state/message YANG schema element.
type System_Messages_MessagePathAny struct {
	*ygot.NodePath
}

// System_Messages_Message_AppNamePath represents the /openconfig-system/system/messages/state/message/app-name YANG schema element.
type System_Messages_Message_AppNamePath struct {
	*ygot.NodePath
}

// System_Messages_Message_AppNamePathAny represents the wildcard version of the /openconfig-system/system/messages/state/message/app-name YANG schema element.
type System_Messages_Message_AppNamePathAny struct {
	*ygot.NodePath
}

// System_Messages_Message_MsgPath represents the /openconfig-system/system/messages/state/message/msg YANG schema element.
type System_Messages_Message_MsgPath struct {
	*ygot.NodePath
}

// System_Messages_Message_MsgPathAny represents the wildcard version of the /openconfig-system/system/messages/state/message/msg YANG schema element.
type System_Messages_Message_MsgPathAny struct {
	*ygot.NodePath
}

// System_Messages_Message_MsgidPath represents the /openconfig-system/system/messages/state/message/msgid YANG schema element.
type System_Messages_Message_MsgidPath struct {
	*ygot.NodePath
}

// System_Messages_Message_MsgidPathAny represents the wildcard version of the /openconfig-system/system/messages/state/message/msgid YANG schema element.
type System_Messages_Message_MsgidPathAny struct {
	*ygot.NodePath
}

// System_Messages_Message_PriorityPath represents the /openconfig-system/system/messages/state/message/priority YANG schema element.
type System_Messages_Message_PriorityPath struct {
	*ygot.NodePath
}

// System_Messages_Message_PriorityPathAny represents the wildcard version of the /openconfig-system/system/messages/state/message/priority YANG schema element.
type System_Messages_Message_PriorityPathAny struct {
	*ygot.NodePath
}

// System_Messages_Message_ProcidPath represents the /openconfig-system/system/messages/state/message/procid YANG schema element.
type System_Messages_Message_ProcidPath struct {
	*ygot.NodePath
}

// System_Messages_Message_ProcidPathAny represents the wildcard version of the /openconfig-system/system/messages/state/message/procid YANG schema element.
type System_Messages_Message_ProcidPathAny struct {
	*ygot.NodePath
}

// AppName (leaf): The APP-NAME field SHOULD identify the device or
// application that originated the message.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "app-name"
// Path from root: "/system/messages/state/message/app-name"
func (n *System_Messages_MessagePath) AppName() *System_Messages_Message_AppNamePath {
	return &System_Messages_Message_AppNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"app-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// AppName (leaf): The APP-NAME field SHOULD identify the device or
// application that originated the message.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "app-name"
// Path from root: "/system/messages/state/message/app-name"
func (n *System_Messages_MessagePathAny) AppName() *System_Messages_Message_AppNamePathAny {
	return &System_Messages_Message_AppNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"app-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Msg (leaf): Message payload. If other leafs within this container not
// supported, this leaf MAY include the entire message,
// inclding pri, procid, app-name etc..
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "msg"
// Path from root: "/system/messages/state/message/msg"
func (n *System_Messages_MessagePath) Msg() *System_Messages_Message_MsgPath {
	return &System_Messages_Message_MsgPath{
		NodePath: ygot.NewNodePath(
			[]string{"msg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Msg (leaf): Message payload. If other leafs within this container not
// supported, this leaf MAY include the entire message,
// inclding pri, procid, app-name etc..
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "msg"
// Path from root: "/system/messages/state/message/msg"
func (n *System_Messages_MessagePathAny) Msg() *System_Messages_Message_MsgPathAny {
	return &System_Messages_Message_MsgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"msg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Msgid (leaf): The MSGID SHOULD identify the type of message. For
// example, a firewall might use the MSGID 'TCPIN' for
// incoming TCP traffic and the MSGID 'TCPOUT' for outgoing
// TCP traffic.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "msgid"
// Path from root: "/system/messages/state/message/msgid"
func (n *System_Messages_MessagePath) Msgid() *System_Messages_Message_MsgidPath {
	return &System_Messages_Message_MsgidPath{
		NodePath: ygot.NewNodePath(
			[]string{"msgid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Msgid (leaf): The MSGID SHOULD identify the type of message. For
// example, a firewall might use the MSGID 'TCPIN' for
// incoming TCP traffic and the MSGID 'TCPOUT' for outgoing
// TCP traffic.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "msgid"
// Path from root: "/system/messages/state/message/msgid"
func (n *System_Messages_MessagePathAny) Msgid() *System_Messages_Message_MsgidPathAny {
	return &System_Messages_Message_MsgidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"msgid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): The Priority value (PRIVAL) represents both the
// Facility and Severity.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "priority"
// Path from root: "/system/messages/state/message/priority"
func (n *System_Messages_MessagePath) Priority() *System_Messages_Message_PriorityPath {
	return &System_Messages_Message_PriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): The Priority value (PRIVAL) represents both the
// Facility and Severity.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "priority"
// Path from root: "/system/messages/state/message/priority"
func (n *System_Messages_MessagePathAny) Priority() *System_Messages_Message_PriorityPathAny {
	return &System_Messages_Message_PriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Procid (leaf): PROCID is a value that is included in the message, having
// no interoperable meaning, except that a change in the value
// indicates there has been a discontinuity in syslog
// reporting.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "procid"
// Path from root: "/system/messages/state/message/procid"
func (n *System_Messages_MessagePath) Procid() *System_Messages_Message_ProcidPath {
	return &System_Messages_Message_ProcidPath{
		NodePath: ygot.NewNodePath(
			[]string{"procid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Procid (leaf): PROCID is a value that is included in the message, having
// no interoperable meaning, except that a change in the value
// indicates there has been a discontinuity in syslog
// reporting.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "procid"
// Path from root: "/system/messages/state/message/procid"
func (n *System_Messages_MessagePathAny) Procid() *System_Messages_Message_ProcidPathAny {
	return &System_Messages_Message_ProcidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"procid"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_MountPointPath represents the /openconfig-system/system/mount-points/mount-point YANG schema element.
type System_MountPointPath struct {
	*ygot.NodePath
}

// System_MountPointPathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point YANG schema element.
type System_MountPointPathAny struct {
	*ygot.NodePath
}

// System_MountPoint_AvailablePath represents the /openconfig-system/system/mount-points/mount-point/state/available YANG schema element.
type System_MountPoint_AvailablePath struct {
	*ygot.NodePath
}

// System_MountPoint_AvailablePathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/available YANG schema element.
type System_MountPoint_AvailablePathAny struct {
	*ygot.NodePath
}

// System_MountPoint_NamePath represents the /openconfig-system/system/mount-points/mount-point/state/name YANG schema element.
type System_MountPoint_NamePath struct {
	*ygot.NodePath
}

// System_MountPoint_NamePathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/name YANG schema element.
type System_MountPoint_NamePathAny struct {
	*ygot.NodePath
}

// System_MountPoint_SizePath represents the /openconfig-system/system/mount-points/mount-point/state/size YANG schema element.
type System_MountPoint_SizePath struct {
	*ygot.NodePath
}

// System_MountPoint_SizePathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/size YANG schema element.
type System_MountPoint_SizePathAny struct {
	*ygot.NodePath
}

// System_MountPoint_StorageComponentPath represents the /openconfig-system/system/mount-points/mount-point/state/storage-component YANG schema element.
type System_MountPoint_StorageComponentPath struct {
	*ygot.NodePath
}

// System_MountPoint_StorageComponentPathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/storage-component YANG schema element.
type System_MountPoint_StorageComponentPathAny struct {
	*ygot.NodePath
}

// System_MountPoint_UtilizedPath represents the /openconfig-system/system/mount-points/mount-point/state/utilized YANG schema element.
type System_MountPoint_UtilizedPath struct {
	*ygot.NodePath
}

// System_MountPoint_UtilizedPathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/utilized YANG schema element.
type System_MountPoint_UtilizedPathAny struct {
	*ygot.NodePath
}

// Available (leaf): The amount of unused space on the filesystem.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/available"
// Path from root: "/system/mount-points/mount-point/state/available"
func (n *System_MountPointPath) Available() *System_MountPoint_AvailablePath {
	return &System_MountPoint_AvailablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "available"},
			map[string]interface{}{},
			n,
		),
	}
}

// Available (leaf): The amount of unused space on the filesystem.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/available"
// Path from root: "/system/mount-points/mount-point/state/available"
func (n *System_MountPointPathAny) Available() *System_MountPoint_AvailablePathAny {
	return &System_MountPoint_AvailablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "available"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Mount point name.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/name"
// Path from root: "/system/mount-points/mount-point/state/name"
func (n *System_MountPointPath) Name() *System_MountPoint_NamePath {
	return &System_MountPoint_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Mount point name.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/name"
// Path from root: "/system/mount-points/mount-point/state/name"
func (n *System_MountPointPathAny) Name() *System_MountPoint_NamePathAny {
	return &System_MountPoint_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Size (leaf): The total size of the initialised filesystem.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/size"
// Path from root: "/system/mount-points/mount-point/state/size"
func (n *System_MountPointPath) Size() *System_MountPoint_SizePath {
	return &System_MountPoint_SizePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "size"},
			map[string]interface{}{},
			n,
		),
	}
}

// Size (leaf): The total size of the initialised filesystem.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/size"
// Path from root: "/system/mount-points/mount-point/state/size"
func (n *System_MountPointPathAny) Size() *System_MountPoint_SizePathAny {
	return &System_MountPoint_SizePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "size"},
			map[string]interface{}{},
			n,
		),
	}
}

// StorageComponent (leaf): In the case that the filesystem that is mounted corresponds to a
// physical or logical component within the system, this leaf provides
// a reference to the hosting component within the /components
// hierarchy.
//
// The reference should be to the most specific component (e.g., if an
// entry for /dev/sda1 exists, then this should be referred to,
// otherwise a reference to /dev/sda may be provided.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/storage-component"
// Path from root: "/system/mount-points/mount-point/state/storage-component"
func (n *System_MountPointPath) StorageComponent() *System_MountPoint_StorageComponentPath {
	return &System_MountPoint_StorageComponentPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "storage-component"},
			map[string]interface{}{},
			n,
		),
	}
}

// StorageComponent (leaf): In the case that the filesystem that is mounted corresponds to a
// physical or logical component within the system, this leaf provides
// a reference to the hosting component within the /components
// hierarchy.
//
// The reference should be to the most specific component (e.g., if an
// entry for /dev/sda1 exists, then this should be referred to,
// otherwise a reference to /dev/sda may be provided.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/storage-component"
// Path from root: "/system/mount-points/mount-point/state/storage-component"
func (n *System_MountPointPathAny) StorageComponent() *System_MountPoint_StorageComponentPathAny {
	return &System_MountPoint_StorageComponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "storage-component"},
			map[string]interface{}{},
			n,
		),
	}
}

// Utilized (leaf): The amount of space currently in use on the filesystem.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/utilized"
// Path from root: "/system/mount-points/mount-point/state/utilized"
func (n *System_MountPointPath) Utilized() *System_MountPoint_UtilizedPath {
	return &System_MountPoint_UtilizedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "utilized"},
			map[string]interface{}{},
			n,
		),
	}
}

// Utilized (leaf): The amount of space currently in use on the filesystem.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/utilized"
// Path from root: "/system/mount-points/mount-point/state/utilized"
func (n *System_MountPointPathAny) Utilized() *System_MountPoint_UtilizedPathAny {
	return &System_MountPoint_UtilizedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "utilized"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_NtpPath represents the /openconfig-system/system/ntp YANG schema element.
type System_NtpPath struct {
	*ygot.NodePath
}

// System_NtpPathAny represents the wildcard version of the /openconfig-system/system/ntp YANG schema element.
type System_NtpPathAny struct {
	*ygot.NodePath
}

// System_Ntp_AuthMismatchPath represents the /openconfig-system/system/ntp/state/auth-mismatch YANG schema element.
type System_Ntp_AuthMismatchPath struct {
	*ygot.NodePath
}

// System_Ntp_AuthMismatchPathAny represents the wildcard version of the /openconfig-system/system/ntp/state/auth-mismatch YANG schema element.
type System_Ntp_AuthMismatchPathAny struct {
	*ygot.NodePath
}

// System_Ntp_EnableNtpAuthPath represents the /openconfig-system/system/ntp/state/enable-ntp-auth YANG schema element.
type System_Ntp_EnableNtpAuthPath struct {
	*ygot.NodePath
}

// System_Ntp_EnableNtpAuthPathAny represents the wildcard version of the /openconfig-system/system/ntp/state/enable-ntp-auth YANG schema element.
type System_Ntp_EnableNtpAuthPathAny struct {
	*ygot.NodePath
}

// System_Ntp_EnabledPath represents the /openconfig-system/system/ntp/state/enabled YANG schema element.
type System_Ntp_EnabledPath struct {
	*ygot.NodePath
}

// System_Ntp_EnabledPathAny represents the wildcard version of the /openconfig-system/system/ntp/state/enabled YANG schema element.
type System_Ntp_EnabledPathAny struct {
	*ygot.NodePath
}

// System_Ntp_NtpSourceAddressPath represents the /openconfig-system/system/ntp/state/ntp-source-address YANG schema element.
type System_Ntp_NtpSourceAddressPath struct {
	*ygot.NodePath
}

// System_Ntp_NtpSourceAddressPathAny represents the wildcard version of the /openconfig-system/system/ntp/state/ntp-source-address YANG schema element.
type System_Ntp_NtpSourceAddressPathAny struct {
	*ygot.NodePath
}

// AuthMismatch (leaf): Count of the number of NTP packets received that were not
// processed due to authentication mismatch.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/auth-mismatch"
// Path from root: "/system/ntp/state/auth-mismatch"
func (n *System_NtpPath) AuthMismatch() *System_Ntp_AuthMismatchPath {
	return &System_Ntp_AuthMismatchPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "auth-mismatch"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthMismatch (leaf): Count of the number of NTP packets received that were not
// processed due to authentication mismatch.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/auth-mismatch"
// Path from root: "/system/ntp/state/auth-mismatch"
func (n *System_NtpPathAny) AuthMismatch() *System_Ntp_AuthMismatchPathAny {
	return &System_Ntp_AuthMismatchPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "auth-mismatch"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableNtpAuth (leaf): Enable or disable NTP authentication -- when enabled, the
// system will only use packets containing a trusted
// authentication key to synchronize the time.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enable-ntp-auth"
// Path from root: "/system/ntp/state/enable-ntp-auth"
func (n *System_NtpPath) EnableNtpAuth() *System_Ntp_EnableNtpAuthPath {
	return &System_Ntp_EnableNtpAuthPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable-ntp-auth"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableNtpAuth (leaf): Enable or disable NTP authentication -- when enabled, the
// system will only use packets containing a trusted
// authentication key to synchronize the time.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enable-ntp-auth"
// Path from root: "/system/ntp/state/enable-ntp-auth"
func (n *System_NtpPathAny) EnableNtpAuth() *System_Ntp_EnableNtpAuthPathAny {
	return &System_Ntp_EnableNtpAuthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable-ntp-auth"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enables the NTP protocol and indicates that the system should
// attempt to synchronize the system clock with an NTP server
// from the servers defined in the 'ntp/server' list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enabled"
// Path from root: "/system/ntp/state/enabled"
func (n *System_NtpPath) Enabled() *System_Ntp_EnabledPath {
	return &System_Ntp_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enables the NTP protocol and indicates that the system should
// attempt to synchronize the system clock with an NTP server
// from the servers defined in the 'ntp/server' list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enabled"
// Path from root: "/system/ntp/state/enabled"
func (n *System_NtpPathAny) Enabled() *System_Ntp_EnabledPathAny {
	return &System_Ntp_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// NtpKeyAny (list): List of NTP authentication keys
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp-keys/ntp-key"
// Path from root: "/system/ntp/ntp-keys/ntp-key"
// KeyId (wildcarded): uint16
func (n *System_NtpPath) NtpKeyAny() *System_Ntp_NtpKeyPathAny {
	return &System_Ntp_NtpKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": "*"},
			n,
		),
	}
}

// NtpKeyAny (list): List of NTP authentication keys
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp-keys/ntp-key"
// Path from root: "/system/ntp/ntp-keys/ntp-key"
// KeyId (wildcarded): uint16
func (n *System_NtpPathAny) NtpKeyAny() *System_Ntp_NtpKeyPathAny {
	return &System_Ntp_NtpKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": "*"},
			n,
		),
	}
}

// NtpKey (list): List of NTP authentication keys
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp-keys/ntp-key"
// Path from root: "/system/ntp/ntp-keys/ntp-key"
// KeyId: uint16
func (n *System_NtpPath) NtpKey(KeyId uint16) *System_Ntp_NtpKeyPath {
	return &System_Ntp_NtpKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": KeyId},
			n,
		),
	}
}

// NtpKey (list): List of NTP authentication keys
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp-keys/ntp-key"
// Path from root: "/system/ntp/ntp-keys/ntp-key"
// KeyId: uint16
func (n *System_NtpPathAny) NtpKey(KeyId uint16) *System_Ntp_NtpKeyPathAny {
	return &System_Ntp_NtpKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": KeyId},
			n,
		),
	}
}

// NtpSourceAddress (leaf): Source address to use on outgoing NTP packets
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/ntp-source-address"
// Path from root: "/system/ntp/state/ntp-source-address"
func (n *System_NtpPath) NtpSourceAddress() *System_Ntp_NtpSourceAddressPath {
	return &System_Ntp_NtpSourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ntp-source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NtpSourceAddress (leaf): Source address to use on outgoing NTP packets
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/ntp-source-address"
// Path from root: "/system/ntp/state/ntp-source-address"
func (n *System_NtpPathAny) NtpSourceAddress() *System_Ntp_NtpSourceAddressPathAny {
	return &System_Ntp_NtpSourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ntp-source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ServerAny (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/ntp/servers/server"
// Address (wildcarded): string
func (n *System_NtpPath) ServerAny() *System_Ntp_ServerPathAny {
	return &System_Ntp_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// ServerAny (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/ntp/servers/server"
// Address (wildcarded): string
func (n *System_NtpPathAny) ServerAny() *System_Ntp_ServerPathAny {
	return &System_Ntp_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// Server (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/ntp/servers/server"
// Address: string
func (n *System_NtpPath) Server(Address string) *System_Ntp_ServerPath {
	return &System_Ntp_ServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// Server (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/ntp/servers/server"
// Address: string
func (n *System_NtpPathAny) Server(Address string) *System_Ntp_ServerPathAny {
	return &System_Ntp_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// System_Ntp_NtpKeyPath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKeyPath struct {
	*ygot.NodePath
}

// System_Ntp_NtpKeyPathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKeyPathAny struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyIdPath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-id YANG schema element.
type System_Ntp_NtpKey_KeyIdPath struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyIdPathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-id YANG schema element.
type System_Ntp_NtpKey_KeyIdPathAny struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyTypePath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-type YANG schema element.
type System_Ntp_NtpKey_KeyTypePath struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyTypePathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-type YANG schema element.
type System_Ntp_NtpKey_KeyTypePathAny struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyValuePath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-value YANG schema element.
type System_Ntp_NtpKey_KeyValuePath struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyValuePathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-value YANG schema element.
type System_Ntp_NtpKey_KeyValuePathAny struct {
	*ygot.NodePath
}

// KeyId (leaf): Integer identifier used by the client and server to
// designate a secret key.  The client and server must use
// the same key id.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/key-id"
// Path from root: "/system/ntp/ntp-keys/ntp-key/state/key-id"
func (n *System_Ntp_NtpKeyPath) KeyId() *System_Ntp_NtpKey_KeyIdPath {
	return &System_Ntp_NtpKey_KeyIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyId (leaf): Integer identifier used by the client and server to
// designate a secret key.  The client and server must use
// the same key id.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/key-id"
// Path from root: "/system/ntp/ntp-keys/ntp-key/state/key-id"
func (n *System_Ntp_NtpKeyPathAny) KeyId() *System_Ntp_NtpKey_KeyIdPathAny {
	return &System_Ntp_NtpKey_KeyIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyType (leaf): Encryption type used for the NTP authentication key
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/key-type"
// Path from root: "/system/ntp/ntp-keys/ntp-key/state/key-type"
func (n *System_Ntp_NtpKeyPath) KeyType() *System_Ntp_NtpKey_KeyTypePath {
	return &System_Ntp_NtpKey_KeyTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyType (leaf): Encryption type used for the NTP authentication key
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/key-type"
// Path from root: "/system/ntp/ntp-keys/ntp-key/state/key-type"
func (n *System_Ntp_NtpKeyPathAny) KeyType() *System_Ntp_NtpKey_KeyTypePathAny {
	return &System_Ntp_NtpKey_KeyTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyValue (leaf): NTP authentication key value
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/key-value"
// Path from root: "/system/ntp/ntp-keys/ntp-key/state/key-value"
func (n *System_Ntp_NtpKeyPath) KeyValue() *System_Ntp_NtpKey_KeyValuePath {
	return &System_Ntp_NtpKey_KeyValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyValue (leaf): NTP authentication key value
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/key-value"
// Path from root: "/system/ntp/ntp-keys/ntp-key/state/key-value"
func (n *System_Ntp_NtpKeyPathAny) KeyValue() *System_Ntp_NtpKey_KeyValuePathAny {
	return &System_Ntp_NtpKey_KeyValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Ntp_ServerPath represents the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_ServerPath struct {
	*ygot.NodePath
}

// System_Ntp_ServerPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_ServerPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_AddressPath represents the /openconfig-system/system/ntp/servers/server/state/address YANG schema element.
type System_Ntp_Server_AddressPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_AddressPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/address YANG schema element.
type System_Ntp_Server_AddressPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_AssociationTypePath represents the /openconfig-system/system/ntp/servers/server/state/association-type YANG schema element.
type System_Ntp_Server_AssociationTypePath struct {
	*ygot.NodePath
}

// System_Ntp_Server_AssociationTypePathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/association-type YANG schema element.
type System_Ntp_Server_AssociationTypePathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_IburstPath represents the /openconfig-system/system/ntp/servers/server/state/iburst YANG schema element.
type System_Ntp_Server_IburstPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_IburstPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/iburst YANG schema element.
type System_Ntp_Server_IburstPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_OffsetPath represents the /openconfig-system/system/ntp/servers/server/state/offset YANG schema element.
type System_Ntp_Server_OffsetPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_OffsetPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/offset YANG schema element.
type System_Ntp_Server_OffsetPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_PollIntervalPath represents the /openconfig-system/system/ntp/servers/server/state/poll-interval YANG schema element.
type System_Ntp_Server_PollIntervalPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_PollIntervalPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/poll-interval YANG schema element.
type System_Ntp_Server_PollIntervalPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_PortPath represents the /openconfig-system/system/ntp/servers/server/state/port YANG schema element.
type System_Ntp_Server_PortPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_PortPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/port YANG schema element.
type System_Ntp_Server_PortPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_PreferPath represents the /openconfig-system/system/ntp/servers/server/state/prefer YANG schema element.
type System_Ntp_Server_PreferPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_PreferPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/prefer YANG schema element.
type System_Ntp_Server_PreferPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_RootDelayPath represents the /openconfig-system/system/ntp/servers/server/state/root-delay YANG schema element.
type System_Ntp_Server_RootDelayPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_RootDelayPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/root-delay YANG schema element.
type System_Ntp_Server_RootDelayPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_RootDispersionPath represents the /openconfig-system/system/ntp/servers/server/state/root-dispersion YANG schema element.
type System_Ntp_Server_RootDispersionPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_RootDispersionPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/root-dispersion YANG schema element.
type System_Ntp_Server_RootDispersionPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_StratumPath represents the /openconfig-system/system/ntp/servers/server/state/stratum YANG schema element.
type System_Ntp_Server_StratumPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_StratumPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/stratum YANG schema element.
type System_Ntp_Server_StratumPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_VersionPath represents the /openconfig-system/system/ntp/servers/server/state/version YANG schema element.
type System_Ntp_Server_VersionPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_VersionPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/version YANG schema element.
type System_Ntp_Server_VersionPathAny struct {
	*ygot.NodePath
}

// Address (leaf): The address or hostname of the NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/address"
// Path from root: "/system/ntp/servers/server/state/address"
func (n *System_Ntp_ServerPath) Address() *System_Ntp_Server_AddressPath {
	return &System_Ntp_Server_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): The address or hostname of the NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/address"
// Path from root: "/system/ntp/servers/server/state/address"
func (n *System_Ntp_ServerPathAny) Address() *System_Ntp_Server_AddressPathAny {
	return &System_Ntp_Server_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociationType (leaf): The desired association type for this NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/association-type"
// Path from root: "/system/ntp/servers/server/state/association-type"
func (n *System_Ntp_ServerPath) AssociationType() *System_Ntp_Server_AssociationTypePath {
	return &System_Ntp_Server_AssociationTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "association-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociationType (leaf): The desired association type for this NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/association-type"
// Path from root: "/system/ntp/servers/server/state/association-type"
func (n *System_Ntp_ServerPathAny) AssociationType() *System_Ntp_Server_AssociationTypePathAny {
	return &System_Ntp_Server_AssociationTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "association-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Iburst (leaf): Indicates whether this server should enable burst
// synchronization or not.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/iburst"
// Path from root: "/system/ntp/servers/server/state/iburst"
func (n *System_Ntp_ServerPath) Iburst() *System_Ntp_Server_IburstPath {
	return &System_Ntp_Server_IburstPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "iburst"},
			map[string]interface{}{},
			n,
		),
	}
}

// Iburst (leaf): Indicates whether this server should enable burst
// synchronization or not.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/iburst"
// Path from root: "/system/ntp/servers/server/state/iburst"
func (n *System_Ntp_ServerPathAny) Iburst() *System_Ntp_Server_IburstPathAny {
	return &System_Ntp_Server_IburstPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "iburst"},
			map[string]interface{}{},
			n,
		),
	}
}

// Offset (leaf): Estimate of the current time offset from the peer.  This is
// the time difference between the local and reference clock.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/offset"
// Path from root: "/system/ntp/servers/server/state/offset"
func (n *System_Ntp_ServerPath) Offset() *System_Ntp_Server_OffsetPath {
	return &System_Ntp_Server_OffsetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "offset"},
			map[string]interface{}{},
			n,
		),
	}
}

// Offset (leaf): Estimate of the current time offset from the peer.  This is
// the time difference between the local and reference clock.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/offset"
// Path from root: "/system/ntp/servers/server/state/offset"
func (n *System_Ntp_ServerPathAny) Offset() *System_Ntp_Server_OffsetPathAny {
	return &System_Ntp_Server_OffsetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "offset"},
			map[string]interface{}{},
			n,
		),
	}
}

// PollInterval (leaf): Polling interval of the peer
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/poll-interval"
// Path from root: "/system/ntp/servers/server/state/poll-interval"
func (n *System_Ntp_ServerPath) PollInterval() *System_Ntp_Server_PollIntervalPath {
	return &System_Ntp_Server_PollIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "poll-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// PollInterval (leaf): Polling interval of the peer
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/poll-interval"
// Path from root: "/system/ntp/servers/server/state/poll-interval"
func (n *System_Ntp_ServerPathAny) PollInterval() *System_Ntp_Server_PollIntervalPathAny {
	return &System_Ntp_Server_PollIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "poll-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number of the NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/port"
// Path from root: "/system/ntp/servers/server/state/port"
func (n *System_Ntp_ServerPath) Port() *System_Ntp_Server_PortPath {
	return &System_Ntp_Server_PortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number of the NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/port"
// Path from root: "/system/ntp/servers/server/state/port"
func (n *System_Ntp_ServerPathAny) Port() *System_Ntp_Server_PortPathAny {
	return &System_Ntp_Server_PortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefer (leaf): Indicates whether this server should be preferred
// or not.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/prefer"
// Path from root: "/system/ntp/servers/server/state/prefer"
func (n *System_Ntp_ServerPath) Prefer() *System_Ntp_Server_PreferPath {
	return &System_Ntp_Server_PreferPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefer"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefer (leaf): Indicates whether this server should be preferred
// or not.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/prefer"
// Path from root: "/system/ntp/servers/server/state/prefer"
func (n *System_Ntp_ServerPathAny) Prefer() *System_Ntp_Server_PreferPathAny {
	return &System_Ntp_Server_PreferPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefer"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootDelay (leaf): The round-trip delay to the server, in milliseconds.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/root-delay"
// Path from root: "/system/ntp/servers/server/state/root-delay"
func (n *System_Ntp_ServerPath) RootDelay() *System_Ntp_Server_RootDelayPath {
	return &System_Ntp_Server_RootDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootDelay (leaf): The round-trip delay to the server, in milliseconds.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/root-delay"
// Path from root: "/system/ntp/servers/server/state/root-delay"
func (n *System_Ntp_ServerPathAny) RootDelay() *System_Ntp_Server_RootDelayPathAny {
	return &System_Ntp_Server_RootDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootDispersion (leaf): Dispersion (epsilon) represents the maximum error inherent
// in the measurement
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/root-dispersion"
// Path from root: "/system/ntp/servers/server/state/root-dispersion"
func (n *System_Ntp_ServerPath) RootDispersion() *System_Ntp_Server_RootDispersionPath {
	return &System_Ntp_Server_RootDispersionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-dispersion"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootDispersion (leaf): Dispersion (epsilon) represents the maximum error inherent
// in the measurement
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/root-dispersion"
// Path from root: "/system/ntp/servers/server/state/root-dispersion"
func (n *System_Ntp_ServerPathAny) RootDispersion() *System_Ntp_Server_RootDispersionPathAny {
	return &System_Ntp_Server_RootDispersionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-dispersion"},
			map[string]interface{}{},
			n,
		),
	}
}

// Stratum (leaf): Indicates the level of the server in the NTP hierarchy. As
// stratum number increases, the accuracy is degraded.  Primary
// servers are stratum while a maximum value of 16 indicates
// unsynchronized.  The values have the following specific
// semantics:
//
// | 0      | unspecified or invalid
// | 1      | primary server (e.g., equipped with a GPS receiver)
// | 2-15   | secondary server (via NTP)
// | 16     | unsynchronized
// | 17-255 | reserved
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/stratum"
// Path from root: "/system/ntp/servers/server/state/stratum"
func (n *System_Ntp_ServerPath) Stratum() *System_Ntp_Server_StratumPath {
	return &System_Ntp_Server_StratumPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "stratum"},
			map[string]interface{}{},
			n,
		),
	}
}

// Stratum (leaf): Indicates the level of the server in the NTP hierarchy. As
// stratum number increases, the accuracy is degraded.  Primary
// servers are stratum while a maximum value of 16 indicates
// unsynchronized.  The values have the following specific
// semantics:
//
// | 0      | unspecified or invalid
// | 1      | primary server (e.g., equipped with a GPS receiver)
// | 2-15   | secondary server (via NTP)
// | 16     | unsynchronized
// | 17-255 | reserved
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/stratum"
// Path from root: "/system/ntp/servers/server/state/stratum"
func (n *System_Ntp_ServerPathAny) Stratum() *System_Ntp_Server_StratumPathAny {
	return &System_Ntp_Server_StratumPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "stratum"},
			map[string]interface{}{},
			n,
		),
	}
}

// Version (leaf): Version number to put in outgoing NTP packets
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/version"
// Path from root: "/system/ntp/servers/server/state/version"
func (n *System_Ntp_ServerPath) Version() *System_Ntp_Server_VersionPath {
	return &System_Ntp_Server_VersionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "version"},
			map[string]interface{}{},
			n,
		),
	}
}

// Version (leaf): Version number to put in outgoing NTP packets
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/version"
// Path from root: "/system/ntp/servers/server/state/version"
func (n *System_Ntp_ServerPathAny) Version() *System_Ntp_Server_VersionPathAny {
	return &System_Ntp_Server_VersionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "version"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_ProcessPath represents the /openconfig-system/system/processes/process YANG schema element.
type System_ProcessPath struct {
	*ygot.NodePath
}

// System_ProcessPathAny represents the wildcard version of the /openconfig-system/system/processes/process YANG schema element.
type System_ProcessPathAny struct {
	*ygot.NodePath
}

// System_Process_ArgsPath represents the /openconfig-system/system/processes/process/state/args YANG schema element.
type System_Process_ArgsPath struct {
	*ygot.NodePath
}

// System_Process_ArgsPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/args YANG schema element.
type System_Process_ArgsPathAny struct {
	*ygot.NodePath
}

// System_Process_CpuUsageSystemPath represents the /openconfig-system/system/processes/process/state/cpu-usage-system YANG schema element.
type System_Process_CpuUsageSystemPath struct {
	*ygot.NodePath
}

// System_Process_CpuUsageSystemPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/cpu-usage-system YANG schema element.
type System_Process_CpuUsageSystemPathAny struct {
	*ygot.NodePath
}

// System_Process_CpuUsageUserPath represents the /openconfig-system/system/processes/process/state/cpu-usage-user YANG schema element.
type System_Process_CpuUsageUserPath struct {
	*ygot.NodePath
}

// System_Process_CpuUsageUserPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/cpu-usage-user YANG schema element.
type System_Process_CpuUsageUserPathAny struct {
	*ygot.NodePath
}

// System_Process_CpuUtilizationPath represents the /openconfig-system/system/processes/process/state/cpu-utilization YANG schema element.
type System_Process_CpuUtilizationPath struct {
	*ygot.NodePath
}

// System_Process_CpuUtilizationPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/cpu-utilization YANG schema element.
type System_Process_CpuUtilizationPathAny struct {
	*ygot.NodePath
}

// System_Process_MemoryUsagePath represents the /openconfig-system/system/processes/process/state/memory-usage YANG schema element.
type System_Process_MemoryUsagePath struct {
	*ygot.NodePath
}

// System_Process_MemoryUsagePathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/memory-usage YANG schema element.
type System_Process_MemoryUsagePathAny struct {
	*ygot.NodePath
}

// System_Process_MemoryUtilizationPath represents the /openconfig-system/system/processes/process/state/memory-utilization YANG schema element.
type System_Process_MemoryUtilizationPath struct {
	*ygot.NodePath
}

// System_Process_MemoryUtilizationPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/memory-utilization YANG schema element.
type System_Process_MemoryUtilizationPathAny struct {
	*ygot.NodePath
}

// System_Process_NamePath represents the /openconfig-system/system/processes/process/state/name YANG schema element.
type System_Process_NamePath struct {
	*ygot.NodePath
}

// System_Process_NamePathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/name YANG schema element.
type System_Process_NamePathAny struct {
	*ygot.NodePath
}

// System_Process_PidPath represents the /openconfig-system/system/processes/process/state/pid YANG schema element.
type System_Process_PidPath struct {
	*ygot.NodePath
}

// System_Process_PidPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/pid YANG schema element.
type System_Process_PidPathAny struct {
	*ygot.NodePath
}

// System_Process_StartTimePath represents the /openconfig-system/system/processes/process/state/start-time YANG schema element.
type System_Process_StartTimePath struct {
	*ygot.NodePath
}

// System_Process_StartTimePathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/start-time YANG schema element.
type System_Process_StartTimePathAny struct {
	*ygot.NodePath
}

// Args (leaf): Current process command line arguments.  Arguments with
// a parameter (e.g., --option 10  or -option=10) should be
// represented as a single element of the list with the
// argument name and parameter together.  Flag arguments, i.e.,
// those without a parameter should also be in their own list
// element.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/args"
// Path from root: "/system/processes/process/state/args"
func (n *System_ProcessPath) Args() *System_Process_ArgsPath {
	return &System_Process_ArgsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "args"},
			map[string]interface{}{},
			n,
		),
	}
}

// Args (leaf): Current process command line arguments.  Arguments with
// a parameter (e.g., --option 10  or -option=10) should be
// represented as a single element of the list with the
// argument name and parameter together.  Flag arguments, i.e.,
// those without a parameter should also be in their own list
// element.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/args"
// Path from root: "/system/processes/process/state/args"
func (n *System_ProcessPathAny) Args() *System_Process_ArgsPathAny {
	return &System_Process_ArgsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "args"},
			map[string]interface{}{},
			n,
		),
	}
}

// CpuUsageSystem (leaf): CPU time consumed by this process in kernel mode.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/cpu-usage-system"
// Path from root: "/system/processes/process/state/cpu-usage-system"
func (n *System_ProcessPath) CpuUsageSystem() *System_Process_CpuUsageSystemPath {
	return &System_Process_CpuUsageSystemPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu-usage-system"},
			map[string]interface{}{},
			n,
		),
	}
}

// CpuUsageSystem (leaf): CPU time consumed by this process in kernel mode.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/cpu-usage-system"
// Path from root: "/system/processes/process/state/cpu-usage-system"
func (n *System_ProcessPathAny) CpuUsageSystem() *System_Process_CpuUsageSystemPathAny {
	return &System_Process_CpuUsageSystemPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu-usage-system"},
			map[string]interface{}{},
			n,
		),
	}
}

// CpuUsageUser (leaf): CPU time consumed by this process in user mode in
// nanoseconds.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/cpu-usage-user"
// Path from root: "/system/processes/process/state/cpu-usage-user"
func (n *System_ProcessPath) CpuUsageUser() *System_Process_CpuUsageUserPath {
	return &System_Process_CpuUsageUserPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu-usage-user"},
			map[string]interface{}{},
			n,
		),
	}
}

// CpuUsageUser (leaf): CPU time consumed by this process in user mode in
// nanoseconds.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/cpu-usage-user"
// Path from root: "/system/processes/process/state/cpu-usage-user"
func (n *System_ProcessPathAny) CpuUsageUser() *System_Process_CpuUsageUserPathAny {
	return &System_Process_CpuUsageUserPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu-usage-user"},
			map[string]interface{}{},
			n,
		),
	}
}

// CpuUtilization (leaf): The percentage of CPU that is being used by the process.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/cpu-utilization"
// Path from root: "/system/processes/process/state/cpu-utilization"
func (n *System_ProcessPath) CpuUtilization() *System_Process_CpuUtilizationPath {
	return &System_Process_CpuUtilizationPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu-utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// CpuUtilization (leaf): The percentage of CPU that is being used by the process.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/cpu-utilization"
// Path from root: "/system/processes/process/state/cpu-utilization"
func (n *System_ProcessPathAny) CpuUtilization() *System_Process_CpuUtilizationPathAny {
	return &System_Process_CpuUtilizationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu-utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// MemoryUsage (leaf): Bytes allocated and still in use by the process
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/memory-usage"
// Path from root: "/system/processes/process/state/memory-usage"
func (n *System_ProcessPath) MemoryUsage() *System_Process_MemoryUsagePath {
	return &System_Process_MemoryUsagePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "memory-usage"},
			map[string]interface{}{},
			n,
		),
	}
}

// MemoryUsage (leaf): Bytes allocated and still in use by the process
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/memory-usage"
// Path from root: "/system/processes/process/state/memory-usage"
func (n *System_ProcessPathAny) MemoryUsage() *System_Process_MemoryUsagePathAny {
	return &System_Process_MemoryUsagePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "memory-usage"},
			map[string]interface{}{},
			n,
		),
	}
}

// MemoryUtilization (leaf): The percentage of RAM that is being used by the process.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/memory-utilization"
// Path from root: "/system/processes/process/state/memory-utilization"
func (n *System_ProcessPath) MemoryUtilization() *System_Process_MemoryUtilizationPath {
	return &System_Process_MemoryUtilizationPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "memory-utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// MemoryUtilization (leaf): The percentage of RAM that is being used by the process.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/memory-utilization"
// Path from root: "/system/processes/process/state/memory-utilization"
func (n *System_ProcessPathAny) MemoryUtilization() *System_Process_MemoryUtilizationPathAny {
	return &System_Process_MemoryUtilizationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "memory-utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The process name
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/name"
// Path from root: "/system/processes/process/state/name"
func (n *System_ProcessPath) Name() *System_Process_NamePath {
	return &System_Process_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The process name
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/name"
// Path from root: "/system/processes/process/state/name"
func (n *System_ProcessPathAny) Name() *System_Process_NamePathAny {
	return &System_Process_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Pid (leaf): The process pid
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/pid"
// Path from root: "/system/processes/process/state/pid"
func (n *System_ProcessPath) Pid() *System_Process_PidPath {
	return &System_Process_PidPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Pid (leaf): The process pid
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/pid"
// Path from root: "/system/processes/process/state/pid"
func (n *System_ProcessPathAny) Pid() *System_Process_PidPathAny {
	return &System_Process_PidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pid"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartTime (leaf): The time at which this process started,
// relative to the UNIX epoch.  The system must be
// synchronized such that the start-time can be
// reported accurately, otherwise it should not be reported.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/start-time"
// Path from root: "/system/processes/process/state/start-time"
func (n *System_ProcessPath) StartTime() *System_Process_StartTimePath {
	return &System_Process_StartTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "start-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartTime (leaf): The time at which this process started,
// relative to the UNIX epoch.  The system must be
// synchronized such that the start-time can be
// reported accurately, otherwise it should not be reported.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/start-time"
// Path from root: "/system/processes/process/state/start-time"
func (n *System_ProcessPathAny) StartTime() *System_Process_StartTimePathAny {
	return &System_Process_StartTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "start-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_SshServerPath represents the /openconfig-system/system/ssh-server YANG schema element.
type System_SshServerPath struct {
	*ygot.NodePath
}

// System_SshServerPathAny represents the wildcard version of the /openconfig-system/system/ssh-server YANG schema element.
type System_SshServerPathAny struct {
	*ygot.NodePath
}

// System_SshServer_EnablePath represents the /openconfig-system/system/ssh-server/state/enable YANG schema element.
type System_SshServer_EnablePath struct {
	*ygot.NodePath
}

// System_SshServer_EnablePathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/enable YANG schema element.
type System_SshServer_EnablePathAny struct {
	*ygot.NodePath
}

// System_SshServer_ProtocolVersionPath represents the /openconfig-system/system/ssh-server/state/protocol-version YANG schema element.
type System_SshServer_ProtocolVersionPath struct {
	*ygot.NodePath
}

// System_SshServer_ProtocolVersionPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/protocol-version YANG schema element.
type System_SshServer_ProtocolVersionPathAny struct {
	*ygot.NodePath
}

// System_SshServer_RateLimitPath represents the /openconfig-system/system/ssh-server/state/rate-limit YANG schema element.
type System_SshServer_RateLimitPath struct {
	*ygot.NodePath
}

// System_SshServer_RateLimitPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/rate-limit YANG schema element.
type System_SshServer_RateLimitPathAny struct {
	*ygot.NodePath
}

// System_SshServer_SessionLimitPath represents the /openconfig-system/system/ssh-server/state/session-limit YANG schema element.
type System_SshServer_SessionLimitPath struct {
	*ygot.NodePath
}

// System_SshServer_SessionLimitPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/session-limit YANG schema element.
type System_SshServer_SessionLimitPathAny struct {
	*ygot.NodePath
}

// System_SshServer_TimeoutPath represents the /openconfig-system/system/ssh-server/state/timeout YANG schema element.
type System_SshServer_TimeoutPath struct {
	*ygot.NodePath
}

// System_SshServer_TimeoutPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/timeout YANG schema element.
type System_SshServer_TimeoutPathAny struct {
	*ygot.NodePath
}

// Enable (leaf): Enables the ssh server.  The ssh server is enabled by
// default.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enable"
// Path from root: "/system/ssh-server/state/enable"
func (n *System_SshServerPath) Enable() *System_SshServer_EnablePath {
	return &System_SshServer_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enables the ssh server.  The ssh server is enabled by
// default.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enable"
// Path from root: "/system/ssh-server/state/enable"
func (n *System_SshServerPathAny) Enable() *System_SshServer_EnablePathAny {
	return &System_SshServer_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtocolVersion (leaf): Set the protocol version for SSH connections to the system
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/protocol-version"
// Path from root: "/system/ssh-server/state/protocol-version"
func (n *System_SshServerPath) ProtocolVersion() *System_SshServer_ProtocolVersionPath {
	return &System_SshServer_ProtocolVersionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "protocol-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtocolVersion (leaf): Set the protocol version for SSH connections to the system
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/protocol-version"
// Path from root: "/system/ssh-server/state/protocol-version"
func (n *System_SshServerPathAny) ProtocolVersion() *System_SshServer_ProtocolVersionPathAny {
	return &System_SshServer_ProtocolVersionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "protocol-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/rate-limit"
// Path from root: "/system/ssh-server/state/rate-limit"
func (n *System_SshServerPath) RateLimit() *System_SshServer_RateLimitPath {
	return &System_SshServer_RateLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "rate-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/rate-limit"
// Path from root: "/system/ssh-server/state/rate-limit"
func (n *System_SshServerPathAny) RateLimit() *System_SshServer_RateLimitPathAny {
	return &System_SshServer_RateLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "rate-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/session-limit"
// Path from root: "/system/ssh-server/state/session-limit"
func (n *System_SshServerPath) SessionLimit() *System_SshServer_SessionLimitPath {
	return &System_SshServer_SessionLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "session-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/session-limit"
// Path from root: "/system/ssh-server/state/session-limit"
func (n *System_SshServerPathAny) SessionLimit() *System_SshServer_SessionLimitPathAny {
	return &System_SshServer_SessionLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "session-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/timeout"
// Path from root: "/system/ssh-server/state/timeout"
func (n *System_SshServerPath) Timeout() *System_SshServer_TimeoutPath {
	return &System_SshServer_TimeoutPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/timeout"
// Path from root: "/system/ssh-server/state/timeout"
func (n *System_SshServerPathAny) Timeout() *System_SshServer_TimeoutPathAny {
	return &System_SshServer_TimeoutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_TelnetServerPath represents the /openconfig-system/system/telnet-server YANG schema element.
type System_TelnetServerPath struct {
	*ygot.NodePath
}

// System_TelnetServerPathAny represents the wildcard version of the /openconfig-system/system/telnet-server YANG schema element.
type System_TelnetServerPathAny struct {
	*ygot.NodePath
}

// System_TelnetServer_EnablePath represents the /openconfig-system/system/telnet-server/state/enable YANG schema element.
type System_TelnetServer_EnablePath struct {
	*ygot.NodePath
}

// System_TelnetServer_EnablePathAny represents the wildcard version of the /openconfig-system/system/telnet-server/state/enable YANG schema element.
type System_TelnetServer_EnablePathAny struct {
	*ygot.NodePath
}

// System_TelnetServer_RateLimitPath represents the /openconfig-system/system/telnet-server/state/rate-limit YANG schema element.
type System_TelnetServer_RateLimitPath struct {
	*ygot.NodePath
}

// System_TelnetServer_RateLimitPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/state/rate-limit YANG schema element.
type System_TelnetServer_RateLimitPathAny struct {
	*ygot.NodePath
}

// System_TelnetServer_SessionLimitPath represents the /openconfig-system/system/telnet-server/state/session-limit YANG schema element.
type System_TelnetServer_SessionLimitPath struct {
	*ygot.NodePath
}

// System_TelnetServer_SessionLimitPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/state/session-limit YANG schema element.
type System_TelnetServer_SessionLimitPathAny struct {
	*ygot.NodePath
}

// System_TelnetServer_TimeoutPath represents the /openconfig-system/system/telnet-server/state/timeout YANG schema element.
type System_TelnetServer_TimeoutPath struct {
	*ygot.NodePath
}

// System_TelnetServer_TimeoutPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/state/timeout YANG schema element.
type System_TelnetServer_TimeoutPathAny struct {
	*ygot.NodePath
}

// Enable (leaf): Enables the telnet server.  Telnet is disabled by
// default
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enable"
// Path from root: "/system/telnet-server/state/enable"
func (n *System_TelnetServerPath) Enable() *System_TelnetServer_EnablePath {
	return &System_TelnetServer_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enables the telnet server.  Telnet is disabled by
// default
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/enable"
// Path from root: "/system/telnet-server/state/enable"
func (n *System_TelnetServerPathAny) Enable() *System_TelnetServer_EnablePathAny {
	return &System_TelnetServer_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/rate-limit"
// Path from root: "/system/telnet-server/state/rate-limit"
func (n *System_TelnetServerPath) RateLimit() *System_TelnetServer_RateLimitPath {
	return &System_TelnetServer_RateLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "rate-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/rate-limit"
// Path from root: "/system/telnet-server/state/rate-limit"
func (n *System_TelnetServerPathAny) RateLimit() *System_TelnetServer_RateLimitPathAny {
	return &System_TelnetServer_RateLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "rate-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/session-limit"
// Path from root: "/system/telnet-server/state/session-limit"
func (n *System_TelnetServerPath) SessionLimit() *System_TelnetServer_SessionLimitPath {
	return &System_TelnetServer_SessionLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "session-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/session-limit"
// Path from root: "/system/telnet-server/state/session-limit"
func (n *System_TelnetServerPathAny) SessionLimit() *System_TelnetServer_SessionLimitPathAny {
	return &System_TelnetServer_SessionLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "session-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/timeout"
// Path from root: "/system/telnet-server/state/timeout"
func (n *System_TelnetServerPath) Timeout() *System_TelnetServer_TimeoutPath {
	return &System_TelnetServer_TimeoutPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "state/timeout"
// Path from root: "/system/telnet-server/state/timeout"
func (n *System_TelnetServerPathAny) Timeout() *System_TelnetServer_TimeoutPathAny {
	return &System_TelnetServer_TimeoutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package reservation;

import "proto/testbed.proto";

option java_multiple_files = true;

option go_package = "github.com/openconfig/ondatra/thinkit/proto/reservation";

message Reservation {
  string id = 1;
  map<string, ResolvedDevice> devices = 2;
  map<string, ResolvedDevice> ates = 3;
  repeated ResolvedLink links = 4;
}

// ResolvedDevice is a device after it has been reserved.
message ResolvedDevice {
  // Key of the device.
  string id = 1;

  // Resolvable name of the device.
  string name = 2;

  // Vendor of the device.
  ondatra.Device.Vendor vendor = 3;

  // Hardware model of the device.
  string hardware_model = 4;
  // Software version of the device.
  string software_version = 5;

  map<string, ResolvedPort> ports = 6;

  // Services provides a map for the service locations provided by the device.
  map<string, Service> services = 7;
}

// ResolvedPort is a port with a concrete assignment.
message ResolvedPort {
  string id = 1;

  // Speed enum values are the port speed in Gbps.
  ondatra.Port.Speed speed = 2;

  // Name is the resolved port name.
  string name = 3;
}

// A physical link between ports on DUTs or ATEs.
// The order does not matter: links are symmetrical.
// A given port may be specified in at most one link.
// If the port is not connected but defined in the Device.
// There will be no corresponding link.
message ResolvedLink {
  string a = 1;  // First port in the format "<device-id>:<port-id>".
  string b = 2;  // Second port in the format "<device-id>:<port-id>".
}

// Service provides a map of services provided by the DUT which can be mapped
// for use by ondatra to provide access to those endpoints.
message Service {
  string id = 1;
  // Endpoint is the endpoint type of the service.
  oneof endpoint {
    GRPCEndpoint grpc = 100;
    ProxiedGRPCEndpoint proxied_grpc = 101;
  }
}

message GRPCEndpoint {
  // Address is the form <ip / dns>:<port>.
  string address = 1;
}

// ProxiedGRPCEndpoint is an endpoint which will pass through a list of proxies.
message ProxiedGRPCEndpoint {
  // Address is the form <ip / dns>:<port>.
  string address = 1;
  // Proxy is the form <ip / dns>:<port>. Repeated for each proxy in the chain.
  repeated string proxy = 2;
}

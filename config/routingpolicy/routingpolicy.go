/*
Package routingpolicy is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/alexmasi/go/pkg/mod/github.com/openconfig/ygot@v0.23.1/genutil/names.go
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package routingpolicy

import (
	"github.com/openconfig/ygot/ygot"
)

// RoutingPolicyPath represents the /openconfig-routing-policy/routing-policy YANG schema element.
type RoutingPolicyPath struct {
	*ygot.NodePath
}

// RoutingPolicyPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy YANG schema element.
type RoutingPolicyPathAny struct {
	*ygot.NodePath
}

// DefinedSets (container): Predefined sets of attributes used in policy match
// statements
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "defined-sets"
// Path from root: "/routing-policy/defined-sets"
func (n *RoutingPolicyPath) DefinedSets() *RoutingPolicy_DefinedSetsPath {
	return &RoutingPolicy_DefinedSetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"defined-sets"},
			map[string]interface{}{},
			n,
		),
	}
}

// DefinedSets (container): Predefined sets of attributes used in policy match
// statements
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "defined-sets"
// Path from root: "/routing-policy/defined-sets"
func (n *RoutingPolicyPathAny) DefinedSets() *RoutingPolicy_DefinedSetsPathAny {
	return &RoutingPolicy_DefinedSetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"defined-sets"},
			map[string]interface{}{},
			n,
		),
	}
}

// PolicyDefinitionAny (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "policy-definitions/policy-definition"
// Path from root: "/routing-policy/policy-definitions/policy-definition"
// Name (wildcarded): string
func (n *RoutingPolicyPath) PolicyDefinitionAny() *RoutingPolicy_PolicyDefinitionPathAny {
	return &RoutingPolicy_PolicyDefinitionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policy-definitions", "policy-definition"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// PolicyDefinitionAny (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "policy-definitions/policy-definition"
// Path from root: "/routing-policy/policy-definitions/policy-definition"
// Name (wildcarded): string
func (n *RoutingPolicyPathAny) PolicyDefinitionAny() *RoutingPolicy_PolicyDefinitionPathAny {
	return &RoutingPolicy_PolicyDefinitionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policy-definitions", "policy-definition"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// PolicyDefinition (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "policy-definitions/policy-definition"
// Path from root: "/routing-policy/policy-definitions/policy-definition"
// Name: string
func (n *RoutingPolicyPath) PolicyDefinition(Name string) *RoutingPolicy_PolicyDefinitionPath {
	return &RoutingPolicy_PolicyDefinitionPath{
		NodePath: ygot.NewNodePath(
			[]string{"policy-definitions", "policy-definition"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// PolicyDefinition (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "policy-definitions/policy-definition"
// Path from root: "/routing-policy/policy-definitions/policy-definition"
// Name: string
func (n *RoutingPolicyPathAny) PolicyDefinition(Name string) *RoutingPolicy_PolicyDefinitionPathAny {
	return &RoutingPolicy_PolicyDefinitionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policy-definitions", "policy-definition"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// RoutingPolicy_DefinedSetsPath represents the /openconfig-routing-policy/routing-policy/defined-sets YANG schema element.
type RoutingPolicy_DefinedSetsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSetsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets YANG schema element.
type RoutingPolicy_DefinedSetsPathAny struct {
	*ygot.NodePath
}

// BgpDefinedSets (container): BGP-related set definitions for policy match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "bgp-defined-sets"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets"
func (n *RoutingPolicy_DefinedSetsPath) BgpDefinedSets() *RoutingPolicy_DefinedSets_BgpDefinedSetsPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-defined-sets"},
			map[string]interface{}{},
			n,
		),
	}
}

// BgpDefinedSets (container): BGP-related set definitions for policy match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "bgp-defined-sets"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets"
func (n *RoutingPolicy_DefinedSetsPathAny) BgpDefinedSets() *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-defined-sets"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborSetAny (list): List of defined neighbor sets for use in policies.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "neighbor-sets/neighbor-set"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
// Name (wildcarded): string
func (n *RoutingPolicy_DefinedSetsPath) NeighborSetAny() *RoutingPolicy_DefinedSets_NeighborSetPathAny {
	return &RoutingPolicy_DefinedSets_NeighborSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbor-sets", "neighbor-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// NeighborSetAny (list): List of defined neighbor sets for use in policies.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "neighbor-sets/neighbor-set"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
// Name (wildcarded): string
func (n *RoutingPolicy_DefinedSetsPathAny) NeighborSetAny() *RoutingPolicy_DefinedSets_NeighborSetPathAny {
	return &RoutingPolicy_DefinedSets_NeighborSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbor-sets", "neighbor-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// NeighborSet (list): List of defined neighbor sets for use in policies.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "neighbor-sets/neighbor-set"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
// Name: string
func (n *RoutingPolicy_DefinedSetsPath) NeighborSet(Name string) *RoutingPolicy_DefinedSets_NeighborSetPath {
	return &RoutingPolicy_DefinedSets_NeighborSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbor-sets", "neighbor-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// NeighborSet (list): List of defined neighbor sets for use in policies.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "neighbor-sets/neighbor-set"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
// Name: string
func (n *RoutingPolicy_DefinedSetsPathAny) NeighborSet(Name string) *RoutingPolicy_DefinedSets_NeighborSetPathAny {
	return &RoutingPolicy_DefinedSets_NeighborSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbor-sets", "neighbor-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// PrefixSetAny (list): List of the defined prefix sets
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefix-sets/prefix-set"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set"
// Name (wildcarded): string
func (n *RoutingPolicy_DefinedSetsPath) PrefixSetAny() *RoutingPolicy_DefinedSets_PrefixSetPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-sets", "prefix-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// PrefixSetAny (list): List of the defined prefix sets
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefix-sets/prefix-set"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set"
// Name (wildcarded): string
func (n *RoutingPolicy_DefinedSetsPathAny) PrefixSetAny() *RoutingPolicy_DefinedSets_PrefixSetPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-sets", "prefix-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// PrefixSet (list): List of the defined prefix sets
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefix-sets/prefix-set"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set"
// Name: string
func (n *RoutingPolicy_DefinedSetsPath) PrefixSet(Name string) *RoutingPolicy_DefinedSets_PrefixSetPath {
	return &RoutingPolicy_DefinedSets_PrefixSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-sets", "prefix-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// PrefixSet (list): List of the defined prefix sets
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefix-sets/prefix-set"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set"
// Name: string
func (n *RoutingPolicy_DefinedSetsPathAny) PrefixSet(Name string) *RoutingPolicy_DefinedSets_PrefixSetPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-sets", "prefix-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// TagSetAny (list): List of tag set definitions.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "tag-sets/tag-set"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set"
// Name (wildcarded): string
func (n *RoutingPolicy_DefinedSetsPath) TagSetAny() *RoutingPolicy_DefinedSets_TagSetPathAny {
	return &RoutingPolicy_DefinedSets_TagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tag-sets", "tag-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// TagSetAny (list): List of tag set definitions.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "tag-sets/tag-set"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set"
// Name (wildcarded): string
func (n *RoutingPolicy_DefinedSetsPathAny) TagSetAny() *RoutingPolicy_DefinedSets_TagSetPathAny {
	return &RoutingPolicy_DefinedSets_TagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tag-sets", "tag-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// TagSet (list): List of tag set definitions.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "tag-sets/tag-set"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set"
// Name: string
func (n *RoutingPolicy_DefinedSetsPath) TagSet(Name string) *RoutingPolicy_DefinedSets_TagSetPath {
	return &RoutingPolicy_DefinedSets_TagSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"tag-sets", "tag-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// TagSet (list): List of tag set definitions.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "tag-sets/tag-set"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set"
// Name: string
func (n *RoutingPolicy_DefinedSetsPathAny) TagSet(Name string) *RoutingPolicy_DefinedSets_TagSetPathAny {
	return &RoutingPolicy_DefinedSets_TagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tag-sets", "tag-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_BgpDefinedSetsPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSetsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny struct {
	*ygot.NodePath
}

// AsPathSetAny (list): List of defined AS path sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "as-path-sets/as-path-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
// AsPathSetName (wildcarded): string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) AsPathSetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"as-path-sets", "as-path-set"},
			map[string]interface{}{"as-path-set-name": "*"},
			n,
		),
	}
}

// AsPathSetAny (list): List of defined AS path sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "as-path-sets/as-path-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
// AsPathSetName (wildcarded): string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) AsPathSetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"as-path-sets", "as-path-set"},
			map[string]interface{}{"as-path-set-name": "*"},
			n,
		),
	}
}

// AsPathSet (list): List of defined AS path sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "as-path-sets/as-path-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
// AsPathSetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) AsPathSet(AsPathSetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"as-path-sets", "as-path-set"},
			map[string]interface{}{"as-path-set-name": AsPathSetName},
			n,
		),
	}
}

// AsPathSet (list): List of defined AS path sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "as-path-sets/as-path-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
// AsPathSetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) AsPathSet(AsPathSetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"as-path-sets", "as-path-set"},
			map[string]interface{}{"as-path-set-name": AsPathSetName},
			n,
		),
	}
}

// CommunitySetAny (list): List of defined BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "community-sets/community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
// CommunitySetName (wildcarded): string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) CommunitySetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"community-sets", "community-set"},
			map[string]interface{}{"community-set-name": "*"},
			n,
		),
	}
}

// CommunitySetAny (list): List of defined BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "community-sets/community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
// CommunitySetName (wildcarded): string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) CommunitySetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"community-sets", "community-set"},
			map[string]interface{}{"community-set-name": "*"},
			n,
		),
	}
}

// CommunitySet (list): List of defined BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "community-sets/community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
// CommunitySetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) CommunitySet(CommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath{
		NodePath: ygot.NewNodePath(
			[]string{"community-sets", "community-set"},
			map[string]interface{}{"community-set-name": CommunitySetName},
			n,
		),
	}
}

// CommunitySet (list): List of defined BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "community-sets/community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
// CommunitySetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) CommunitySet(CommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"community-sets", "community-set"},
			map[string]interface{}{"community-set-name": CommunitySetName},
			n,
		),
	}
}

// ExtCommunitySetAny (list): List of defined extended BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "ext-community-sets/ext-community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
// ExtCommunitySetName (wildcarded): string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) ExtCommunitySetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ext-community-sets", "ext-community-set"},
			map[string]interface{}{"ext-community-set-name": "*"},
			n,
		),
	}
}

// ExtCommunitySetAny (list): List of defined extended BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "ext-community-sets/ext-community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
// ExtCommunitySetName (wildcarded): string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) ExtCommunitySetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ext-community-sets", "ext-community-set"},
			map[string]interface{}{"ext-community-set-name": "*"},
			n,
		),
	}
}

// ExtCommunitySet (list): List of defined extended BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "ext-community-sets/ext-community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
// ExtCommunitySetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) ExtCommunitySet(ExtCommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath{
		NodePath: ygot.NewNodePath(
			[]string{"ext-community-sets", "ext-community-set"},
			map[string]interface{}{"ext-community-set-name": ExtCommunitySetName},
			n,
		),
	}
}

// ExtCommunitySet (list): List of defined extended BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "ext-community-sets/ext-community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
// ExtCommunitySetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) ExtCommunitySet(ExtCommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ext-community-sets", "ext-community-set"},
			map[string]interface{}{"ext-community-set-name": ExtCommunitySetName},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/config/as-path-set-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/config/as-path-set-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/config/as-path-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/config/as-path-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny struct {
	*ygot.NodePath
}

// AsPathSetMember (leaf-list): AS path expression -- list of ASes in the set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/as-path-set-member"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/config/as-path-set-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath) AsPathSetMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "as-path-set-member"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathSetMember (leaf-list): AS path expression -- list of ASes in the set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/as-path-set-member"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/config/as-path-set-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny) AsPathSetMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "as-path-set-member"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathSetName (leaf): name of the AS path set -- this is used to reference
// the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/as-path-set-name"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/config/as-path-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath) AsPathSetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "as-path-set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathSetName (leaf): name of the AS path set -- this is used to reference
// the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/as-path-set-name"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/config/as-path-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny) AsPathSetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "as-path-set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/community-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/community-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/community-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/community-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/match-set-options YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/match-set-options YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// CommunityMember (leaf-list): members of the community set.
// For an ADD operation these are the communities that will be added;
// the regexp type is not valid in this operation.
// For REMOVE or REPLACE operations then matching communities will
// be removed unless match-set-options is INVERT which will
// reverse this to mean that anything that does not match will be
// removed.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/community-member"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath) CommunityMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "community-member"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunityMember (leaf-list): members of the community set.
// For an ADD operation these are the communities that will be added;
// the regexp type is not valid in this operation.
// For REMOVE or REPLACE operations then matching communities will
// be removed unless match-set-options is INVERT which will
// reverse this to mean that anything that does not match will be
// removed.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/community-member"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny) CommunityMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "community-member"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunitySetName (leaf): name / label of the community set -- this is used to
// reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/community-set-name"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath) CommunitySetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "community-set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunitySetName (leaf): name / label of the community set -- this is used to
// reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/community-set-name"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny) CommunitySetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "community-set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/match-set-options"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath) MatchSetOptions() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/match-set-options"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny) MatchSetOptions() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/ext-community-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/ext-community-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/ext-community-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/ext-community-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/match-set-options YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/match-set-options YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// ExtCommunityMember (leaf-list): members of the extended community set
// For an ADD operation these are the communities that will be added;
// the regexp type is not valid in this operation.
// For REMOVE or REPLACE operations then matching communities will
// be removed unless match-set-options is INVERT which will
// reverse this to mean that anything that does not match will be
// removed.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/ext-community-member"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/ext-community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath) ExtCommunityMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ext-community-member"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunityMember (leaf-list): members of the extended community set
// For an ADD operation these are the communities that will be added;
// the regexp type is not valid in this operation.
// For REMOVE or REPLACE operations then matching communities will
// be removed unless match-set-options is INVERT which will
// reverse this to mean that anything that does not match will be
// removed.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/ext-community-member"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/ext-community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny) ExtCommunityMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ext-community-member"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunitySetName (leaf): name / label of the extended community set -- this is
// used to reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/ext-community-set-name"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/ext-community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath) ExtCommunitySetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ext-community-set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunitySetName (leaf): name / label of the extended community set -- this is
// used to reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/ext-community-set-name"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/ext-community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny) ExtCommunitySetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ext-community-set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/match-set-options"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath) MatchSetOptions() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/match-set-options"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny) MatchSetOptions() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_NeighborSetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSet_AddressPath represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/config/address YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet_AddressPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/config/address YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSet_NamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/config/name YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet_NamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSet_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/config/name YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet_NamePathAny struct {
	*ygot.NodePath
}

// Address (leaf-list): List of IP addresses in the neighbor set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/address"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set/config/address"
func (n *RoutingPolicy_DefinedSets_NeighborSetPath) Address() *RoutingPolicy_DefinedSets_NeighborSet_AddressPath {
	return &RoutingPolicy_DefinedSets_NeighborSet_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf-list): List of IP addresses in the neighbor set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/address"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set/config/address"
func (n *RoutingPolicy_DefinedSets_NeighborSetPathAny) Address() *RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny {
	return &RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name / label of the neighbor set -- this is used to
// reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/name"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set/config/name"
func (n *RoutingPolicy_DefinedSets_NeighborSetPath) Name() *RoutingPolicy_DefinedSets_NeighborSet_NamePath {
	return &RoutingPolicy_DefinedSets_NeighborSet_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name / label of the neighbor set -- this is used to
// reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/name"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set/config/name"
func (n *RoutingPolicy_DefinedSets_NeighborSetPathAny) Name() *RoutingPolicy_DefinedSets_NeighborSet_NamePathAny {
	return &RoutingPolicy_DefinedSets_NeighborSet_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_PrefixSetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_ModePath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/config/mode YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_ModePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_ModePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/config/mode YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_ModePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_NamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/config/name YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_NamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/config/name YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_NamePathAny struct {
	*ygot.NodePath
}

// Mode (leaf): Indicates the mode of the prefix set, in terms of which
// address families (IPv4, IPv6, or both) are present.  The
// mode provides a hint, but the device must validate that all
// prefixes are of the indicated type, and is expected to
// reject the configuration if there is a discrepancy.  The
// MIXED mode may not be supported on devices that require
// prefix sets to be of only one address family.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/mode"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/config/mode"
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) Mode() *RoutingPolicy_DefinedSets_PrefixSet_ModePath {
	return &RoutingPolicy_DefinedSets_PrefixSet_ModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): Indicates the mode of the prefix set, in terms of which
// address families (IPv4, IPv6, or both) are present.  The
// mode provides a hint, but the device must validate that all
// prefixes are of the indicated type, and is expected to
// reject the configuration if there is a discrepancy.  The
// MIXED mode may not be supported on devices that require
// prefix sets to be of only one address family.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/mode"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/config/mode"
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) Mode() *RoutingPolicy_DefinedSets_PrefixSet_ModePathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name / label of the prefix set -- this is used to
// reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/name"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/config/name"
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) Name() *RoutingPolicy_DefinedSets_PrefixSet_NamePath {
	return &RoutingPolicy_DefinedSets_PrefixSet_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name / label of the prefix set -- this is used to
// reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/name"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/config/name"
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) Name() *RoutingPolicy_DefinedSets_PrefixSet_NamePathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixAny (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix (wildcarded): string
// MasklengthRange (wildcarded): string
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) PrefixAny() *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": "*", "masklength-range": "*"},
			n,
		),
	}
}

// PrefixAny (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix (wildcarded): string
// MasklengthRange (wildcarded): string
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) PrefixAny() *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": "*", "masklength-range": "*"},
			n,
		),
	}
}

// PrefixAnyMasklengthRange (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix: string
// MasklengthRange (wildcarded): string
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) PrefixAnyMasklengthRange(IpPrefix string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": IpPrefix, "masklength-range": "*"},
			n,
		),
	}
}

// PrefixAnyMasklengthRange (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix: string
// MasklengthRange (wildcarded): string
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) PrefixAnyMasklengthRange(IpPrefix string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": IpPrefix, "masklength-range": "*"},
			n,
		),
	}
}

// PrefixAnyIpPrefix (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix (wildcarded): string
// MasklengthRange: string
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) PrefixAnyIpPrefix(MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": "*", "masklength-range": MasklengthRange},
			n,
		),
	}
}

// PrefixAnyIpPrefix (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix (wildcarded): string
// MasklengthRange: string
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) PrefixAnyIpPrefix(MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": "*", "masklength-range": MasklengthRange},
			n,
		),
	}
}

// Prefix (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix: string
// MasklengthRange: string
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) Prefix(IpPrefix string, MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPath {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": IpPrefix, "masklength-range": MasklengthRange},
			n,
		),
	}
}

// Prefix (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix: string
// MasklengthRange: string
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) Prefix(IpPrefix string, MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": IpPrefix, "masklength-range": MasklengthRange},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_PrefixSet_PrefixPath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_PrefixPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/config/ip-prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/config/ip-prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/config/masklength-range YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/config/masklength-range YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny struct {
	*ygot.NodePath
}

// IpPrefix (leaf): The prefix member in CIDR notation -- while the
// prefix may be either IPv4 or IPv6, most
// implementations require all members of the prefix set
// to be the same address family.  Mixing address types in
// the same prefix set is likely to cause an error.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/ip-prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/config/ip-prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPath) IpPrefix() *RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath {
	return &RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip-prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpPrefix (leaf): The prefix member in CIDR notation -- while the
// prefix may be either IPv4 or IPv6, most
// implementations require all members of the prefix set
// to be the same address family.  Mixing address types in
// the same prefix set is likely to cause an error.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/ip-prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/config/ip-prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny) IpPrefix() *RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip-prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// MasklengthRange (leaf): Defines a range for the masklength, or 'exact' if
// the prefix has an exact length.
//
// Example: 10.3.192.0/21 through 10.3.192.0/24 would be
// expressed as prefix: 10.3.192.0/21,
// masklength-range: 21..24.
//
// Example: 10.3.192.0/21 would be expressed as
// prefix: 10.3.192.0/21,
// masklength-range: exact
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/masklength-range"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/config/masklength-range"
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPath) MasklengthRange() *RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath {
	return &RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "masklength-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// MasklengthRange (leaf): Defines a range for the masklength, or 'exact' if
// the prefix has an exact length.
//
// Example: 10.3.192.0/21 through 10.3.192.0/24 would be
// expressed as prefix: 10.3.192.0/21,
// masklength-range: 21..24.
//
// Example: 10.3.192.0/21 would be expressed as
// prefix: 10.3.192.0/21,
// masklength-range: exact
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/masklength-range"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/config/masklength-range"
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny) MasklengthRange() *RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "masklength-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_TagSetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set YANG schema element.
type RoutingPolicy_DefinedSets_TagSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_TagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set YANG schema element.
type RoutingPolicy_DefinedSets_TagSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_TagSet_NamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/config/name YANG schema element.
type RoutingPolicy_DefinedSets_TagSet_NamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_TagSet_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/config/name YANG schema element.
type RoutingPolicy_DefinedSets_TagSet_NamePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_TagSet_TagValuePath represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/config/tag-value YANG schema element.
type RoutingPolicy_DefinedSets_TagSet_TagValuePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_TagSet_TagValuePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/config/tag-value YANG schema element.
type RoutingPolicy_DefinedSets_TagSet_TagValuePathAny struct {
	*ygot.NodePath
}

// Name (leaf): name / label of the tag set -- this is used to reference
// the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/name"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set/config/name"
func (n *RoutingPolicy_DefinedSets_TagSetPath) Name() *RoutingPolicy_DefinedSets_TagSet_NamePath {
	return &RoutingPolicy_DefinedSets_TagSet_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name / label of the tag set -- this is used to reference
// the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/name"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set/config/name"
func (n *RoutingPolicy_DefinedSets_TagSetPathAny) Name() *RoutingPolicy_DefinedSets_TagSet_NamePathAny {
	return &RoutingPolicy_DefinedSets_TagSet_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// TagValue (leaf-list): Value of the tag set member
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/tag-value"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set/config/tag-value"
func (n *RoutingPolicy_DefinedSets_TagSetPath) TagValue() *RoutingPolicy_DefinedSets_TagSet_TagValuePath {
	return &RoutingPolicy_DefinedSets_TagSet_TagValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tag-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// TagValue (leaf-list): Value of the tag set member
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/tag-value"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set/config/tag-value"
func (n *RoutingPolicy_DefinedSets_TagSetPathAny) TagValue() *RoutingPolicy_DefinedSets_TagSet_TagValuePathAny {
	return &RoutingPolicy_DefinedSets_TagSet_TagValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tag-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinitionPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition YANG schema element.
type RoutingPolicy_PolicyDefinitionPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinitionPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition YANG schema element.
type RoutingPolicy_PolicyDefinitionPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_NamePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/config/name YANG schema element.
type RoutingPolicy_PolicyDefinition_NamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/config/name YANG schema element.
type RoutingPolicy_PolicyDefinition_NamePathAny struct {
	*ygot.NodePath
}

// Name (leaf): Name of the top-level policy definition -- this name
// is used in references to the current policy
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/name"
// Path from root: "/routing-policy/policy-definitions/policy-definition/config/name"
func (n *RoutingPolicy_PolicyDefinitionPath) Name() *RoutingPolicy_PolicyDefinition_NamePath {
	return &RoutingPolicy_PolicyDefinition_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Name of the top-level policy definition -- this name
// is used in references to the current policy
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/name"
// Path from root: "/routing-policy/policy-definitions/policy-definition/config/name"
func (n *RoutingPolicy_PolicyDefinitionPathAny) Name() *RoutingPolicy_PolicyDefinition_NamePathAny {
	return &RoutingPolicy_PolicyDefinition_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// StatementAny (list): Policy statements group conditions and actions
// within a policy definition.  They are evaluated in
// the order specified (see the description of policy
// evaluation at the top of this module.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "statements/statement"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement"
// Name (wildcarded): string
func (n *RoutingPolicy_PolicyDefinitionPath) StatementAny() *RoutingPolicy_PolicyDefinition_StatementPathAny {
	return &RoutingPolicy_PolicyDefinition_StatementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"statements", "statement"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// StatementAny (list): Policy statements group conditions and actions
// within a policy definition.  They are evaluated in
// the order specified (see the description of policy
// evaluation at the top of this module.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "statements/statement"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement"
// Name (wildcarded): string
func (n *RoutingPolicy_PolicyDefinitionPathAny) StatementAny() *RoutingPolicy_PolicyDefinition_StatementPathAny {
	return &RoutingPolicy_PolicyDefinition_StatementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"statements", "statement"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Statement (list): Policy statements group conditions and actions
// within a policy definition.  They are evaluated in
// the order specified (see the description of policy
// evaluation at the top of this module.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "statements/statement"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement"
// Name: string
func (n *RoutingPolicy_PolicyDefinitionPath) Statement(Name string) *RoutingPolicy_PolicyDefinition_StatementPath {
	return &RoutingPolicy_PolicyDefinition_StatementPath{
		NodePath: ygot.NewNodePath(
			[]string{"statements", "statement"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Statement (list): Policy statements group conditions and actions
// within a policy definition.  They are evaluated in
// the order specified (see the description of policy
// evaluation at the top of this module.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "statements/statement"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement"
// Name: string
func (n *RoutingPolicy_PolicyDefinitionPathAny) Statement(Name string) *RoutingPolicy_PolicyDefinition_StatementPathAny {
	return &RoutingPolicy_PolicyDefinition_StatementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"statements", "statement"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_StatementPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement YANG schema element.
type RoutingPolicy_PolicyDefinition_StatementPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_StatementPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement YANG schema element.
type RoutingPolicy_PolicyDefinition_StatementPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_NamePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/config/name YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_NamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/config/name YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_NamePathAny struct {
	*ygot.NodePath
}

// Actions (container): Top-level container for policy action statements
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "actions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions"
func (n *RoutingPolicy_PolicyDefinition_StatementPath) Actions() *RoutingPolicy_PolicyDefinition_Statement_ActionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_ActionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Actions (container): Top-level container for policy action statements
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "actions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions"
func (n *RoutingPolicy_PolicyDefinition_StatementPathAny) Actions() *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Conditions (container): Condition statements for the current policy statement
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "conditions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions"
func (n *RoutingPolicy_PolicyDefinition_StatementPath) Conditions() *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_ConditionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"conditions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Conditions (container): Condition statements for the current policy statement
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "conditions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions"
func (n *RoutingPolicy_PolicyDefinition_StatementPathAny) Conditions() *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"conditions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name of the policy statement
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/name"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/config/name"
func (n *RoutingPolicy_PolicyDefinition_StatementPath) Name() *RoutingPolicy_PolicyDefinition_Statement_NamePath {
	return &RoutingPolicy_PolicyDefinition_Statement_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name of the policy statement
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/name"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/config/name"
func (n *RoutingPolicy_PolicyDefinition_StatementPathAny) Name() *RoutingPolicy_PolicyDefinition_Statement_NamePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_ActionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ActionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/config/policy-result YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/config/policy-result YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny struct {
	*ygot.NodePath
}

// BgpActions (container): Top-level container for BGP-specific actions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "bgp-actions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) BgpActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// BgpActions (container): Top-level container for BGP-specific actions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "bgp-actions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) BgpActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// PolicyResult (leaf): Select the final disposition for the route, either
// accept or reject.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/policy-result"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/config/policy-result"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) PolicyResult() *RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "policy-result"},
			map[string]interface{}{},
			n,
		),
	}
}

// PolicyResult (leaf): Select the final disposition for the route, either
// accept or reject.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/policy-result"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/config/policy-result"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) PolicyResult() *RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "policy-result"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetTag (container): Policy actions associated with setting tags for a particular
// route. A tag is an abstract entity which can be mapped to underlying
// protocol attributes where applicable.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-tag"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) SetTag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath{
		NodePath: ygot.NewNodePath(
			[]string{"set-tag"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetTag (container): Policy actions associated with setting tags for a particular
// route. A tag is an abstract entity which can be mapped to underlying
// protocol attributes where applicable.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-tag"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) SetTag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"set-tag"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-local-pref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-local-pref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-med YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-med YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-next-hop YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-next-hop YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-route-origin YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-route-origin YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny struct {
	*ygot.NodePath
}

// SetAsPathPrepend (container): Action to prepend the specified AS number to the AS-path a
// specified number of times
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-as-path-prepend"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetAsPathPrepend() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath{
		NodePath: ygot.NewNodePath(
			[]string{"set-as-path-prepend"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetAsPathPrepend (container): Action to prepend the specified AS number to the AS-path a
// specified number of times
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-as-path-prepend"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetAsPathPrepend() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"set-as-path-prepend"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetCommunity (container): Action to set the community attributes of the route, along
// with options to modify how the community is modified.
// Communities may be set using an inline list OR
// reference to an existing defined set (not both).
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-community"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath{
		NodePath: ygot.NewNodePath(
			[]string{"set-community"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetCommunity (container): Action to set the community attributes of the route, along
// with options to modify how the community is modified.
// Communities may be set using an inline list OR
// reference to an existing defined set (not both).
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-community"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"set-community"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetExtCommunity (container): Action to set the extended community attributes of the
// route, along with options to modify how the community is
// modified. Extended communities may be set using an inline
// list OR a reference to an existing defined set (but not
// both).
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-ext-community"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetExtCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath{
		NodePath: ygot.NewNodePath(
			[]string{"set-ext-community"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetExtCommunity (container): Action to set the extended community attributes of the
// route, along with options to modify how the community is
// modified. Extended communities may be set using an inline
// list OR a reference to an existing defined set (but not
// both).
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-ext-community"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetExtCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"set-ext-community"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetLocalPref (leaf): set the local pref attribute on the route
// update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/set-local-pref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-local-pref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetLocalPref() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-local-pref"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetLocalPref (leaf): set the local pref attribute on the route
// update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/set-local-pref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-local-pref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetLocalPref() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-local-pref"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMed (leaf): set the med metric attribute in the route
// update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/set-med"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-med"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetMed() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-med"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMed (leaf): set the med metric attribute in the route
// update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/set-med"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-med"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetMed() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-med"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetNextHop (leaf): set the next-hop attribute in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/set-next-hop"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-next-hop"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetNextHop() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetNextHop (leaf): set the next-hop attribute in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/set-next-hop"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-next-hop"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetNextHop() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetRouteOrigin (leaf): set the origin attribute to the specified
// value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/set-route-origin"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-route-origin"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetRouteOrigin() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-route-origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetRouteOrigin (leaf): set the origin attribute to the specified
// value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/set-route-origin"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-route-origin"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetRouteOrigin() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-route-origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/asn YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/asn YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/repeat-n YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/repeat-n YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny struct {
	*ygot.NodePath
}

// Asn (leaf): The AS number to prepend to the AS path. If this leaf is
// not specified and repeat-n is set, then the local AS
// number will be used for prepending.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/asn"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/asn"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath) Asn() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "asn"},
			map[string]interface{}{},
			n,
		),
	}
}

// Asn (leaf): The AS number to prepend to the AS path. If this leaf is
// not specified and repeat-n is set, then the local AS
// number will be used for prepending.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/asn"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/asn"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny) Asn() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "asn"},
			map[string]interface{}{},
			n,
		),
	}
}

// RepeatN (leaf): Number of times to prepend the value specified in the asn
// leaf to the AS path. If no value is specified by the asn
// leaf, the local AS number of the system is used. The value
// should be between 1 and the maximum supported by the
// implementation.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/repeat-n"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/repeat-n"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath) RepeatN() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "repeat-n"},
			map[string]interface{}{},
			n,
		),
	}
}

// RepeatN (leaf): Number of times to prepend the value specified in the asn
// leaf to the AS path. If no value is specified by the asn
// leaf, the local AS number of the system is used. The value
// should be between 1 and the maximum supported by the
// implementation.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/repeat-n"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/repeat-n"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny) RepeatN() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "repeat-n"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/method YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/method YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny struct {
	*ygot.NodePath
}

// Inline (container): Set the community values for the action inline with
// a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Inline (container): Set the community values for the action inline with
// a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Method (leaf): Indicates the method used to specify the extended
// communities for the set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/method"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Method() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "method"},
			map[string]interface{}{},
			n,
		),
	}
}

// Method (leaf): Indicates the method used to specify the extended
// communities for the set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/method"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Method() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "method"},
			map[string]interface{}{},
			n,
		),
	}
}

// Options (leaf): Options for modifying the community attribute with
// the specified values.  These options apply to both
// methods of setting the community attribute.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Options() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "options"},
			map[string]interface{}{},
			n,
		),
	}
}

// Options (leaf): Options for modifying the community attribute with
// the specified values.  These options apply to both
// methods of setting the community attribute.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Options() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "options"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): Provide a reference to a defined community set for the
// set-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): Provide a reference to a defined community set for the
// set-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/config/communities YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/config/communities YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny struct {
	*ygot.NodePath
}

// Communities (leaf-list): Set the community values for the update inline with
// a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/communities"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/config/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath) Communities() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "communities"},
			map[string]interface{}{},
			n,
		),
	}
}

// Communities (leaf-list): Set the community values for the update inline with
// a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/communities"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/config/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny) Communities() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "communities"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/config/community-set-ref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/config/community-set-ref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny struct {
	*ygot.NodePath
}

// CommunitySetRef (leaf): References a defined community set by name
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/community-set-ref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/config/community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath) CommunitySetRef() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "community-set-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunitySetRef (leaf): References a defined community set by name
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/community-set-ref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/config/community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny) CommunitySetRef() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "community-set-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/config/method YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/config/method YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/config/options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/config/options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny struct {
	*ygot.NodePath
}

// Inline (container): Set the extended community values for the action inline with
// a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Inline (container): Set the extended community values for the action inline with
// a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Method (leaf): Indicates the method used to specify the extended
// communities for the set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/method"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/config/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Method() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "method"},
			map[string]interface{}{},
			n,
		),
	}
}

// Method (leaf): Indicates the method used to specify the extended
// communities for the set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/method"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/config/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Method() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "method"},
			map[string]interface{}{},
			n,
		),
	}
}

// Options (leaf): Options for modifying the community attribute with
// the specified values.  These options apply to both
// methods of setting the community attribute.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/config/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Options() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "options"},
			map[string]interface{}{},
			n,
		),
	}
}

// Options (leaf): Options for modifying the community attribute with
// the specified values.  These options apply to both
// methods of setting the community attribute.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/config/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Options() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "options"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): Provide a reference to an extended community set for the
// set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): Provide a reference to an extended community set for the
// set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/config/communities YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/config/communities YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny struct {
	*ygot.NodePath
}

// Communities (leaf-list): Set the extended community values for the update inline
// with a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/communities"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/config/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath) Communities() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "communities"},
			map[string]interface{}{},
			n,
		),
	}
}

// Communities (leaf-list): Set the extended community values for the update inline
// with a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/communities"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/config/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny) Communities() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "communities"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/config/ext-community-set-ref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/config/ext-community-set-ref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny struct {
	*ygot.NodePath
}

// ExtCommunitySetRef (leaf): References a defined extended community set by
// name
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/ext-community-set-ref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/config/ext-community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath) ExtCommunitySetRef() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ext-community-set-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunitySetRef (leaf): References a defined extended community set by
// name
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/ext-community-set-ref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/config/ext-community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny) ExtCommunitySetRef() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ext-community-set-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/config/mode YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/config/mode YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny struct {
	*ygot.NodePath
}

// Inline (container): The tags specified in this container are set on a route using
// the values directly. It is applicable when the mode of application
// is explicitly specified as INLINE.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Inline (container): The tags specified in this container are set on a route using
// the values directly. It is applicable when the mode of application
// is explicitly specified as INLINE.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): This leaf controls the source of the tags that are set as a result
// of the action. In the case that the INLINE value is specified, the
// list of tags specified within the action is applied to matching prefixes.
// In the case that the REFERENCE value is specified, a pre-defined set of
// tags is utilised.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/mode"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/config/mode"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) Mode() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): This leaf controls the source of the tags that are set as a result
// of the action. In the case that the INLINE value is specified, the
// list of tags specified within the action is applied to matching prefixes.
// In the case that the REFERENCE value is specified, a pre-defined set of
// tags is utilised.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/mode"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/config/mode"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) Mode() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): This container is applicable when the mode of application is explicitly
// specified to as REFERENCE. The tags set on a route are those that are
// specified within the tag-set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): This container is applicable when the mode of application is explicitly
// specified to as REFERENCE. The tags set on a route are those that are
// specified within the tag-set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/config/tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/config/tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny struct {
	*ygot.NodePath
}

// Tag (leaf-list): Set one or more tags for prefixes that match the specified condition(s)
// using the specified tag values. When a tag is set it MUST be possible to
// match the value set in subsequent policies on the local device. Where the
// protocol that is carrying the prefix has a tag field (OSPF, and IS-IS in
// particular) the tag MUST be set in the corresponding protocol advertisements
// of the prefix.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/tag"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/config/tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath) Tag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tag"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tag (leaf-list): Set one or more tags for prefixes that match the specified condition(s)
// using the specified tag values. When a tag is set it MUST be possible to
// match the value set in subsequent policies on the local device. Where the
// protocol that is carrying the prefix has a tag field (OSPF, and IS-IS in
// particular) the tag MUST be set in the corresponding protocol advertisements
// of the prefix.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/tag"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/config/tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny) Tag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tag"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/config/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/config/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny struct {
	*ygot.NodePath
}

// TagSet (leaf): Use the referenced tag-set to set tags on the prefixes that match the
// specified conditions. When a tag is set it MUST be possible to match the
// value set in subsequent policies on the local device. where the protocol that
// is carrying the prefix has a tag field (OSPF, and IS-IS for in particular)
// the tag MUST be set in the corresponding protocol advertisements of the
// prefix.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/config/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// TagSet (leaf): Use the referenced tag-set to set tags on the prefixes that match the
// specified conditions. When a tag is set it MUST be possible to match the
// value set in subsequent policies on the local device. where the protocol that
// is carrying the prefix has a tag field (OSPF, and IS-IS for in particular)
// the tag MUST be set in the corresponding protocol advertisements of the
// prefix.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/config/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_ConditionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ConditionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/call-policy YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/call-policy YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/install-protocol-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/install-protocol-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny struct {
	*ygot.NodePath
}

// BgpConditions (container): Top-level container
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "bgp-conditions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) BgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-conditions"},
			map[string]interface{}{},
			n,
		),
	}
}

// BgpConditions (container): Top-level container
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "bgp-conditions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) BgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-conditions"},
			map[string]interface{}{},
			n,
		),
	}
}

// CallPolicy (leaf): Applies the statements from the specified policy
// definition and then returns control the current
// policy statement. Note that the called policy may
// itself call other policies (subject to
// implementation limitations). This is intended to
// provide a policy 'subroutine' capability.  The
// called policy should contain an explicit or a
// default route disposition that returns an
// effective true (accept-route) or false
// (reject-route), otherwise the behavior may be
// ambiguous and implementation dependent
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/call-policy"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/call-policy"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) CallPolicy() *RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "call-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// CallPolicy (leaf): Applies the statements from the specified policy
// definition and then returns control the current
// policy statement. Note that the called policy may
// itself call other policies (subject to
// implementation limitations). This is intended to
// provide a policy 'subroutine' capability.  The
// called policy should contain an explicit or a
// default route disposition that returns an
// effective true (accept-route) or false
// (reject-route), otherwise the behavior may be
// ambiguous and implementation dependent
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/call-policy"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/call-policy"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) CallPolicy() *RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "call-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// InstallProtocolEq (leaf): Condition to check the protocol / method used to install
// the route into the local routing table
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/install-protocol-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/install-protocol-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) InstallProtocolEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "install-protocol-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// InstallProtocolEq (leaf): Condition to check the protocol / method used to install
// the route into the local routing table
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/install-protocol-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/install-protocol-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) InstallProtocolEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "install-protocol-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchInterface (container): Top-level container for interface match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-interface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"match-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchInterface (container): Top-level container for interface match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-interface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchNeighborSet (container): Match a referenced neighbor set according to the logic
// defined in the match-set-options-leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-neighbor-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"match-neighbor-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchNeighborSet (container): Match a referenced neighbor set according to the logic
// defined in the match-set-options-leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-neighbor-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match-neighbor-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchPrefixSet (container): Match a referenced prefix-set according to the logic
// defined in the match-set-options leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-prefix-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"match-prefix-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchPrefixSet (container): Match a referenced prefix-set according to the logic
// defined in the match-set-options leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-prefix-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match-prefix-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchTagSet (container): Match a referenced tag set according to the logic defined
// in the match-options-set leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"match-tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchTagSet (container): Match a referenced tag set according to the logic defined
// in the match-options-set leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match-tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/afi-safi-in YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/afi-safi-in YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/ext-community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/ext-community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/local-pref-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/local-pref-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/med-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/med-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/next-hop-in YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/next-hop-in YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/origin-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/origin-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/route-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/route-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny struct {
	*ygot.NodePath
}

// AfiSafiIn (leaf-list): List of address families which the NLRI may be
// within
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/afi-safi-in"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/afi-safi-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) AfiSafiIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "afi-safi-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// AfiSafiIn (leaf-list): List of address families which the NLRI may be
// within
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/afi-safi-in"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/afi-safi-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) AfiSafiIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "afi-safi-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathLength (container): Value and comparison operations for conditions based on the
// length of the AS path in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "as-path-length"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) AsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"as-path-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathLength (container): Value and comparison operations for conditions based on the
// length of the AS path in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "as-path-length"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) AsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"as-path-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunityCount (container): Value and comparison operations for conditions based on the
// number of communities in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "community-count"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) CommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath{
		NodePath: ygot.NewNodePath(
			[]string{"community-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunityCount (container): Value and comparison operations for conditions based on the
// number of communities in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "community-count"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) CommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"community-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunitySet (leaf): References a defined community set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/community-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) CommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "community-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunitySet (leaf): References a defined community set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/community-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) CommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "community-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunitySet (leaf): References a defined extended community set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/ext-community-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) ExtCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ext-community-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunitySet (leaf): References a defined extended community set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/ext-community-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) ExtCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ext-community-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalPrefEq (leaf): Condition to check if the local pref attribute is equal to
// the specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/local-pref-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/local-pref-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) LocalPrefEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "local-pref-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalPrefEq (leaf): Condition to check if the local pref attribute is equal to
// the specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/local-pref-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/local-pref-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) LocalPrefEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "local-pref-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchAsPathSet (container): Match a referenced as-path set according to the logic
// defined in the match-set-options leaf
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-as-path-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) MatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"match-as-path-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchAsPathSet (container): Match a referenced as-path set according to the logic
// defined in the match-set-options leaf
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-as-path-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) MatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match-as-path-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MedEq (leaf): Condition to check if the received MED value is equal to
// the specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/med-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/med-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) MedEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "med-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// MedEq (leaf): Condition to check if the received MED value is equal to
// the specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/med-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/med-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) MedEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "med-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHopIn (leaf-list): List of next hop addresses to check for in the route
// update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/next-hop-in"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/next-hop-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) NextHopIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "next-hop-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHopIn (leaf-list): List of next hop addresses to check for in the route
// update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/next-hop-in"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/next-hop-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) NextHopIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "next-hop-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginEq (leaf): Condition to check if the route origin is equal to the
// specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/origin-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/origin-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) OriginEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "origin-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginEq (leaf): Condition to check if the route origin is equal to the
// specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/origin-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/origin-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) OriginEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "origin-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouteType (leaf): Condition to check the route type in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/route-type"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/route-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) RouteType() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "route-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouteType (leaf): Condition to check the route type in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/route-type"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/route-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) RouteType() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "route-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny struct {
	*ygot.NodePath
}

// Operator (leaf): type of comparison to be performed
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/operator"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "operator"},
			map[string]interface{}{},
			n,
		),
	}
}

// Operator (leaf): type of comparison to be performed
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/operator"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "operator"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): value to compare with the community count
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/value"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): value to compare with the community count
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/value"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny struct {
	*ygot.NodePath
}

// Operator (leaf): type of comparison to be performed
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/operator"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "operator"},
			map[string]interface{}{},
			n,
		),
	}
}

// Operator (leaf): type of comparison to be performed
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/operator"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "operator"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): value to compare with the community count
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/value"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): value to compare with the community count
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/value"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// AsPathSet (leaf): References a defined AS path set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/as-path-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath) AsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "as-path-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathSet (leaf): References a defined AS path set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/as-path-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny) AsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "as-path-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/subinterface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/subinterface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/interface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath) Interface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/interface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny) Interface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/subinterface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/subinterface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath) Subinterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/subinterface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/subinterface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny) Subinterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny struct {
	*ygot.NodePath
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborSet (leaf): References a defined neighbor set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/neighbor-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath) NeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "neighbor-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborSet (leaf): References a defined neighbor set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/neighbor-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny) NeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "neighbor-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny struct {
	*ygot.NodePath
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixSet (leaf): References a defined prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/prefix-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath) PrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixSet (leaf): References a defined prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/prefix-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny) PrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny struct {
	*ygot.NodePath
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// TagSet (leaf): References a defined tag set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// TagSet (leaf): References a defined tag set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

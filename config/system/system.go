/*
Package system is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/alexmasi/go/pkg/mod/github.com/openconfig/ygot@v0.23.1/genutil/names.go
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package system

import (
	oc "github.com/openconfig/ondatra/telemetry"
	"github.com/openconfig/ygot/ygot"
)

// SystemPath represents the /openconfig-system/system YANG schema element.
type SystemPath struct {
	*ygot.NodePath
}

// SystemPathAny represents the wildcard version of the /openconfig-system/system YANG schema element.
type SystemPathAny struct {
	*ygot.NodePath
}

// System_DomainNamePath represents the /openconfig-system/system/config/domain-name YANG schema element.
type System_DomainNamePath struct {
	*ygot.NodePath
}

// System_DomainNamePathAny represents the wildcard version of the /openconfig-system/system/config/domain-name YANG schema element.
type System_DomainNamePathAny struct {
	*ygot.NodePath
}

// System_HostnamePath represents the /openconfig-system/system/config/hostname YANG schema element.
type System_HostnamePath struct {
	*ygot.NodePath
}

// System_HostnamePathAny represents the wildcard version of the /openconfig-system/system/config/hostname YANG schema element.
type System_HostnamePathAny struct {
	*ygot.NodePath
}

// System_LoginBannerPath represents the /openconfig-system/system/config/login-banner YANG schema element.
type System_LoginBannerPath struct {
	*ygot.NodePath
}

// System_LoginBannerPathAny represents the wildcard version of the /openconfig-system/system/config/login-banner YANG schema element.
type System_LoginBannerPathAny struct {
	*ygot.NodePath
}

// System_MotdBannerPath represents the /openconfig-system/system/config/motd-banner YANG schema element.
type System_MotdBannerPath struct {
	*ygot.NodePath
}

// System_MotdBannerPathAny represents the wildcard version of the /openconfig-system/system/config/motd-banner YANG schema element.
type System_MotdBannerPathAny struct {
	*ygot.NodePath
}

// Aaa (container): Top-level container for AAA services
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "aaa"
// Path from root: "/system/aaa"
func (n *SystemPath) Aaa() *System_AaaPath {
	return &System_AaaPath{
		NodePath: ygot.NewNodePath(
			[]string{"aaa"},
			map[string]interface{}{},
			n,
		),
	}
}

// Aaa (container): Top-level container for AAA services
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "aaa"
// Path from root: "/system/aaa"
func (n *SystemPathAny) Aaa() *System_AaaPathAny {
	return &System_AaaPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"aaa"},
			map[string]interface{}{},
			n,
		),
	}
}

// Clock (container): Top-level container for clock configuration data
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "clock"
// Path from root: "/system/clock"
func (n *SystemPath) Clock() *System_ClockPath {
	return &System_ClockPath{
		NodePath: ygot.NewNodePath(
			[]string{"clock"},
			map[string]interface{}{},
			n,
		),
	}
}

// Clock (container): Top-level container for clock configuration data
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "clock"
// Path from root: "/system/clock"
func (n *SystemPathAny) Clock() *System_ClockPathAny {
	return &System_ClockPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"clock"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dns (container): Enclosing container for DNS resolver data
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "dns"
// Path from root: "/system/dns"
func (n *SystemPath) Dns() *System_DnsPath {
	return &System_DnsPath{
		NodePath: ygot.NewNodePath(
			[]string{"dns"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dns (container): Enclosing container for DNS resolver data
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "dns"
// Path from root: "/system/dns"
func (n *SystemPathAny) Dns() *System_DnsPathAny {
	return &System_DnsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"dns"},
			map[string]interface{}{},
			n,
		),
	}
}

// DomainName (leaf): Specifies the domain name used to form fully qualified name
// for unqualified hostnames.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/domain-name"
// Path from root: "/system/config/domain-name"
func (n *SystemPath) DomainName() *System_DomainNamePath {
	return &System_DomainNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "domain-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// DomainName (leaf): Specifies the domain name used to form fully qualified name
// for unqualified hostnames.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/domain-name"
// Path from root: "/system/config/domain-name"
func (n *SystemPathAny) DomainName() *System_DomainNamePathAny {
	return &System_DomainNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "domain-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// GrpcServerAny (list): The list of gRPC servers that are running on the device. Each
// instance within this list corresponds to an individual gRPC listener
// that listens on a single TCP port on the specified addresses.
// Where there are multiple services that run on a single port, these
// are enabled through the service leaf-list which uses the GRPC_SERVICE
// identity to list the supported service types.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "grpc-servers/grpc-server"
// Path from root: "/system/grpc-servers/grpc-server"
// Name (wildcarded): string
func (n *SystemPath) GrpcServerAny() *System_GrpcServerPathAny {
	return &System_GrpcServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"grpc-servers", "grpc-server"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// GrpcServerAny (list): The list of gRPC servers that are running on the device. Each
// instance within this list corresponds to an individual gRPC listener
// that listens on a single TCP port on the specified addresses.
// Where there are multiple services that run on a single port, these
// are enabled through the service leaf-list which uses the GRPC_SERVICE
// identity to list the supported service types.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "grpc-servers/grpc-server"
// Path from root: "/system/grpc-servers/grpc-server"
// Name (wildcarded): string
func (n *SystemPathAny) GrpcServerAny() *System_GrpcServerPathAny {
	return &System_GrpcServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"grpc-servers", "grpc-server"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// GrpcServer (list): The list of gRPC servers that are running on the device. Each
// instance within this list corresponds to an individual gRPC listener
// that listens on a single TCP port on the specified addresses.
// Where there are multiple services that run on a single port, these
// are enabled through the service leaf-list which uses the GRPC_SERVICE
// identity to list the supported service types.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "grpc-servers/grpc-server"
// Path from root: "/system/grpc-servers/grpc-server"
// Name: string
func (n *SystemPath) GrpcServer(Name string) *System_GrpcServerPath {
	return &System_GrpcServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"grpc-servers", "grpc-server"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// GrpcServer (list): The list of gRPC servers that are running on the device. Each
// instance within this list corresponds to an individual gRPC listener
// that listens on a single TCP port on the specified addresses.
// Where there are multiple services that run on a single port, these
// are enabled through the service leaf-list which uses the GRPC_SERVICE
// identity to list the supported service types.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "grpc-servers/grpc-server"
// Path from root: "/system/grpc-servers/grpc-server"
// Name: string
func (n *SystemPathAny) GrpcServer(Name string) *System_GrpcServerPathAny {
	return &System_GrpcServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"grpc-servers", "grpc-server"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Hostname (leaf): The hostname of the device -- should be a single domain
// label, without the domain.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/hostname"
// Path from root: "/system/config/hostname"
func (n *SystemPath) Hostname() *System_HostnamePath {
	return &System_HostnamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hostname"},
			map[string]interface{}{},
			n,
		),
	}
}

// Hostname (leaf): The hostname of the device -- should be a single domain
// label, without the domain.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/hostname"
// Path from root: "/system/config/hostname"
func (n *SystemPathAny) Hostname() *System_HostnamePathAny {
	return &System_HostnamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hostname"},
			map[string]interface{}{},
			n,
		),
	}
}

// License (container): Container for license model
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "license"
// Path from root: "/system/license"
func (n *SystemPath) License() *System_LicensePath {
	return &System_LicensePath{
		NodePath: ygot.NewNodePath(
			[]string{"license"},
			map[string]interface{}{},
			n,
		),
	}
}

// License (container): Container for license model
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "license"
// Path from root: "/system/license"
func (n *SystemPathAny) License() *System_LicensePathAny {
	return &System_LicensePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"license"},
			map[string]interface{}{},
			n,
		),
	}
}

// Logging (container): Top-level container for data related to logging / syslog
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "logging"
// Path from root: "/system/logging"
func (n *SystemPath) Logging() *System_LoggingPath {
	return &System_LoggingPath{
		NodePath: ygot.NewNodePath(
			[]string{"logging"},
			map[string]interface{}{},
			n,
		),
	}
}

// Logging (container): Top-level container for data related to logging / syslog
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "logging"
// Path from root: "/system/logging"
func (n *SystemPathAny) Logging() *System_LoggingPathAny {
	return &System_LoggingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logging"},
			map[string]interface{}{},
			n,
		),
	}
}

// LoginBanner (leaf): The console login message displayed before the login prompt,
// i.e., before a user logs into the system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/login-banner"
// Path from root: "/system/config/login-banner"
func (n *SystemPath) LoginBanner() *System_LoginBannerPath {
	return &System_LoginBannerPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "login-banner"},
			map[string]interface{}{},
			n,
		),
	}
}

// LoginBanner (leaf): The console login message displayed before the login prompt,
// i.e., before a user logs into the system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/login-banner"
// Path from root: "/system/config/login-banner"
func (n *SystemPathAny) LoginBanner() *System_LoginBannerPathAny {
	return &System_LoginBannerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "login-banner"},
			map[string]interface{}{},
			n,
		),
	}
}

// Memory (container): Top-level container for system memory data
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "memory"
// Path from root: "/system/memory"
func (n *SystemPath) Memory() *System_MemoryPath {
	return &System_MemoryPath{
		NodePath: ygot.NewNodePath(
			[]string{"memory"},
			map[string]interface{}{},
			n,
		),
	}
}

// Memory (container): Top-level container for system memory data
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "memory"
// Path from root: "/system/memory"
func (n *SystemPathAny) Memory() *System_MemoryPathAny {
	return &System_MemoryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"memory"},
			map[string]interface{}{},
			n,
		),
	}
}

// Messages (container): Top-level container for Syslog messages.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "messages"
// Path from root: "/system/messages"
func (n *SystemPath) Messages() *System_MessagesPath {
	return &System_MessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// Messages (container): Top-level container for Syslog messages.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "messages"
// Path from root: "/system/messages"
func (n *SystemPathAny) Messages() *System_MessagesPathAny {
	return &System_MessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// MotdBanner (leaf): The console message displayed after a user logs into the
// system.  They system may append additional standard
// information such as the current system date and time, uptime,
// last login timestamp, etc.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/motd-banner"
// Path from root: "/system/config/motd-banner"
func (n *SystemPath) MotdBanner() *System_MotdBannerPath {
	return &System_MotdBannerPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "motd-banner"},
			map[string]interface{}{},
			n,
		),
	}
}

// MotdBanner (leaf): The console message displayed after a user logs into the
// system.  They system may append additional standard
// information such as the current system date and time, uptime,
// last login timestamp, etc.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/motd-banner"
// Path from root: "/system/config/motd-banner"
func (n *SystemPathAny) MotdBanner() *System_MotdBannerPathAny {
	return &System_MotdBannerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "motd-banner"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ntp (container): Top-level container for NTP configuration and state
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp"
// Path from root: "/system/ntp"
func (n *SystemPath) Ntp() *System_NtpPath {
	return &System_NtpPath{
		NodePath: ygot.NewNodePath(
			[]string{"ntp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ntp (container): Top-level container for NTP configuration and state
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp"
// Path from root: "/system/ntp"
func (n *SystemPathAny) Ntp() *System_NtpPathAny {
	return &System_NtpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ntp"},
			map[string]interface{}{},
			n,
		),
	}
}

// SshServer (container): Top-level container for ssh server
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "ssh-server"
// Path from root: "/system/ssh-server"
func (n *SystemPath) SshServer() *System_SshServerPath {
	return &System_SshServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"ssh-server"},
			map[string]interface{}{},
			n,
		),
	}
}

// SshServer (container): Top-level container for ssh server
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "ssh-server"
// Path from root: "/system/ssh-server"
func (n *SystemPathAny) SshServer() *System_SshServerPathAny {
	return &System_SshServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ssh-server"},
			map[string]interface{}{},
			n,
		),
	}
}

// TelnetServer (container): Top-level container for telnet terminal servers
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "telnet-server"
// Path from root: "/system/telnet-server"
func (n *SystemPath) TelnetServer() *System_TelnetServerPath {
	return &System_TelnetServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"telnet-server"},
			map[string]interface{}{},
			n,
		),
	}
}

// TelnetServer (container): Top-level container for telnet terminal servers
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "telnet-server"
// Path from root: "/system/telnet-server"
func (n *SystemPathAny) TelnetServer() *System_TelnetServerPathAny {
	return &System_TelnetServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"telnet-server"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_AaaPath represents the /openconfig-system/system/aaa YANG schema element.
type System_AaaPath struct {
	*ygot.NodePath
}

// System_AaaPathAny represents the wildcard version of the /openconfig-system/system/aaa YANG schema element.
type System_AaaPathAny struct {
	*ygot.NodePath
}

// Accounting (container): Top-level container for AAA accounting
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "accounting"
// Path from root: "/system/aaa/accounting"
func (n *System_AaaPath) Accounting() *System_Aaa_AccountingPath {
	return &System_Aaa_AccountingPath{
		NodePath: ygot.NewNodePath(
			[]string{"accounting"},
			map[string]interface{}{},
			n,
		),
	}
}

// Accounting (container): Top-level container for AAA accounting
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "accounting"
// Path from root: "/system/aaa/accounting"
func (n *System_AaaPathAny) Accounting() *System_Aaa_AccountingPathAny {
	return &System_Aaa_AccountingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"accounting"},
			map[string]interface{}{},
			n,
		),
	}
}

// Authentication (container): Top-level container for global authentication data
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "authentication"
// Path from root: "/system/aaa/authentication"
func (n *System_AaaPath) Authentication() *System_Aaa_AuthenticationPath {
	return &System_Aaa_AuthenticationPath{
		NodePath: ygot.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
}

// Authentication (container): Top-level container for global authentication data
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "authentication"
// Path from root: "/system/aaa/authentication"
func (n *System_AaaPathAny) Authentication() *System_Aaa_AuthenticationPathAny {
	return &System_Aaa_AuthenticationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
}

// Authorization (container): Top-level container for AAA authorization configuration
// and operational state data
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "authorization"
// Path from root: "/system/aaa/authorization"
func (n *System_AaaPath) Authorization() *System_Aaa_AuthorizationPath {
	return &System_Aaa_AuthorizationPath{
		NodePath: ygot.NewNodePath(
			[]string{"authorization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Authorization (container): Top-level container for AAA authorization configuration
// and operational state data
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "authorization"
// Path from root: "/system/aaa/authorization"
func (n *System_AaaPathAny) Authorization() *System_Aaa_AuthorizationPathAny {
	return &System_Aaa_AuthorizationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"authorization"},
			map[string]interface{}{},
			n,
		),
	}
}

// ServerGroupAny (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "server-groups/server-group"
// Path from root: "/system/aaa/server-groups/server-group"
// Name (wildcarded): string
func (n *System_AaaPath) ServerGroupAny() *System_Aaa_ServerGroupPathAny {
	return &System_Aaa_ServerGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"server-groups", "server-group"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// ServerGroupAny (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "server-groups/server-group"
// Path from root: "/system/aaa/server-groups/server-group"
// Name (wildcarded): string
func (n *System_AaaPathAny) ServerGroupAny() *System_Aaa_ServerGroupPathAny {
	return &System_Aaa_ServerGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"server-groups", "server-group"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// ServerGroup (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "server-groups/server-group"
// Path from root: "/system/aaa/server-groups/server-group"
// Name: string
func (n *System_AaaPath) ServerGroup(Name string) *System_Aaa_ServerGroupPath {
	return &System_Aaa_ServerGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"server-groups", "server-group"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// ServerGroup (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "server-groups/server-group"
// Path from root: "/system/aaa/server-groups/server-group"
// Name: string
func (n *System_AaaPathAny) ServerGroup(Name string) *System_Aaa_ServerGroupPathAny {
	return &System_Aaa_ServerGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"server-groups", "server-group"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// System_Aaa_AccountingPath represents the /openconfig-system/system/aaa/accounting YANG schema element.
type System_Aaa_AccountingPath struct {
	*ygot.NodePath
}

// System_Aaa_AccountingPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting YANG schema element.
type System_Aaa_AccountingPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_AccountingMethodPath represents the /openconfig-system/system/aaa/accounting/config/accounting-method YANG schema element.
type System_Aaa_Accounting_AccountingMethodPath struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_AccountingMethodPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/config/accounting-method YANG schema element.
type System_Aaa_Accounting_AccountingMethodPathAny struct {
	*ygot.NodePath
}

// AccountingMethod (leaf-list): An ordered list of methods used for AAA accounting for this
// event type.  The method is defined by the destination for
// accounting data, which may be specified as the group of
// all TACACS+/RADIUS servers, a defined server group, or
// the local system.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/accounting-method"
// Path from root: "/system/aaa/accounting/config/accounting-method"
func (n *System_Aaa_AccountingPath) AccountingMethod() *System_Aaa_Accounting_AccountingMethodPath {
	return &System_Aaa_Accounting_AccountingMethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "accounting-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// AccountingMethod (leaf-list): An ordered list of methods used for AAA accounting for this
// event type.  The method is defined by the destination for
// accounting data, which may be specified as the group of
// all TACACS+/RADIUS servers, a defined server group, or
// the local system.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/accounting-method"
// Path from root: "/system/aaa/accounting/config/accounting-method"
func (n *System_Aaa_AccountingPathAny) AccountingMethod() *System_Aaa_Accounting_AccountingMethodPathAny {
	return &System_Aaa_Accounting_AccountingMethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "accounting-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// EventAny (list): List of events subject to accounting
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/accounting/events/event"
// EventType (wildcarded): oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE
func (n *System_Aaa_AccountingPath) EventAny() *System_Aaa_Accounting_EventPathAny {
	return &System_Aaa_Accounting_EventPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": "*"},
			n,
		),
	}
}

// EventAny (list): List of events subject to accounting
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/accounting/events/event"
// EventType (wildcarded): oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE
func (n *System_Aaa_AccountingPathAny) EventAny() *System_Aaa_Accounting_EventPathAny {
	return &System_Aaa_Accounting_EventPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": "*"},
			n,
		),
	}
}

// Event (list): List of events subject to accounting
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/accounting/events/event"
// EventType: oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE
func (n *System_Aaa_AccountingPath) Event(EventType oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *System_Aaa_Accounting_EventPath {
	return &System_Aaa_Accounting_EventPath{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": EventType},
			n,
		),
	}
}

// Event (list): List of events subject to accounting
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/accounting/events/event"
// EventType: oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE
func (n *System_Aaa_AccountingPathAny) Event(EventType oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *System_Aaa_Accounting_EventPathAny {
	return &System_Aaa_Accounting_EventPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": EventType},
			n,
		),
	}
}

// System_Aaa_Accounting_EventPath represents the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type System_Aaa_Accounting_EventPath struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_EventPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type System_Aaa_Accounting_EventPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_Event_EventTypePath represents the /openconfig-system/system/aaa/accounting/events/event/config/event-type YANG schema element.
type System_Aaa_Accounting_Event_EventTypePath struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_Event_EventTypePathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/events/event/config/event-type YANG schema element.
type System_Aaa_Accounting_Event_EventTypePathAny struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_Event_RecordPath represents the /openconfig-system/system/aaa/accounting/events/event/config/record YANG schema element.
type System_Aaa_Accounting_Event_RecordPath struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_Event_RecordPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/events/event/config/record YANG schema element.
type System_Aaa_Accounting_Event_RecordPathAny struct {
	*ygot.NodePath
}

// EventType (leaf): The type of activity to record at the AAA accounting
// server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/event-type"
// Path from root: "/system/aaa/accounting/events/event/config/event-type"
func (n *System_Aaa_Accounting_EventPath) EventType() *System_Aaa_Accounting_Event_EventTypePath {
	return &System_Aaa_Accounting_Event_EventTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "event-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// EventType (leaf): The type of activity to record at the AAA accounting
// server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/event-type"
// Path from root: "/system/aaa/accounting/events/event/config/event-type"
func (n *System_Aaa_Accounting_EventPathAny) EventType() *System_Aaa_Accounting_Event_EventTypePathAny {
	return &System_Aaa_Accounting_Event_EventTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "event-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Record (leaf): Type of record to send to the accounting server for this
// activity type
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/record"
// Path from root: "/system/aaa/accounting/events/event/config/record"
func (n *System_Aaa_Accounting_EventPath) Record() *System_Aaa_Accounting_Event_RecordPath {
	return &System_Aaa_Accounting_Event_RecordPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "record"},
			map[string]interface{}{},
			n,
		),
	}
}

// Record (leaf): Type of record to send to the accounting server for this
// activity type
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/record"
// Path from root: "/system/aaa/accounting/events/event/config/record"
func (n *System_Aaa_Accounting_EventPathAny) Record() *System_Aaa_Accounting_Event_RecordPathAny {
	return &System_Aaa_Accounting_Event_RecordPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "record"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_AuthenticationPath represents the /openconfig-system/system/aaa/authentication YANG schema element.
type System_Aaa_AuthenticationPath struct {
	*ygot.NodePath
}

// System_Aaa_AuthenticationPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication YANG schema element.
type System_Aaa_AuthenticationPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AuthenticationMethodPath represents the /openconfig-system/system/aaa/authentication/config/authentication-method YANG schema element.
type System_Aaa_Authentication_AuthenticationMethodPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AuthenticationMethodPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/config/authentication-method YANG schema element.
type System_Aaa_Authentication_AuthenticationMethodPathAny struct {
	*ygot.NodePath
}

// AdminUser (container): Top-level container for the system root or admin user
// configuration and operational state
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "admin-user"
// Path from root: "/system/aaa/authentication/admin-user"
func (n *System_Aaa_AuthenticationPath) AdminUser() *System_Aaa_Authentication_AdminUserPath {
	return &System_Aaa_Authentication_AdminUserPath{
		NodePath: ygot.NewNodePath(
			[]string{"admin-user"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminUser (container): Top-level container for the system root or admin user
// configuration and operational state
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "admin-user"
// Path from root: "/system/aaa/authentication/admin-user"
func (n *System_Aaa_AuthenticationPathAny) AdminUser() *System_Aaa_Authentication_AdminUserPathAny {
	return &System_Aaa_Authentication_AdminUserPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"admin-user"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthenticationMethod (leaf-list): Ordered list of authentication methods for users.  This
// can be either a reference to a server group, or a well-
// defined designation in the AAA_METHOD_TYPE identity.  If
// authentication fails with one method, the next defined
// method is tried -- failure of all methods results in the
// user being denied access.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/authentication-method"
// Path from root: "/system/aaa/authentication/config/authentication-method"
func (n *System_Aaa_AuthenticationPath) AuthenticationMethod() *System_Aaa_Authentication_AuthenticationMethodPath {
	return &System_Aaa_Authentication_AuthenticationMethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "authentication-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthenticationMethod (leaf-list): Ordered list of authentication methods for users.  This
// can be either a reference to a server group, or a well-
// defined designation in the AAA_METHOD_TYPE identity.  If
// authentication fails with one method, the next defined
// method is tried -- failure of all methods results in the
// user being denied access.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/authentication-method"
// Path from root: "/system/aaa/authentication/config/authentication-method"
func (n *System_Aaa_AuthenticationPathAny) AuthenticationMethod() *System_Aaa_Authentication_AuthenticationMethodPathAny {
	return &System_Aaa_Authentication_AuthenticationMethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "authentication-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// UserAny (list): List of local users on the system
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "users/user"
// Path from root: "/system/aaa/authentication/users/user"
// Username (wildcarded): string
func (n *System_Aaa_AuthenticationPath) UserAny() *System_Aaa_Authentication_UserPathAny {
	return &System_Aaa_Authentication_UserPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"users", "user"},
			map[string]interface{}{"username": "*"},
			n,
		),
	}
}

// UserAny (list): List of local users on the system
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "users/user"
// Path from root: "/system/aaa/authentication/users/user"
// Username (wildcarded): string
func (n *System_Aaa_AuthenticationPathAny) UserAny() *System_Aaa_Authentication_UserPathAny {
	return &System_Aaa_Authentication_UserPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"users", "user"},
			map[string]interface{}{"username": "*"},
			n,
		),
	}
}

// User (list): List of local users on the system
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "users/user"
// Path from root: "/system/aaa/authentication/users/user"
// Username: string
func (n *System_Aaa_AuthenticationPath) User(Username string) *System_Aaa_Authentication_UserPath {
	return &System_Aaa_Authentication_UserPath{
		NodePath: ygot.NewNodePath(
			[]string{"users", "user"},
			map[string]interface{}{"username": Username},
			n,
		),
	}
}

// User (list): List of local users on the system
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "users/user"
// Path from root: "/system/aaa/authentication/users/user"
// Username: string
func (n *System_Aaa_AuthenticationPathAny) User(Username string) *System_Aaa_Authentication_UserPathAny {
	return &System_Aaa_Authentication_UserPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"users", "user"},
			map[string]interface{}{"username": Username},
			n,
		),
	}
}

// System_Aaa_Authentication_AdminUserPath represents the /openconfig-system/system/aaa/authentication/admin-user YANG schema element.
type System_Aaa_Authentication_AdminUserPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AdminUserPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user YANG schema element.
type System_Aaa_Authentication_AdminUserPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AdminUser_AdminPasswordPath represents the /openconfig-system/system/aaa/authentication/admin-user/config/admin-password YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminPasswordPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AdminUser_AdminPasswordPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user/config/admin-password YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminPasswordPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath represents the /openconfig-system/system/aaa/authentication/admin-user/config/admin-password-hashed YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user/config/admin-password-hashed YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny struct {
	*ygot.NodePath
}

// AdminPassword (leaf): The admin/root password, supplied as a cleartext string.
// The system should hash and only store the password as a
// hashed value.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/admin-password"
// Path from root: "/system/aaa/authentication/admin-user/config/admin-password"
func (n *System_Aaa_Authentication_AdminUserPath) AdminPassword() *System_Aaa_Authentication_AdminUser_AdminPasswordPath {
	return &System_Aaa_Authentication_AdminUser_AdminPasswordPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-password"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminPassword (leaf): The admin/root password, supplied as a cleartext string.
// The system should hash and only store the password as a
// hashed value.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/admin-password"
// Path from root: "/system/aaa/authentication/admin-user/config/admin-password"
func (n *System_Aaa_Authentication_AdminUserPathAny) AdminPassword() *System_Aaa_Authentication_AdminUser_AdminPasswordPathAny {
	return &System_Aaa_Authentication_AdminUser_AdminPasswordPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-password"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminPasswordHashed (leaf): The admin/root password, supplied as a hashed value
// using the notation described in the definition of the
// crypt-password-type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/admin-password-hashed"
// Path from root: "/system/aaa/authentication/admin-user/config/admin-password-hashed"
func (n *System_Aaa_Authentication_AdminUserPath) AdminPasswordHashed() *System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath {
	return &System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-password-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminPasswordHashed (leaf): The admin/root password, supplied as a hashed value
// using the notation described in the definition of the
// crypt-password-type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/admin-password-hashed"
// Path from root: "/system/aaa/authentication/admin-user/config/admin-password-hashed"
func (n *System_Aaa_Authentication_AdminUserPathAny) AdminPasswordHashed() *System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny {
	return &System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-password-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_Authentication_UserPath represents the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type System_Aaa_Authentication_UserPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_UserPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type System_Aaa_Authentication_UserPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_PasswordPath represents the /openconfig-system/system/aaa/authentication/users/user/config/password YANG schema element.
type System_Aaa_Authentication_User_PasswordPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_PasswordPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/config/password YANG schema element.
type System_Aaa_Authentication_User_PasswordPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_PasswordHashedPath represents the /openconfig-system/system/aaa/authentication/users/user/config/password-hashed YANG schema element.
type System_Aaa_Authentication_User_PasswordHashedPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_PasswordHashedPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/config/password-hashed YANG schema element.
type System_Aaa_Authentication_User_PasswordHashedPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_RolePath represents the /openconfig-system/system/aaa/authentication/users/user/config/role YANG schema element.
type System_Aaa_Authentication_User_RolePath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_RolePathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/config/role YANG schema element.
type System_Aaa_Authentication_User_RolePathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_SshKeyPath represents the /openconfig-system/system/aaa/authentication/users/user/config/ssh-key YANG schema element.
type System_Aaa_Authentication_User_SshKeyPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_SshKeyPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/config/ssh-key YANG schema element.
type System_Aaa_Authentication_User_SshKeyPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_UsernamePath represents the /openconfig-system/system/aaa/authentication/users/user/config/username YANG schema element.
type System_Aaa_Authentication_User_UsernamePath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_UsernamePathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/config/username YANG schema element.
type System_Aaa_Authentication_User_UsernamePathAny struct {
	*ygot.NodePath
}

// Password (leaf): The user password, supplied as cleartext.  The system
// must hash the value and only store the hashed value.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/password"
// Path from root: "/system/aaa/authentication/users/user/config/password"
func (n *System_Aaa_Authentication_UserPath) Password() *System_Aaa_Authentication_User_PasswordPath {
	return &System_Aaa_Authentication_User_PasswordPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "password"},
			map[string]interface{}{},
			n,
		),
	}
}

// Password (leaf): The user password, supplied as cleartext.  The system
// must hash the value and only store the hashed value.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/password"
// Path from root: "/system/aaa/authentication/users/user/config/password"
func (n *System_Aaa_Authentication_UserPathAny) Password() *System_Aaa_Authentication_User_PasswordPathAny {
	return &System_Aaa_Authentication_User_PasswordPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "password"},
			map[string]interface{}{},
			n,
		),
	}
}

// PasswordHashed (leaf): The user password, supplied as a hashed value
// using the notation described in the definition of the
// crypt-password-type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/password-hashed"
// Path from root: "/system/aaa/authentication/users/user/config/password-hashed"
func (n *System_Aaa_Authentication_UserPath) PasswordHashed() *System_Aaa_Authentication_User_PasswordHashedPath {
	return &System_Aaa_Authentication_User_PasswordHashedPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "password-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// PasswordHashed (leaf): The user password, supplied as a hashed value
// using the notation described in the definition of the
// crypt-password-type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/password-hashed"
// Path from root: "/system/aaa/authentication/users/user/config/password-hashed"
func (n *System_Aaa_Authentication_UserPathAny) PasswordHashed() *System_Aaa_Authentication_User_PasswordHashedPathAny {
	return &System_Aaa_Authentication_User_PasswordHashedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "password-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// Role (leaf): Role assigned to the user.  The role may be supplied
// as a string or a role defined by the SYSTEM_DEFINED_ROLES
// identity.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/role"
// Path from root: "/system/aaa/authentication/users/user/config/role"
func (n *System_Aaa_Authentication_UserPath) Role() *System_Aaa_Authentication_User_RolePath {
	return &System_Aaa_Authentication_User_RolePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "role"},
			map[string]interface{}{},
			n,
		),
	}
}

// Role (leaf): Role assigned to the user.  The role may be supplied
// as a string or a role defined by the SYSTEM_DEFINED_ROLES
// identity.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/role"
// Path from root: "/system/aaa/authentication/users/user/config/role"
func (n *System_Aaa_Authentication_UserPathAny) Role() *System_Aaa_Authentication_User_RolePathAny {
	return &System_Aaa_Authentication_User_RolePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "role"},
			map[string]interface{}{},
			n,
		),
	}
}

// SshKey (leaf): SSH public key for the user (RSA or DSA)
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/ssh-key"
// Path from root: "/system/aaa/authentication/users/user/config/ssh-key"
func (n *System_Aaa_Authentication_UserPath) SshKey() *System_Aaa_Authentication_User_SshKeyPath {
	return &System_Aaa_Authentication_User_SshKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ssh-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SshKey (leaf): SSH public key for the user (RSA or DSA)
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/ssh-key"
// Path from root: "/system/aaa/authentication/users/user/config/ssh-key"
func (n *System_Aaa_Authentication_UserPathAny) SshKey() *System_Aaa_Authentication_User_SshKeyPathAny {
	return &System_Aaa_Authentication_User_SshKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ssh-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// Username (leaf): Assigned username for this user
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/username"
// Path from root: "/system/aaa/authentication/users/user/config/username"
func (n *System_Aaa_Authentication_UserPath) Username() *System_Aaa_Authentication_User_UsernamePath {
	return &System_Aaa_Authentication_User_UsernamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "username"},
			map[string]interface{}{},
			n,
		),
	}
}

// Username (leaf): Assigned username for this user
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/username"
// Path from root: "/system/aaa/authentication/users/user/config/username"
func (n *System_Aaa_Authentication_UserPathAny) Username() *System_Aaa_Authentication_User_UsernamePathAny {
	return &System_Aaa_Authentication_User_UsernamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "username"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_AuthorizationPath represents the /openconfig-system/system/aaa/authorization YANG schema element.
type System_Aaa_AuthorizationPath struct {
	*ygot.NodePath
}

// System_Aaa_AuthorizationPathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization YANG schema element.
type System_Aaa_AuthorizationPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authorization_AuthorizationMethodPath represents the /openconfig-system/system/aaa/authorization/config/authorization-method YANG schema element.
type System_Aaa_Authorization_AuthorizationMethodPath struct {
	*ygot.NodePath
}

// System_Aaa_Authorization_AuthorizationMethodPathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization/config/authorization-method YANG schema element.
type System_Aaa_Authorization_AuthorizationMethodPathAny struct {
	*ygot.NodePath
}

// AuthorizationMethod (leaf-list): Ordered list of methods for authorizing commands.  The first
// method that provides a response (positive or negative) should
// be used.  The list may contain a well-defined method such
// as the set of all TACACS or RADIUS servers, or the name of
// a defined AAA server group.  The system must validate
// that the named server group exists.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/authorization-method"
// Path from root: "/system/aaa/authorization/config/authorization-method"
func (n *System_Aaa_AuthorizationPath) AuthorizationMethod() *System_Aaa_Authorization_AuthorizationMethodPath {
	return &System_Aaa_Authorization_AuthorizationMethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "authorization-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthorizationMethod (leaf-list): Ordered list of methods for authorizing commands.  The first
// method that provides a response (positive or negative) should
// be used.  The list may contain a well-defined method such
// as the set of all TACACS or RADIUS servers, or the name of
// a defined AAA server group.  The system must validate
// that the named server group exists.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/authorization-method"
// Path from root: "/system/aaa/authorization/config/authorization-method"
func (n *System_Aaa_AuthorizationPathAny) AuthorizationMethod() *System_Aaa_Authorization_AuthorizationMethodPathAny {
	return &System_Aaa_Authorization_AuthorizationMethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "authorization-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// EventAny (list): List of events subject to AAA authorization
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/authorization/events/event"
// EventType (wildcarded): oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
func (n *System_Aaa_AuthorizationPath) EventAny() *System_Aaa_Authorization_EventPathAny {
	return &System_Aaa_Authorization_EventPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": "*"},
			n,
		),
	}
}

// EventAny (list): List of events subject to AAA authorization
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/authorization/events/event"
// EventType (wildcarded): oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
func (n *System_Aaa_AuthorizationPathAny) EventAny() *System_Aaa_Authorization_EventPathAny {
	return &System_Aaa_Authorization_EventPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": "*"},
			n,
		),
	}
}

// Event (list): List of events subject to AAA authorization
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/authorization/events/event"
// EventType: oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
func (n *System_Aaa_AuthorizationPath) Event(EventType oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *System_Aaa_Authorization_EventPath {
	return &System_Aaa_Authorization_EventPath{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": EventType},
			n,
		),
	}
}

// Event (list): List of events subject to AAA authorization
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/authorization/events/event"
// EventType: oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
func (n *System_Aaa_AuthorizationPathAny) Event(EventType oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *System_Aaa_Authorization_EventPathAny {
	return &System_Aaa_Authorization_EventPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": EventType},
			n,
		),
	}
}

// System_Aaa_Authorization_EventPath represents the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type System_Aaa_Authorization_EventPath struct {
	*ygot.NodePath
}

// System_Aaa_Authorization_EventPathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type System_Aaa_Authorization_EventPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authorization_Event_EventTypePath represents the /openconfig-system/system/aaa/authorization/events/event/config/event-type YANG schema element.
type System_Aaa_Authorization_Event_EventTypePath struct {
	*ygot.NodePath
}

// System_Aaa_Authorization_Event_EventTypePathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization/events/event/config/event-type YANG schema element.
type System_Aaa_Authorization_Event_EventTypePathAny struct {
	*ygot.NodePath
}

// EventType (leaf): The type of event to record at the AAA authorization
// server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/event-type"
// Path from root: "/system/aaa/authorization/events/event/config/event-type"
func (n *System_Aaa_Authorization_EventPath) EventType() *System_Aaa_Authorization_Event_EventTypePath {
	return &System_Aaa_Authorization_Event_EventTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "event-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// EventType (leaf): The type of event to record at the AAA authorization
// server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/event-type"
// Path from root: "/system/aaa/authorization/events/event/config/event-type"
func (n *System_Aaa_Authorization_EventPathAny) EventType() *System_Aaa_Authorization_Event_EventTypePathAny {
	return &System_Aaa_Authorization_Event_EventTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "event-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_ServerGroupPath represents the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type System_Aaa_ServerGroupPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroupPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type System_Aaa_ServerGroupPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_NamePath represents the /openconfig-system/system/aaa/server-groups/server-group/config/name YANG schema element.
type System_Aaa_ServerGroup_NamePath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_NamePathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/config/name YANG schema element.
type System_Aaa_ServerGroup_NamePathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_TypePath represents the /openconfig-system/system/aaa/server-groups/server-group/config/type YANG schema element.
type System_Aaa_ServerGroup_TypePath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_TypePathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/config/type YANG schema element.
type System_Aaa_ServerGroup_TypePathAny struct {
	*ygot.NodePath
}

// Name (leaf): Name for the server group
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/name"
// Path from root: "/system/aaa/server-groups/server-group/config/name"
func (n *System_Aaa_ServerGroupPath) Name() *System_Aaa_ServerGroup_NamePath {
	return &System_Aaa_ServerGroup_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Name for the server group
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/name"
// Path from root: "/system/aaa/server-groups/server-group/config/name"
func (n *System_Aaa_ServerGroupPathAny) Name() *System_Aaa_ServerGroup_NamePathAny {
	return &System_Aaa_ServerGroup_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// ServerAny (list): List of AAA servers
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/aaa/server-groups/server-group/servers/server"
// Address (wildcarded): string
func (n *System_Aaa_ServerGroupPath) ServerAny() *System_Aaa_ServerGroup_ServerPathAny {
	return &System_Aaa_ServerGroup_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// ServerAny (list): List of AAA servers
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/aaa/server-groups/server-group/servers/server"
// Address (wildcarded): string
func (n *System_Aaa_ServerGroupPathAny) ServerAny() *System_Aaa_ServerGroup_ServerPathAny {
	return &System_Aaa_ServerGroup_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// Server (list): List of AAA servers
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/aaa/server-groups/server-group/servers/server"
// Address: string
func (n *System_Aaa_ServerGroupPath) Server(Address string) *System_Aaa_ServerGroup_ServerPath {
	return &System_Aaa_ServerGroup_ServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// Server (list): List of AAA servers
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/aaa/server-groups/server-group/servers/server"
// Address: string
func (n *System_Aaa_ServerGroupPathAny) Server(Address string) *System_Aaa_ServerGroup_ServerPathAny {
	return &System_Aaa_ServerGroup_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// Type (leaf): AAA server type -- all servers in the group must be of this
// type
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/type"
// Path from root: "/system/aaa/server-groups/server-group/config/type"
func (n *System_Aaa_ServerGroupPath) Type() *System_Aaa_ServerGroup_TypePath {
	return &System_Aaa_ServerGroup_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): AAA server type -- all servers in the group must be of this
// type
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/type"
// Path from root: "/system/aaa/server-groups/server-group/config/type"
func (n *System_Aaa_ServerGroupPathAny) Type() *System_Aaa_ServerGroup_TypePathAny {
	return &System_Aaa_ServerGroup_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_ServerGroup_ServerPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type System_Aaa_ServerGroup_ServerPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_ServerPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type System_Aaa_ServerGroup_ServerPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_AddressPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/config/address YANG schema element.
type System_Aaa_ServerGroup_Server_AddressPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_AddressPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/config/address YANG schema element.
type System_Aaa_ServerGroup_Server_AddressPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_NamePath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/config/name YANG schema element.
type System_Aaa_ServerGroup_Server_NamePath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_NamePathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/config/name YANG schema element.
type System_Aaa_ServerGroup_Server_NamePathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_TimeoutPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/config/timeout YANG schema element.
type System_Aaa_ServerGroup_Server_TimeoutPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_TimeoutPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/config/timeout YANG schema element.
type System_Aaa_ServerGroup_Server_TimeoutPathAny struct {
	*ygot.NodePath
}

// Address (leaf): Address of the authentication server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/address"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/config/address"
func (n *System_Aaa_ServerGroup_ServerPath) Address() *System_Aaa_ServerGroup_Server_AddressPath {
	return &System_Aaa_ServerGroup_Server_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): Address of the authentication server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/address"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/config/address"
func (n *System_Aaa_ServerGroup_ServerPathAny) Address() *System_Aaa_ServerGroup_Server_AddressPathAny {
	return &System_Aaa_ServerGroup_Server_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Name assigned to the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/name"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/config/name"
func (n *System_Aaa_ServerGroup_ServerPath) Name() *System_Aaa_ServerGroup_Server_NamePath {
	return &System_Aaa_ServerGroup_Server_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Name assigned to the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/name"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/config/name"
func (n *System_Aaa_ServerGroup_ServerPathAny) Name() *System_Aaa_ServerGroup_Server_NamePathAny {
	return &System_Aaa_ServerGroup_Server_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Radius (container): Top-level container for RADIUS server data
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "radius"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius"
func (n *System_Aaa_ServerGroup_ServerPath) Radius() *System_Aaa_ServerGroup_Server_RadiusPath {
	return &System_Aaa_ServerGroup_Server_RadiusPath{
		NodePath: ygot.NewNodePath(
			[]string{"radius"},
			map[string]interface{}{},
			n,
		),
	}
}

// Radius (container): Top-level container for RADIUS server data
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "radius"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius"
func (n *System_Aaa_ServerGroup_ServerPathAny) Radius() *System_Aaa_ServerGroup_Server_RadiusPathAny {
	return &System_Aaa_ServerGroup_Server_RadiusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"radius"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tacacs (container): Top-level container for TACACS+ server data
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "tacacs"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs"
func (n *System_Aaa_ServerGroup_ServerPath) Tacacs() *System_Aaa_ServerGroup_Server_TacacsPath {
	return &System_Aaa_ServerGroup_Server_TacacsPath{
		NodePath: ygot.NewNodePath(
			[]string{"tacacs"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tacacs (container): Top-level container for TACACS+ server data
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "tacacs"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs"
func (n *System_Aaa_ServerGroup_ServerPathAny) Tacacs() *System_Aaa_ServerGroup_Server_TacacsPathAny {
	return &System_Aaa_ServerGroup_Server_TacacsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tacacs"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the timeout in seconds on responses from the AAA
// server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/timeout"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/config/timeout"
func (n *System_Aaa_ServerGroup_ServerPath) Timeout() *System_Aaa_ServerGroup_Server_TimeoutPath {
	return &System_Aaa_ServerGroup_Server_TimeoutPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the timeout in seconds on responses from the AAA
// server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/timeout"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/config/timeout"
func (n *System_Aaa_ServerGroup_ServerPathAny) Timeout() *System_Aaa_ServerGroup_Server_TimeoutPathAny {
	return &System_Aaa_ServerGroup_Server_TimeoutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_ServerGroup_Server_RadiusPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type System_Aaa_ServerGroup_Server_RadiusPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_RadiusPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type System_Aaa_ServerGroup_Server_RadiusPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_AcctPortPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/acct-port YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_AcctPortPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/acct-port YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_AuthPortPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/auth-port YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_AuthPortPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/auth-port YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/retransmit-attempts YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/retransmit-attempts YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_SecretKeyPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SecretKeyPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key-hashed YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key-hashed YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_SourceAddressPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/source-address YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SourceAddressPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/source-address YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny struct {
	*ygot.NodePath
}

// AcctPort (leaf): Port number for accounting requests
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/acct-port"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/acct-port"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) AcctPort() *System_Aaa_ServerGroup_Server_Radius_AcctPortPath {
	return &System_Aaa_ServerGroup_Server_Radius_AcctPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "acct-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// AcctPort (leaf): Port number for accounting requests
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/acct-port"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/acct-port"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) AcctPort() *System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "acct-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthPort (leaf): Port number for authentication requests
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/auth-port"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/auth-port"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) AuthPort() *System_Aaa_ServerGroup_Server_Radius_AuthPortPath {
	return &System_Aaa_ServerGroup_Server_Radius_AuthPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "auth-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthPort (leaf): Port number for authentication requests
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/auth-port"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/auth-port"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) AuthPort() *System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "auth-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// RetransmitAttempts (leaf): Number of times the system may resend a request to the
// RADIUS server when it is unresponsive
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/retransmit-attempts"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/retransmit-attempts"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) RetransmitAttempts() *System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath {
	return &System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "retransmit-attempts"},
			map[string]interface{}{},
			n,
		),
	}
}

// RetransmitAttempts (leaf): Number of times the system may resend a request to the
// RADIUS server when it is unresponsive
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/retransmit-attempts"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/retransmit-attempts"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) RetransmitAttempts() *System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "retransmit-attempts"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKey (leaf): The unencrypted shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/secret-key"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) SecretKey() *System_Aaa_ServerGroup_Server_Radius_SecretKeyPath {
	return &System_Aaa_ServerGroup_Server_Radius_SecretKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secret-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKey (leaf): The unencrypted shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/secret-key"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) SecretKey() *System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secret-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKeyHashed (leaf): The hashed shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/secret-key-hashed"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) SecretKeyHashed() *System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath {
	return &System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secret-key-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKeyHashed (leaf): The hashed shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/secret-key-hashed"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) SecretKeyHashed() *System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secret-key-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address to use in messages to the RADIUS server
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/source-address"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/source-address"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) SourceAddress() *System_Aaa_ServerGroup_Server_Radius_SourceAddressPath {
	return &System_Aaa_ServerGroup_Server_Radius_SourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address to use in messages to the RADIUS server
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/source-address"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/source-address"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) SourceAddress() *System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_ServerGroup_Server_TacacsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type System_Aaa_ServerGroup_Server_TacacsPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_TacacsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type System_Aaa_ServerGroup_Server_TacacsPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_PortPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config/port YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_PortPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_PortPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config/port YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_PortPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key-hashed YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key-hashed YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config/source-address YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config/source-address YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny struct {
	*ygot.NodePath
}

// Port (leaf): The port number on which to contact the TACACS server
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "config/port"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/config/port"
func (n *System_Aaa_ServerGroup_Server_TacacsPath) Port() *System_Aaa_ServerGroup_Server_Tacacs_PortPath {
	return &System_Aaa_ServerGroup_Server_Tacacs_PortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number on which to contact the TACACS server
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "config/port"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/config/port"
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) Port() *System_Aaa_ServerGroup_Server_Tacacs_PortPathAny {
	return &System_Aaa_ServerGroup_Server_Tacacs_PortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKey (leaf): The unencrypted shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "config/secret-key"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key"
func (n *System_Aaa_ServerGroup_Server_TacacsPath) SecretKey() *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath {
	return &System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secret-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKey (leaf): The unencrypted shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "config/secret-key"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key"
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) SecretKey() *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny {
	return &System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secret-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKeyHashed (leaf): The hashed shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "config/secret-key-hashed"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_TacacsPath) SecretKeyHashed() *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath {
	return &System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secret-key-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKeyHashed (leaf): The hashed shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "config/secret-key-hashed"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) SecretKeyHashed() *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny {
	return &System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secret-key-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address to use in messages to the TACACS server
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "config/source-address"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/config/source-address"
func (n *System_Aaa_ServerGroup_Server_TacacsPath) SourceAddress() *System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath {
	return &System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address to use in messages to the TACACS server
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "config/source-address"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/config/source-address"
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) SourceAddress() *System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny {
	return &System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_ClockPath represents the /openconfig-system/system/clock YANG schema element.
type System_ClockPath struct {
	*ygot.NodePath
}

// System_ClockPathAny represents the wildcard version of the /openconfig-system/system/clock YANG schema element.
type System_ClockPathAny struct {
	*ygot.NodePath
}

// System_Clock_TimezoneNamePath represents the /openconfig-system/system/clock/config/timezone-name YANG schema element.
type System_Clock_TimezoneNamePath struct {
	*ygot.NodePath
}

// System_Clock_TimezoneNamePathAny represents the wildcard version of the /openconfig-system/system/clock/config/timezone-name YANG schema element.
type System_Clock_TimezoneNamePathAny struct {
	*ygot.NodePath
}

// TimezoneName (leaf): The TZ database name to use for the system, such
// as 'Europe/Stockholm'.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/timezone-name"
// Path from root: "/system/clock/config/timezone-name"
func (n *System_ClockPath) TimezoneName() *System_Clock_TimezoneNamePath {
	return &System_Clock_TimezoneNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "timezone-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// TimezoneName (leaf): The TZ database name to use for the system, such
// as 'Europe/Stockholm'.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/timezone-name"
// Path from root: "/system/clock/config/timezone-name"
func (n *System_ClockPathAny) TimezoneName() *System_Clock_TimezoneNamePathAny {
	return &System_Clock_TimezoneNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "timezone-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_DnsPath represents the /openconfig-system/system/dns YANG schema element.
type System_DnsPath struct {
	*ygot.NodePath
}

// System_DnsPathAny represents the wildcard version of the /openconfig-system/system/dns YANG schema element.
type System_DnsPathAny struct {
	*ygot.NodePath
}

// System_Dns_SearchPath represents the /openconfig-system/system/dns/config/search YANG schema element.
type System_Dns_SearchPath struct {
	*ygot.NodePath
}

// System_Dns_SearchPathAny represents the wildcard version of the /openconfig-system/system/dns/config/search YANG schema element.
type System_Dns_SearchPathAny struct {
	*ygot.NodePath
}

// HostEntryAny (list): List of static host entries
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "host-entries/host-entry"
// Path from root: "/system/dns/host-entries/host-entry"
// Hostname (wildcarded): string
func (n *System_DnsPath) HostEntryAny() *System_Dns_HostEntryPathAny {
	return &System_Dns_HostEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": "*"},
			n,
		),
	}
}

// HostEntryAny (list): List of static host entries
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "host-entries/host-entry"
// Path from root: "/system/dns/host-entries/host-entry"
// Hostname (wildcarded): string
func (n *System_DnsPathAny) HostEntryAny() *System_Dns_HostEntryPathAny {
	return &System_Dns_HostEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": "*"},
			n,
		),
	}
}

// HostEntry (list): List of static host entries
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "host-entries/host-entry"
// Path from root: "/system/dns/host-entries/host-entry"
// Hostname: string
func (n *System_DnsPath) HostEntry(Hostname string) *System_Dns_HostEntryPath {
	return &System_Dns_HostEntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": Hostname},
			n,
		),
	}
}

// HostEntry (list): List of static host entries
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "host-entries/host-entry"
// Path from root: "/system/dns/host-entries/host-entry"
// Hostname: string
func (n *System_DnsPathAny) HostEntry(Hostname string) *System_Dns_HostEntryPathAny {
	return &System_Dns_HostEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": Hostname},
			n,
		),
	}
}

// Search (leaf-list): An ordered list of domains to search when resolving
// a host name.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/search"
// Path from root: "/system/dns/config/search"
func (n *System_DnsPath) Search() *System_Dns_SearchPath {
	return &System_Dns_SearchPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "search"},
			map[string]interface{}{},
			n,
		),
	}
}

// Search (leaf-list): An ordered list of domains to search when resolving
// a host name.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/search"
// Path from root: "/system/dns/config/search"
func (n *System_DnsPathAny) Search() *System_Dns_SearchPathAny {
	return &System_Dns_SearchPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "search"},
			map[string]interface{}{},
			n,
		),
	}
}

// ServerAny (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/dns/servers/server"
// Address (wildcarded): string
func (n *System_DnsPath) ServerAny() *System_Dns_ServerPathAny {
	return &System_Dns_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// ServerAny (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/dns/servers/server"
// Address (wildcarded): string
func (n *System_DnsPathAny) ServerAny() *System_Dns_ServerPathAny {
	return &System_Dns_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// Server (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/dns/servers/server"
// Address: string
func (n *System_DnsPath) Server(Address string) *System_Dns_ServerPath {
	return &System_Dns_ServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// Server (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/dns/servers/server"
// Address: string
func (n *System_DnsPathAny) Server(Address string) *System_Dns_ServerPathAny {
	return &System_Dns_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// System_Dns_HostEntryPath represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPath struct {
	*ygot.NodePath
}

// System_Dns_HostEntryPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPathAny struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_AliasPath represents the /openconfig-system/system/dns/host-entries/host-entry/config/alias YANG schema element.
type System_Dns_HostEntry_AliasPath struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_AliasPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/config/alias YANG schema element.
type System_Dns_HostEntry_AliasPathAny struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_HostnamePath represents the /openconfig-system/system/dns/host-entries/host-entry/config/hostname YANG schema element.
type System_Dns_HostEntry_HostnamePath struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_HostnamePathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/config/hostname YANG schema element.
type System_Dns_HostEntry_HostnamePathAny struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_Ipv4AddressPath represents the /openconfig-system/system/dns/host-entries/host-entry/config/ipv4-address YANG schema element.
type System_Dns_HostEntry_Ipv4AddressPath struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_Ipv4AddressPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/config/ipv4-address YANG schema element.
type System_Dns_HostEntry_Ipv4AddressPathAny struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_Ipv6AddressPath represents the /openconfig-system/system/dns/host-entries/host-entry/config/ipv6-address YANG schema element.
type System_Dns_HostEntry_Ipv6AddressPath struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_Ipv6AddressPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/config/ipv6-address YANG schema element.
type System_Dns_HostEntry_Ipv6AddressPathAny struct {
	*ygot.NodePath
}

// Alias (leaf-list): Additional aliases for the hostname
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/alias"
// Path from root: "/system/dns/host-entries/host-entry/config/alias"
func (n *System_Dns_HostEntryPath) Alias() *System_Dns_HostEntry_AliasPath {
	return &System_Dns_HostEntry_AliasPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "alias"},
			map[string]interface{}{},
			n,
		),
	}
}

// Alias (leaf-list): Additional aliases for the hostname
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/alias"
// Path from root: "/system/dns/host-entries/host-entry/config/alias"
func (n *System_Dns_HostEntryPathAny) Alias() *System_Dns_HostEntry_AliasPathAny {
	return &System_Dns_HostEntry_AliasPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "alias"},
			map[string]interface{}{},
			n,
		),
	}
}

// Hostname (leaf): Hostname for the static DNS entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/hostname"
// Path from root: "/system/dns/host-entries/host-entry/config/hostname"
func (n *System_Dns_HostEntryPath) Hostname() *System_Dns_HostEntry_HostnamePath {
	return &System_Dns_HostEntry_HostnamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hostname"},
			map[string]interface{}{},
			n,
		),
	}
}

// Hostname (leaf): Hostname for the static DNS entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/hostname"
// Path from root: "/system/dns/host-entries/host-entry/config/hostname"
func (n *System_Dns_HostEntryPathAny) Hostname() *System_Dns_HostEntry_HostnamePathAny {
	return &System_Dns_HostEntry_HostnamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hostname"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4Address (leaf-list): List of IPv4 addresses for the host entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/ipv4-address"
// Path from root: "/system/dns/host-entries/host-entry/config/ipv4-address"
func (n *System_Dns_HostEntryPath) Ipv4Address() *System_Dns_HostEntry_Ipv4AddressPath {
	return &System_Dns_HostEntry_Ipv4AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ipv4-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4Address (leaf-list): List of IPv4 addresses for the host entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/ipv4-address"
// Path from root: "/system/dns/host-entries/host-entry/config/ipv4-address"
func (n *System_Dns_HostEntryPathAny) Ipv4Address() *System_Dns_HostEntry_Ipv4AddressPathAny {
	return &System_Dns_HostEntry_Ipv4AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ipv4-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6Address (leaf-list): List of IPv6 addresses for the host entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/ipv6-address"
// Path from root: "/system/dns/host-entries/host-entry/config/ipv6-address"
func (n *System_Dns_HostEntryPath) Ipv6Address() *System_Dns_HostEntry_Ipv6AddressPath {
	return &System_Dns_HostEntry_Ipv6AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ipv6-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6Address (leaf-list): List of IPv6 addresses for the host entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/ipv6-address"
// Path from root: "/system/dns/host-entries/host-entry/config/ipv6-address"
func (n *System_Dns_HostEntryPathAny) Ipv6Address() *System_Dns_HostEntry_Ipv6AddressPathAny {
	return &System_Dns_HostEntry_Ipv6AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ipv6-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Dns_ServerPath represents the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPath struct {
	*ygot.NodePath
}

// System_Dns_ServerPathAny represents the wildcard version of the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPathAny struct {
	*ygot.NodePath
}

// System_Dns_Server_AddressPath represents the /openconfig-system/system/dns/servers/server/config/address YANG schema element.
type System_Dns_Server_AddressPath struct {
	*ygot.NodePath
}

// System_Dns_Server_AddressPathAny represents the wildcard version of the /openconfig-system/system/dns/servers/server/config/address YANG schema element.
type System_Dns_Server_AddressPathAny struct {
	*ygot.NodePath
}

// System_Dns_Server_PortPath represents the /openconfig-system/system/dns/servers/server/config/port YANG schema element.
type System_Dns_Server_PortPath struct {
	*ygot.NodePath
}

// System_Dns_Server_PortPathAny represents the wildcard version of the /openconfig-system/system/dns/servers/server/config/port YANG schema element.
type System_Dns_Server_PortPathAny struct {
	*ygot.NodePath
}

// Address (leaf): The address of the DNS server, can be either IPv4
// or IPv6.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/address"
// Path from root: "/system/dns/servers/server/config/address"
func (n *System_Dns_ServerPath) Address() *System_Dns_Server_AddressPath {
	return &System_Dns_Server_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): The address of the DNS server, can be either IPv4
// or IPv6.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/address"
// Path from root: "/system/dns/servers/server/config/address"
func (n *System_Dns_ServerPathAny) Address() *System_Dns_Server_AddressPathAny {
	return &System_Dns_Server_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number of the DNS server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/port"
// Path from root: "/system/dns/servers/server/config/port"
func (n *System_Dns_ServerPath) Port() *System_Dns_Server_PortPath {
	return &System_Dns_Server_PortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number of the DNS server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/port"
// Path from root: "/system/dns/servers/server/config/port"
func (n *System_Dns_ServerPathAny) Port() *System_Dns_Server_PortPathAny {
	return &System_Dns_Server_PortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_GrpcServerPath represents the /openconfig-system/system/grpc-servers/grpc-server YANG schema element.
type System_GrpcServerPath struct {
	*ygot.NodePath
}

// System_GrpcServerPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server YANG schema element.
type System_GrpcServerPathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_CertificateIdPath represents the /openconfig-system/system/grpc-servers/grpc-server/config/certificate-id YANG schema element.
type System_GrpcServer_CertificateIdPath struct {
	*ygot.NodePath
}

// System_GrpcServer_CertificateIdPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/config/certificate-id YANG schema element.
type System_GrpcServer_CertificateIdPathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_EnablePath represents the /openconfig-system/system/grpc-servers/grpc-server/config/enable YANG schema element.
type System_GrpcServer_EnablePath struct {
	*ygot.NodePath
}

// System_GrpcServer_EnablePathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/config/enable YANG schema element.
type System_GrpcServer_EnablePathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_ListenAddressesPath represents the /openconfig-system/system/grpc-servers/grpc-server/config/listen-addresses YANG schema element.
type System_GrpcServer_ListenAddressesPath struct {
	*ygot.NodePath
}

// System_GrpcServer_ListenAddressesPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/config/listen-addresses YANG schema element.
type System_GrpcServer_ListenAddressesPathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_MetadataAuthenticationPath represents the /openconfig-system/system/grpc-servers/grpc-server/config/metadata-authentication YANG schema element.
type System_GrpcServer_MetadataAuthenticationPath struct {
	*ygot.NodePath
}

// System_GrpcServer_MetadataAuthenticationPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/config/metadata-authentication YANG schema element.
type System_GrpcServer_MetadataAuthenticationPathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_NamePath represents the /openconfig-system/system/grpc-servers/grpc-server/config/name YANG schema element.
type System_GrpcServer_NamePath struct {
	*ygot.NodePath
}

// System_GrpcServer_NamePathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/config/name YANG schema element.
type System_GrpcServer_NamePathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_NetworkInstancePath represents the /openconfig-system/system/grpc-servers/grpc-server/config/network-instance YANG schema element.
type System_GrpcServer_NetworkInstancePath struct {
	*ygot.NodePath
}

// System_GrpcServer_NetworkInstancePathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/config/network-instance YANG schema element.
type System_GrpcServer_NetworkInstancePathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_PortPath represents the /openconfig-system/system/grpc-servers/grpc-server/config/port YANG schema element.
type System_GrpcServer_PortPath struct {
	*ygot.NodePath
}

// System_GrpcServer_PortPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/config/port YANG schema element.
type System_GrpcServer_PortPathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_ServicesPath represents the /openconfig-system/system/grpc-servers/grpc-server/config/services YANG schema element.
type System_GrpcServer_ServicesPath struct {
	*ygot.NodePath
}

// System_GrpcServer_ServicesPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/config/services YANG schema element.
type System_GrpcServer_ServicesPathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_TransportSecurityPath represents the /openconfig-system/system/grpc-servers/grpc-server/config/transport-security YANG schema element.
type System_GrpcServer_TransportSecurityPath struct {
	*ygot.NodePath
}

// System_GrpcServer_TransportSecurityPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/config/transport-security YANG schema element.
type System_GrpcServer_TransportSecurityPathAny struct {
	*ygot.NodePath
}

// CertificateId (leaf): Name of the certificate that is associated with the gRPC service. The
// certificate ID is provisioned through other interfaces to the device, such
// as the gNOI certificate management service.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/certificate-id"
// Path from root: "/system/grpc-servers/grpc-server/config/certificate-id"
func (n *System_GrpcServerPath) CertificateId() *System_GrpcServer_CertificateIdPath {
	return &System_GrpcServer_CertificateIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "certificate-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// CertificateId (leaf): Name of the certificate that is associated with the gRPC service. The
// certificate ID is provisioned through other interfaces to the device, such
// as the gNOI certificate management service.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/certificate-id"
// Path from root: "/system/grpc-servers/grpc-server/config/certificate-id"
func (n *System_GrpcServerPathAny) CertificateId() *System_GrpcServer_CertificateIdPathAny {
	return &System_GrpcServer_CertificateIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "certificate-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): When set to true, the gRPC server is enabled and runs on the
// local device.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable"
// Path from root: "/system/grpc-servers/grpc-server/config/enable"
func (n *System_GrpcServerPath) Enable() *System_GrpcServer_EnablePath {
	return &System_GrpcServer_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): When set to true, the gRPC server is enabled and runs on the
// local device.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable"
// Path from root: "/system/grpc-servers/grpc-server/config/enable"
func (n *System_GrpcServerPathAny) Enable() *System_GrpcServer_EnablePathAny {
	return &System_GrpcServer_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// ListenAddresses (leaf-list): The IP addresses that the gRPC server should listen on. This may be
// an IPv4 or an IPv6 address (or both).
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/listen-addresses"
// Path from root: "/system/grpc-servers/grpc-server/config/listen-addresses"
func (n *System_GrpcServerPath) ListenAddresses() *System_GrpcServer_ListenAddressesPath {
	return &System_GrpcServer_ListenAddressesPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "listen-addresses"},
			map[string]interface{}{},
			n,
		),
	}
}

// ListenAddresses (leaf-list): The IP addresses that the gRPC server should listen on. This may be
// an IPv4 or an IPv6 address (or both).
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/listen-addresses"
// Path from root: "/system/grpc-servers/grpc-server/config/listen-addresses"
func (n *System_GrpcServerPathAny) ListenAddresses() *System_GrpcServer_ListenAddressesPathAny {
	return &System_GrpcServer_ListenAddressesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "listen-addresses"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetadataAuthentication (leaf): When set to true, metadata authentication is enabled for the gRPC server.
// In this mode of operation, gRPC metadata is used to carry authentication
// credentials as per the specification in
// https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-authentication.md#credentials-and-authentication.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/metadata-authentication"
// Path from root: "/system/grpc-servers/grpc-server/config/metadata-authentication"
func (n *System_GrpcServerPath) MetadataAuthentication() *System_GrpcServer_MetadataAuthenticationPath {
	return &System_GrpcServer_MetadataAuthenticationPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metadata-authentication"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetadataAuthentication (leaf): When set to true, metadata authentication is enabled for the gRPC server.
// In this mode of operation, gRPC metadata is used to carry authentication
// credentials as per the specification in
// https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-authentication.md#credentials-and-authentication.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/metadata-authentication"
// Path from root: "/system/grpc-servers/grpc-server/config/metadata-authentication"
func (n *System_GrpcServerPathAny) MetadataAuthentication() *System_GrpcServer_MetadataAuthenticationPathAny {
	return &System_GrpcServer_MetadataAuthenticationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metadata-authentication"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The name of the gRPC server instance that is running on
// the local system.
//
// If the operator does not designate a name for the protocol
// instance (e.g. config), the implementation should use the
// name of 'DEFAULT' (e.g. state).  In addition, for
// implementations that support a single gRPC server instance,
// the default value is recommended for consistency.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/name"
// Path from root: "/system/grpc-servers/grpc-server/config/name"
func (n *System_GrpcServerPath) Name() *System_GrpcServer_NamePath {
	return &System_GrpcServer_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The name of the gRPC server instance that is running on
// the local system.
//
// If the operator does not designate a name for the protocol
// instance (e.g. config), the implementation should use the
// name of 'DEFAULT' (e.g. state).  In addition, for
// implementations that support a single gRPC server instance,
// the default value is recommended for consistency.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/name"
// Path from root: "/system/grpc-servers/grpc-server/config/name"
func (n *System_GrpcServerPathAny) Name() *System_GrpcServer_NamePathAny {
	return &System_GrpcServer_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance (leaf): The network instance within which the gRPC server is listening.
// When unspecified, the DEFAULT_INSTANCE should be used.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/network-instance"
// Path from root: "/system/grpc-servers/grpc-server/config/network-instance"
func (n *System_GrpcServerPath) NetworkInstance() *System_GrpcServer_NetworkInstancePath {
	return &System_GrpcServer_NetworkInstancePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "network-instance"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance (leaf): The network instance within which the gRPC server is listening.
// When unspecified, the DEFAULT_INSTANCE should be used.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/network-instance"
// Path from root: "/system/grpc-servers/grpc-server/config/network-instance"
func (n *System_GrpcServerPathAny) NetworkInstance() *System_GrpcServer_NetworkInstancePathAny {
	return &System_GrpcServer_NetworkInstancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "network-instance"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): TCP port on which the gRPC server should listen.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/port"
// Path from root: "/system/grpc-servers/grpc-server/config/port"
func (n *System_GrpcServerPath) Port() *System_GrpcServer_PortPath {
	return &System_GrpcServer_PortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): TCP port on which the gRPC server should listen.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/port"
// Path from root: "/system/grpc-servers/grpc-server/config/port"
func (n *System_GrpcServerPathAny) Port() *System_GrpcServer_PortPathAny {
	return &System_GrpcServer_PortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Services (leaf-list): The gRPC service definitions that should be enabled for the
// specified server. A target may support only specific
// sets of services being enabled on the same server (e.g.,
// it may be possible to run gNMI and gNOI services on the same
// port, but not to run gRIBI and gNMI on the same port).
//
// The set of gRPC services that are available to be configured is
// defined through the GRPC_SERVICE identity, which can be extended
// for each protocol that is based on gRPC that is available on the
// device.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/services"
// Path from root: "/system/grpc-servers/grpc-server/config/services"
func (n *System_GrpcServerPath) Services() *System_GrpcServer_ServicesPath {
	return &System_GrpcServer_ServicesPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "services"},
			map[string]interface{}{},
			n,
		),
	}
}

// Services (leaf-list): The gRPC service definitions that should be enabled for the
// specified server. A target may support only specific
// sets of services being enabled on the same server (e.g.,
// it may be possible to run gNMI and gNOI services on the same
// port, but not to run gRIBI and gNMI on the same port).
//
// The set of gRPC services that are available to be configured is
// defined through the GRPC_SERVICE identity, which can be extended
// for each protocol that is based on gRPC that is available on the
// device.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/services"
// Path from root: "/system/grpc-servers/grpc-server/config/services"
func (n *System_GrpcServerPathAny) Services() *System_GrpcServer_ServicesPathAny {
	return &System_GrpcServer_ServicesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "services"},
			map[string]interface{}{},
			n,
		),
	}
}

// TransportSecurity (leaf): Use gRPC transport security (e.g., SSL or TLS). Enabled by default.
// This leaf allows transport security to be disabled for use cases that
// are not supported, such as lab testing.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/transport-security"
// Path from root: "/system/grpc-servers/grpc-server/config/transport-security"
func (n *System_GrpcServerPath) TransportSecurity() *System_GrpcServer_TransportSecurityPath {
	return &System_GrpcServer_TransportSecurityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "transport-security"},
			map[string]interface{}{},
			n,
		),
	}
}

// TransportSecurity (leaf): Use gRPC transport security (e.g., SSL or TLS). Enabled by default.
// This leaf allows transport security to be disabled for use cases that
// are not supported, such as lab testing.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/transport-security"
// Path from root: "/system/grpc-servers/grpc-server/config/transport-security"
func (n *System_GrpcServerPathAny) TransportSecurity() *System_GrpcServer_TransportSecurityPathAny {
	return &System_GrpcServer_TransportSecurityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "transport-security"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_LicensePath represents the /openconfig-system/system/license YANG schema element.
type System_LicensePath struct {
	*ygot.NodePath
}

// System_LicensePathAny represents the wildcard version of the /openconfig-system/system/license YANG schema element.
type System_LicensePathAny struct {
	*ygot.NodePath
}

// LicenseAny (list): List of licenses.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "licenses/license"
// Path from root: "/system/license/licenses/license"
// LicenseId (wildcarded): string
func (n *System_LicensePath) LicenseAny() *System_License_LicensePathAny {
	return &System_License_LicensePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": "*"},
			n,
		),
	}
}

// LicenseAny (list): List of licenses.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "licenses/license"
// Path from root: "/system/license/licenses/license"
// LicenseId (wildcarded): string
func (n *System_LicensePathAny) LicenseAny() *System_License_LicensePathAny {
	return &System_License_LicensePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": "*"},
			n,
		),
	}
}

// License (list): List of licenses.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "licenses/license"
// Path from root: "/system/license/licenses/license"
// LicenseId: string
func (n *System_LicensePath) License(LicenseId string) *System_License_LicensePath {
	return &System_License_LicensePath{
		NodePath: ygot.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": LicenseId},
			n,
		),
	}
}

// License (list): List of licenses.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "licenses/license"
// Path from root: "/system/license/licenses/license"
// LicenseId: string
func (n *System_LicensePathAny) License(LicenseId string) *System_License_LicensePathAny {
	return &System_License_LicensePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": LicenseId},
			n,
		),
	}
}

// System_License_LicensePath represents the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePath struct {
	*ygot.NodePath
}

// System_License_LicensePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePathAny struct {
	*ygot.NodePath
}

// System_License_License_ActivePath represents the /openconfig-system/system/license/licenses/license/config/active YANG schema element.
type System_License_License_ActivePath struct {
	*ygot.NodePath
}

// System_License_License_ActivePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/config/active YANG schema element.
type System_License_License_ActivePathAny struct {
	*ygot.NodePath
}

// System_License_License_LicenseDataPath represents the /openconfig-system/system/license/licenses/license/config/license-data YANG schema element.
type System_License_License_LicenseDataPath struct {
	*ygot.NodePath
}

// System_License_License_LicenseDataPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/config/license-data YANG schema element.
type System_License_License_LicenseDataPathAny struct {
	*ygot.NodePath
}

// System_License_License_LicenseIdPath represents the /openconfig-system/system/license/licenses/license/config/license-id YANG schema element.
type System_License_License_LicenseIdPath struct {
	*ygot.NodePath
}

// System_License_License_LicenseIdPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/config/license-id YANG schema element.
type System_License_License_LicenseIdPathAny struct {
	*ygot.NodePath
}

// Active (leaf): The activation state of the license.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "config/active"
// Path from root: "/system/license/licenses/license/config/active"
func (n *System_License_LicensePath) Active() *System_License_License_ActivePath {
	return &System_License_License_ActivePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// Active (leaf): The activation state of the license.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "config/active"
// Path from root: "/system/license/licenses/license/config/active"
func (n *System_License_LicensePathAny) Active() *System_License_License_ActivePathAny {
	return &System_License_License_ActivePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// LicenseData (leaf): The contents of the licence (if required) - which may be
// supplied as a binary blob, or a simple string value. If this
// value is considered sensitive, it may be read as an empty value.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "config/license-data"
// Path from root: "/system/license/licenses/license/config/license-data"
func (n *System_License_LicensePath) LicenseData() *System_License_License_LicenseDataPath {
	return &System_License_License_LicenseDataPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "license-data"},
			map[string]interface{}{},
			n,
		),
	}
}

// LicenseData (leaf): The contents of the licence (if required) - which may be
// supplied as a binary blob, or a simple string value. If this
// value is considered sensitive, it may be read as an empty value.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "config/license-data"
// Path from root: "/system/license/licenses/license/config/license-data"
func (n *System_License_LicensePathAny) LicenseData() *System_License_License_LicenseDataPathAny {
	return &System_License_License_LicenseDataPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "license-data"},
			map[string]interface{}{},
			n,
		),
	}
}

// LicenseId (leaf): License ID. A string that uniquelly identifies the license. The
// platform should list all the licenses it supports being activated.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "config/license-id"
// Path from root: "/system/license/licenses/license/config/license-id"
func (n *System_License_LicensePath) LicenseId() *System_License_License_LicenseIdPath {
	return &System_License_License_LicenseIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "license-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LicenseId (leaf): License ID. A string that uniquelly identifies the license. The
// platform should list all the licenses it supports being activated.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "config/license-id"
// Path from root: "/system/license/licenses/license/config/license-id"
func (n *System_License_LicensePathAny) LicenseId() *System_License_License_LicenseIdPathAny {
	return &System_License_License_LicenseIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "license-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_LoggingPath represents the /openconfig-system/system/logging YANG schema element.
type System_LoggingPath struct {
	*ygot.NodePath
}

// System_LoggingPathAny represents the wildcard version of the /openconfig-system/system/logging YANG schema element.
type System_LoggingPathAny struct {
	*ygot.NodePath
}

// Console (container): Top-level container for data related to console-based
// logging
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "console"
// Path from root: "/system/logging/console"
func (n *System_LoggingPath) Console() *System_Logging_ConsolePath {
	return &System_Logging_ConsolePath{
		NodePath: ygot.NewNodePath(
			[]string{"console"},
			map[string]interface{}{},
			n,
		),
	}
}

// Console (container): Top-level container for data related to console-based
// logging
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "console"
// Path from root: "/system/logging/console"
func (n *System_LoggingPathAny) Console() *System_Logging_ConsolePathAny {
	return &System_Logging_ConsolePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"console"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemoteServerAny (list): List of remote log servers
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "remote-servers/remote-server"
// Path from root: "/system/logging/remote-servers/remote-server"
// Host (wildcarded): string
func (n *System_LoggingPath) RemoteServerAny() *System_Logging_RemoteServerPathAny {
	return &System_Logging_RemoteServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": "*"},
			n,
		),
	}
}

// RemoteServerAny (list): List of remote log servers
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "remote-servers/remote-server"
// Path from root: "/system/logging/remote-servers/remote-server"
// Host (wildcarded): string
func (n *System_LoggingPathAny) RemoteServerAny() *System_Logging_RemoteServerPathAny {
	return &System_Logging_RemoteServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": "*"},
			n,
		),
	}
}

// RemoteServer (list): List of remote log servers
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "remote-servers/remote-server"
// Path from root: "/system/logging/remote-servers/remote-server"
// Host: string
func (n *System_LoggingPath) RemoteServer(Host string) *System_Logging_RemoteServerPath {
	return &System_Logging_RemoteServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": Host},
			n,
		),
	}
}

// RemoteServer (list): List of remote log servers
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "remote-servers/remote-server"
// Path from root: "/system/logging/remote-servers/remote-server"
// Host: string
func (n *System_LoggingPathAny) RemoteServer(Host string) *System_Logging_RemoteServerPathAny {
	return &System_Logging_RemoteServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": Host},
			n,
		),
	}
}

// System_Logging_ConsolePath represents the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_ConsolePath struct {
	*ygot.NodePath
}

// System_Logging_ConsolePathAny represents the wildcard version of the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_ConsolePathAny struct {
	*ygot.NodePath
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) SelectorAny() *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) SelectorAny() *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) SelectorAnySeverity(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) SelectorAnySeverity(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) SelectorAnyFacility(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) SelectorAnyFacility(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPath {
	return &System_Logging_Console_SelectorPath{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// System_Logging_Console_SelectorPath represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPath struct {
	*ygot.NodePath
}

// System_Logging_Console_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPathAny struct {
	*ygot.NodePath
}

// System_Logging_Console_Selector_FacilityPath represents the /openconfig-system/system/logging/console/selectors/selector/config/facility YANG schema element.
type System_Logging_Console_Selector_FacilityPath struct {
	*ygot.NodePath
}

// System_Logging_Console_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector/config/facility YANG schema element.
type System_Logging_Console_Selector_FacilityPathAny struct {
	*ygot.NodePath
}

// System_Logging_Console_Selector_SeverityPath represents the /openconfig-system/system/logging/console/selectors/selector/config/severity YANG schema element.
type System_Logging_Console_Selector_SeverityPath struct {
	*ygot.NodePath
}

// System_Logging_Console_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector/config/severity YANG schema element.
type System_Logging_Console_Selector_SeverityPathAny struct {
	*ygot.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/facility"
// Path from root: "/system/logging/console/selectors/selector/config/facility"
func (n *System_Logging_Console_SelectorPath) Facility() *System_Logging_Console_Selector_FacilityPath {
	return &System_Logging_Console_Selector_FacilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/facility"
// Path from root: "/system/logging/console/selectors/selector/config/facility"
func (n *System_Logging_Console_SelectorPathAny) Facility() *System_Logging_Console_Selector_FacilityPathAny {
	return &System_Logging_Console_Selector_FacilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/logging/console/selectors/selector/config/severity"
func (n *System_Logging_Console_SelectorPath) Severity() *System_Logging_Console_Selector_SeverityPath {
	return &System_Logging_Console_Selector_SeverityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/logging/console/selectors/selector/config/severity"
func (n *System_Logging_Console_SelectorPathAny) Severity() *System_Logging_Console_Selector_SeverityPathAny {
	return &System_Logging_Console_Selector_SeverityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Logging_RemoteServerPath represents the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServerPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServerPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServerPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_HostPath represents the /openconfig-system/system/logging/remote-servers/remote-server/config/host YANG schema element.
type System_Logging_RemoteServer_HostPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_HostPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/config/host YANG schema element.
type System_Logging_RemoteServer_HostPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_RemotePortPath represents the /openconfig-system/system/logging/remote-servers/remote-server/config/remote-port YANG schema element.
type System_Logging_RemoteServer_RemotePortPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_RemotePortPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/config/remote-port YANG schema element.
type System_Logging_RemoteServer_RemotePortPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_SourceAddressPath represents the /openconfig-system/system/logging/remote-servers/remote-server/config/source-address YANG schema element.
type System_Logging_RemoteServer_SourceAddressPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/config/source-address YANG schema element.
type System_Logging_RemoteServer_SourceAddressPathAny struct {
	*ygot.NodePath
}

// Host (leaf): IP address or hostname of the remote log server
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/host"
// Path from root: "/system/logging/remote-servers/remote-server/config/host"
func (n *System_Logging_RemoteServerPath) Host() *System_Logging_RemoteServer_HostPath {
	return &System_Logging_RemoteServer_HostPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "host"},
			map[string]interface{}{},
			n,
		),
	}
}

// Host (leaf): IP address or hostname of the remote log server
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/host"
// Path from root: "/system/logging/remote-servers/remote-server/config/host"
func (n *System_Logging_RemoteServerPathAny) Host() *System_Logging_RemoteServer_HostPathAny {
	return &System_Logging_RemoteServer_HostPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "host"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemotePort (leaf): Sets the destination port number for syslog UDP messages to
// the server.  The default for syslog is 514.
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/remote-port"
// Path from root: "/system/logging/remote-servers/remote-server/config/remote-port"
func (n *System_Logging_RemoteServerPath) RemotePort() *System_Logging_RemoteServer_RemotePortPath {
	return &System_Logging_RemoteServer_RemotePortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "remote-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemotePort (leaf): Sets the destination port number for syslog UDP messages to
// the server.  The default for syslog is 514.
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/remote-port"
// Path from root: "/system/logging/remote-servers/remote-server/config/remote-port"
func (n *System_Logging_RemoteServerPathAny) RemotePort() *System_Logging_RemoteServer_RemotePortPathAny {
	return &System_Logging_RemoteServer_RemotePortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "remote-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) SelectorAny() *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) SelectorAny() *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) SelectorAnySeverity(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) SelectorAnySeverity(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) SelectorAnyFacility(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) SelectorAnyFacility(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPath {
	return &System_Logging_RemoteServer_SelectorPath{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address for packets to the log server
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/source-address"
// Path from root: "/system/logging/remote-servers/remote-server/config/source-address"
func (n *System_Logging_RemoteServerPath) SourceAddress() *System_Logging_RemoteServer_SourceAddressPath {
	return &System_Logging_RemoteServer_SourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address for packets to the log server
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/source-address"
// Path from root: "/system/logging/remote-servers/remote-server/config/source-address"
func (n *System_Logging_RemoteServerPathAny) SourceAddress() *System_Logging_RemoteServer_SourceAddressPathAny {
	return &System_Logging_RemoteServer_SourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Logging_RemoteServer_SelectorPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_SelectorPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_SelectorPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_Selector_FacilityPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/config/facility YANG schema element.
type System_Logging_RemoteServer_Selector_FacilityPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/config/facility YANG schema element.
type System_Logging_RemoteServer_Selector_FacilityPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_Selector_SeverityPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/config/severity YANG schema element.
type System_Logging_RemoteServer_Selector_SeverityPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/config/severity YANG schema element.
type System_Logging_RemoteServer_Selector_SeverityPathAny struct {
	*ygot.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/facility"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector/config/facility"
func (n *System_Logging_RemoteServer_SelectorPath) Facility() *System_Logging_RemoteServer_Selector_FacilityPath {
	return &System_Logging_RemoteServer_Selector_FacilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/facility"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector/config/facility"
func (n *System_Logging_RemoteServer_SelectorPathAny) Facility() *System_Logging_RemoteServer_Selector_FacilityPathAny {
	return &System_Logging_RemoteServer_Selector_FacilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector/config/severity"
func (n *System_Logging_RemoteServer_SelectorPath) Severity() *System_Logging_RemoteServer_Selector_SeverityPath {
	return &System_Logging_RemoteServer_Selector_SeverityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector/config/severity"
func (n *System_Logging_RemoteServer_SelectorPathAny) Severity() *System_Logging_RemoteServer_Selector_SeverityPathAny {
	return &System_Logging_RemoteServer_Selector_SeverityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_MemoryPath represents the /openconfig-system/system/memory YANG schema element.
type System_MemoryPath struct {
	*ygot.NodePath
}

// System_MemoryPathAny represents the wildcard version of the /openconfig-system/system/memory YANG schema element.
type System_MemoryPathAny struct {
	*ygot.NodePath
}

// System_MessagesPath represents the /openconfig-system/system/messages YANG schema element.
type System_MessagesPath struct {
	*ygot.NodePath
}

// System_MessagesPathAny represents the wildcard version of the /openconfig-system/system/messages YANG schema element.
type System_MessagesPathAny struct {
	*ygot.NodePath
}

// System_Messages_SeverityPath represents the /openconfig-system/system/messages/config/severity YANG schema element.
type System_Messages_SeverityPath struct {
	*ygot.NodePath
}

// System_Messages_SeverityPathAny represents the wildcard version of the /openconfig-system/system/messages/config/severity YANG schema element.
type System_Messages_SeverityPathAny struct {
	*ygot.NodePath
}

// DebugServiceAny (list): List of debugging entries.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "debug-entries/debug-service"
// Path from root: "/system/messages/debug-entries/debug-service"
// Service (wildcarded): oc.E_Messages_DEBUG_SERVICE
func (n *System_MessagesPath) DebugServiceAny() *System_Messages_DebugServicePathAny {
	return &System_Messages_DebugServicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": "*"},
			n,
		),
	}
}

// DebugServiceAny (list): List of debugging entries.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "debug-entries/debug-service"
// Path from root: "/system/messages/debug-entries/debug-service"
// Service (wildcarded): oc.E_Messages_DEBUG_SERVICE
func (n *System_MessagesPathAny) DebugServiceAny() *System_Messages_DebugServicePathAny {
	return &System_Messages_DebugServicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": "*"},
			n,
		),
	}
}

// DebugService (list): List of debugging entries.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "debug-entries/debug-service"
// Path from root: "/system/messages/debug-entries/debug-service"
// Service: oc.E_Messages_DEBUG_SERVICE
func (n *System_MessagesPath) DebugService(Service oc.E_Messages_DEBUG_SERVICE) *System_Messages_DebugServicePath {
	return &System_Messages_DebugServicePath{
		NodePath: ygot.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": Service},
			n,
		),
	}
}

// DebugService (list): List of debugging entries.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "debug-entries/debug-service"
// Path from root: "/system/messages/debug-entries/debug-service"
// Service: oc.E_Messages_DEBUG_SERVICE
func (n *System_MessagesPathAny) DebugService(Service oc.E_Messages_DEBUG_SERVICE) *System_Messages_DebugServicePathAny {
	return &System_Messages_DebugServicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": Service},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) are sent over the RPC.
//
// This is analogous to differentiating which severity is to be
// sent to legacy Syslog servers, as opposed to local buffer or
// files.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/messages/config/severity"
func (n *System_MessagesPath) Severity() *System_Messages_SeverityPath {
	return &System_Messages_SeverityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) are sent over the RPC.
//
// This is analogous to differentiating which severity is to be
// sent to legacy Syslog servers, as opposed to local buffer or
// files.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/messages/config/severity"
func (n *System_MessagesPathAny) Severity() *System_Messages_SeverityPathAny {
	return &System_Messages_SeverityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Messages_DebugServicePath represents the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugServicePath struct {
	*ygot.NodePath
}

// System_Messages_DebugServicePathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugServicePathAny struct {
	*ygot.NodePath
}

// System_Messages_DebugService_EnabledPath represents the /openconfig-system/system/messages/debug-entries/debug-service/config/enabled YANG schema element.
type System_Messages_DebugService_EnabledPath struct {
	*ygot.NodePath
}

// System_Messages_DebugService_EnabledPathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service/config/enabled YANG schema element.
type System_Messages_DebugService_EnabledPathAny struct {
	*ygot.NodePath
}

// System_Messages_DebugService_ServicePath represents the /openconfig-system/system/messages/debug-entries/debug-service/config/service YANG schema element.
type System_Messages_DebugService_ServicePath struct {
	*ygot.NodePath
}

// System_Messages_DebugService_ServicePathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service/config/service YANG schema element.
type System_Messages_DebugService_ServicePathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Enable and disable debugging.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enabled"
// Path from root: "/system/messages/debug-entries/debug-service/config/enabled"
func (n *System_Messages_DebugServicePath) Enabled() *System_Messages_DebugService_EnabledPath {
	return &System_Messages_DebugService_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enable and disable debugging.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enabled"
// Path from root: "/system/messages/debug-entries/debug-service/config/enabled"
func (n *System_Messages_DebugServicePathAny) Enabled() *System_Messages_DebugService_EnabledPathAny {
	return &System_Messages_DebugService_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Service (leaf): Enumeration of all services which can have debugging enabled.
// Vendors are to augment this base identity with their platform
// or OS specific debug options.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "config/service"
// Path from root: "/system/messages/debug-entries/debug-service/config/service"
func (n *System_Messages_DebugServicePath) Service() *System_Messages_DebugService_ServicePath {
	return &System_Messages_DebugService_ServicePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "service"},
			map[string]interface{}{},
			n,
		),
	}
}

// Service (leaf): Enumeration of all services which can have debugging enabled.
// Vendors are to augment this base identity with their platform
// or OS specific debug options.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "config/service"
// Path from root: "/system/messages/debug-entries/debug-service/config/service"
func (n *System_Messages_DebugServicePathAny) Service() *System_Messages_DebugService_ServicePathAny {
	return &System_Messages_DebugService_ServicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "service"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_NtpPath represents the /openconfig-system/system/ntp YANG schema element.
type System_NtpPath struct {
	*ygot.NodePath
}

// System_NtpPathAny represents the wildcard version of the /openconfig-system/system/ntp YANG schema element.
type System_NtpPathAny struct {
	*ygot.NodePath
}

// System_Ntp_EnableNtpAuthPath represents the /openconfig-system/system/ntp/config/enable-ntp-auth YANG schema element.
type System_Ntp_EnableNtpAuthPath struct {
	*ygot.NodePath
}

// System_Ntp_EnableNtpAuthPathAny represents the wildcard version of the /openconfig-system/system/ntp/config/enable-ntp-auth YANG schema element.
type System_Ntp_EnableNtpAuthPathAny struct {
	*ygot.NodePath
}

// System_Ntp_EnabledPath represents the /openconfig-system/system/ntp/config/enabled YANG schema element.
type System_Ntp_EnabledPath struct {
	*ygot.NodePath
}

// System_Ntp_EnabledPathAny represents the wildcard version of the /openconfig-system/system/ntp/config/enabled YANG schema element.
type System_Ntp_EnabledPathAny struct {
	*ygot.NodePath
}

// System_Ntp_NtpSourceAddressPath represents the /openconfig-system/system/ntp/config/ntp-source-address YANG schema element.
type System_Ntp_NtpSourceAddressPath struct {
	*ygot.NodePath
}

// System_Ntp_NtpSourceAddressPathAny represents the wildcard version of the /openconfig-system/system/ntp/config/ntp-source-address YANG schema element.
type System_Ntp_NtpSourceAddressPathAny struct {
	*ygot.NodePath
}

// EnableNtpAuth (leaf): Enable or disable NTP authentication -- when enabled, the
// system will only use packets containing a trusted
// authentication key to synchronize the time.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable-ntp-auth"
// Path from root: "/system/ntp/config/enable-ntp-auth"
func (n *System_NtpPath) EnableNtpAuth() *System_Ntp_EnableNtpAuthPath {
	return &System_Ntp_EnableNtpAuthPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable-ntp-auth"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableNtpAuth (leaf): Enable or disable NTP authentication -- when enabled, the
// system will only use packets containing a trusted
// authentication key to synchronize the time.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable-ntp-auth"
// Path from root: "/system/ntp/config/enable-ntp-auth"
func (n *System_NtpPathAny) EnableNtpAuth() *System_Ntp_EnableNtpAuthPathAny {
	return &System_Ntp_EnableNtpAuthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable-ntp-auth"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enables the NTP protocol and indicates that the system should
// attempt to synchronize the system clock with an NTP server
// from the servers defined in the 'ntp/server' list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enabled"
// Path from root: "/system/ntp/config/enabled"
func (n *System_NtpPath) Enabled() *System_Ntp_EnabledPath {
	return &System_Ntp_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enables the NTP protocol and indicates that the system should
// attempt to synchronize the system clock with an NTP server
// from the servers defined in the 'ntp/server' list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enabled"
// Path from root: "/system/ntp/config/enabled"
func (n *System_NtpPathAny) Enabled() *System_Ntp_EnabledPathAny {
	return &System_Ntp_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// NtpKeyAny (list): List of NTP authentication keys
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp-keys/ntp-key"
// Path from root: "/system/ntp/ntp-keys/ntp-key"
// KeyId (wildcarded): uint16
func (n *System_NtpPath) NtpKeyAny() *System_Ntp_NtpKeyPathAny {
	return &System_Ntp_NtpKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": "*"},
			n,
		),
	}
}

// NtpKeyAny (list): List of NTP authentication keys
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp-keys/ntp-key"
// Path from root: "/system/ntp/ntp-keys/ntp-key"
// KeyId (wildcarded): uint16
func (n *System_NtpPathAny) NtpKeyAny() *System_Ntp_NtpKeyPathAny {
	return &System_Ntp_NtpKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": "*"},
			n,
		),
	}
}

// NtpKey (list): List of NTP authentication keys
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp-keys/ntp-key"
// Path from root: "/system/ntp/ntp-keys/ntp-key"
// KeyId: uint16
func (n *System_NtpPath) NtpKey(KeyId uint16) *System_Ntp_NtpKeyPath {
	return &System_Ntp_NtpKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": KeyId},
			n,
		),
	}
}

// NtpKey (list): List of NTP authentication keys
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp-keys/ntp-key"
// Path from root: "/system/ntp/ntp-keys/ntp-key"
// KeyId: uint16
func (n *System_NtpPathAny) NtpKey(KeyId uint16) *System_Ntp_NtpKeyPathAny {
	return &System_Ntp_NtpKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": KeyId},
			n,
		),
	}
}

// NtpSourceAddress (leaf): Source address to use on outgoing NTP packets
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/ntp-source-address"
// Path from root: "/system/ntp/config/ntp-source-address"
func (n *System_NtpPath) NtpSourceAddress() *System_Ntp_NtpSourceAddressPath {
	return &System_Ntp_NtpSourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ntp-source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NtpSourceAddress (leaf): Source address to use on outgoing NTP packets
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/ntp-source-address"
// Path from root: "/system/ntp/config/ntp-source-address"
func (n *System_NtpPathAny) NtpSourceAddress() *System_Ntp_NtpSourceAddressPathAny {
	return &System_Ntp_NtpSourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ntp-source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ServerAny (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/ntp/servers/server"
// Address (wildcarded): string
func (n *System_NtpPath) ServerAny() *System_Ntp_ServerPathAny {
	return &System_Ntp_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// ServerAny (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/ntp/servers/server"
// Address (wildcarded): string
func (n *System_NtpPathAny) ServerAny() *System_Ntp_ServerPathAny {
	return &System_Ntp_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// Server (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/ntp/servers/server"
// Address: string
func (n *System_NtpPath) Server(Address string) *System_Ntp_ServerPath {
	return &System_Ntp_ServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// Server (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/ntp/servers/server"
// Address: string
func (n *System_NtpPathAny) Server(Address string) *System_Ntp_ServerPathAny {
	return &System_Ntp_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// System_Ntp_NtpKeyPath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKeyPath struct {
	*ygot.NodePath
}

// System_Ntp_NtpKeyPathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKeyPathAny struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyIdPath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/config/key-id YANG schema element.
type System_Ntp_NtpKey_KeyIdPath struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyIdPathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/config/key-id YANG schema element.
type System_Ntp_NtpKey_KeyIdPathAny struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyTypePath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/config/key-type YANG schema element.
type System_Ntp_NtpKey_KeyTypePath struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyTypePathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/config/key-type YANG schema element.
type System_Ntp_NtpKey_KeyTypePathAny struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyValuePath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/config/key-value YANG schema element.
type System_Ntp_NtpKey_KeyValuePath struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyValuePathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/config/key-value YANG schema element.
type System_Ntp_NtpKey_KeyValuePathAny struct {
	*ygot.NodePath
}

// KeyId (leaf): Integer identifier used by the client and server to
// designate a secret key.  The client and server must use
// the same key id.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/key-id"
// Path from root: "/system/ntp/ntp-keys/ntp-key/config/key-id"
func (n *System_Ntp_NtpKeyPath) KeyId() *System_Ntp_NtpKey_KeyIdPath {
	return &System_Ntp_NtpKey_KeyIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyId (leaf): Integer identifier used by the client and server to
// designate a secret key.  The client and server must use
// the same key id.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/key-id"
// Path from root: "/system/ntp/ntp-keys/ntp-key/config/key-id"
func (n *System_Ntp_NtpKeyPathAny) KeyId() *System_Ntp_NtpKey_KeyIdPathAny {
	return &System_Ntp_NtpKey_KeyIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyType (leaf): Encryption type used for the NTP authentication key
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/key-type"
// Path from root: "/system/ntp/ntp-keys/ntp-key/config/key-type"
func (n *System_Ntp_NtpKeyPath) KeyType() *System_Ntp_NtpKey_KeyTypePath {
	return &System_Ntp_NtpKey_KeyTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyType (leaf): Encryption type used for the NTP authentication key
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/key-type"
// Path from root: "/system/ntp/ntp-keys/ntp-key/config/key-type"
func (n *System_Ntp_NtpKeyPathAny) KeyType() *System_Ntp_NtpKey_KeyTypePathAny {
	return &System_Ntp_NtpKey_KeyTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyValue (leaf): NTP authentication key value
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/key-value"
// Path from root: "/system/ntp/ntp-keys/ntp-key/config/key-value"
func (n *System_Ntp_NtpKeyPath) KeyValue() *System_Ntp_NtpKey_KeyValuePath {
	return &System_Ntp_NtpKey_KeyValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyValue (leaf): NTP authentication key value
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/key-value"
// Path from root: "/system/ntp/ntp-keys/ntp-key/config/key-value"
func (n *System_Ntp_NtpKeyPathAny) KeyValue() *System_Ntp_NtpKey_KeyValuePathAny {
	return &System_Ntp_NtpKey_KeyValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Ntp_ServerPath represents the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_ServerPath struct {
	*ygot.NodePath
}

// System_Ntp_ServerPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_ServerPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_AddressPath represents the /openconfig-system/system/ntp/servers/server/config/address YANG schema element.
type System_Ntp_Server_AddressPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_AddressPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/config/address YANG schema element.
type System_Ntp_Server_AddressPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_AssociationTypePath represents the /openconfig-system/system/ntp/servers/server/config/association-type YANG schema element.
type System_Ntp_Server_AssociationTypePath struct {
	*ygot.NodePath
}

// System_Ntp_Server_AssociationTypePathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/config/association-type YANG schema element.
type System_Ntp_Server_AssociationTypePathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_IburstPath represents the /openconfig-system/system/ntp/servers/server/config/iburst YANG schema element.
type System_Ntp_Server_IburstPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_IburstPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/config/iburst YANG schema element.
type System_Ntp_Server_IburstPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_PortPath represents the /openconfig-system/system/ntp/servers/server/config/port YANG schema element.
type System_Ntp_Server_PortPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_PortPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/config/port YANG schema element.
type System_Ntp_Server_PortPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_PreferPath represents the /openconfig-system/system/ntp/servers/server/config/prefer YANG schema element.
type System_Ntp_Server_PreferPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_PreferPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/config/prefer YANG schema element.
type System_Ntp_Server_PreferPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_VersionPath represents the /openconfig-system/system/ntp/servers/server/config/version YANG schema element.
type System_Ntp_Server_VersionPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_VersionPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/config/version YANG schema element.
type System_Ntp_Server_VersionPathAny struct {
	*ygot.NodePath
}

// Address (leaf): The address or hostname of the NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/address"
// Path from root: "/system/ntp/servers/server/config/address"
func (n *System_Ntp_ServerPath) Address() *System_Ntp_Server_AddressPath {
	return &System_Ntp_Server_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): The address or hostname of the NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/address"
// Path from root: "/system/ntp/servers/server/config/address"
func (n *System_Ntp_ServerPathAny) Address() *System_Ntp_Server_AddressPathAny {
	return &System_Ntp_Server_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociationType (leaf): The desired association type for this NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/association-type"
// Path from root: "/system/ntp/servers/server/config/association-type"
func (n *System_Ntp_ServerPath) AssociationType() *System_Ntp_Server_AssociationTypePath {
	return &System_Ntp_Server_AssociationTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "association-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociationType (leaf): The desired association type for this NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/association-type"
// Path from root: "/system/ntp/servers/server/config/association-type"
func (n *System_Ntp_ServerPathAny) AssociationType() *System_Ntp_Server_AssociationTypePathAny {
	return &System_Ntp_Server_AssociationTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "association-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Iburst (leaf): Indicates whether this server should enable burst
// synchronization or not.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/iburst"
// Path from root: "/system/ntp/servers/server/config/iburst"
func (n *System_Ntp_ServerPath) Iburst() *System_Ntp_Server_IburstPath {
	return &System_Ntp_Server_IburstPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "iburst"},
			map[string]interface{}{},
			n,
		),
	}
}

// Iburst (leaf): Indicates whether this server should enable burst
// synchronization or not.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/iburst"
// Path from root: "/system/ntp/servers/server/config/iburst"
func (n *System_Ntp_ServerPathAny) Iburst() *System_Ntp_Server_IburstPathAny {
	return &System_Ntp_Server_IburstPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "iburst"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number of the NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/port"
// Path from root: "/system/ntp/servers/server/config/port"
func (n *System_Ntp_ServerPath) Port() *System_Ntp_Server_PortPath {
	return &System_Ntp_Server_PortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number of the NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/port"
// Path from root: "/system/ntp/servers/server/config/port"
func (n *System_Ntp_ServerPathAny) Port() *System_Ntp_Server_PortPathAny {
	return &System_Ntp_Server_PortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefer (leaf): Indicates whether this server should be preferred
// or not.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/prefer"
// Path from root: "/system/ntp/servers/server/config/prefer"
func (n *System_Ntp_ServerPath) Prefer() *System_Ntp_Server_PreferPath {
	return &System_Ntp_Server_PreferPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefer"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefer (leaf): Indicates whether this server should be preferred
// or not.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/prefer"
// Path from root: "/system/ntp/servers/server/config/prefer"
func (n *System_Ntp_ServerPathAny) Prefer() *System_Ntp_Server_PreferPathAny {
	return &System_Ntp_Server_PreferPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefer"},
			map[string]interface{}{},
			n,
		),
	}
}

// Version (leaf): Version number to put in outgoing NTP packets
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/version"
// Path from root: "/system/ntp/servers/server/config/version"
func (n *System_Ntp_ServerPath) Version() *System_Ntp_Server_VersionPath {
	return &System_Ntp_Server_VersionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "version"},
			map[string]interface{}{},
			n,
		),
	}
}

// Version (leaf): Version number to put in outgoing NTP packets
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/version"
// Path from root: "/system/ntp/servers/server/config/version"
func (n *System_Ntp_ServerPathAny) Version() *System_Ntp_Server_VersionPathAny {
	return &System_Ntp_Server_VersionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "version"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_SshServerPath represents the /openconfig-system/system/ssh-server YANG schema element.
type System_SshServerPath struct {
	*ygot.NodePath
}

// System_SshServerPathAny represents the wildcard version of the /openconfig-system/system/ssh-server YANG schema element.
type System_SshServerPathAny struct {
	*ygot.NodePath
}

// System_SshServer_EnablePath represents the /openconfig-system/system/ssh-server/config/enable YANG schema element.
type System_SshServer_EnablePath struct {
	*ygot.NodePath
}

// System_SshServer_EnablePathAny represents the wildcard version of the /openconfig-system/system/ssh-server/config/enable YANG schema element.
type System_SshServer_EnablePathAny struct {
	*ygot.NodePath
}

// System_SshServer_ProtocolVersionPath represents the /openconfig-system/system/ssh-server/config/protocol-version YANG schema element.
type System_SshServer_ProtocolVersionPath struct {
	*ygot.NodePath
}

// System_SshServer_ProtocolVersionPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/config/protocol-version YANG schema element.
type System_SshServer_ProtocolVersionPathAny struct {
	*ygot.NodePath
}

// System_SshServer_RateLimitPath represents the /openconfig-system/system/ssh-server/config/rate-limit YANG schema element.
type System_SshServer_RateLimitPath struct {
	*ygot.NodePath
}

// System_SshServer_RateLimitPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/config/rate-limit YANG schema element.
type System_SshServer_RateLimitPathAny struct {
	*ygot.NodePath
}

// System_SshServer_SessionLimitPath represents the /openconfig-system/system/ssh-server/config/session-limit YANG schema element.
type System_SshServer_SessionLimitPath struct {
	*ygot.NodePath
}

// System_SshServer_SessionLimitPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/config/session-limit YANG schema element.
type System_SshServer_SessionLimitPathAny struct {
	*ygot.NodePath
}

// System_SshServer_TimeoutPath represents the /openconfig-system/system/ssh-server/config/timeout YANG schema element.
type System_SshServer_TimeoutPath struct {
	*ygot.NodePath
}

// System_SshServer_TimeoutPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/config/timeout YANG schema element.
type System_SshServer_TimeoutPathAny struct {
	*ygot.NodePath
}

// Enable (leaf): Enables the ssh server.  The ssh server is enabled by
// default.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable"
// Path from root: "/system/ssh-server/config/enable"
func (n *System_SshServerPath) Enable() *System_SshServer_EnablePath {
	return &System_SshServer_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enables the ssh server.  The ssh server is enabled by
// default.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable"
// Path from root: "/system/ssh-server/config/enable"
func (n *System_SshServerPathAny) Enable() *System_SshServer_EnablePathAny {
	return &System_SshServer_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtocolVersion (leaf): Set the protocol version for SSH connections to the system
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/protocol-version"
// Path from root: "/system/ssh-server/config/protocol-version"
func (n *System_SshServerPath) ProtocolVersion() *System_SshServer_ProtocolVersionPath {
	return &System_SshServer_ProtocolVersionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "protocol-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtocolVersion (leaf): Set the protocol version for SSH connections to the system
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/protocol-version"
// Path from root: "/system/ssh-server/config/protocol-version"
func (n *System_SshServerPathAny) ProtocolVersion() *System_SshServer_ProtocolVersionPathAny {
	return &System_SshServer_ProtocolVersionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "protocol-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/rate-limit"
// Path from root: "/system/ssh-server/config/rate-limit"
func (n *System_SshServerPath) RateLimit() *System_SshServer_RateLimitPath {
	return &System_SshServer_RateLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "rate-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/rate-limit"
// Path from root: "/system/ssh-server/config/rate-limit"
func (n *System_SshServerPathAny) RateLimit() *System_SshServer_RateLimitPathAny {
	return &System_SshServer_RateLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "rate-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/session-limit"
// Path from root: "/system/ssh-server/config/session-limit"
func (n *System_SshServerPath) SessionLimit() *System_SshServer_SessionLimitPath {
	return &System_SshServer_SessionLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "session-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/session-limit"
// Path from root: "/system/ssh-server/config/session-limit"
func (n *System_SshServerPathAny) SessionLimit() *System_SshServer_SessionLimitPathAny {
	return &System_SshServer_SessionLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "session-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/timeout"
// Path from root: "/system/ssh-server/config/timeout"
func (n *System_SshServerPath) Timeout() *System_SshServer_TimeoutPath {
	return &System_SshServer_TimeoutPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/timeout"
// Path from root: "/system/ssh-server/config/timeout"
func (n *System_SshServerPathAny) Timeout() *System_SshServer_TimeoutPathAny {
	return &System_SshServer_TimeoutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_TelnetServerPath represents the /openconfig-system/system/telnet-server YANG schema element.
type System_TelnetServerPath struct {
	*ygot.NodePath
}

// System_TelnetServerPathAny represents the wildcard version of the /openconfig-system/system/telnet-server YANG schema element.
type System_TelnetServerPathAny struct {
	*ygot.NodePath
}

// System_TelnetServer_EnablePath represents the /openconfig-system/system/telnet-server/config/enable YANG schema element.
type System_TelnetServer_EnablePath struct {
	*ygot.NodePath
}

// System_TelnetServer_EnablePathAny represents the wildcard version of the /openconfig-system/system/telnet-server/config/enable YANG schema element.
type System_TelnetServer_EnablePathAny struct {
	*ygot.NodePath
}

// System_TelnetServer_RateLimitPath represents the /openconfig-system/system/telnet-server/config/rate-limit YANG schema element.
type System_TelnetServer_RateLimitPath struct {
	*ygot.NodePath
}

// System_TelnetServer_RateLimitPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/config/rate-limit YANG schema element.
type System_TelnetServer_RateLimitPathAny struct {
	*ygot.NodePath
}

// System_TelnetServer_SessionLimitPath represents the /openconfig-system/system/telnet-server/config/session-limit YANG schema element.
type System_TelnetServer_SessionLimitPath struct {
	*ygot.NodePath
}

// System_TelnetServer_SessionLimitPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/config/session-limit YANG schema element.
type System_TelnetServer_SessionLimitPathAny struct {
	*ygot.NodePath
}

// System_TelnetServer_TimeoutPath represents the /openconfig-system/system/telnet-server/config/timeout YANG schema element.
type System_TelnetServer_TimeoutPath struct {
	*ygot.NodePath
}

// System_TelnetServer_TimeoutPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/config/timeout YANG schema element.
type System_TelnetServer_TimeoutPathAny struct {
	*ygot.NodePath
}

// Enable (leaf): Enables the telnet server.  Telnet is disabled by
// default
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable"
// Path from root: "/system/telnet-server/config/enable"
func (n *System_TelnetServerPath) Enable() *System_TelnetServer_EnablePath {
	return &System_TelnetServer_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enables the telnet server.  Telnet is disabled by
// default
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable"
// Path from root: "/system/telnet-server/config/enable"
func (n *System_TelnetServerPathAny) Enable() *System_TelnetServer_EnablePathAny {
	return &System_TelnetServer_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/rate-limit"
// Path from root: "/system/telnet-server/config/rate-limit"
func (n *System_TelnetServerPath) RateLimit() *System_TelnetServer_RateLimitPath {
	return &System_TelnetServer_RateLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "rate-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/rate-limit"
// Path from root: "/system/telnet-server/config/rate-limit"
func (n *System_TelnetServerPathAny) RateLimit() *System_TelnetServer_RateLimitPathAny {
	return &System_TelnetServer_RateLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "rate-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/session-limit"
// Path from root: "/system/telnet-server/config/session-limit"
func (n *System_TelnetServerPath) SessionLimit() *System_TelnetServer_SessionLimitPath {
	return &System_TelnetServer_SessionLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "session-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/session-limit"
// Path from root: "/system/telnet-server/config/session-limit"
func (n *System_TelnetServerPathAny) SessionLimit() *System_TelnetServer_SessionLimitPathAny {
	return &System_TelnetServer_SessionLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "session-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/timeout"
// Path from root: "/system/telnet-server/config/timeout"
func (n *System_TelnetServerPath) Timeout() *System_TelnetServer_TimeoutPath {
	return &System_TelnetServer_TimeoutPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/timeout"
// Path from root: "/system/telnet-server/config/timeout"
func (n *System_TelnetServerPathAny) Timeout() *System_TelnetServer_TimeoutPathAny {
	return &System_TelnetServer_TimeoutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

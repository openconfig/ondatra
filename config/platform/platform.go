/*
Package platform is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/alexmasi/go/pkg/mod/github.com/openconfig/ygot@v0.23.1/genutil/names.go
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package platform

import (
	"github.com/openconfig/ygot/ygot"
)

// ComponentPath represents the /openconfig-platform/components/component YANG schema element.
type ComponentPath struct {
	*ygot.NodePath
}

// ComponentPathAny represents the wildcard version of the /openconfig-platform/components/component YANG schema element.
type ComponentPathAny struct {
	*ygot.NodePath
}

// Component_NamePath represents the /openconfig-platform/components/component/config/name YANG schema element.
type Component_NamePath struct {
	*ygot.NodePath
}

// Component_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/config/name YANG schema element.
type Component_NamePathAny struct {
	*ygot.NodePath
}

// Backplane (container): Data for backplane components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "backplane"
// Path from root: "/components/component/backplane"
func (n *ComponentPath) Backplane() *Component_BackplanePath {
	return &Component_BackplanePath{
		NodePath: ygot.NewNodePath(
			[]string{"backplane"},
			map[string]interface{}{},
			n,
		),
	}
}

// Backplane (container): Data for backplane components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "backplane"
// Path from root: "/components/component/backplane"
func (n *ComponentPathAny) Backplane() *Component_BackplanePathAny {
	return &Component_BackplanePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"backplane"},
			map[string]interface{}{},
			n,
		),
	}
}

// Chassis (container): Data for chassis components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "chassis"
// Path from root: "/components/component/chassis"
func (n *ComponentPath) Chassis() *Component_ChassisPath {
	return &Component_ChassisPath{
		NodePath: ygot.NewNodePath(
			[]string{"chassis"},
			map[string]interface{}{},
			n,
		),
	}
}

// Chassis (container): Data for chassis components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "chassis"
// Path from root: "/components/component/chassis"
func (n *ComponentPathAny) Chassis() *Component_ChassisPathAny {
	return &Component_ChassisPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"chassis"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cpu (container): Data for cpu components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "cpu"
// Path from root: "/components/component/cpu"
func (n *ComponentPath) Cpu() *Component_CpuPath {
	return &Component_CpuPath{
		NodePath: ygot.NewNodePath(
			[]string{"cpu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cpu (container): Data for cpu components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "cpu"
// Path from root: "/components/component/cpu"
func (n *ComponentPathAny) Cpu() *Component_CpuPathAny {
	return &Component_CpuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"cpu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Fabric (container): Data for fabric components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "fabric"
// Path from root: "/components/component/fabric"
func (n *ComponentPath) Fabric() *Component_FabricPath {
	return &Component_FabricPath{
		NodePath: ygot.NewNodePath(
			[]string{"fabric"},
			map[string]interface{}{},
			n,
		),
	}
}

// Fabric (container): Data for fabric components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "fabric"
// Path from root: "/components/component/fabric"
func (n *ComponentPathAny) Fabric() *Component_FabricPathAny {
	return &Component_FabricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"fabric"},
			map[string]interface{}{},
			n,
		),
	}
}

// Fan (container): Data for fan components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "fan"
// Path from root: "/components/component/fan"
func (n *ComponentPath) Fan() *Component_FanPath {
	return &Component_FanPath{
		NodePath: ygot.NewNodePath(
			[]string{"fan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Fan (container): Data for fan components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "fan"
// Path from root: "/components/component/fan"
func (n *ComponentPathAny) Fan() *Component_FanPathAny {
	return &Component_FanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"fan"},
			map[string]interface{}{},
			n,
		),
	}
}

// IntegratedCircuit (container): Data for chip components, such as ASIC, NPUs, etc.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "integrated-circuit"
// Path from root: "/components/component/integrated-circuit"
func (n *ComponentPath) IntegratedCircuit() *Component_IntegratedCircuitPath {
	return &Component_IntegratedCircuitPath{
		NodePath: ygot.NewNodePath(
			[]string{"integrated-circuit"},
			map[string]interface{}{},
			n,
		),
	}
}

// IntegratedCircuit (container): Data for chip components, such as ASIC, NPUs, etc.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "integrated-circuit"
// Path from root: "/components/component/integrated-circuit"
func (n *ComponentPathAny) IntegratedCircuit() *Component_IntegratedCircuitPathAny {
	return &Component_IntegratedCircuitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"integrated-circuit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Device name for the component -- this may not be a
// configurable parameter on many implementations.  Where
// component preconfiguration is supported, for example,
// the component name may be configurable.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/name"
// Path from root: "/components/component/config/name"
func (n *ComponentPath) Name() *Component_NamePath {
	return &Component_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Device name for the component -- this may not be a
// configurable parameter on many implementations.  Where
// component preconfiguration is supported, for example,
// the component name may be configurable.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/name"
// Path from root: "/components/component/config/name"
func (n *ComponentPathAny) Name() *Component_NamePathAny {
	return &Component_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (container): Data for physical port components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "port"
// Path from root: "/components/component/port"
func (n *ComponentPath) Port() *Component_PortPath {
	return &Component_PortPath{
		NodePath: ygot.NewNodePath(
			[]string{"port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (container): Data for physical port components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "port"
// Path from root: "/components/component/port"
func (n *ComponentPathAny) Port() *Component_PortPathAny {
	return &Component_PortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"port"},
			map[string]interface{}{},
			n,
		),
	}
}

// PowerSupply (container): Data for power supply components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "power-supply"
// Path from root: "/components/component/power-supply"
func (n *ComponentPath) PowerSupply() *Component_PowerSupplyPath {
	return &Component_PowerSupplyPath{
		NodePath: ygot.NewNodePath(
			[]string{"power-supply"},
			map[string]interface{}{},
			n,
		),
	}
}

// PowerSupply (container): Data for power supply components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "power-supply"
// Path from root: "/components/component/power-supply"
func (n *ComponentPathAny) PowerSupply() *Component_PowerSupplyPathAny {
	return &Component_PowerSupplyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"power-supply"},
			map[string]interface{}{},
			n,
		),
	}
}

// PropertyAny (list): List of system properties for the component
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "properties/property"
// Path from root: "/components/component/properties/property"
// Name (wildcarded): string
func (n *ComponentPath) PropertyAny() *Component_PropertyPathAny {
	return &Component_PropertyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"properties", "property"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// PropertyAny (list): List of system properties for the component
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "properties/property"
// Path from root: "/components/component/properties/property"
// Name (wildcarded): string
func (n *ComponentPathAny) PropertyAny() *Component_PropertyPathAny {
	return &Component_PropertyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"properties", "property"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Property (list): List of system properties for the component
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "properties/property"
// Path from root: "/components/component/properties/property"
// Name: string
func (n *ComponentPath) Property(Name string) *Component_PropertyPath {
	return &Component_PropertyPath{
		NodePath: ygot.NewNodePath(
			[]string{"properties", "property"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Property (list): List of system properties for the component
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "properties/property"
// Path from root: "/components/component/properties/property"
// Name: string
func (n *ComponentPathAny) Property(Name string) *Component_PropertyPathAny {
	return &Component_PropertyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"properties", "property"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// SoftwareModule (container): Data for software module components, i.e., for components
// with type=SOFTWARE_MODULE
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "software-module"
// Path from root: "/components/component/software-module"
func (n *ComponentPath) SoftwareModule() *Component_SoftwareModulePath {
	return &Component_SoftwareModulePath{
		NodePath: ygot.NewNodePath(
			[]string{"software-module"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftwareModule (container): Data for software module components, i.e., for components
// with type=SOFTWARE_MODULE
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "software-module"
// Path from root: "/components/component/software-module"
func (n *ComponentPathAny) SoftwareModule() *Component_SoftwareModulePathAny {
	return &Component_SoftwareModulePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"software-module"},
			map[string]interface{}{},
			n,
		),
	}
}

// Storage (container): Data for storage components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "storage"
// Path from root: "/components/component/storage"
func (n *ComponentPath) Storage() *Component_StoragePath {
	return &Component_StoragePath{
		NodePath: ygot.NewNodePath(
			[]string{"storage"},
			map[string]interface{}{},
			n,
		),
	}
}

// Storage (container): Data for storage components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "storage"
// Path from root: "/components/component/storage"
func (n *ComponentPathAny) Storage() *Component_StoragePathAny {
	return &Component_StoragePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"storage"},
			map[string]interface{}{},
			n,
		),
	}
}

// SubcomponentAny (list): List of subcomponent references
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "subcomponents/subcomponent"
// Path from root: "/components/component/subcomponents/subcomponent"
// Name (wildcarded): string
func (n *ComponentPath) SubcomponentAny() *Component_SubcomponentPathAny {
	return &Component_SubcomponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"subcomponents", "subcomponent"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// SubcomponentAny (list): List of subcomponent references
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "subcomponents/subcomponent"
// Path from root: "/components/component/subcomponents/subcomponent"
// Name (wildcarded): string
func (n *ComponentPathAny) SubcomponentAny() *Component_SubcomponentPathAny {
	return &Component_SubcomponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"subcomponents", "subcomponent"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Subcomponent (list): List of subcomponent references
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "subcomponents/subcomponent"
// Path from root: "/components/component/subcomponents/subcomponent"
// Name: string
func (n *ComponentPath) Subcomponent(Name string) *Component_SubcomponentPath {
	return &Component_SubcomponentPath{
		NodePath: ygot.NewNodePath(
			[]string{"subcomponents", "subcomponent"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Subcomponent (list): List of subcomponent references
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "subcomponents/subcomponent"
// Path from root: "/components/component/subcomponents/subcomponent"
// Name: string
func (n *ComponentPathAny) Subcomponent(Name string) *Component_SubcomponentPathAny {
	return &Component_SubcomponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"subcomponents", "subcomponent"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Transceiver (container): Top-level container for client port transceiver data
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "transceiver"
// Path from root: "/components/component/transceiver"
func (n *ComponentPath) Transceiver() *Component_TransceiverPath {
	return &Component_TransceiverPath{
		NodePath: ygot.NewNodePath(
			[]string{"transceiver"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transceiver (container): Top-level container for client port transceiver data
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "transceiver"
// Path from root: "/components/component/transceiver"
func (n *ComponentPathAny) Transceiver() *Component_TransceiverPathAny {
	return &Component_TransceiverPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"transceiver"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_BackplanePath represents the /openconfig-platform/components/component/backplane YANG schema element.
type Component_BackplanePath struct {
	*ygot.NodePath
}

// Component_BackplanePathAny represents the wildcard version of the /openconfig-platform/components/component/backplane YANG schema element.
type Component_BackplanePathAny struct {
	*ygot.NodePath
}

// Component_ChassisPath represents the /openconfig-platform/components/component/chassis YANG schema element.
type Component_ChassisPath struct {
	*ygot.NodePath
}

// Component_ChassisPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis YANG schema element.
type Component_ChassisPathAny struct {
	*ygot.NodePath
}

// Utilization (container): Utilization of the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "utilization"
// Path from root: "/components/component/chassis/utilization"
func (n *Component_ChassisPath) Utilization() *Component_Chassis_UtilizationPath {
	return &Component_Chassis_UtilizationPath{
		NodePath: ygot.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Utilization (container): Utilization of the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "utilization"
// Path from root: "/components/component/chassis/utilization"
func (n *Component_ChassisPathAny) Utilization() *Component_Chassis_UtilizationPathAny {
	return &Component_Chassis_UtilizationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_Chassis_UtilizationPath represents the /openconfig-platform/components/component/chassis/utilization YANG schema element.
type Component_Chassis_UtilizationPath struct {
	*ygot.NodePath
}

// Component_Chassis_UtilizationPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization YANG schema element.
type Component_Chassis_UtilizationPathAny struct {
	*ygot.NodePath
}

// ResourceAny (list): List of resources, keyed by resource name.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "resources/resource"
// Path from root: "/components/component/chassis/utilization/resources/resource"
// Name (wildcarded): string
func (n *Component_Chassis_UtilizationPath) ResourceAny() *Component_Chassis_Utilization_ResourcePathAny {
	return &Component_Chassis_Utilization_ResourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// ResourceAny (list): List of resources, keyed by resource name.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "resources/resource"
// Path from root: "/components/component/chassis/utilization/resources/resource"
// Name (wildcarded): string
func (n *Component_Chassis_UtilizationPathAny) ResourceAny() *Component_Chassis_Utilization_ResourcePathAny {
	return &Component_Chassis_Utilization_ResourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Resource (list): List of resources, keyed by resource name.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "resources/resource"
// Path from root: "/components/component/chassis/utilization/resources/resource"
// Name: string
func (n *Component_Chassis_UtilizationPath) Resource(Name string) *Component_Chassis_Utilization_ResourcePath {
	return &Component_Chassis_Utilization_ResourcePath{
		NodePath: ygot.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Resource (list): List of resources, keyed by resource name.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "resources/resource"
// Path from root: "/components/component/chassis/utilization/resources/resource"
// Name: string
func (n *Component_Chassis_UtilizationPathAny) Resource(Name string) *Component_Chassis_Utilization_ResourcePathAny {
	return &Component_Chassis_Utilization_ResourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Component_Chassis_Utilization_ResourcePath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource YANG schema element.
type Component_Chassis_Utilization_ResourcePath struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_ResourcePathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource YANG schema element.
type Component_Chassis_Utilization_ResourcePathAny struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_NamePath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/config/name YANG schema element.
type Component_Chassis_Utilization_Resource_NamePath struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/config/name YANG schema element.
type Component_Chassis_Utilization_Resource_NamePathAny struct {
	*ygot.NodePath
}

// Name (leaf): Resource name within the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/name"
// Path from root: "/components/component/chassis/utilization/resources/resource/config/name"
func (n *Component_Chassis_Utilization_ResourcePath) Name() *Component_Chassis_Utilization_Resource_NamePath {
	return &Component_Chassis_Utilization_Resource_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Resource name within the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/name"
// Path from root: "/components/component/chassis/utilization/resources/resource/config/name"
func (n *Component_Chassis_Utilization_ResourcePathAny) Name() *Component_Chassis_Utilization_Resource_NamePathAny {
	return &Component_Chassis_Utilization_Resource_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_CpuPath represents the /openconfig-platform/components/component/cpu YANG schema element.
type Component_CpuPath struct {
	*ygot.NodePath
}

// Component_CpuPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu YANG schema element.
type Component_CpuPathAny struct {
	*ygot.NodePath
}

// Utilization (container): Statistics representing CPU utilization of the
// component.
// ----------------------------------------
// Defining module: "openconfig-platform-cpu"
// Instantiating module: "openconfig-platform"
// Path from parent: "utilization"
// Path from root: "/components/component/cpu/utilization"
func (n *Component_CpuPath) Utilization() *Component_Cpu_UtilizationPath {
	return &Component_Cpu_UtilizationPath{
		NodePath: ygot.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Utilization (container): Statistics representing CPU utilization of the
// component.
// ----------------------------------------
// Defining module: "openconfig-platform-cpu"
// Instantiating module: "openconfig-platform"
// Path from parent: "utilization"
// Path from root: "/components/component/cpu/utilization"
func (n *Component_CpuPathAny) Utilization() *Component_Cpu_UtilizationPathAny {
	return &Component_Cpu_UtilizationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_Cpu_UtilizationPath represents the /openconfig-platform/components/component/cpu/utilization YANG schema element.
type Component_Cpu_UtilizationPath struct {
	*ygot.NodePath
}

// Component_Cpu_UtilizationPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization YANG schema element.
type Component_Cpu_UtilizationPathAny struct {
	*ygot.NodePath
}

// Component_FabricPath represents the /openconfig-platform/components/component/fabric YANG schema element.
type Component_FabricPath struct {
	*ygot.NodePath
}

// Component_FabricPathAny represents the wildcard version of the /openconfig-platform/components/component/fabric YANG schema element.
type Component_FabricPathAny struct {
	*ygot.NodePath
}

// Component_FanPath represents the /openconfig-platform/components/component/fan YANG schema element.
type Component_FanPath struct {
	*ygot.NodePath
}

// Component_FanPathAny represents the wildcard version of the /openconfig-platform/components/component/fan YANG schema element.
type Component_FanPathAny struct {
	*ygot.NodePath
}

// Component_IntegratedCircuitPath represents the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type Component_IntegratedCircuitPath struct {
	*ygot.NodePath
}

// Component_IntegratedCircuitPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type Component_IntegratedCircuitPathAny struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_NodeIdPath represents the /openconfig-platform/components/component/integrated-circuit/config/node-id YANG schema element.
type Component_IntegratedCircuit_NodeIdPath struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_NodeIdPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/config/node-id YANG schema element.
type Component_IntegratedCircuit_NodeIdPathAny struct {
	*ygot.NodePath
}

// BackplaneFacingCapacity (container): This container allows a particular INTEGRATED_CIRCUIT to report its
// available backplane-facing bandwidth. Where an integrated circuit is connected
// by one or more links to the system's backplane, the capacity is the total cross-
// sectional bandwidth available from the input ports of the integrated circuit
// across the fabric. The capacity should also reflect the operational status of
// the links.
// ----------------------------------------
// Defining module: "openconfig-platform-integrated-circuit"
// Instantiating module: "openconfig-platform"
// Path from parent: "backplane-facing-capacity"
// Path from root: "/components/component/integrated-circuit/backplane-facing-capacity"
func (n *Component_IntegratedCircuitPath) BackplaneFacingCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacityPath {
	return &Component_IntegratedCircuit_BackplaneFacingCapacityPath{
		NodePath: ygot.NewNodePath(
			[]string{"backplane-facing-capacity"},
			map[string]interface{}{},
			n,
		),
	}
}

// BackplaneFacingCapacity (container): This container allows a particular INTEGRATED_CIRCUIT to report its
// available backplane-facing bandwidth. Where an integrated circuit is connected
// by one or more links to the system's backplane, the capacity is the total cross-
// sectional bandwidth available from the input ports of the integrated circuit
// across the fabric. The capacity should also reflect the operational status of
// the links.
// ----------------------------------------
// Defining module: "openconfig-platform-integrated-circuit"
// Instantiating module: "openconfig-platform"
// Path from parent: "backplane-facing-capacity"
// Path from root: "/components/component/integrated-circuit/backplane-facing-capacity"
func (n *Component_IntegratedCircuitPathAny) BackplaneFacingCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny {
	return &Component_IntegratedCircuit_BackplaneFacingCapacityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"backplane-facing-capacity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Memory (container): Container for integrated circuit memory.
// ----------------------------------------
// Defining module: "openconfig-platform-integrated-circuit"
// Instantiating module: "openconfig-platform"
// Path from parent: "memory"
// Path from root: "/components/component/integrated-circuit/memory"
func (n *Component_IntegratedCircuitPath) Memory() *Component_IntegratedCircuit_MemoryPath {
	return &Component_IntegratedCircuit_MemoryPath{
		NodePath: ygot.NewNodePath(
			[]string{"memory"},
			map[string]interface{}{},
			n,
		),
	}
}

// Memory (container): Container for integrated circuit memory.
// ----------------------------------------
// Defining module: "openconfig-platform-integrated-circuit"
// Instantiating module: "openconfig-platform"
// Path from parent: "memory"
// Path from root: "/components/component/integrated-circuit/memory"
func (n *Component_IntegratedCircuitPathAny) Memory() *Component_IntegratedCircuit_MemoryPathAny {
	return &Component_IntegratedCircuit_MemoryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"memory"},
			map[string]interface{}{},
			n,
		),
	}
}

// NodeId (leaf): The numeric ID (device_id) used by the controller to address
// the integrated circuit, which may be referred to as a 'device',
// 'node' or 'target' by the P4RT specification.
//
// Each switching ASIC (i.e., node) is addressed by the external
// entity based on its numeric identifier.
//
// The node ID is specified in addition to the string identifier
// assigned to the integrated circuit within the
// /components/component list.
// ----------------------------------------
// Defining module: "openconfig-p4rt"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/node-id"
// Path from root: "/components/component/integrated-circuit/config/node-id"
func (n *Component_IntegratedCircuitPath) NodeId() *Component_IntegratedCircuit_NodeIdPath {
	return &Component_IntegratedCircuit_NodeIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "node-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// NodeId (leaf): The numeric ID (device_id) used by the controller to address
// the integrated circuit, which may be referred to as a 'device',
// 'node' or 'target' by the P4RT specification.
//
// Each switching ASIC (i.e., node) is addressed by the external
// entity based on its numeric identifier.
//
// The node ID is specified in addition to the string identifier
// assigned to the integrated circuit within the
// /components/component list.
// ----------------------------------------
// Defining module: "openconfig-p4rt"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/node-id"
// Path from root: "/components/component/integrated-circuit/config/node-id"
func (n *Component_IntegratedCircuitPathAny) NodeId() *Component_IntegratedCircuit_NodeIdPathAny {
	return &Component_IntegratedCircuit_NodeIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "node-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Utilization (container): Utilization of the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "utilization"
// Path from root: "/components/component/integrated-circuit/utilization"
func (n *Component_IntegratedCircuitPath) Utilization() *Component_IntegratedCircuit_UtilizationPath {
	return &Component_IntegratedCircuit_UtilizationPath{
		NodePath: ygot.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Utilization (container): Utilization of the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "utilization"
// Path from root: "/components/component/integrated-circuit/utilization"
func (n *Component_IntegratedCircuitPathAny) Utilization() *Component_IntegratedCircuit_UtilizationPathAny {
	return &Component_IntegratedCircuit_UtilizationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_IntegratedCircuit_BackplaneFacingCapacityPath represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacityPath struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_BackplaneFacingCapacityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacityPathAny struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_MemoryPath represents the /openconfig-platform/components/component/integrated-circuit/memory YANG schema element.
type Component_IntegratedCircuit_MemoryPath struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_MemoryPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/memory YANG schema element.
type Component_IntegratedCircuit_MemoryPathAny struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_UtilizationPath represents the /openconfig-platform/components/component/integrated-circuit/utilization YANG schema element.
type Component_IntegratedCircuit_UtilizationPath struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_UtilizationPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization YANG schema element.
type Component_IntegratedCircuit_UtilizationPathAny struct {
	*ygot.NodePath
}

// ResourceAny (list): List of resources, keyed by resource name.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "resources/resource"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource"
// Name (wildcarded): string
func (n *Component_IntegratedCircuit_UtilizationPath) ResourceAny() *Component_IntegratedCircuit_Utilization_ResourcePathAny {
	return &Component_IntegratedCircuit_Utilization_ResourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// ResourceAny (list): List of resources, keyed by resource name.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "resources/resource"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource"
// Name (wildcarded): string
func (n *Component_IntegratedCircuit_UtilizationPathAny) ResourceAny() *Component_IntegratedCircuit_Utilization_ResourcePathAny {
	return &Component_IntegratedCircuit_Utilization_ResourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Resource (list): List of resources, keyed by resource name.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "resources/resource"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource"
// Name: string
func (n *Component_IntegratedCircuit_UtilizationPath) Resource(Name string) *Component_IntegratedCircuit_Utilization_ResourcePath {
	return &Component_IntegratedCircuit_Utilization_ResourcePath{
		NodePath: ygot.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Resource (list): List of resources, keyed by resource name.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "resources/resource"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource"
// Name: string
func (n *Component_IntegratedCircuit_UtilizationPathAny) Resource(Name string) *Component_IntegratedCircuit_Utilization_ResourcePathAny {
	return &Component_IntegratedCircuit_Utilization_ResourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Component_IntegratedCircuit_Utilization_ResourcePath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource YANG schema element.
type Component_IntegratedCircuit_Utilization_ResourcePath struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_Utilization_ResourcePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource YANG schema element.
type Component_IntegratedCircuit_Utilization_ResourcePathAny struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_Utilization_Resource_NamePath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/config/name YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_NamePath struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_Utilization_Resource_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/config/name YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_NamePathAny struct {
	*ygot.NodePath
}

// Name (leaf): Resource name within the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/name"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource/config/name"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) Name() *Component_IntegratedCircuit_Utilization_Resource_NamePath {
	return &Component_IntegratedCircuit_Utilization_Resource_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Resource name within the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/name"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource/config/name"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) Name() *Component_IntegratedCircuit_Utilization_Resource_NamePathAny {
	return &Component_IntegratedCircuit_Utilization_Resource_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_PortPath represents the /openconfig-platform/components/component/port YANG schema element.
type Component_PortPath struct {
	*ygot.NodePath
}

// Component_PortPathAny represents the wildcard version of the /openconfig-platform/components/component/port YANG schema element.
type Component_PortPathAny struct {
	*ygot.NodePath
}

// BreakoutMode (container): Top-level container for port breakout-mode data.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "breakout-mode"
// Path from root: "/components/component/port/breakout-mode"
func (n *Component_PortPath) BreakoutMode() *Component_Port_BreakoutModePath {
	return &Component_Port_BreakoutModePath{
		NodePath: ygot.NewNodePath(
			[]string{"breakout-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// BreakoutMode (container): Top-level container for port breakout-mode data.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "breakout-mode"
// Path from root: "/components/component/port/breakout-mode"
func (n *Component_PortPathAny) BreakoutMode() *Component_Port_BreakoutModePathAny {
	return &Component_Port_BreakoutModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"breakout-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_Port_BreakoutModePath represents the /openconfig-platform/components/component/port/breakout-mode YANG schema element.
type Component_Port_BreakoutModePath struct {
	*ygot.NodePath
}

// Component_Port_BreakoutModePathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode YANG schema element.
type Component_Port_BreakoutModePathAny struct {
	*ygot.NodePath
}

// GroupAny (list): List of breakout groups.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "groups/group"
// Path from root: "/components/component/port/breakout-mode/groups/group"
// Index (wildcarded): uint8
func (n *Component_Port_BreakoutModePath) GroupAny() *Component_Port_BreakoutMode_GroupPathAny {
	return &Component_Port_BreakoutMode_GroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"groups", "group"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// GroupAny (list): List of breakout groups.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "groups/group"
// Path from root: "/components/component/port/breakout-mode/groups/group"
// Index (wildcarded): uint8
func (n *Component_Port_BreakoutModePathAny) GroupAny() *Component_Port_BreakoutMode_GroupPathAny {
	return &Component_Port_BreakoutMode_GroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"groups", "group"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// Group (list): List of breakout groups.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "groups/group"
// Path from root: "/components/component/port/breakout-mode/groups/group"
// Index: uint8
func (n *Component_Port_BreakoutModePath) Group(Index uint8) *Component_Port_BreakoutMode_GroupPath {
	return &Component_Port_BreakoutMode_GroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"groups", "group"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Group (list): List of breakout groups.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "groups/group"
// Path from root: "/components/component/port/breakout-mode/groups/group"
// Index: uint8
func (n *Component_Port_BreakoutModePathAny) Group(Index uint8) *Component_Port_BreakoutMode_GroupPathAny {
	return &Component_Port_BreakoutMode_GroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"groups", "group"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Component_Port_BreakoutMode_GroupPath represents the /openconfig-platform/components/component/port/breakout-mode/groups/group YANG schema element.
type Component_Port_BreakoutMode_GroupPath struct {
	*ygot.NodePath
}

// Component_Port_BreakoutMode_GroupPathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group YANG schema element.
type Component_Port_BreakoutMode_GroupPathAny struct {
	*ygot.NodePath
}

// Component_Port_BreakoutMode_Group_BreakoutSpeedPath represents the /openconfig-platform/components/component/port/breakout-mode/groups/group/config/breakout-speed YANG schema element.
type Component_Port_BreakoutMode_Group_BreakoutSpeedPath struct {
	*ygot.NodePath
}

// Component_Port_BreakoutMode_Group_BreakoutSpeedPathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group/config/breakout-speed YANG schema element.
type Component_Port_BreakoutMode_Group_BreakoutSpeedPathAny struct {
	*ygot.NodePath
}

// Component_Port_BreakoutMode_Group_IndexPath represents the /openconfig-platform/components/component/port/breakout-mode/groups/group/config/index YANG schema element.
type Component_Port_BreakoutMode_Group_IndexPath struct {
	*ygot.NodePath
}

// Component_Port_BreakoutMode_Group_IndexPathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group/config/index YANG schema element.
type Component_Port_BreakoutMode_Group_IndexPathAny struct {
	*ygot.NodePath
}

// Component_Port_BreakoutMode_Group_NumBreakoutsPath represents the /openconfig-platform/components/component/port/breakout-mode/groups/group/config/num-breakouts YANG schema element.
type Component_Port_BreakoutMode_Group_NumBreakoutsPath struct {
	*ygot.NodePath
}

// Component_Port_BreakoutMode_Group_NumBreakoutsPathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group/config/num-breakouts YANG schema element.
type Component_Port_BreakoutMode_Group_NumBreakoutsPathAny struct {
	*ygot.NodePath
}

// Component_Port_BreakoutMode_Group_NumPhysicalChannelsPath represents the /openconfig-platform/components/component/port/breakout-mode/groups/group/config/num-physical-channels YANG schema element.
type Component_Port_BreakoutMode_Group_NumPhysicalChannelsPath struct {
	*ygot.NodePath
}

// Component_Port_BreakoutMode_Group_NumPhysicalChannelsPathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group/config/num-physical-channels YANG schema element.
type Component_Port_BreakoutMode_Group_NumPhysicalChannelsPathAny struct {
	*ygot.NodePath
}

// BreakoutSpeed (leaf): Speed of interfaces in this breakout group, supported
// values are defined by the ETHERNET_SPEED identity.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/breakout-speed"
// Path from root: "/components/component/port/breakout-mode/groups/group/config/breakout-speed"
func (n *Component_Port_BreakoutMode_GroupPath) BreakoutSpeed() *Component_Port_BreakoutMode_Group_BreakoutSpeedPath {
	return &Component_Port_BreakoutMode_Group_BreakoutSpeedPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "breakout-speed"},
			map[string]interface{}{},
			n,
		),
	}
}

// BreakoutSpeed (leaf): Speed of interfaces in this breakout group, supported
// values are defined by the ETHERNET_SPEED identity.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/breakout-speed"
// Path from root: "/components/component/port/breakout-mode/groups/group/config/breakout-speed"
func (n *Component_Port_BreakoutMode_GroupPathAny) BreakoutSpeed() *Component_Port_BreakoutMode_Group_BreakoutSpeedPathAny {
	return &Component_Port_BreakoutMode_Group_BreakoutSpeedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "breakout-speed"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Each index specifies breakouts that are identical in
// terms of speed and the number of physical channels.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/index"
// Path from root: "/components/component/port/breakout-mode/groups/group/config/index"
func (n *Component_Port_BreakoutMode_GroupPath) Index() *Component_Port_BreakoutMode_Group_IndexPath {
	return &Component_Port_BreakoutMode_Group_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Each index specifies breakouts that are identical in
// terms of speed and the number of physical channels.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/index"
// Path from root: "/components/component/port/breakout-mode/groups/group/config/index"
func (n *Component_Port_BreakoutMode_GroupPathAny) Index() *Component_Port_BreakoutMode_Group_IndexPathAny {
	return &Component_Port_BreakoutMode_Group_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// NumBreakouts (leaf): Sets the number of interfaces using this breakout group.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/num-breakouts"
// Path from root: "/components/component/port/breakout-mode/groups/group/config/num-breakouts"
func (n *Component_Port_BreakoutMode_GroupPath) NumBreakouts() *Component_Port_BreakoutMode_Group_NumBreakoutsPath {
	return &Component_Port_BreakoutMode_Group_NumBreakoutsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "num-breakouts"},
			map[string]interface{}{},
			n,
		),
	}
}

// NumBreakouts (leaf): Sets the number of interfaces using this breakout group.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/num-breakouts"
// Path from root: "/components/component/port/breakout-mode/groups/group/config/num-breakouts"
func (n *Component_Port_BreakoutMode_GroupPathAny) NumBreakouts() *Component_Port_BreakoutMode_Group_NumBreakoutsPathAny {
	return &Component_Port_BreakoutMode_Group_NumBreakoutsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "num-breakouts"},
			map[string]interface{}{},
			n,
		),
	}
}

// NumPhysicalChannels (leaf): Sets the number of lanes or physical channels assigned
// to the interfaces in this breakout group. This leaf need
// not be set if there is only one breakout group where all
// the interfaces are of equal speed and have equal number
// of physical channels
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/num-physical-channels"
// Path from root: "/components/component/port/breakout-mode/groups/group/config/num-physical-channels"
func (n *Component_Port_BreakoutMode_GroupPath) NumPhysicalChannels() *Component_Port_BreakoutMode_Group_NumPhysicalChannelsPath {
	return &Component_Port_BreakoutMode_Group_NumPhysicalChannelsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "num-physical-channels"},
			map[string]interface{}{},
			n,
		),
	}
}

// NumPhysicalChannels (leaf): Sets the number of lanes or physical channels assigned
// to the interfaces in this breakout group. This leaf need
// not be set if there is only one breakout group where all
// the interfaces are of equal speed and have equal number
// of physical channels
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/num-physical-channels"
// Path from root: "/components/component/port/breakout-mode/groups/group/config/num-physical-channels"
func (n *Component_Port_BreakoutMode_GroupPathAny) NumPhysicalChannels() *Component_Port_BreakoutMode_Group_NumPhysicalChannelsPathAny {
	return &Component_Port_BreakoutMode_Group_NumPhysicalChannelsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "num-physical-channels"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_PowerSupplyPath represents the /openconfig-platform/components/component/power-supply YANG schema element.
type Component_PowerSupplyPath struct {
	*ygot.NodePath
}

// Component_PowerSupplyPathAny represents the wildcard version of the /openconfig-platform/components/component/power-supply YANG schema element.
type Component_PowerSupplyPathAny struct {
	*ygot.NodePath
}

// Component_PropertyPath represents the /openconfig-platform/components/component/properties/property YANG schema element.
type Component_PropertyPath struct {
	*ygot.NodePath
}

// Component_PropertyPathAny represents the wildcard version of the /openconfig-platform/components/component/properties/property YANG schema element.
type Component_PropertyPathAny struct {
	*ygot.NodePath
}

// Component_Property_NamePath represents the /openconfig-platform/components/component/properties/property/config/name YANG schema element.
type Component_Property_NamePath struct {
	*ygot.NodePath
}

// Component_Property_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/properties/property/config/name YANG schema element.
type Component_Property_NamePathAny struct {
	*ygot.NodePath
}

// Component_Property_ValuePath represents the /openconfig-platform/components/component/properties/property/config/value YANG schema element.
type Component_Property_ValuePath struct {
	*ygot.NodePath
}

// Component_Property_ValuePathAny represents the wildcard version of the /openconfig-platform/components/component/properties/property/config/value YANG schema element.
type Component_Property_ValuePathAny struct {
	*ygot.NodePath
}

// Name (leaf): System-supplied name of the property -- this is typically
// non-configurable
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/name"
// Path from root: "/components/component/properties/property/config/name"
func (n *Component_PropertyPath) Name() *Component_Property_NamePath {
	return &Component_Property_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): System-supplied name of the property -- this is typically
// non-configurable
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/name"
// Path from root: "/components/component/properties/property/config/name"
func (n *Component_PropertyPathAny) Name() *Component_Property_NamePathAny {
	return &Component_Property_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): Property values can take on a variety of types.  Signed and
// unsigned integer types may be provided in smaller sizes,
// e.g., int8, uint16, etc.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/value"
// Path from root: "/components/component/properties/property/config/value"
func (n *Component_PropertyPath) Value() *Component_Property_ValuePath {
	return &Component_Property_ValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): Property values can take on a variety of types.  Signed and
// unsigned integer types may be provided in smaller sizes,
// e.g., int8, uint16, etc.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/value"
// Path from root: "/components/component/properties/property/config/value"
func (n *Component_PropertyPathAny) Value() *Component_Property_ValuePathAny {
	return &Component_Property_ValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_SoftwareModulePath represents the /openconfig-platform/components/component/software-module YANG schema element.
type Component_SoftwareModulePath struct {
	*ygot.NodePath
}

// Component_SoftwareModulePathAny represents the wildcard version of the /openconfig-platform/components/component/software-module YANG schema element.
type Component_SoftwareModulePathAny struct {
	*ygot.NodePath
}

// Component_StoragePath represents the /openconfig-platform/components/component/storage YANG schema element.
type Component_StoragePath struct {
	*ygot.NodePath
}

// Component_StoragePathAny represents the wildcard version of the /openconfig-platform/components/component/storage YANG schema element.
type Component_StoragePathAny struct {
	*ygot.NodePath
}

// Component_SubcomponentPath represents the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type Component_SubcomponentPath struct {
	*ygot.NodePath
}

// Component_SubcomponentPathAny represents the wildcard version of the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type Component_SubcomponentPathAny struct {
	*ygot.NodePath
}

// Component_Subcomponent_NamePath represents the /openconfig-platform/components/component/subcomponents/subcomponent/config/name YANG schema element.
type Component_Subcomponent_NamePath struct {
	*ygot.NodePath
}

// Component_Subcomponent_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/subcomponents/subcomponent/config/name YANG schema element.
type Component_Subcomponent_NamePathAny struct {
	*ygot.NodePath
}

// Name (leaf): Reference to the name of the subcomponent
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/name"
// Path from root: "/components/component/subcomponents/subcomponent/config/name"
func (n *Component_SubcomponentPath) Name() *Component_Subcomponent_NamePath {
	return &Component_Subcomponent_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the name of the subcomponent
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/name"
// Path from root: "/components/component/subcomponents/subcomponent/config/name"
func (n *Component_SubcomponentPathAny) Name() *Component_Subcomponent_NamePathAny {
	return &Component_Subcomponent_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_TransceiverPath represents the /openconfig-platform/components/component/transceiver YANG schema element.
type Component_TransceiverPath struct {
	*ygot.NodePath
}

// Component_TransceiverPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver YANG schema element.
type Component_TransceiverPathAny struct {
	*ygot.NodePath
}

// Component_Transceiver_EnabledPath represents the /openconfig-platform/components/component/transceiver/config/enabled YANG schema element.
type Component_Transceiver_EnabledPath struct {
	*ygot.NodePath
}

// Component_Transceiver_EnabledPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/config/enabled YANG schema element.
type Component_Transceiver_EnabledPathAny struct {
	*ygot.NodePath
}

// Component_Transceiver_EthernetPmdPreconfPath represents the /openconfig-platform/components/component/transceiver/config/ethernet-pmd-preconf YANG schema element.
type Component_Transceiver_EthernetPmdPreconfPath struct {
	*ygot.NodePath
}

// Component_Transceiver_EthernetPmdPreconfPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/config/ethernet-pmd-preconf YANG schema element.
type Component_Transceiver_EthernetPmdPreconfPathAny struct {
	*ygot.NodePath
}

// Component_Transceiver_FecModePath represents the /openconfig-platform/components/component/transceiver/config/fec-mode YANG schema element.
type Component_Transceiver_FecModePath struct {
	*ygot.NodePath
}

// Component_Transceiver_FecModePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/config/fec-mode YANG schema element.
type Component_Transceiver_FecModePathAny struct {
	*ygot.NodePath
}

// Component_Transceiver_FormFactorPreconfPath represents the /openconfig-platform/components/component/transceiver/config/form-factor-preconf YANG schema element.
type Component_Transceiver_FormFactorPreconfPath struct {
	*ygot.NodePath
}

// Component_Transceiver_FormFactorPreconfPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/config/form-factor-preconf YANG schema element.
type Component_Transceiver_FormFactorPreconfPathAny struct {
	*ygot.NodePath
}

// Component_Transceiver_ModuleFunctionalTypePath represents the /openconfig-platform/components/component/transceiver/config/module-functional-type YANG schema element.
type Component_Transceiver_ModuleFunctionalTypePath struct {
	*ygot.NodePath
}

// Component_Transceiver_ModuleFunctionalTypePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/config/module-functional-type YANG schema element.
type Component_Transceiver_ModuleFunctionalTypePathAny struct {
	*ygot.NodePath
}

// ChannelAny (list): List of client channels, keyed by index within a physical
// client port.  A physical port with a single channel would
// have a single zero-indexed element
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "physical-channels/channel"
// Path from root: "/components/component/transceiver/physical-channels/channel"
// Index (wildcarded): uint16
func (n *Component_TransceiverPath) ChannelAny() *Component_Transceiver_ChannelPathAny {
	return &Component_Transceiver_ChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"physical-channels", "channel"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// ChannelAny (list): List of client channels, keyed by index within a physical
// client port.  A physical port with a single channel would
// have a single zero-indexed element
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "physical-channels/channel"
// Path from root: "/components/component/transceiver/physical-channels/channel"
// Index (wildcarded): uint16
func (n *Component_TransceiverPathAny) ChannelAny() *Component_Transceiver_ChannelPathAny {
	return &Component_Transceiver_ChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"physical-channels", "channel"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// Channel (list): List of client channels, keyed by index within a physical
// client port.  A physical port with a single channel would
// have a single zero-indexed element
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "physical-channels/channel"
// Path from root: "/components/component/transceiver/physical-channels/channel"
// Index: uint16
func (n *Component_TransceiverPath) Channel(Index uint16) *Component_Transceiver_ChannelPath {
	return &Component_Transceiver_ChannelPath{
		NodePath: ygot.NewNodePath(
			[]string{"physical-channels", "channel"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Channel (list): List of client channels, keyed by index within a physical
// client port.  A physical port with a single channel would
// have a single zero-indexed element
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "physical-channels/channel"
// Path from root: "/components/component/transceiver/physical-channels/channel"
// Index: uint16
func (n *Component_TransceiverPathAny) Channel(Index uint16) *Component_Transceiver_ChannelPathAny {
	return &Component_Transceiver_ChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"physical-channels", "channel"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Enabled (leaf): Turns power on / off to the transceiver -- provides a means
// to power on/off the transceiver (in the case of SFP, SFP+,
// QSFP,...) or enable high-power mode (in the case of CFP,
// CFP2, CFP4) and is optionally supported (device can choose to
// always enable).  True = power on / high power, False =
// powered off
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/enabled"
// Path from root: "/components/component/transceiver/config/enabled"
func (n *Component_TransceiverPath) Enabled() *Component_Transceiver_EnabledPath {
	return &Component_Transceiver_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Turns power on / off to the transceiver -- provides a means
// to power on/off the transceiver (in the case of SFP, SFP+,
// QSFP,...) or enable high-power mode (in the case of CFP,
// CFP2, CFP4) and is optionally supported (device can choose to
// always enable).  True = power on / high power, False =
// powered off
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/enabled"
// Path from root: "/components/component/transceiver/config/enabled"
func (n *Component_TransceiverPathAny) Enabled() *Component_Transceiver_EnabledPathAny {
	return &Component_Transceiver_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// EthernetPmdPreconf (leaf): The Ethernet PMD is a property of the optical transceiver
// used on the port, indicating the type of physical connection.
// It is included in configuration data to allow pre-configuring
// a port/transceiver with the expected PMD.  The actual PMD is
// indicated by the ethernet-pmd state leaf.
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/ethernet-pmd-preconf"
// Path from root: "/components/component/transceiver/config/ethernet-pmd-preconf"
func (n *Component_TransceiverPath) EthernetPmdPreconf() *Component_Transceiver_EthernetPmdPreconfPath {
	return &Component_Transceiver_EthernetPmdPreconfPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ethernet-pmd-preconf"},
			map[string]interface{}{},
			n,
		),
	}
}

// EthernetPmdPreconf (leaf): The Ethernet PMD is a property of the optical transceiver
// used on the port, indicating the type of physical connection.
// It is included in configuration data to allow pre-configuring
// a port/transceiver with the expected PMD.  The actual PMD is
// indicated by the ethernet-pmd state leaf.
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/ethernet-pmd-preconf"
// Path from root: "/components/component/transceiver/config/ethernet-pmd-preconf"
func (n *Component_TransceiverPathAny) EthernetPmdPreconf() *Component_Transceiver_EthernetPmdPreconfPathAny {
	return &Component_Transceiver_EthernetPmdPreconfPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ethernet-pmd-preconf"},
			map[string]interface{}{},
			n,
		),
	}
}

// FecMode (leaf): The FEC mode indicates the mode of operation for the
// transceiver's FEC. This defines typical operational modes
// and does not aim to specify more granular FEC capabilities.
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/fec-mode"
// Path from root: "/components/component/transceiver/config/fec-mode"
func (n *Component_TransceiverPath) FecMode() *Component_Transceiver_FecModePath {
	return &Component_Transceiver_FecModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "fec-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// FecMode (leaf): The FEC mode indicates the mode of operation for the
// transceiver's FEC. This defines typical operational modes
// and does not aim to specify more granular FEC capabilities.
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/fec-mode"
// Path from root: "/components/component/transceiver/config/fec-mode"
func (n *Component_TransceiverPathAny) FecMode() *Component_Transceiver_FecModePathAny {
	return &Component_Transceiver_FecModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "fec-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// FormFactorPreconf (leaf): Indicates the type of optical transceiver used on this
// port.  If the client port is built into the device and not
// pluggable, then non-pluggable is the corresponding state. If
// a device port supports multiple form factors (e.g. QSFP28
// and QSFP+, then the value of the transceiver installed shall
// be reported. If no transceiver is present, then the value of
// the highest rate form factor shall be reported
// (QSFP28, for example).
//
// The form factor is included in configuration data to allow
// pre-configuring a device with the expected type of
// transceiver ahead of deployment.  The corresponding state
// leaf should reflect the actual transceiver type plugged into
// the system.
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/form-factor-preconf"
// Path from root: "/components/component/transceiver/config/form-factor-preconf"
func (n *Component_TransceiverPath) FormFactorPreconf() *Component_Transceiver_FormFactorPreconfPath {
	return &Component_Transceiver_FormFactorPreconfPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "form-factor-preconf"},
			map[string]interface{}{},
			n,
		),
	}
}

// FormFactorPreconf (leaf): Indicates the type of optical transceiver used on this
// port.  If the client port is built into the device and not
// pluggable, then non-pluggable is the corresponding state. If
// a device port supports multiple form factors (e.g. QSFP28
// and QSFP+, then the value of the transceiver installed shall
// be reported. If no transceiver is present, then the value of
// the highest rate form factor shall be reported
// (QSFP28, for example).
//
// The form factor is included in configuration data to allow
// pre-configuring a device with the expected type of
// transceiver ahead of deployment.  The corresponding state
// leaf should reflect the actual transceiver type plugged into
// the system.
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/form-factor-preconf"
// Path from root: "/components/component/transceiver/config/form-factor-preconf"
func (n *Component_TransceiverPathAny) FormFactorPreconf() *Component_Transceiver_FormFactorPreconfPathAny {
	return &Component_Transceiver_FormFactorPreconfPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "form-factor-preconf"},
			map[string]interface{}{},
			n,
		),
	}
}

// ModuleFunctionalType (leaf): Indicates the module functional type which represents the
// functional capability of the transceiver. For example, this
// would specify the module is a digital coherent optic or a
// standard grey optic that performs on-off keying.
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/module-functional-type"
// Path from root: "/components/component/transceiver/config/module-functional-type"
func (n *Component_TransceiverPath) ModuleFunctionalType() *Component_Transceiver_ModuleFunctionalTypePath {
	return &Component_Transceiver_ModuleFunctionalTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "module-functional-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// ModuleFunctionalType (leaf): Indicates the module functional type which represents the
// functional capability of the transceiver. For example, this
// would specify the module is a digital coherent optic or a
// standard grey optic that performs on-off keying.
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/module-functional-type"
// Path from root: "/components/component/transceiver/config/module-functional-type"
func (n *Component_TransceiverPathAny) ModuleFunctionalType() *Component_Transceiver_ModuleFunctionalTypePathAny {
	return &Component_Transceiver_ModuleFunctionalTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "module-functional-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_Transceiver_ChannelPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel YANG schema element.
type Component_Transceiver_ChannelPath struct {
	*ygot.NodePath
}

// Component_Transceiver_ChannelPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel YANG schema element.
type Component_Transceiver_ChannelPathAny struct {
	*ygot.NodePath
}

// Component_Transceiver_Channel_AssociatedOpticalChannelPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/config/associated-optical-channel YANG schema element.
type Component_Transceiver_Channel_AssociatedOpticalChannelPath struct {
	*ygot.NodePath
}

// Component_Transceiver_Channel_AssociatedOpticalChannelPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/config/associated-optical-channel YANG schema element.
type Component_Transceiver_Channel_AssociatedOpticalChannelPathAny struct {
	*ygot.NodePath
}

// Component_Transceiver_Channel_DescriptionPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/config/description YANG schema element.
type Component_Transceiver_Channel_DescriptionPath struct {
	*ygot.NodePath
}

// Component_Transceiver_Channel_DescriptionPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/config/description YANG schema element.
type Component_Transceiver_Channel_DescriptionPathAny struct {
	*ygot.NodePath
}

// Component_Transceiver_Channel_IndexPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/config/index YANG schema element.
type Component_Transceiver_Channel_IndexPath struct {
	*ygot.NodePath
}

// Component_Transceiver_Channel_IndexPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/config/index YANG schema element.
type Component_Transceiver_Channel_IndexPathAny struct {
	*ygot.NodePath
}

// Component_Transceiver_Channel_TargetOutputPowerPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/config/target-output-power YANG schema element.
type Component_Transceiver_Channel_TargetOutputPowerPath struct {
	*ygot.NodePath
}

// Component_Transceiver_Channel_TargetOutputPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/config/target-output-power YANG schema element.
type Component_Transceiver_Channel_TargetOutputPowerPathAny struct {
	*ygot.NodePath
}

// Component_Transceiver_Channel_TxLaserPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/config/tx-laser YANG schema element.
type Component_Transceiver_Channel_TxLaserPath struct {
	*ygot.NodePath
}

// Component_Transceiver_Channel_TxLaserPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/config/tx-laser YANG schema element.
type Component_Transceiver_Channel_TxLaserPathAny struct {
	*ygot.NodePath
}

// AssociatedOpticalChannel (leaf): A physical channel may reference an optical channel
// component. If the physical channel does make this optional
// reference, then a limited set of leaves will apply within
// the physical channel to avoid duplication within the optical
// channel.
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/associated-optical-channel"
// Path from root: "/components/component/transceiver/physical-channels/channel/config/associated-optical-channel"
func (n *Component_Transceiver_ChannelPath) AssociatedOpticalChannel() *Component_Transceiver_Channel_AssociatedOpticalChannelPath {
	return &Component_Transceiver_Channel_AssociatedOpticalChannelPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "associated-optical-channel"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociatedOpticalChannel (leaf): A physical channel may reference an optical channel
// component. If the physical channel does make this optional
// reference, then a limited set of leaves will apply within
// the physical channel to avoid duplication within the optical
// channel.
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/associated-optical-channel"
// Path from root: "/components/component/transceiver/physical-channels/channel/config/associated-optical-channel"
func (n *Component_Transceiver_ChannelPathAny) AssociatedOpticalChannel() *Component_Transceiver_Channel_AssociatedOpticalChannelPathAny {
	return &Component_Transceiver_Channel_AssociatedOpticalChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "associated-optical-channel"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): Text description for the client physical channel
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/description"
// Path from root: "/components/component/transceiver/physical-channels/channel/config/description"
func (n *Component_Transceiver_ChannelPath) Description() *Component_Transceiver_Channel_DescriptionPath {
	return &Component_Transceiver_Channel_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): Text description for the client physical channel
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/description"
// Path from root: "/components/component/transceiver/physical-channels/channel/config/description"
func (n *Component_Transceiver_ChannelPathAny) Description() *Component_Transceiver_Channel_DescriptionPathAny {
	return &Component_Transceiver_Channel_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of the physical channnel or lane within a physical
// client port
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/index"
// Path from root: "/components/component/transceiver/physical-channels/channel/config/index"
func (n *Component_Transceiver_ChannelPath) Index() *Component_Transceiver_Channel_IndexPath {
	return &Component_Transceiver_Channel_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of the physical channnel or lane within a physical
// client port
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/index"
// Path from root: "/components/component/transceiver/physical-channels/channel/config/index"
func (n *Component_Transceiver_ChannelPathAny) Index() *Component_Transceiver_Channel_IndexPathAny {
	return &Component_Transceiver_Channel_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetOutputPower (leaf): Target output optical power level of the optical channel,
// expressed in increments of 0.01 dBm (decibel-milliwats)
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/target-output-power"
// Path from root: "/components/component/transceiver/physical-channels/channel/config/target-output-power"
func (n *Component_Transceiver_ChannelPath) TargetOutputPower() *Component_Transceiver_Channel_TargetOutputPowerPath {
	return &Component_Transceiver_Channel_TargetOutputPowerPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "target-output-power"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetOutputPower (leaf): Target output optical power level of the optical channel,
// expressed in increments of 0.01 dBm (decibel-milliwats)
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/target-output-power"
// Path from root: "/components/component/transceiver/physical-channels/channel/config/target-output-power"
func (n *Component_Transceiver_ChannelPathAny) TargetOutputPower() *Component_Transceiver_Channel_TargetOutputPowerPathAny {
	return &Component_Transceiver_Channel_TargetOutputPowerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "target-output-power"},
			map[string]interface{}{},
			n,
		),
	}
}

// TxLaser (leaf): Enable (true) or disable (false) the transmit label for the
// channel
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/tx-laser"
// Path from root: "/components/component/transceiver/physical-channels/channel/config/tx-laser"
func (n *Component_Transceiver_ChannelPath) TxLaser() *Component_Transceiver_Channel_TxLaserPath {
	return &Component_Transceiver_Channel_TxLaserPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tx-laser"},
			map[string]interface{}{},
			n,
		),
	}
}

// TxLaser (leaf): Enable (true) or disable (false) the transmit label for the
// channel
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/tx-laser"
// Path from root: "/components/component/transceiver/physical-channels/channel/config/tx-laser"
func (n *Component_Transceiver_ChannelPathAny) TxLaser() *Component_Transceiver_Channel_TxLaserPathAny {
	return &Component_Transceiver_Channel_TxLaserPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tx-laser"},
			map[string]interface{}{},
			n,
		),
	}
}

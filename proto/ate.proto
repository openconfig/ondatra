syntax = "proto3";

package ondatra;

import "google/protobuf/empty.proto";

option go_package = "github.com/openconfig/ondatra/proto";

message Topology {
  repeated Lag lags = 1;
  repeated InterfaceConfig interfaces = 2;
}

message Traffic {
  repeated Flow flows = 2;
}

message Lag {
  string name = 1;
  repeated string ports = 2;
}

message InterfaceConfig {
  string name = 1;
  oneof link {
    string port = 2;
    string lag = 3;
  }
  EthernetConfig ethernet = 4;
  IpConfig ipv4 = 5;
  IpConfig ipv6 = 6;
  ISISConfig isis = 7;
  BgpConfig bgp = 8;
  repeated Network networks = 9;
  bool enable_lacp = 10;
}

message EthernetConfig {
  uint32 mtu = 1;
  // Note that this is only a 12-bit value in the protocol.
  uint32 vlan_id = 2;
  MacSec macsec = 3;
}

message MacSec {
  enum CipherSuite {
    CIPHER_SUITE_UNSPECIFIED = 0;
    AES_128 = 1;
    AES_256 = 2;
    AES_XPN_128 = 3;
    AES_XPN_256 = 4;
  }
  CipherSuite cipher_suite = 1;
  bool encrypted_vlans_enabled = 2;
  RxSakPool rx_sak_pool = 3;
  message MKA {
    uint32 version = 1;
    enum Capability {
      CAPABILITY_UNSPECIFIED = 0;
      NOT_IMPLEMENTED = 1;
      INTEGRITY_WITHOUT_CONFIDENTIALITY = 2;
      INTEGRITY_WITH_NO_CONFIDENTIALITY_OFFSET = 3;
      INTEGRITY_WITH_CONFIDENTIALITY_OFFSET = 4;
    }
    Capability capability = 2;
    enum ConfidentialityOffset {
      OFFSET_UNSPECIFIED = 0;
      OFFSET_NO_CONFIDENTIALITY = 4;
      OFFSET_0 = 1;
      OFFSET_30 = 2;
      OFFSET_50 = 3;
    }
    ConfidentialityOffset confidentiality_offset = 3;
    CipherSuite cipher_suite = 4;
    message ConnectivityAssociation {
      string ckn = 1;
      string cak = 2;
    }
    ConnectivityAssociation connectivity_association = 5;
  }
  MKA mka = 4;
}

message RxSakPool {
  string sak128 = 10;
  string sak256 = 11;
}

message IpConfig {
  string address_cidr = 1;
  string default_gateway = 2;
}

// IS-IS configuration for the ATE.
message ISISConfig {
  enum Level {
    LEVEL_UNSPECIFIED = 0;
    L1 = 1;
    L2 = 2;
  }
  // The IS-IS level which the ate behaves as.
  Level level = 1;
  // The routing metric used for IS-IS link-state calculation.
  uint32 metric = 2;
  // Area id this ate belongs to.
  string area_id = 3;
  // Use a wider range of allowed metric number up to up to 16,777,215,
  // otherwise the metrics can have values up to 63.
  bool enable_wide_metric = 4;

  enum NetworkType {
    NETWORK_TYPE_UNSPECIFIED = 0;
    BROADCAST = 1;
    POINT_TO_POINT = 2;
  }
  // The network type of the IS-IS interface.
  NetworkType network_type = 5;
  enum AuthType {
    AUTH_TYPE_UNSPECIFIED = 0;
    MD5 = 1;
    PASSWORD = 2;
  }
  AuthType auth_type = 6;
  // The auth key to be used for authentication.
  string auth_key = 7;
  // enables hello padding.
  bool enable_hello_padding = 8;
  // enables traffic engineering.
  bool enable_te = 9;
  // discard learned lsp info.
  bool discard_lsps = 10;
  // the router id.
  string te_router_id = 11;
  // config to simulate pool of reachable ips.
  IPReachability ip_reachability = 12;
  // config to simulate topology of IS-IS routers.
  repeated ISReachability is_reachability = 13;
  // pripority of the interface
  uint32 interface_priority = 14;
  // interval between sending hello packets.
  uint32 hello_interval_sec = 15;
  // interval before considering adjacency is down.
  uint32 dead_interval_sec = 16;
  // IS-IS segment routing configuration.
  ISISSegmentRouting segment_routing = 17;
}

message ISISSegmentRouting {
  bool enable = 1;
  message AdjacencySID {
    string sid = 1;
    bool override_flag_address_family = 2;
    bool flag_address_family = 3;
    bool flag_backup = 4;
    bool flag_value = 5;
    bool flag_local = 6;
    bool flag_set = 7;
    bool flag_persistent = 8;
  }
  AdjacencySID adjacency_sid = 2;
  uint32 sid_index_label = 3;

  message SIDRange {
    uint32 sid_start_label = 1;
    uint32 sid_count = 2;
  }
  repeated SIDRange srgb_range = 4;
  repeated SIDRange srlb_range = 5;
  bool flag_readvertise = 6;
  bool flag_node_sid = 7;
  bool flag_no_php = 8;
  bool flag_explicit_null = 9;
  bool flag_value = 10;
  bool flag_local = 11;
  repeated uint32 algorithms = 12;
  string prefix_sid = 13;
}

message IPReachability {
  uint32 metric = 1;
  enum RouteOrigin {
    ROUTE_ORIGIN_UNSPECIFIED = 0;
    INTERNAL = 1;
    EXTERNAL = 2;
  }
  RouteOrigin route_origin = 2;
  uint32 algorithm = 3;
  uint32 sid_index_label = 4;
  bool flag_readvertise = 5;
  bool flag_node_sid = 6;
  bool flag_no_php = 7;
  bool flag_explicit_null = 8;
  bool flag_value = 9;
  bool flag_local = 10;
  bool enable_sid_index_label = 11;
}

message ISReachability {
  message Node {
    message Link {
      string from_ipv4 = 1;
      string to_ipv4 = 2;
      string from_ipv6 = 3;
      string to_ipv6 = 4;
    }
    uint32 ingress_metric = 1;
    uint32 egress_metric = 2;
    // The system ID should be specified using hex characters (possibly
    // grouped by colons or periods.)
    string system_id = 3;
    repeated Link links = 4;
    bool enable_te = 6;
    bool enable_wide_metric = 7;
    ISISSegmentRouting segment_routing = 8;
    string te_router_id = 9;
    message Routes {
      string prefix = 1;
      uint64 num_routes = 2;
      IPReachability reachability = 3;
    }
    Routes routes_ipv4 = 10;
  }
  repeated Node nodes = 1;
}

enum BgpAsnSetMode {
  ASN_SET_MODE_UNSPECIFIED = 0;
  ASN_SET_MODE_DO_NOT_INCLUDE = 1;
  ASN_SET_MODE_AS_SEQ = 2;
  ASN_SET_MODE_AS_SET = 3;
  ASN_SET_MODE_AS_SEQ_CONFEDERATION = 4;
  ASN_SET_MODE_AS_SET_CONFEDERATION = 5;
  ASN_SET_MODE_PREPEND = 6;
}

// BGP config for the ATE.
message BgpConfig {
  repeated BgpPeer bgp_peers = 1;
}

// BGP peer for the ATE.
message BgpPeer {
  bool active = 1;
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_EXTERNAL = 1;
    TYPE_INTERNAL = 2;
  }
  Type type = 2;
  string peer_address = 3;
  uint32 local_asn = 4;
  // Note that this is only a 16-bit value in the protocol.
  uint32 hold_time_sec = 5;
  uint32 keepalive_time_sec = 6;
  string md5_key = 7;
  message Capabilities {
    bool ipv4_unicast = 1;
    bool ipv4_multicast = 2;
    bool ipv4_mpls_vpn = 3;
    bool ipv6_unicast = 4;
    bool ipv6_multicast = 5;
    bool ipv6_mpls_vpn = 6;
    bool ipv4_mdt = 7;
    bool vpls = 8;
    bool ipv4_multicast_vpn = 9;
    bool ipv6_multicast_vpn = 10;
    bool route_refresh = 11;
    bool route_constraint = 12;
    bool link_state_non_vpn = 13;
    bool evpn = 14;
    bool ipv4_multicast_bgp_mpls_vpn = 15;
    bool ipv6_multicast_bgp_mpls_vpn = 16;
    bool ipv4_unicast_flow_spec = 17;
    bool ipv6_unicast_flow_spec = 18;
    bool ipv4_unicast_add_path = 19;
    bool ipv6_unicast_add_path = 20;
    bool extended_next_hop_encoding = 21;
    bool ipv4_srte_policy = 22;
    bool ipv6_srte_policy = 23;
    bool ipv4_mpls_add_path = 24;
    bool ipv6_mpls_add_path = 25;
  }
  Capabilities capabilities = 8;
  message SrtePolicyGroup {
    uint32 count = 1;
    bool active = 2;
    uint32 distinguisher = 3;
    UInt32IncRange policy_color = 4;
    string endpoint = 5;
    string next_hop_address = 6;
    StringIncRange originator_id = 7;
    message Community {
      enum Type {
        TYPE_UNSPECIFIED = 0;
        TYPE_NO_EXPORT = 1;
        TYPE_NO_ADVERTISE = 2;
        TYPE_NO_EXPORT_SUBCONFED = 3;
        TYPE_MANUAL_ASN = 4;
        TYPE_LLGR_STALE = 5;
        TYPE_NO_LLGR = 6;
      }
      Type type = 1;
      uint32 asn = 2;
      uint32 pattern = 3;
    }
    repeated Community communities = 8;
    BgpAsnSetMode asn_set_mode = 9;
    message Preference {
      uint32 preference = 1;
    }
    Preference preference = 10;
    message Binding {
      oneof type {
        google.protobuf.Empty no_binding = 1;
        UInt32IncRange four_octet_sid = 2;
        UInt32IncRange four_octet_sid_as_mpls_label = 3;
        string ipv6_sid = 4;
      }
    }
    Binding binding = 11;
    message SegmentList {
      bool active = 1;
      message Weight {
        uint32 weight = 1;
      }
      Weight weight = 2;
      message Segment {
        bool active = 1;
        message MplsSid {
          // Note that this is only a 20-bit value in the protocol.
          uint32 label = 1;
          // Note that this is only a 3-bit value in the protocol.
          uint32 tc = 2;
          bool s = 3;
          // Note that this is only an 8-bit value in the protocol.
          uint32 ttl = 4;
        }
        oneof type {
          MplsSid mpls_sid = 2;
          string ipv6_sid = 3;
        }
      }
      repeated Segment segments = 4;
    }
    repeated SegmentList segment_lists = 12;
    message Enlp {
      uint32 enlp = 1;
    }
    Enlp enlp = 13;
  }
  repeated SrtePolicyGroup srte_policy_groups = 9;
}

// BGP attributes for advertised prefixes.
message BgpAttributes {
  bool active = 8;
  string next_hop_address = 1;
  enum Origin {
    ORIGIN_UNSPECIFIED = 0;
    ORIGIN_IGP = 1;
    ORIGIN_EGP = 2;
    ORIGIN_INCOMPLETE = 3;
  }
  Origin origin = 2;
  uint32 local_preference = 3;
  repeated string communities = 4;
  message ExtendedCommunity {
    message Color {
      enum CoBits {
        CO_BITS_UNSPECIFIED = 0;
        CO_BITS_00 = 1;
        CO_BITS_01 = 2;
        CO_BITS_10 = 3;
        CO_BITS_11 = 4;
      }
      CoBits co_bits = 1;
      uint32 reserved_bits = 2;
      uint32 value = 3;
    }
    oneof Type {
      Color color = 1;
    }
  }
  repeated ExtendedCommunity extended_communities = 5;
  BgpAsnSetMode asn_set_mode = 6;
  message AsPathSegment {
    enum Type {
      TYPE_UNSPECIFIED = 0;
      TYPE_AS_SEQ = 1;
      TYPE_AS_SET = 2;
      TYPE_AS_SEQ_CONFEDERATION = 3;
      TYPE_AS_SET_CONFEDERATION = 4;
    }
    Type type = 1;
    repeated uint32 asns = 2;
  }
  repeated AsPathSegment as_path_segments = 7;
}

message Network {
  string name = 1;
  string interface_name = 2;
  NetworkEth eth = 3;
  NetworkIp ipv4 = 4;
  NetworkIp ipv6 = 5;
  BgpAttributes bgp_attributes = 6;
  IPReachability isis = 7;

  message ImportedBgpRoutes {
    enum RouteTableFormat {
      ROUTE_TABLE_FORMAT_UNSPECIFIED = 0;
      ROUTE_TABLE_FORMAT_CISCO = 1;
      ROUTE_TABLE_FORMAT_JUNIPER = 2;
    }
    RouteTableFormat route_table_format = 1;
    string ipv4_routes_path = 2;
    string ipv6_routes_path = 3;
  }
  ImportedBgpRoutes imported_bgp_routes = 8;
}

message NetworkEth {
  string mac_address = 1;
  uint32 count = 2;
  // Note that this is only a 12-bit value in the protocol.
  uint32 vlan_id = 3;
}

message NetworkIp {
  string address_cidr = 1;
  uint32 count = 2;
}

// A traffic flow.
message Flow {
  string name = 1;

  message Endpoint {
    string interface_name = 1;
    // Network name is empty for interface endpoints.
    string network_name = 2;
  }
  repeated Endpoint src_endpoints = 10;
  repeated Endpoint dst_endpoints = 11;

  repeated Header headers = 20;
  FrameRate frame_rate = 30;
  EgressTracking egress_tracking = 40;
  message IngressTrackingFilters {
    bool mpls_label = 1;
    bool src_endpoint = 2;
    bool dst_endpoint = 3;
    bool src_ipv4 = 4;
    bool dst_ipv4 = 5;
    bool src_ipv6 = 6;
    bool dst_ipv6 = 7;
    bool ports = 8;
  }
  IngressTrackingFilters ingress_tracking_filters = 50;
  FrameSize frame_size = 51;
  // If transmission is not set, it's assumed to be a Continuous transmission.
  Transmission transmission = 52;
}

message FrameRate {
  oneof type {
    double percent = 1;  // percent will be truncated to 4 decimals.
    uint64 bps = 2;
    uint64 fps = 3;
  }
}

message FrameSize {
  enum ImixPreset {
    IMIX_UNKNOWN = 0;
    IMIX_CISCO = 1;
    IMIX_DEFAULT = 2;
    IMIX_IPSEC = 3;
    IMIX_IPV6 = 4;
    IMIX_RPR_QUADMODAL = 5;
    IMIX_RPR_TRIMODAL = 6;
    IMIX_STANDARD = 7;
    IMIX_TCP = 8;
    IMIX_TOLLY = 9;
  }

  message Random {
    uint32 min = 1;
    uint32 max = 2;
  }

  oneof type {
    uint32 fixed = 1;
    Random random = 2;
    ImixPreset imix_preset = 3;
  }
}

message Transmission {
  enum Pattern {
    PATTERN_UNSPECIFIED = 0;
    CONTINUOUS = 1;
    BURST = 2;
  }
  Pattern pattern = 1;
  uint32 min_gap_bytes = 2;
  uint32 packets_per_burst = 3;
  oneof interburst_gap {
    uint32 nanoseconds = 4;
    uint32 bytes = 5;
  }
}

message EgressTracking {
  uint32 custom_offset = 1;
  uint32 custom_width = 2;
}

// A packet header.
message Header {
  oneof type {
    EthernetHeader eth = 1;
    GreHeader gre = 2;
    Ipv4Header ipv4 = 3;
    Ipv6Header ipv6 = 4;
    MplsHeader mpls = 5;
    TcpHeader tcp = 6;
    UdpHeader udp = 7;
  }
}

message EthernetHeader {
  AddressRange src_addr = 1;
  AddressRange dst_addr = 2;
  uint32 vlan_id = 3;
  bool bad_crc = 4;
}

message GreHeader {
  uint32 key = 1;
  uint32 seq = 2;
}

message Ipv4Header {
  AddressRange src_addr = 1;
  AddressRange dst_addr = 2;
  bool dont_fragment = 6;
  uint32 ttl = 3;
  uint32 dscp = 4;
  uint32 ecn = 5;
}

message Ipv6Header {
  AddressRange src_addr = 1;
  AddressRange dst_addr = 2;
  uint32 hop_limit = 3;
  UIntRange flow_label = 4;
  uint32 dscp = 5;
  uint32 ecn = 6;
}

message MplsHeader {
  UIntRange label = 1;
  uint32 exp = 2;
  uint32 ttl = 3;
}

message TcpHeader {
  UIntRange src_port = 1;
  UIntRange dst_port = 2;
  uint32 seq = 3;
}

message UdpHeader {
  UIntRange src_port = 1;
  UIntRange dst_port = 2;
}

message IpAddressGenerator {
  oneof type {
    IpAddressList list = 1;
    IpAddressRandom random = 2;
  }
}

message IpAddressList {
  repeated string addrs = 1;
}

message IpAddressRandom {
  string prefix = 1;
  uint32 count = 2;
}

message UIntRange {
  uint32 min = 1;
  uint32 max = 2;
  uint32 step = 3;
  uint32 count = 4;
  bool random = 5;
}

message AddressRange {
  string min = 1;
  string max = 2;
  string step = 3;
  uint32 count = 4;
  bool random = 5;
}

message StringIncRange {
  string start = 1;
  string step = 2;
}

message UInt32IncRange {
  uint32 start = 1;
  uint32 step = 2;
}
